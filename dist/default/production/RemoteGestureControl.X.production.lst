

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Dec 05 15:15:13 2018

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    63                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    64  0000                     
    65                           	psect	smallconst
    66  000600                     __psmallconst:
    67                           	opt stack 0
    68  000600  00                 	db	0
    69  000601                     exp@coeff:
    70                           	opt stack 0
    71  000601  0000               	dw	0
    72  000603  3F80               	dw	16256
    73  000605  7218               	dw	29208
    74  000607  3F31               	dw	16177
    75  000609  FDF0               	dw	65008
    76  00060B  3E75               	dw	15989
    77  00060D  5847               	dw	22599
    78  00060F  3D63               	dw	15715
    79  000611  9558               	dw	38232
    80  000613  3C1D               	dw	15389
    81  000615  C482               	dw	50306
    82  000617  3AAE               	dw	15022
    83  000619  78A8               	dw	30888
    84  00061B  3921               	dw	14625
    85  00061D  93EF               	dw	37871
    86  00061F  3780               	dw	14208
    87  000621  92A0               	dw	37536
    88  000623  35A7               	dw	13735
    89  000625  5646               	dw	22086
    90  000627  3415               	dw	13333
    91  000629                     __end_ofexp@coeff:
    92                           	opt stack 0
    93  000629                     log@coeff:
    94                           	opt stack 0
    95  000629  0000               	dw	0
    96  00062B  0000               	dw	0
    97  00062D  FFC4               	dw	65476
    98  00062F  3F7F               	dw	16255
    99  000631  EF80               	dw	61312
   100  000633  BEFF               	dw	48895
   101  000635  E190               	dw	57744
   102  000637  3EA9               	dw	16041
   103  000639  82EC               	dw	33516
   104  00063B  BE76               	dw	48758
   105  00063D  AD82               	dw	44418
   106  00063F  3E2B               	dw	15915
   107  000641  3C0E               	dw	15374
   108  000643  BDC3               	dw	48579
   109  000645  D187               	dw	53639
   110  000647  3D13               	dw	15635
   111  000649  7841               	dw	30785
   112  00064B  BBD3               	dw	48083
   113  00064D                     __end_oflog@coeff:
   114                           	opt stack 0
   115  00064D                     atan@coeff_a:
   116                           	opt stack 0
   117  00064D  3C06               	dw	15366
   118  00064F  4204               	dw	16900
   119  000651  9F7D               	dw	40829
   120  000653  426A               	dw	17002
   121  000655  905C               	dw	36956
   122  000657  4201               	dw	16897
   123  000659  4D60               	dw	19808
   124  00065B  40BB               	dw	16571
   125  00065D  EC51               	dw	60497
   126  00065F  3E47               	dw	15943
   127  000661  8DDE               	dw	36318
   128  000663  BB1F               	dw	47903
   129  000665                     __end_ofatan@coeff_a:
   130                           	opt stack 0
   131  000665                     atan@coeff_b:
   132                           	opt stack 0
   133  000665  3C06               	dw	15366
   134  000667  4204               	dw	16900
   135  000669  59C0               	dw	22976
   136  00066B  428B               	dw	17035
   137  00066D  0474               	dw	1140
   138  00066F  4244               	dw	16964
   139  000671  9BF9               	dw	39929
   140  000673  414F               	dw	16719
   141  000675  0000               	dw	0
   142  000677  3F80               	dw	16256
   143  000679                     __end_ofatan@coeff_b:
   144                           	opt stack 0
   145  0000                     _BAUDCON	set	4024
   146  0000                     _LATCbits	set	3979
   147  0000                     _OSCCONbits	set	4051
   148  0000                     _PIE1	set	3997
   149  0000                     _PIE1bits	set	3997
   150  0000                     _PIR1bits	set	3998
   151  0000                     _PIR2bits	set	4001
   152  0000                     _RCSTA	set	4011
   153  0000                     _RCSTAbits	set	4011
   154  0000                     _SPBRG	set	4015
   155  0000                     _SPBRGH	set	4016
   156  0000                     _SSPADD	set	4040
   157  0000                     _SSPBUF	set	4041
   158  0000                     _SSPCON1	set	4038
   159  0000                     _SSPCON1bits	set	4038
   160  0000                     _SSPCON2	set	4037
   161  0000                     _SSPCON2bits	set	4037
   162  0000                     _SSPSTAT	set	4039
   163  0000                     _SSPSTATbits	set	4039
   164  0000                     _TRISCbits	set	3988
   165  0000                     _TXSTA	set	4012
   166  0000                     _TXSTAbits	set	4012
   167                           
   168                           ; #config settings
   169  000679  00                 	db	0	; dummy byte at the end
   170  0000                     
   171                           	psect	cinit
   172  002CB4                     __pcinit:
   173                           	opt stack 0
   174  002CB4                     start_initialization:
   175                           	opt stack 0
   176  002CB4                     __initialization:
   177                           	opt stack 0
   178                           
   179                           ; Clear objects allocated to BANK1 (20 bytes)
   180  002CB4  EE01  F044         	lfsr	0,__pbssBANK1
   181  002CB8  0E14               	movlw	20
   182  002CBA                     clear_0:
   183  002CBA  6AEE               	clrf	postinc0,c
   184  002CBC  06E8               	decf	wreg,f,c
   185  002CBE  E1FD               	bnz	clear_0
   186                           
   187                           ; Clear objects allocated to BANK0 (26 bytes)
   188  002CC0  EE00  F0E0         	lfsr	0,__pbssBANK0
   189  002CC4  0E1A               	movlw	26
   190  002CC6                     clear_1:
   191  002CC6  6AEE               	clrf	postinc0,c
   192  002CC8  06E8               	decf	wreg,f,c
   193  002CCA  E1FD               	bnz	clear_1
   194                           
   195                           ; Clear objects allocated to COMRAM (20 bytes)
   196  002CCC  EE00  F02D         	lfsr	0,__pbssCOMRAM
   197  002CD0  0E14               	movlw	20
   198  002CD2                     clear_2:
   199  002CD2  6AEE               	clrf	postinc0,c
   200  002CD4  06E8               	decf	wreg,f,c
   201  002CD6  E1FD               	bnz	clear_2
   202  002CD8                     end_of_initialization:
   203                           	opt stack 0
   204  002CD8                     __end_of__initialization:
   205                           	opt stack 0
   206  002CD8  0E00               	movlw	low (__Lsmallconst shr (0+16))
   207  002CDA  6EF8               	movwf	tblptru,c
   208  002CDC  0E06               	movlw	high __Lsmallconst
   209  002CDE  6EF7               	movwf	tblptrh,c
   210  002CE0  0100               	movlb	0
   211  002CE2  EF1C  F016         	goto	_main	;jump to C main() function
   212                           tblptru	equ	0xFF8
   213                           tblptrh	equ	0xFF7
   214                           postinc0	equ	0xFEE
   215                           wreg	equ	0xFE8
   216                           
   217                           	psect	bssCOMRAM
   218  00002D                     __pbssCOMRAM:
   219                           	opt stack 0
   220  00002D                     	ds	12
   221  000039                     	ds	8
   222                           tblptru	equ	0xFF8
   223                           tblptrh	equ	0xFF7
   224                           postinc0	equ	0xFEE
   225                           wreg	equ	0xFE8
   226                           
   227                           	psect	bssBANK0
   228  0000E0                     __pbssBANK0:
   229                           	opt stack 0
   230  0000E0                     gyros@Gyros_LastAccel:
   231                           	opt stack 0
   232  0000E0                     	ds	12
   233  0000EC                     gyros@Gyros_Vel:
   234                           	opt stack 0
   235  0000EC                     	ds	12
   236  0000F8                     _errno:
   237                           	opt stack 0
   238  0000F8                     	ds	2
   239                           tblptru	equ	0xFF8
   240                           tblptrh	equ	0xFF7
   241                           postinc0	equ	0xFEE
   242                           wreg	equ	0xFE8
   243                           
   244                           	psect	bssBANK1
   245  000144                     __pbssBANK1:
   246                           	opt stack 0
   247  000144                     	ds	12
   248  000150                     gyros@Gyros_Angle:
   249                           	opt stack 0
   250  000150                     	ds	8
   251                           tblptru	equ	0xFF8
   252                           tblptrh	equ	0xFF7
   253                           postinc0	equ	0xFEE
   254                           wreg	equ	0xFE8
   255                           
   256                           	psect	cstackBANK1
   257  000100                     __pcstackBANK1:
   258                           	opt stack 0
   259  000100                     asin@sgn:
   260                           	opt stack 0
   261                           
   262                           ; 4 bytes @ 0x0
   263  000100                     	ds	4
   264  000104                     _asin$2028:
   265                           	opt stack 0
   266                           
   267                           ; 4 bytes @ 0x4
   268  000104                     	ds	4
   269  000108                     _asin$2031:
   270                           	opt stack 0
   271                           
   272                           ; 4 bytes @ 0x8
   273  000108                     	ds	4
   274  00010C                     _asin$2030:
   275                           	opt stack 0
   276                           
   277                           ; 4 bytes @ 0xC
   278  00010C                     	ds	4
   279  000110                     asin@y:
   280                           	opt stack 0
   281                           
   282                           ; 4 bytes @ 0x10
   283  000110                     	ds	4
   284  000114                     _asin$2029:
   285                           	opt stack 0
   286                           
   287                           ; 4 bytes @ 0x14
   288  000114                     	ds	4
   289  000118                     _Gyros_Update$2019:
   290                           	opt stack 0
   291                           
   292                           ; 4 bytes @ 0x18
   293  000118                     	ds	4
   294  00011C                     _Gyros_Update$2020:
   295                           	opt stack 0
   296                           
   297                           ; 4 bytes @ 0x1C
   298  00011C                     	ds	4
   299  000120                     _Gyros_Update$2021:
   300                           	opt stack 0
   301                           
   302                           ; 4 bytes @ 0x20
   303  000120                     	ds	4
   304  000124                     _Gyros_Update$2022:
   305                           	opt stack 0
   306                           
   307                           ; 4 bytes @ 0x24
   308  000124                     	ds	4
   309  000128                     _Gyros_Update$2023:
   310                           	opt stack 0
   311                           
   312                           ; 4 bytes @ 0x28
   313  000128                     	ds	4
   314  00012C                     _Gyros_Update$2024:
   315                           	opt stack 0
   316                           
   317                           ; 4 bytes @ 0x2C
   318  00012C                     	ds	4
   319  000130                     _Gyros_Update$2025:
   320                           	opt stack 0
   321                           
   322                           ; 4 bytes @ 0x30
   323  000130                     	ds	4
   324  000134                     _Gyros_Update$2026:
   325                           	opt stack 0
   326                           
   327                           ; 4 bytes @ 0x34
   328  000134                     	ds	4
   329  000138                     Gyros_Update@a:
   330                           	opt stack 0
   331                           
   332                           ; 12 bytes @ 0x38
   333  000138                     	ds	12
   334                           tblptru	equ	0xFF8
   335                           tblptrh	equ	0xFF7
   336                           postinc0	equ	0xFEE
   337                           wreg	equ	0xFE8
   338                           
   339                           	psect	cstackBANK0
   340  000060                     __pcstackBANK0:
   341                           	opt stack 0
   342  000060                     ?___altofl:
   343                           	opt stack 0
   344  000060                     ?___awtofl:
   345                           	opt stack 0
   346  000060                     ?___lltofl:
   347                           	opt stack 0
   348  000060                     Accel_ReadRegisters@reg:
   349                           	opt stack 0
   350  000060                     ___awtofl@c:
   351                           	opt stack 0
   352  000060                     ___altofl@c:
   353                           	opt stack 0
   354  000060                     ___flge@ff1:
   355                           	opt stack 0
   356  000060                     ___lltofl@c:
   357                           	opt stack 0
   358                           
   359                           ; 4 bytes @ 0x0
   360  000060                     	ds	1
   361  000061                     Accel_ReadRegisters@status:
   362                           	opt stack 0
   363                           
   364                           ; 1 bytes @ 0x1
   365  000061                     	ds	1
   366  000062                     Accel_ReadRegister@reg:
   367                           	opt stack 0
   368                           
   369                           ; 1 bytes @ 0x2
   370  000062                     	ds	1
   371  000063                     Accel_ReadRegister@out:
   372                           	opt stack 0
   373                           
   374                           ; 1 bytes @ 0x3
   375  000063                     	ds	1
   376  000064                     ?___fladd:
   377                           	opt stack 0
   378  000064                     Accel_Init@name:
   379                           	opt stack 0
   380  000064                     ___fladd@f1:
   381                           	opt stack 0
   382  000064                     ___flge@ff2:
   383                           	opt stack 0
   384                           
   385                           ; 4 bytes @ 0x4
   386  000064                     	ds	1
   387  000065                     Accel_Init@fsr:
   388                           	opt stack 0
   389                           
   390                           ; 1 bytes @ 0x5
   391  000065                     	ds	3
   392  000068                     ___fladd@f2:
   393                           	opt stack 0
   394                           
   395                           ; 4 bytes @ 0x8
   396  000068                     	ds	4
   397  00006C                     ___fladd@sign:
   398                           	opt stack 0
   399                           
   400                           ; 1 bytes @ 0xC
   401  00006C                     	ds	1
   402  00006D                     ___fladd@exp2:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0xD
   406  00006D                     	ds	1
   407  00006E                     ___fladd@exp1:
   408                           	opt stack 0
   409                           
   410                           ; 1 bytes @ 0xE
   411  00006E                     	ds	1
   412  00006F                     ?___flmul:
   413                           	opt stack 0
   414  00006F                     ?___flsub:
   415                           	opt stack 0
   416  00006F                     ?_floor:
   417                           	opt stack 0
   418  00006F                     ___flmul@f1:
   419                           	opt stack 0
   420  00006F                     ___flsub@f1:
   421                           	opt stack 0
   422  00006F                     floor@x:
   423                           	opt stack 0
   424                           
   425                           ; 4 bytes @ 0xF
   426  00006F                     	ds	4
   427  000073                     ___flmul@f2:
   428                           	opt stack 0
   429  000073                     ___flsub@f2:
   430                           	opt stack 0
   431  000073                     floor@i:
   432                           	opt stack 0
   433                           
   434                           ; 4 bytes @ 0x13
   435  000073                     	ds	4
   436  000077                     ___flmul@exp:
   437                           	opt stack 0
   438  000077                     floor@expon:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0x17
   442  000077                     	ds	1
   443  000078                     ___flmul@f3_as_product:
   444                           	opt stack 0
   445                           
   446                           ; 4 bytes @ 0x18
   447  000078                     	ds	4
   448  00007C                     ___flmul@cntr:
   449                           	opt stack 0
   450                           
   451                           ; 1 bytes @ 0x1C
   452  00007C                     	ds	1
   453  00007D                     ___flmul@sign:
   454                           	opt stack 0
   455                           
   456                           ; 1 bytes @ 0x1D
   457  00007D                     	ds	1
   458  00007E                     ?___fldiv:
   459                           	opt stack 0
   460  00007E                     ?_eval_poly:
   461                           	opt stack 0
   462  00007E                     eval_poly@x:
   463                           	opt stack 0
   464  00007E                     ___fldiv@f1:
   465                           	opt stack 0
   466                           
   467                           ; 4 bytes @ 0x1E
   468  00007E                     	ds	4
   469  000082                     eval_poly@d:
   470                           	opt stack 0
   471  000082                     ___fldiv@f2:
   472                           	opt stack 0
   473                           
   474                           ; 4 bytes @ 0x22
   475  000082                     	ds	2
   476  000084                     eval_poly@n:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x24
   480  000084                     	ds	2
   481  000086                     ??_eval_poly:
   482  000086                     ___fldiv@f3:
   483                           	opt stack 0
   484                           
   485                           ; 4 bytes @ 0x26
   486  000086                     	ds	4
   487  00008A                     ___fldiv@cntr:
   488                           	opt stack 0
   489  00008A                     eval_poly@res:
   490                           	opt stack 0
   491                           
   492                           ; 4 bytes @ 0x2A
   493  00008A                     	ds	1
   494  00008B                     ___fldiv@exp:
   495                           	opt stack 0
   496                           
   497                           ; 1 bytes @ 0x2B
   498  00008B                     	ds	1
   499  00008C                     ___fldiv@sign:
   500                           	opt stack 0
   501                           
   502                           ; 1 bytes @ 0x2C
   503  00008C                     	ds	1
   504  00008D                     Accel_Get@out:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0x2D
   508  00008D                     	ds	1
   509  00008E                     ?_atan:
   510                           	opt stack 0
   511  00008E                     ?_log:
   512                           	opt stack 0
   513  00008E                     ?_ldexp:
   514                           	opt stack 0
   515  00008E                     atan@f:
   516                           	opt stack 0
   517  00008E                     ldexp@value:
   518                           	opt stack 0
   519  00008E                     log@x:
   520                           	opt stack 0
   521                           
   522                           ; 4 bytes @ 0x2E
   523  00008E                     	ds	1
   524  00008F                     ??_Accel_Get:
   525                           
   526                           ; 0 bytes @ 0x2F
   527  00008F                     	ds	3
   528  000092                     ldexp@newexp:
   529                           	opt stack 0
   530  000092                     log@exponent:
   531                           	opt stack 0
   532  000092                     atan@y:
   533                           	opt stack 0
   534                           
   535                           ; 4 bytes @ 0x32
   536  000092                     	ds	2
   537  000094                     ??_ldexp:
   538                           
   539                           ; 0 bytes @ 0x34
   540  000094                     	ds	1
   541  000095                     Accel_Get@raw:
   542                           	opt stack 0
   543                           
   544                           ; 6 bytes @ 0x35
   545  000095                     	ds	1
   546  000096                     ?_exp:
   547                           	opt stack 0
   548  000096                     atan@x:
   549                           	opt stack 0
   550  000096                     exp@x:
   551                           	opt stack 0
   552                           
   553                           ; 4 bytes @ 0x36
   554  000096                     	ds	4
   555  00009A                     atan@recip:
   556                           	opt stack 0
   557  00009A                     _exp$2034:
   558                           	opt stack 0
   559                           
   560                           ; 4 bytes @ 0x3A
   561  00009A                     	ds	1
   562  00009B                     Accel_Get@gCount:
   563                           	opt stack 0
   564  00009B                     atan@val_squared:
   565                           	opt stack 0
   566                           
   567                           ; 4 bytes @ 0x3B
   568  00009B                     	ds	2
   569  00009D                     Accel_Get@f_out:
   570                           	opt stack 0
   571                           
   572                           ; 2 bytes @ 0x3D
   573  00009D                     	ds	1
   574  00009E                     exp@exponent:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x3E
   578  00009E                     	ds	1
   579  00009F                     Accel_Get@i:
   580                           	opt stack 0
   581  00009F                     atan@val:
   582                           	opt stack 0
   583                           
   584                           ; 4 bytes @ 0x3F
   585  00009F                     	ds	1
   586  0000A0                     exp@sign:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0x40
   590  0000A0                     	ds	1
   591  0000A1                     ?_pow:
   592                           	opt stack 0
   593  0000A1                     pow@x:
   594                           	opt stack 0
   595                           
   596                           ; 4 bytes @ 0x41
   597  0000A1                     	ds	4
   598  0000A5                     pow@y:
   599                           	opt stack 0
   600                           
   601                           ; 4 bytes @ 0x45
   602  0000A5                     	ds	4
   603  0000A9                     _pow$2032:
   604                           	opt stack 0
   605                           
   606                           ; 4 bytes @ 0x49
   607  0000A9                     	ds	4
   608  0000AD                     _pow$2033:
   609                           	opt stack 0
   610                           
   611                           ; 4 bytes @ 0x4D
   612  0000AD                     	ds	4
   613  0000B1                     pow@sign:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0x51
   617  0000B1                     	ds	1
   618  0000B2                     pow@yi:
   619                           	opt stack 0
   620                           
   621                           ; 4 bytes @ 0x52
   622  0000B2                     	ds	4
   623  0000B6                     ?_sqrt:
   624                           	opt stack 0
   625  0000B6                     sqrt@y:
   626                           	opt stack 0
   627                           
   628                           ; 4 bytes @ 0x56
   629  0000B6                     	ds	4
   630  0000BA                     ??_sqrt:
   631                           
   632                           ; 0 bytes @ 0x5A
   633  0000BA                     	ds	4
   634  0000BE                     sqrt@og:
   635                           	opt stack 0
   636                           
   637                           ; 4 bytes @ 0x5E
   638  0000BE                     	ds	4
   639  0000C2                     sqrt@z:
   640                           	opt stack 0
   641                           
   642                           ; 4 bytes @ 0x62
   643  0000C2                     	ds	4
   644  0000C6                     sqrt@i:
   645                           	opt stack 0
   646                           
   647                           ; 1 bytes @ 0x66
   648  0000C6                     	ds	1
   649  0000C7                     sqrt@q:
   650                           	opt stack 0
   651                           
   652                           ; 4 bytes @ 0x67
   653  0000C7                     	ds	4
   654  0000CB                     sqrt@x:
   655                           	opt stack 0
   656                           
   657                           ; 4 bytes @ 0x6B
   658  0000CB                     	ds	4
   659  0000CF                     ?_asin:
   660                           	opt stack 0
   661  0000CF                     asin@x:
   662                           	opt stack 0
   663                           
   664                           ; 4 bytes @ 0x6F
   665  0000CF                     	ds	4
   666  0000D3                     ?_acos:
   667                           	opt stack 0
   668  0000D3                     acos@x:
   669                           	opt stack 0
   670                           
   671                           ; 4 bytes @ 0x73
   672  0000D3                     	ds	4
   673  0000D7                     _acos$2027:
   674                           	opt stack 0
   675                           
   676                           ; 4 bytes @ 0x77
   677  0000D7                     	ds	4
   678  0000DB                     Gyros_Update@dt:
   679                           	opt stack 0
   680                           
   681                           ; 4 bytes @ 0x7B
   682  0000DB                     	ds	4
   683  0000DF                     ??_main:
   684                           
   685                           ; 0 bytes @ 0x7F
   686  0000DF                     	ds	1
   687                           tblptru	equ	0xFF8
   688                           tblptrh	equ	0xFF7
   689                           postinc0	equ	0xFEE
   690                           wreg	equ	0xFE8
   691                           
   692                           	psect	cstackCOMRAM
   693  000001                     __pcstackCOMRAM:
   694                           	opt stack 0
   695  000001                     ??_System_LowPriorityInterrupt:
   696  000001                     
   697                           ; 1 bytes @ 0x0
   698  000001                     	ds	17
   699  000012                     ??_System_HighPriorityInterrupt:
   700                           
   701                           ; 0 bytes @ 0x11
   702  000012                     	ds	14
   703  000020                     ??_IdleI2C:
   704  000020                     ?___wmul:
   705                           	opt stack 0
   706  000020                     ?___flpack:
   707                           	opt stack 0
   708  000020                     ?_frexp:
   709                           	opt stack 0
   710  000020                     ?___flneg:
   711                           	opt stack 0
   712  000020                     ?___fltol:
   713                           	opt stack 0
   714  000020                     baudUSART@baudconfig:
   715                           	opt stack 0
   716  000020                     OpenI2C@slew:
   717                           	opt stack 0
   718  000020                     OpenUSART@spbrg:
   719                           	opt stack 0
   720  000020                     getsI2C@rdptr:
   721                           	opt stack 0
   722  000020                     ___wmul@multiplier:
   723                           	opt stack 0
   724  000020                     ___flpack@arg:
   725                           	opt stack 0
   726  000020                     ___flneg@f1:
   727                           	opt stack 0
   728  000020                     ___fltol@f1:
   729                           	opt stack 0
   730  000020                     frexp@value:
   731                           	opt stack 0
   732                           
   733                           ; 4 bytes @ 0x1F
   734  000020                     	ds	1
   735  000021                     OpenI2C@sync_mode:
   736                           	opt stack 0
   737  000021                     WriteI2C@data_out:
   738                           	opt stack 0
   739                           
   740                           ; 1 bytes @ 0x20
   741  000021                     	ds	1
   742  000022                     OpenUSART@config:
   743                           	opt stack 0
   744  000022                     EEAckPolling@control:
   745                           	opt stack 0
   746  000022                     EEByteWrite@address:
   747                           	opt stack 0
   748  000022                     getsI2C@length:
   749                           	opt stack 0
   750  000022                     ___wmul@multiplicand:
   751                           	opt stack 0
   752                           
   753                           ; 2 bytes @ 0x21
   754  000022                     	ds	1
   755  000023                     EEByteWrite@data:
   756                           	opt stack 0
   757  000023                     EESequentialRead@address:
   758                           	opt stack 0
   759                           
   760                           ; 1 bytes @ 0x22
   761  000023                     	ds	1
   762  000024                     ??___fltol:
   763  000024                     ?_fabs:
   764                           	opt stack 0
   765  000024                     EEByteWrite@control:
   766                           	opt stack 0
   767  000024                     ___flpack@exp:
   768                           	opt stack 0
   769  000024                     EESequentialRead@rdptr:
   770                           	opt stack 0
   771  000024                     ___wmul@product:
   772                           	opt stack 0
   773  000024                     frexp@eptr:
   774                           	opt stack 0
   775  000024                     fabs@d:
   776                           	opt stack 0
   777                           
   778                           ; 4 bytes @ 0x23
   779  000024                     	ds	1
   780  000025                     Accel_WriteRegister@value:
   781                           	opt stack 0
   782  000025                     ___flpack@sign:
   783                           	opt stack 0
   784                           
   785                           ; 1 bytes @ 0x24
   786  000025                     	ds	1
   787  000026                     ??___flpack:
   788  000026                     ??_frexp:
   789  000026                     Accel_WriteRegister@reg:
   790                           	opt stack 0
   791  000026                     EESequentialRead@length:
   792                           	opt stack 0
   793                           
   794                           ; 1 bytes @ 0x25
   795  000026                     	ds	1
   796  000027                     Accel_WriteRegister@status:
   797                           	opt stack 0
   798  000027                     EESequentialRead@control:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0x26
   802  000027                     	ds	1
   803  000028                     ??___flge:
   804  000028                     ___fltol@sign1:
   805                           	opt stack 0
   806  000028                     Accel_ReadRegisters@out:
   807                           	opt stack 0
   808                           
   809                           ; 2 bytes @ 0x27
   810  000028                     	ds	1
   811  000029                     ___fltol@exp1:
   812                           	opt stack 0
   813                           
   814                           ; 1 bytes @ 0x28
   815  000029                     	ds	1
   816  00002A                     ___altofl@sign:
   817                           	opt stack 0
   818  00002A                     ___awtofl@sign:
   819                           	opt stack 0
   820  00002A                     Accel_ReadRegisters@length:
   821                           	opt stack 0
   822                           
   823                           ; 2 bytes @ 0x29
   824  00002A                     	ds	1
   825  00002B                     ??___fladd:
   826                           
   827                           ; 0 bytes @ 0x2A
   828  00002B                     	ds	1
   829  00002C                     Accel_StandBy@c:
   830                           	opt stack 0
   831  00002C                     Accel_Active@c:
   832                           	opt stack 0
   833                           
   834                           ; 1 bytes @ 0x2B
   835  00002C                     	ds	1
   836  00002D                     tblptru	equ	0xFF8
   837                           tblptrh	equ	0xFF7
   838                           postinc0	equ	0xFEE
   839                           wreg	equ	0xFE8
   840                           
   841                           ; 0 bytes @ 0x2C
   842 ;;
   843 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   844 ;;
   845 ;; *************** function _main *****************
   846 ;; Defined at:
   847 ;;		line 67 in file "main.c"
   848 ;; Parameters:    Size  Location     Type
   849 ;;		None
   850 ;; Auto vars:     Size  Location     Type
   851 ;;		None
   852 ;; Return value:  Size  Location     Type
   853 ;;		None               void
   854 ;; Registers used:
   855 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   856 ;; Tracked objects:
   857 ;;		On entry : 0/0
   858 ;;		On exit  : 0/0
   859 ;;		Unchanged: 0/0
   860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   861 ;;      Params:         0       0       0       0       0       0       0
   862 ;;      Locals:         0       0       0       0       0       0       0
   863 ;;      Temps:          0       1       0       0       0       0       0
   864 ;;      Totals:         0       1       0       0       0       0       0
   865 ;;Total ram usage:        1 bytes
   866 ;; Hardware stack levels required when called:    9
   867 ;; This function calls:
   868 ;;		_Accel_Init
   869 ;;		_Gyros_Init
   870 ;;		_Gyros_Update
   871 ;;		_System_Init
   872 ;; This function is called by:
   873 ;;		Startup code after reset
   874 ;; This function uses a non-reentrant model
   875 ;;
   876                           
   877                           	psect	text0
   878  002C38                     __ptext0:
   879                           	opt stack 0
   880  002C38                     _main:
   881                           	opt stack 22
   882                           
   883                           ;main.c: 68: System_Init();
   884                           
   885                           ;incstack = 0
   886  002C38  ECFB  F015         	call	_System_Init	;wreg free
   887                           
   888                           ;main.c: 70: LATCbits.LATC0 = 0;
   889  002C3C  908B               	bcf	3979,0,c	;volatile
   890                           
   891                           ;main.c: 71: Accel_Init();
   892  002C3E  ECB5  F015         	call	_Accel_Init	;wreg free
   893                           
   894                           ;main.c: 72: Gyros_Init();
   895  002C42  ECCE  F013         	call	_Gyros_Init	;wreg free
   896                           
   897                           ;main.c: 73: LATCbits.LATC0 = 1;
   898  002C46  808B               	bsf	3979,0,c	;volatile
   899  002C48  D000               	goto	l4149
   900  002C4A                     l4149:
   901                           
   902                           ;main.c: 76: LATCbits.LATC0 = ~LATCbits.LATC0;
   903  002C4A  708B               	btg	3979,0,c	;volatile
   904                           
   905                           ;main.c: 77: Gyros_Update(1.0f);
   906  002C4C  0E00               	movlw	0
   907  002C4E  0100               	movlb	0	; () banked
   908  002C50  6FDB               	movwf	Gyros_Update@dt& (0+255),b
   909  002C52  0E00               	movlw	0
   910  002C54  6FDC               	movwf	(Gyros_Update@dt+1)& (0+255),b
   911  002C56  0E80               	movlw	128
   912  002C58  6FDD               	movwf	(Gyros_Update@dt+2)& (0+255),b
   913  002C5A  0E3F               	movlw	63
   914  002C5C  6FDE               	movwf	(Gyros_Update@dt+3)& (0+255),b
   915  002C5E  EC3D  F003         	call	_Gyros_Update	;wreg free
   916                           
   917                           ;main.c: 78: _delay((unsigned long)((500)*(16000000/4000000.0)));
   918  002C62  0E03               	movlw	3
   919  002C64  0100               	movlb	0	; () banked
   920  002C66  6FDF               	movwf	??_main& (0+255),b
   921  002C68  0E98               	movlw	152
   922  002C6A                     u5247:
   923  002C6A  2EE8               	decfsz	wreg,f,c
   924  002C6C  D7FE               	goto	u5247
   925  002C6E  2FDF               	decfsz	??_main& (0+255),f,b
   926  002C70  D7FC               	goto	u5247
   927  002C72  D7EB               	goto	l4149
   928  002C74  EF51  F000         	goto	start
   929  002C78                     __end_of_main:
   930                           	opt stack 0
   931                           tblptru	equ	0xFF8
   932                           tblptrh	equ	0xFF7
   933                           postinc0	equ	0xFEE
   934                           wreg	equ	0xFE8
   935                           
   936 ;; *************** function _System_Init *****************
   937 ;; Defined at:
   938 ;;		line 13 in file "system.c"
   939 ;; Parameters:    Size  Location     Type
   940 ;;		None
   941 ;; Auto vars:     Size  Location     Type
   942 ;;		None
   943 ;; Return value:  Size  Location     Type
   944 ;;		None               void
   945 ;; Registers used:
   946 ;;		wreg, status,2, status,0, cstack
   947 ;; Tracked objects:
   948 ;;		On entry : 0/0
   949 ;;		On exit  : 0/0
   950 ;;		Unchanged: 0/0
   951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   952 ;;      Params:         0       0       0       0       0       0       0
   953 ;;      Locals:         0       0       0       0       0       0       0
   954 ;;      Temps:          0       0       0       0       0       0       0
   955 ;;      Totals:         0       0       0       0       0       0       0
   956 ;;Total ram usage:        0 bytes
   957 ;; Hardware stack levels used:    1
   958 ;; Hardware stack levels required when called:    3
   959 ;; This function calls:
   960 ;;		_CloseI2C
   961 ;;		_OpenI2C
   962 ;;		_OpenUSART
   963 ;;		_baudUSART
   964 ;; This function is called by:
   965 ;;		_main
   966 ;; This function uses a non-reentrant model
   967 ;;
   968                           
   969                           	psect	text1
   970  002BF6                     __ptext1:
   971                           	opt stack 0
   972  002BF6                     _System_Init:
   973                           	opt stack 27
   974                           
   975                           ;system.c: 15: OSCCONbits.SCS = 0b11;
   976                           
   977                           ;incstack = 0
   978  002BF6  0E03               	movlw	3
   979  002BF8  12D3               	iorwf	4051,f,c	;volatile
   980                           
   981                           ;system.c: 16: OSCCONbits.IRCF = 0b111;
   982  002BFA  88D3               	bsf	4051,4,c	;volatile
   983  002BFC  8AD3               	bsf	4051,5,c	;volatile
   984  002BFE  8CD3               	bsf	4051,6,c	;volatile
   985                           
   986                           ;system.c: 17: TRISCbits.RC0 = 0;
   987  002C00  9094               	bcf	3988,0,c	;volatile
   988                           
   989                           ;system.c: 18: LATCbits.LATC0 = 0;
   990  002C02  908B               	bcf	3979,0,c	;volatile
   991                           
   992                           ;system.c: 21: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
   993  002C04  0E4F               	movlw	79
   994  002C06  16AB               	andwf	4011,f,c	;volatile
   995  002C08  9AAC               	bcf	4012,5,c	;volatile
   996  002C0A  0ECF               	movlw	207
   997  002C0C  169D               	andwf	3997,f,c	;volatile
   998                           
   999                           ;system.c: 22: OpenUSART(0b00000000 | 0b00000000 | 0b00000000
  1000                           ;system.c: 23: | 0b00000000 | 0b00001000 | 0b00000000, 51);
  1001  002C0E  0E00               	movlw	0
  1002  002C10  6E21               	movwf	OpenUSART@spbrg+1,c
  1003  002C12  0E33               	movlw	51
  1004  002C14  6E20               	movwf	OpenUSART@spbrg,c
  1005  002C16  0E08               	movlw	8
  1006  002C18  EC59  F014         	call	_OpenUSART
  1007                           
  1008                           ;system.c: 24: baudUSART (0b00000000 | 0b00000000);
  1009  002C1C  0E00               	movlw	0
  1010  002C1E  EC35  F017         	call	_baudUSART
  1011                           
  1012                           ;system.c: 27: CloseI2C();
  1013  002C22  EC39  F017         	call	_CloseI2C	;wreg free
  1014                           
  1015                           ;system.c: 28: OpenI2C(0b00001000, 0b10000000);
  1016  002C26  0E80               	movlw	128
  1017  002C28  6E20               	movwf	OpenI2C@slew,c
  1018  002C2A  0E08               	movlw	8
  1019  002C2C  EC07  F017         	call	_OpenI2C
  1020                           
  1021                           ;system.c: 31: SSPADD = 39;
  1022  002C30  0E27               	movlw	39
  1023  002C32  6EC8               	movwf	4040,c	;volatile
  1024                           
  1025                           ;system.c: 34: LATCbits.LATC0 = 1;
  1026  002C34  808B               	bsf	3979,0,c	;volatile
  1027  002C36  0012               	return		;funcret
  1028  002C38                     __end_of_System_Init:
  1029                           	opt stack 0
  1030                           tblptru	equ	0xFF8
  1031                           tblptrh	equ	0xFF7
  1032                           postinc0	equ	0xFEE
  1033                           wreg	equ	0xFE8
  1034                           
  1035 ;; *************** function _baudUSART *****************
  1036 ;; Defined at:
  1037 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\ubaud.c"
  1038 ;; Parameters:    Size  Location     Type
  1039 ;;  baudconfig      1    wreg     unsigned char 
  1040 ;; Auto vars:     Size  Location     Type
  1041 ;;  baudconfig      1   31[COMRAM] unsigned char 
  1042 ;; Return value:  Size  Location     Type
  1043 ;;		None               void
  1044 ;; Registers used:
  1045 ;;		wreg
  1046 ;; Tracked objects:
  1047 ;;		On entry : 0/0
  1048 ;;		On exit  : 0/0
  1049 ;;		Unchanged: 0/0
  1050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1051 ;;      Params:         0       0       0       0       0       0       0
  1052 ;;      Locals:         1       0       0       0       0       0       0
  1053 ;;      Temps:          0       0       0       0       0       0       0
  1054 ;;      Totals:         1       0       0       0       0       0       0
  1055 ;;Total ram usage:        1 bytes
  1056 ;; Hardware stack levels used:    1
  1057 ;; Hardware stack levels required when called:    2
  1058 ;; This function calls:
  1059 ;;		Nothing
  1060 ;; This function is called by:
  1061 ;;		_System_Init
  1062 ;; This function uses a non-reentrant model
  1063 ;;
  1064                           
  1065                           	psect	text2
  1066  002E6A                     __ptext2:
  1067                           	opt stack 0
  1068  002E6A                     _baudUSART:
  1069                           	opt stack 27
  1070                           
  1071                           ;incstack = 0
  1072                           ;baudUSART@baudconfig stored from wreg
  1073  002E6A  6E20               	movwf	baudUSART@baudconfig,c
  1074  002E6C  C020  FFB8         	movff	baudUSART@baudconfig,4024	;volatile
  1075  002E70  0012               	return		;funcret
  1076  002E72                     __end_of_baudUSART:
  1077                           	opt stack 0
  1078                           tblptru	equ	0xFF8
  1079                           tblptrh	equ	0xFF7
  1080                           postinc0	equ	0xFEE
  1081                           wreg	equ	0xFE8
  1082                           
  1083 ;; *************** function _OpenUSART *****************
  1084 ;; Defined at:
  1085 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  1086 ;; Parameters:    Size  Location     Type
  1087 ;;  config          1    wreg     unsigned char 
  1088 ;;  spbrg           2   31[COMRAM] unsigned int 
  1089 ;; Auto vars:     Size  Location     Type
  1090 ;;  config          1   33[COMRAM] unsigned char 
  1091 ;; Return value:  Size  Location     Type
  1092 ;;		None               void
  1093 ;; Registers used:
  1094 ;;		wreg, status,2
  1095 ;; Tracked objects:
  1096 ;;		On entry : 0/0
  1097 ;;		On exit  : 0/0
  1098 ;;		Unchanged: 0/0
  1099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1100 ;;      Params:         2       0       0       0       0       0       0
  1101 ;;      Locals:         1       0       0       0       0       0       0
  1102 ;;      Temps:          0       0       0       0       0       0       0
  1103 ;;      Totals:         3       0       0       0       0       0       0
  1104 ;;Total ram usage:        3 bytes
  1105 ;; Hardware stack levels used:    1
  1106 ;; Hardware stack levels required when called:    2
  1107 ;; This function calls:
  1108 ;;		Nothing
  1109 ;; This function is called by:
  1110 ;;		_System_Init
  1111 ;; This function uses a non-reentrant model
  1112 ;;
  1113                           
  1114                           	psect	text3
  1115  0028B2                     __ptext3:
  1116                           	opt stack 0
  1117  0028B2                     _OpenUSART:
  1118                           	opt stack 27
  1119                           
  1120                           ;incstack = 0
  1121                           ;OpenUSART@config stored from wreg
  1122  0028B2  6E22               	movwf	OpenUSART@config,c
  1123  0028B4  0E00               	movlw	0
  1124  0028B6  6EAC               	movwf	4012,c	;volatile
  1125  0028B8  0E00               	movlw	0
  1126  0028BA  6EAB               	movwf	4011,c	;volatile
  1127  0028BC  A022               	btfss	OpenUSART@config,0,c
  1128  0028BE  D002               	goto	l3011
  1129  0028C0  88AC               	bsf	4012,4,c	;volatile
  1130  0028C2  D000               	goto	l3011
  1131  0028C4                     l3011:
  1132  0028C4  A222               	btfss	OpenUSART@config,1,c
  1133  0028C6  D003               	goto	l3015
  1134  0028C8  8CAC               	bsf	4012,6,c	;volatile
  1135  0028CA  8CAB               	bsf	4011,6,c	;volatile
  1136  0028CC  D000               	goto	l3015
  1137  0028CE                     l3015:
  1138  0028CE  A422               	btfss	OpenUSART@config,2,c
  1139  0028D0  D002               	goto	l3019
  1140  0028D2  8EAC               	bsf	4012,7,c	;volatile
  1141  0028D4  D000               	goto	l3019
  1142  0028D6                     l3019:
  1143  0028D6  A622               	btfss	OpenUSART@config,3,c
  1144  0028D8  D002               	goto	l153
  1145  0028DA  88AB               	bsf	4011,4,c	;volatile
  1146  0028DC  D002               	goto	l3023
  1147  0028DE                     l153:
  1148  0028DE  8AAB               	bsf	4011,5,c	;volatile
  1149  0028E0  D000               	goto	l3023
  1150  0028E2                     l3023:
  1151  0028E2  B822               	btfsc	OpenUSART@config,4,c
  1152  0028E4  84AC               	bsf	4012,2,c	;volatile
  1153  0028E6  989E               	bcf	3998,4,c	;volatile
  1154  0028E8  AA22               	btfss	OpenUSART@config,5,c
  1155  0028EA  D002               	goto	l3031
  1156  0028EC  86AB               	bsf	4011,3,c	;volatile
  1157  0028EE  D000               	goto	l3031
  1158  0028F0                     l3031:
  1159  0028F0  AC22               	btfss	OpenUSART@config,6,c
  1160  0028F2  D002               	goto	l157
  1161  0028F4  8A9D               	bsf	3997,5,c	;volatile
  1162  0028F6  D001               	goto	l158
  1163  0028F8                     l157:
  1164  0028F8  9A9D               	bcf	3997,5,c	;volatile
  1165  0028FA                     l158:
  1166  0028FA  9A9E               	bcf	3998,5,c	;volatile
  1167  0028FC  AE22               	btfss	OpenUSART@config,7,c
  1168  0028FE  D002               	goto	l159
  1169  002900  889D               	bsf	3997,4,c	;volatile
  1170  002902  D001               	goto	l160
  1171  002904                     l159:
  1172  002904  989D               	bcf	3997,4,c	;volatile
  1173  002906                     l160:
  1174  002906  C020  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  1175  00290A  5021               	movf	OpenUSART@spbrg+1,w,c
  1176  00290C  6EB0               	movwf	4016,c	;volatile
  1177  00290E  8AAC               	bsf	4012,5,c	;volatile
  1178  002910  8EAB               	bsf	4011,7,c	;volatile
  1179  002912  9C94               	bcf	3988,6,c	;volatile
  1180  002914  8E94               	bsf	3988,7,c	;volatile
  1181  002916  A8AC               	btfss	4012,4,c	;volatile
  1182  002918  0012               	return	
  1183  00291A  BEAC               	btfsc	4012,7,c	;volatile
  1184  00291C  0012               	return	
  1185  00291E  8C94               	bsf	3988,6,c	;volatile
  1186  002920  0012               	return	
  1187  002922  0012               	return		;funcret
  1188  002924                     __end_of_OpenUSART:
  1189                           	opt stack 0
  1190                           tblptru	equ	0xFF8
  1191                           tblptrh	equ	0xFF7
  1192                           postinc0	equ	0xFEE
  1193                           wreg	equ	0xFE8
  1194                           
  1195 ;; *************** function _OpenI2C *****************
  1196 ;; Defined at:
  1197 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_open.c"
  1198 ;; Parameters:    Size  Location     Type
  1199 ;;  sync_mode       1    wreg     unsigned char 
  1200 ;;  slew            1   31[COMRAM] unsigned char 
  1201 ;; Auto vars:     Size  Location     Type
  1202 ;;  sync_mode       1   32[COMRAM] unsigned char 
  1203 ;; Return value:  Size  Location     Type
  1204 ;;		None               void
  1205 ;; Registers used:
  1206 ;;		wreg, status,2, status,0
  1207 ;; Tracked objects:
  1208 ;;		On entry : 0/0
  1209 ;;		On exit  : 0/0
  1210 ;;		Unchanged: 0/0
  1211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1212 ;;      Params:         1       0       0       0       0       0       0
  1213 ;;      Locals:         1       0       0       0       0       0       0
  1214 ;;      Temps:          0       0       0       0       0       0       0
  1215 ;;      Totals:         2       0       0       0       0       0       0
  1216 ;;Total ram usage:        2 bytes
  1217 ;; Hardware stack levels used:    1
  1218 ;; Hardware stack levels required when called:    2
  1219 ;; This function calls:
  1220 ;;		Nothing
  1221 ;; This function is called by:
  1222 ;;		_System_Init
  1223 ;; This function uses a non-reentrant model
  1224 ;;
  1225                           
  1226                           	psect	text4
  1227  002E0E                     __ptext4:
  1228                           	opt stack 0
  1229  002E0E                     _OpenI2C:
  1230                           	opt stack 27
  1231                           
  1232                           ;incstack = 0
  1233                           ;OpenI2C@sync_mode stored from wreg
  1234  002E0E  6E21               	movwf	OpenI2C@sync_mode,c
  1235  002E10  0E3F               	movlw	63
  1236  002E12  16C7               	andwf	4039,f,c	;volatile
  1237  002E14  0E00               	movlw	0
  1238  002E16  6EC6               	movwf	4038,c	;volatile
  1239  002E18  0E00               	movlw	0
  1240  002E1A  6EC5               	movwf	4037,c	;volatile
  1241  002E1C  5021               	movf	OpenI2C@sync_mode,w,c
  1242  002E1E  12C6               	iorwf	4038,f,c	;volatile
  1243  002E20  5020               	movf	OpenI2C@slew,w,c
  1244  002E22  12C7               	iorwf	4039,f,c	;volatile
  1245  002E24  8694               	bsf	3988,3,c	;volatile
  1246  002E26  8894               	bsf	3988,4,c	;volatile
  1247  002E28  8AC6               	bsf	4038,5,c	;volatile
  1248  002E2A  0012               	return		;funcret
  1249  002E2C                     __end_of_OpenI2C:
  1250                           	opt stack 0
  1251                           tblptru	equ	0xFF8
  1252                           tblptrh	equ	0xFF7
  1253                           postinc0	equ	0xFEE
  1254                           wreg	equ	0xFE8
  1255                           
  1256 ;; *************** function _CloseI2C *****************
  1257 ;; Defined at:
  1258 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_clos.c"
  1259 ;; Parameters:    Size  Location     Type
  1260 ;;		None
  1261 ;; Auto vars:     Size  Location     Type
  1262 ;;		None
  1263 ;; Return value:  Size  Location     Type
  1264 ;;		None               void
  1265 ;; Registers used:
  1266 ;;		status,2, status,0
  1267 ;; Tracked objects:
  1268 ;;		On entry : 0/0
  1269 ;;		On exit  : 0/0
  1270 ;;		Unchanged: 0/0
  1271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1272 ;;      Params:         0       0       0       0       0       0       0
  1273 ;;      Locals:         0       0       0       0       0       0       0
  1274 ;;      Temps:          0       0       0       0       0       0       0
  1275 ;;      Totals:         0       0       0       0       0       0       0
  1276 ;;Total ram usage:        0 bytes
  1277 ;; Hardware stack levels used:    1
  1278 ;; Hardware stack levels required when called:    2
  1279 ;; This function calls:
  1280 ;;		Nothing
  1281 ;; This function is called by:
  1282 ;;		_System_Init
  1283 ;; This function uses a non-reentrant model
  1284 ;;
  1285                           
  1286                           	psect	text5
  1287  002E72                     __ptext5:
  1288                           	opt stack 0
  1289  002E72                     _CloseI2C:
  1290                           	opt stack 27
  1291                           
  1292                           ;incstack = 0
  1293  002E72  9AC6               	bcf	4038,5,c	;volatile
  1294  002E74  0012               	return		;funcret
  1295  002E76                     __end_of_CloseI2C:
  1296                           	opt stack 0
  1297                           tblptru	equ	0xFF8
  1298                           tblptrh	equ	0xFF7
  1299                           postinc0	equ	0xFEE
  1300                           wreg	equ	0xFE8
  1301                           
  1302 ;; *************** function _Gyros_Update *****************
  1303 ;; Defined at:
  1304 ;;		line 17 in file "gyros.c"
  1305 ;; Parameters:    Size  Location     Type
  1306 ;;  dt              4  123[BANK0 ] float 
  1307 ;; Auto vars:     Size  Location     Type
  1308 ;;  a              12   56[BANK1 ] struct .
  1309 ;; Return value:  Size  Location     Type
  1310 ;;		None               void
  1311 ;; Registers used:
  1312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1313 ;; Tracked objects:
  1314 ;;		On entry : 0/0
  1315 ;;		On exit  : 0/0
  1316 ;;		Unchanged: 0/0
  1317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1318 ;;      Params:         0       4       0       0       0       0       0
  1319 ;;      Locals:         0       0      44       0       0       0       0
  1320 ;;      Temps:          0       0       0       0       0       0       0
  1321 ;;      Totals:         0       4      44       0       0       0       0
  1322 ;;Total ram usage:       48 bytes
  1323 ;; Hardware stack levels used:    1
  1324 ;; Hardware stack levels required when called:    8
  1325 ;; This function calls:
  1326 ;;		_Accel_Get
  1327 ;;		___fladd
  1328 ;;		___fldiv
  1329 ;;		___flmul
  1330 ;;		_acos
  1331 ;;		_atan
  1332 ;;		_pow
  1333 ;;		_sqrt
  1334 ;; This function is called by:
  1335 ;;		_main
  1336 ;; This function uses a non-reentrant model
  1337 ;;
  1338                           
  1339                           	psect	text6
  1340  00067A                     __ptext6:
  1341                           	opt stack 0
  1342  00067A                     _Gyros_Update:
  1343                           	opt stack 22
  1344                           
  1345                           ;gyros.c: 19: vec3f a;
  1346                           ;gyros.c: 20: Accel_Get(&a);
  1347                           
  1348                           ;incstack = 0
  1349  00067A  0E38               	movlw	low Gyros_Update@a
  1350  00067C  0100               	movlb	0	; () banked
  1351  00067E  6F8D               	movwf	Accel_Get@out& (0+255),b
  1352  000680  0E01               	movlw	high Gyros_Update@a
  1353  000682  0100               	movlb	0	; () banked
  1354  000684  6F8E               	movwf	(Accel_Get@out+1)& (0+255),b
  1355  000686  EC97  F00C         	call	_Accel_Get	;wreg free
  1356                           
  1357                           ;gyros.c: 22: Gyros_Angle.theta = atan(a.x / a.y);
  1358  00068A  C138  F07E         	movff	Gyros_Update@a,___fldiv@f1
  1359  00068E  C139  F07F         	movff	Gyros_Update@a+1,___fldiv@f1+1
  1360  000692  C13A  F080         	movff	Gyros_Update@a+2,___fldiv@f1+2
  1361  000696  C13B  F081         	movff	Gyros_Update@a+3,___fldiv@f1+3
  1362  00069A  C13C  F082         	movff	Gyros_Update@a+4,___fldiv@f2
  1363  00069E  C13D  F083         	movff	Gyros_Update@a+5,___fldiv@f2+1
  1364  0006A2  C13E  F084         	movff	Gyros_Update@a+6,___fldiv@f2+2
  1365  0006A6  C13F  F085         	movff	Gyros_Update@a+7,___fldiv@f2+3
  1366  0006AA  ECF3  F00E         	call	___fldiv	;wreg free
  1367  0006AE  C07E  F118         	movff	?___fldiv,_Gyros_Update$2019
  1368  0006B2  C07F  F119         	movff	?___fldiv+1,_Gyros_Update$2019+1
  1369  0006B6  C080  F11A         	movff	?___fldiv+2,_Gyros_Update$2019+2
  1370  0006BA  C081  F11B         	movff	?___fldiv+3,_Gyros_Update$2019+3
  1371                           
  1372                           ;gyros.c: 22: Gyros_Angle.theta = atan(a.x / a.y);
  1373  0006BE  C118  F08E         	movff	_Gyros_Update$2019,atan@f
  1374  0006C2  C119  F08F         	movff	_Gyros_Update$2019+1,atan@f+1
  1375  0006C6  C11A  F090         	movff	_Gyros_Update$2019+2,atan@f+2
  1376  0006CA  C11B  F091         	movff	_Gyros_Update$2019+3,atan@f+3
  1377  0006CE  EC58  F009         	call	_atan	;wreg free
  1378  0006D2  C08E  F150         	movff	?_atan,gyros@Gyros_Angle
  1379  0006D6  C08F  F151         	movff	?_atan+1,gyros@Gyros_Angle+1
  1380  0006DA  C090  F152         	movff	?_atan+2,gyros@Gyros_Angle+2
  1381  0006DE  C091  F153         	movff	?_atan+3,gyros@Gyros_Angle+3
  1382                           
  1383                           ;gyros.c: 23: Gyros_Angle.phi = acos(a.z / (sqrt(pow(a.x, 2.0) + pow(a.y, 2.0) + pow(a.z
      +                          , 2.0))));
  1384  0006E2  0E00               	movlw	0
  1385  0006E4  0100               	movlb	0	; () banked
  1386  0006E6  6FA5               	movwf	pow@y& (0+255),b
  1387  0006E8  0E00               	movlw	0
  1388  0006EA  6FA6               	movwf	(pow@y+1)& (0+255),b
  1389  0006EC  0E00               	movlw	0
  1390  0006EE  6FA7               	movwf	(pow@y+2)& (0+255),b
  1391  0006F0  0E40               	movlw	64
  1392  0006F2  6FA8               	movwf	(pow@y+3)& (0+255),b
  1393  0006F4  C13C  F0A1         	movff	Gyros_Update@a+4,pow@x
  1394  0006F8  C13D  F0A2         	movff	Gyros_Update@a+5,pow@x+1
  1395  0006FC  C13E  F0A3         	movff	Gyros_Update@a+6,pow@x+2
  1396  000700  C13F  F0A4         	movff	Gyros_Update@a+7,pow@x+3
  1397  000704  EC97  F00B         	call	_pow	;wreg free
  1398  000708  C0A1  F11C         	movff	?_pow,_Gyros_Update$2020
  1399  00070C  C0A2  F11D         	movff	?_pow+1,_Gyros_Update$2020+1
  1400  000710  C0A3  F11E         	movff	?_pow+2,_Gyros_Update$2020+2
  1401  000714  C0A4  F11F         	movff	?_pow+3,_Gyros_Update$2020+3
  1402                           
  1403                           ;gyros.c: 23: Gyros_Angle.phi = acos(a.z / (sqrt(pow(a.x, 2.0) + pow(a.y, 2.0) + pow(a.z
      +                          , 2.0))));
  1404  000718  0E00               	movlw	0
  1405  00071A  0100               	movlb	0	; () banked
  1406  00071C  6FA5               	movwf	pow@y& (0+255),b
  1407  00071E  0E00               	movlw	0
  1408  000720  6FA6               	movwf	(pow@y+1)& (0+255),b
  1409  000722  0E00               	movlw	0
  1410  000724  6FA7               	movwf	(pow@y+2)& (0+255),b
  1411  000726  0E40               	movlw	64
  1412  000728  6FA8               	movwf	(pow@y+3)& (0+255),b
  1413  00072A  C138  F0A1         	movff	Gyros_Update@a,pow@x
  1414  00072E  C139  F0A2         	movff	Gyros_Update@a+1,pow@x+1
  1415  000732  C13A  F0A3         	movff	Gyros_Update@a+2,pow@x+2
  1416  000736  C13B  F0A4         	movff	Gyros_Update@a+3,pow@x+3
  1417  00073A  EC97  F00B         	call	_pow	;wreg free
  1418  00073E  C0A1  F120         	movff	?_pow,_Gyros_Update$2021
  1419  000742  C0A2  F121         	movff	?_pow+1,_Gyros_Update$2021+1
  1420  000746  C0A3  F122         	movff	?_pow+2,_Gyros_Update$2021+2
  1421  00074A  C0A4  F123         	movff	?_pow+3,_Gyros_Update$2021+3
  1422                           
  1423                           ;gyros.c: 23: Gyros_Angle.phi = acos(a.z / (sqrt(pow(a.x, 2.0) + pow(a.y, 2.0) + pow(a.z
      +                          , 2.0))));
  1424  00074E  0E00               	movlw	0
  1425  000750  0100               	movlb	0	; () banked
  1426  000752  6FA5               	movwf	pow@y& (0+255),b
  1427  000754  0E00               	movlw	0
  1428  000756  6FA6               	movwf	(pow@y+1)& (0+255),b
  1429  000758  0E00               	movlw	0
  1430  00075A  6FA7               	movwf	(pow@y+2)& (0+255),b
  1431  00075C  0E40               	movlw	64
  1432  00075E  6FA8               	movwf	(pow@y+3)& (0+255),b
  1433  000760  C140  F0A1         	movff	Gyros_Update@a+8,pow@x
  1434  000764  C141  F0A2         	movff	Gyros_Update@a+9,pow@x+1
  1435  000768  C142  F0A3         	movff	Gyros_Update@a+10,pow@x+2
  1436  00076C  C143  F0A4         	movff	Gyros_Update@a+11,pow@x+3
  1437  000770  EC97  F00B         	call	_pow	;wreg free
  1438  000774  C0A1  F124         	movff	?_pow,_Gyros_Update$2022
  1439  000778  C0A2  F125         	movff	?_pow+1,_Gyros_Update$2022+1
  1440  00077C  C0A3  F126         	movff	?_pow+2,_Gyros_Update$2022+2
  1441  000780  C0A4  F127         	movff	?_pow+3,_Gyros_Update$2022+3
  1442                           
  1443                           ;gyros.c: 23: Gyros_Angle.phi = acos(a.z / (sqrt(pow(a.x, 2.0) + pow(a.y, 2.0) + pow(a.z
      +                          , 2.0))));
  1444  000784  C11C  F068         	movff	_Gyros_Update$2020,___fladd@f2
  1445  000788  C11D  F069         	movff	_Gyros_Update$2020+1,___fladd@f2+1
  1446  00078C  C11E  F06A         	movff	_Gyros_Update$2020+2,___fladd@f2+2
  1447  000790  C11F  F06B         	movff	_Gyros_Update$2020+3,___fladd@f2+3
  1448  000794  C120  F064         	movff	_Gyros_Update$2021,___fladd@f1
  1449  000798  C121  F065         	movff	_Gyros_Update$2021+1,___fladd@f1+1
  1450  00079C  C122  F066         	movff	_Gyros_Update$2021+2,___fladd@f1+2
  1451  0007A0  C123  F067         	movff	_Gyros_Update$2021+3,___fladd@f1+3
  1452  0007A4  EC28  F008         	call	___fladd	;wreg free
  1453  0007A8  C064  F128         	movff	?___fladd,_Gyros_Update$2023
  1454  0007AC  C065  F129         	movff	?___fladd+1,_Gyros_Update$2023+1
  1455  0007B0  C066  F12A         	movff	?___fladd+2,_Gyros_Update$2023+2
  1456  0007B4  C067  F12B         	movff	?___fladd+3,_Gyros_Update$2023+3
  1457                           
  1458                           ;gyros.c: 23: Gyros_Angle.phi = acos(a.z / (sqrt(pow(a.x, 2.0) + pow(a.y, 2.0) + pow(a.z
      +                          , 2.0))));
  1459  0007B8  C124  F068         	movff	_Gyros_Update$2022,___fladd@f2
  1460  0007BC  C125  F069         	movff	_Gyros_Update$2022+1,___fladd@f2+1
  1461  0007C0  C126  F06A         	movff	_Gyros_Update$2022+2,___fladd@f2+2
  1462  0007C4  C127  F06B         	movff	_Gyros_Update$2022+3,___fladd@f2+3
  1463  0007C8  C128  F064         	movff	_Gyros_Update$2023,___fladd@f1
  1464  0007CC  C129  F065         	movff	_Gyros_Update$2023+1,___fladd@f1+1
  1465  0007D0  C12A  F066         	movff	_Gyros_Update$2023+2,___fladd@f1+2
  1466  0007D4  C12B  F067         	movff	_Gyros_Update$2023+3,___fladd@f1+3
  1467  0007D8  EC28  F008         	call	___fladd	;wreg free
  1468  0007DC  C064  F12C         	movff	?___fladd,_Gyros_Update$2024
  1469  0007E0  C065  F12D         	movff	?___fladd+1,_Gyros_Update$2024+1
  1470  0007E4  C066  F12E         	movff	?___fladd+2,_Gyros_Update$2024+2
  1471  0007E8  C067  F12F         	movff	?___fladd+3,_Gyros_Update$2024+3
  1472                           
  1473                           ;gyros.c: 23: Gyros_Angle.phi = acos(a.z / (sqrt(pow(a.x, 2.0) + pow(a.y, 2.0) + pow(a.z
      +                          , 2.0))));
  1474  0007EC  C140  F07E         	movff	Gyros_Update@a+8,___fldiv@f1
  1475  0007F0  C141  F07F         	movff	Gyros_Update@a+9,___fldiv@f1+1
  1476  0007F4  C142  F080         	movff	Gyros_Update@a+10,___fldiv@f1+2
  1477  0007F8  C143  F081         	movff	Gyros_Update@a+11,___fldiv@f1+3
  1478  0007FC  C12C  F0B6         	movff	_Gyros_Update$2024,sqrt@y
  1479  000800  C12D  F0B7         	movff	_Gyros_Update$2024+1,sqrt@y+1
  1480  000804  C12E  F0B8         	movff	_Gyros_Update$2024+2,sqrt@y+2
  1481  000808  C12F  F0B9         	movff	_Gyros_Update$2024+3,sqrt@y+3
  1482  00080C  EC83  F00A         	call	_sqrt	;wreg free
  1483  000810  C0B6  F082         	movff	?_sqrt,___fldiv@f2
  1484  000814  C0B7  F083         	movff	?_sqrt+1,___fldiv@f2+1
  1485  000818  C0B8  F084         	movff	?_sqrt+2,___fldiv@f2+2
  1486  00081C  C0B9  F085         	movff	?_sqrt+3,___fldiv@f2+3
  1487  000820  ECF3  F00E         	call	___fldiv	;wreg free
  1488  000824  C07E  F130         	movff	?___fldiv,_Gyros_Update$2025
  1489  000828  C07F  F131         	movff	?___fldiv+1,_Gyros_Update$2025+1
  1490  00082C  C080  F132         	movff	?___fldiv+2,_Gyros_Update$2025+2
  1491  000830  C081  F133         	movff	?___fldiv+3,_Gyros_Update$2025+3
  1492                           
  1493                           ;gyros.c: 23: Gyros_Angle.phi = acos(a.z / (sqrt(pow(a.x, 2.0) + pow(a.y, 2.0) + pow(a.z
      +                          , 2.0))));
  1494  000834  C130  F0D3         	movff	_Gyros_Update$2025,acos@x
  1495  000838  C131  F0D4         	movff	_Gyros_Update$2025+1,acos@x+1
  1496  00083C  C132  F0D5         	movff	_Gyros_Update$2025+2,acos@x+2
  1497  000840  C133  F0D6         	movff	_Gyros_Update$2025+3,acos@x+3
  1498  000844  EC92  F014         	call	_acos	;wreg free
  1499  000848  C0D3  F154         	movff	?_acos,gyros@Gyros_Angle+4
  1500  00084C  C0D4  F155         	movff	?_acos+1,gyros@Gyros_Angle+5
  1501  000850  C0D5  F156         	movff	?_acos+2,gyros@Gyros_Angle+6
  1502  000854  C0D6  F157         	movff	?_acos+3,gyros@Gyros_Angle+7
  1503                           
  1504                           ;gyros.c: 25: Gyros_Vel.x += (a.x + Gyros_LastAccel.x) * dt / 2.0;
  1505  000858  0E00               	movlw	0
  1506  00085A  0100               	movlb	0	; () banked
  1507  00085C  6F82               	movwf	___fldiv@f2& (0+255),b
  1508  00085E  0E00               	movlw	0
  1509  000860  6F83               	movwf	(___fldiv@f2+1)& (0+255),b
  1510  000862  0E00               	movlw	0
  1511  000864  6F84               	movwf	(___fldiv@f2+2)& (0+255),b
  1512  000866  0E40               	movlw	64
  1513  000868  6F85               	movwf	(___fldiv@f2+3)& (0+255),b
  1514  00086A  C0DB  F073         	movff	Gyros_Update@dt,___flmul@f2
  1515  00086E  C0DC  F074         	movff	Gyros_Update@dt+1,___flmul@f2+1
  1516  000872  C0DD  F075         	movff	Gyros_Update@dt+2,___flmul@f2+2
  1517  000876  C0DE  F076         	movff	Gyros_Update@dt+3,___flmul@f2+3
  1518  00087A  C0E0  F068         	movff	gyros@Gyros_LastAccel,___fladd@f2
  1519  00087E  C0E1  F069         	movff	gyros@Gyros_LastAccel+1,___fladd@f2+1
  1520  000882  C0E2  F06A         	movff	gyros@Gyros_LastAccel+2,___fladd@f2+2
  1521  000886  C0E3  F06B         	movff	gyros@Gyros_LastAccel+3,___fladd@f2+3
  1522  00088A  C138  F064         	movff	Gyros_Update@a,___fladd@f1
  1523  00088E  C139  F065         	movff	Gyros_Update@a+1,___fladd@f1+1
  1524  000892  C13A  F066         	movff	Gyros_Update@a+2,___fladd@f1+2
  1525  000896  C13B  F067         	movff	Gyros_Update@a+3,___fladd@f1+3
  1526  00089A  EC28  F008         	call	___fladd	;wreg free
  1527  00089E  C064  F06F         	movff	?___fladd,___flmul@f1
  1528  0008A2  C065  F070         	movff	?___fladd+1,___flmul@f1+1
  1529  0008A6  C066  F071         	movff	?___fladd+2,___flmul@f1+2
  1530  0008AA  C067  F072         	movff	?___fladd+3,___flmul@f1+3
  1531  0008AE  EC41  F00E         	call	___flmul	;wreg free
  1532  0008B2  C06F  F07E         	movff	?___flmul,___fldiv@f1
  1533  0008B6  C070  F07F         	movff	?___flmul+1,___fldiv@f1+1
  1534  0008BA  C071  F080         	movff	?___flmul+2,___fldiv@f1+2
  1535  0008BE  C072  F081         	movff	?___flmul+3,___fldiv@f1+3
  1536  0008C2  ECF3  F00E         	call	___fldiv	;wreg free
  1537  0008C6  C07E  F134         	movff	?___fldiv,_Gyros_Update$2026
  1538  0008CA  C07F  F135         	movff	?___fldiv+1,_Gyros_Update$2026+1
  1539  0008CE  C080  F136         	movff	?___fldiv+2,_Gyros_Update$2026+2
  1540  0008D2  C081  F137         	movff	?___fldiv+3,_Gyros_Update$2026+3
  1541                           
  1542                           ;gyros.c: 25: Gyros_Vel.x += (a.x + Gyros_LastAccel.x) * dt / 2.0;
  1543  0008D6  C0EC  F064         	movff	gyros@Gyros_Vel,___fladd@f1
  1544  0008DA  C0ED  F065         	movff	gyros@Gyros_Vel+1,___fladd@f1+1
  1545  0008DE  C0EE  F066         	movff	gyros@Gyros_Vel+2,___fladd@f1+2
  1546  0008E2  C0EF  F067         	movff	gyros@Gyros_Vel+3,___fladd@f1+3
  1547  0008E6  C134  F068         	movff	_Gyros_Update$2026,___fladd@f2
  1548  0008EA  C135  F069         	movff	_Gyros_Update$2026+1,___fladd@f2+1
  1549  0008EE  C136  F06A         	movff	_Gyros_Update$2026+2,___fladd@f2+2
  1550  0008F2  C137  F06B         	movff	_Gyros_Update$2026+3,___fladd@f2+3
  1551  0008F6  EC28  F008         	call	___fladd	;wreg free
  1552  0008FA  C064  F0EC         	movff	?___fladd,gyros@Gyros_Vel
  1553  0008FE  C065  F0ED         	movff	?___fladd+1,gyros@Gyros_Vel+1
  1554  000902  C066  F0EE         	movff	?___fladd+2,gyros@Gyros_Vel+2
  1555  000906  C067  F0EF         	movff	?___fladd+3,gyros@Gyros_Vel+3
  1556                           
  1557                           ;gyros.c: 26: Gyros_Vel.y += (a.y + Gyros_LastAccel.y) * dt / 2.0;
  1558  00090A  0E00               	movlw	0
  1559  00090C  0100               	movlb	0	; () banked
  1560  00090E  6F82               	movwf	___fldiv@f2& (0+255),b
  1561  000910  0E00               	movlw	0
  1562  000912  6F83               	movwf	(___fldiv@f2+1)& (0+255),b
  1563  000914  0E00               	movlw	0
  1564  000916  6F84               	movwf	(___fldiv@f2+2)& (0+255),b
  1565  000918  0E40               	movlw	64
  1566  00091A  6F85               	movwf	(___fldiv@f2+3)& (0+255),b
  1567  00091C  C0DB  F073         	movff	Gyros_Update@dt,___flmul@f2
  1568  000920  C0DC  F074         	movff	Gyros_Update@dt+1,___flmul@f2+1
  1569  000924  C0DD  F075         	movff	Gyros_Update@dt+2,___flmul@f2+2
  1570  000928  C0DE  F076         	movff	Gyros_Update@dt+3,___flmul@f2+3
  1571  00092C  C0E4  F068         	movff	gyros@Gyros_LastAccel+4,___fladd@f2
  1572  000930  C0E5  F069         	movff	gyros@Gyros_LastAccel+5,___fladd@f2+1
  1573  000934  C0E6  F06A         	movff	gyros@Gyros_LastAccel+6,___fladd@f2+2
  1574  000938  C0E7  F06B         	movff	gyros@Gyros_LastAccel+7,___fladd@f2+3
  1575  00093C  C13C  F064         	movff	Gyros_Update@a+4,___fladd@f1
  1576  000940  C13D  F065         	movff	Gyros_Update@a+5,___fladd@f1+1
  1577  000944  C13E  F066         	movff	Gyros_Update@a+6,___fladd@f1+2
  1578  000948  C13F  F067         	movff	Gyros_Update@a+7,___fladd@f1+3
  1579  00094C  EC28  F008         	call	___fladd	;wreg free
  1580  000950  C064  F06F         	movff	?___fladd,___flmul@f1
  1581  000954  C065  F070         	movff	?___fladd+1,___flmul@f1+1
  1582  000958  C066  F071         	movff	?___fladd+2,___flmul@f1+2
  1583  00095C  C067  F072         	movff	?___fladd+3,___flmul@f1+3
  1584  000960  EC41  F00E         	call	___flmul	;wreg free
  1585  000964  C06F  F07E         	movff	?___flmul,___fldiv@f1
  1586  000968  C070  F07F         	movff	?___flmul+1,___fldiv@f1+1
  1587  00096C  C071  F080         	movff	?___flmul+2,___fldiv@f1+2
  1588  000970  C072  F081         	movff	?___flmul+3,___fldiv@f1+3
  1589  000974  ECF3  F00E         	call	___fldiv	;wreg free
  1590  000978  C07E  F134         	movff	?___fldiv,_Gyros_Update$2026
  1591  00097C  C07F  F135         	movff	?___fldiv+1,_Gyros_Update$2026+1
  1592  000980  C080  F136         	movff	?___fldiv+2,_Gyros_Update$2026+2
  1593  000984  C081  F137         	movff	?___fldiv+3,_Gyros_Update$2026+3
  1594                           
  1595                           ;gyros.c: 26: Gyros_Vel.y += (a.y + Gyros_LastAccel.y) * dt / 2.0;
  1596  000988  C0F0  F064         	movff	gyros@Gyros_Vel+4,___fladd@f1
  1597  00098C  C0F1  F065         	movff	gyros@Gyros_Vel+5,___fladd@f1+1
  1598  000990  C0F2  F066         	movff	gyros@Gyros_Vel+6,___fladd@f1+2
  1599  000994  C0F3  F067         	movff	gyros@Gyros_Vel+7,___fladd@f1+3
  1600  000998  C134  F068         	movff	_Gyros_Update$2026,___fladd@f2
  1601  00099C  C135  F069         	movff	_Gyros_Update$2026+1,___fladd@f2+1
  1602  0009A0  C136  F06A         	movff	_Gyros_Update$2026+2,___fladd@f2+2
  1603  0009A4  C137  F06B         	movff	_Gyros_Update$2026+3,___fladd@f2+3
  1604  0009A8  EC28  F008         	call	___fladd	;wreg free
  1605  0009AC  C064  F0F0         	movff	?___fladd,gyros@Gyros_Vel+4
  1606  0009B0  C065  F0F1         	movff	?___fladd+1,gyros@Gyros_Vel+5
  1607  0009B4  C066  F0F2         	movff	?___fladd+2,gyros@Gyros_Vel+6
  1608  0009B8  C067  F0F3         	movff	?___fladd+3,gyros@Gyros_Vel+7
  1609                           
  1610                           ;gyros.c: 27: Gyros_Vel.z += (a.z + Gyros_LastAccel.z) * dt / 2.0;
  1611  0009BC  0E00               	movlw	0
  1612  0009BE  0100               	movlb	0	; () banked
  1613  0009C0  6F82               	movwf	___fldiv@f2& (0+255),b
  1614  0009C2  0E00               	movlw	0
  1615  0009C4  6F83               	movwf	(___fldiv@f2+1)& (0+255),b
  1616  0009C6  0E00               	movlw	0
  1617  0009C8  6F84               	movwf	(___fldiv@f2+2)& (0+255),b
  1618  0009CA  0E40               	movlw	64
  1619  0009CC  6F85               	movwf	(___fldiv@f2+3)& (0+255),b
  1620  0009CE  C0DB  F073         	movff	Gyros_Update@dt,___flmul@f2
  1621  0009D2  C0DC  F074         	movff	Gyros_Update@dt+1,___flmul@f2+1
  1622  0009D6  C0DD  F075         	movff	Gyros_Update@dt+2,___flmul@f2+2
  1623  0009DA  C0DE  F076         	movff	Gyros_Update@dt+3,___flmul@f2+3
  1624  0009DE  C0E8  F068         	movff	gyros@Gyros_LastAccel+8,___fladd@f2
  1625  0009E2  C0E9  F069         	movff	gyros@Gyros_LastAccel+9,___fladd@f2+1
  1626  0009E6  C0EA  F06A         	movff	gyros@Gyros_LastAccel+10,___fladd@f2+2
  1627  0009EA  C0EB  F06B         	movff	gyros@Gyros_LastAccel+11,___fladd@f2+3
  1628  0009EE  C140  F064         	movff	Gyros_Update@a+8,___fladd@f1
  1629  0009F2  C141  F065         	movff	Gyros_Update@a+9,___fladd@f1+1
  1630  0009F6  C142  F066         	movff	Gyros_Update@a+10,___fladd@f1+2
  1631  0009FA  C143  F067         	movff	Gyros_Update@a+11,___fladd@f1+3
  1632  0009FE  EC28  F008         	call	___fladd	;wreg free
  1633  000A02  C064  F06F         	movff	?___fladd,___flmul@f1
  1634  000A06  C065  F070         	movff	?___fladd+1,___flmul@f1+1
  1635  000A0A  C066  F071         	movff	?___fladd+2,___flmul@f1+2
  1636  000A0E  C067  F072         	movff	?___fladd+3,___flmul@f1+3
  1637  000A12  EC41  F00E         	call	___flmul	;wreg free
  1638  000A16  C06F  F07E         	movff	?___flmul,___fldiv@f1
  1639  000A1A  C070  F07F         	movff	?___flmul+1,___fldiv@f1+1
  1640  000A1E  C071  F080         	movff	?___flmul+2,___fldiv@f1+2
  1641  000A22  C072  F081         	movff	?___flmul+3,___fldiv@f1+3
  1642  000A26  ECF3  F00E         	call	___fldiv	;wreg free
  1643  000A2A  C07E  F134         	movff	?___fldiv,_Gyros_Update$2026
  1644  000A2E  C07F  F135         	movff	?___fldiv+1,_Gyros_Update$2026+1
  1645  000A32  C080  F136         	movff	?___fldiv+2,_Gyros_Update$2026+2
  1646  000A36  C081  F137         	movff	?___fldiv+3,_Gyros_Update$2026+3
  1647                           
  1648                           ;gyros.c: 27: Gyros_Vel.z += (a.z + Gyros_LastAccel.z) * dt / 2.0;
  1649  000A3A  C0F4  F064         	movff	gyros@Gyros_Vel+8,___fladd@f1
  1650  000A3E  C0F5  F065         	movff	gyros@Gyros_Vel+9,___fladd@f1+1
  1651  000A42  C0F6  F066         	movff	gyros@Gyros_Vel+10,___fladd@f1+2
  1652  000A46  C0F7  F067         	movff	gyros@Gyros_Vel+11,___fladd@f1+3
  1653  000A4A  C134  F068         	movff	_Gyros_Update$2026,___fladd@f2
  1654  000A4E  C135  F069         	movff	_Gyros_Update$2026+1,___fladd@f2+1
  1655  000A52  C136  F06A         	movff	_Gyros_Update$2026+2,___fladd@f2+2
  1656  000A56  C137  F06B         	movff	_Gyros_Update$2026+3,___fladd@f2+3
  1657  000A5A  EC28  F008         	call	___fladd	;wreg free
  1658  000A5E  C064  F0F4         	movff	?___fladd,gyros@Gyros_Vel+8
  1659  000A62  C065  F0F5         	movff	?___fladd+1,gyros@Gyros_Vel+9
  1660  000A66  C066  F0F6         	movff	?___fladd+2,gyros@Gyros_Vel+10
  1661  000A6A  C067  F0F7         	movff	?___fladd+3,gyros@Gyros_Vel+11
  1662                           
  1663                           ;gyros.c: 29: Gyros_LastAccel.x = a.x;
  1664  000A6E  C138  F0E0         	movff	Gyros_Update@a,gyros@Gyros_LastAccel
  1665  000A72  C139  F0E1         	movff	Gyros_Update@a+1,gyros@Gyros_LastAccel+1
  1666  000A76  C13A  F0E2         	movff	Gyros_Update@a+2,gyros@Gyros_LastAccel+2
  1667  000A7A  C13B  F0E3         	movff	Gyros_Update@a+3,gyros@Gyros_LastAccel+3
  1668                           
  1669                           ;gyros.c: 30: Gyros_LastAccel.y = a.y;
  1670  000A7E  C13C  F0E4         	movff	Gyros_Update@a+4,gyros@Gyros_LastAccel+4
  1671  000A82  C13D  F0E5         	movff	Gyros_Update@a+5,gyros@Gyros_LastAccel+5
  1672  000A86  C13E  F0E6         	movff	Gyros_Update@a+6,gyros@Gyros_LastAccel+6
  1673  000A8A  C13F  F0E7         	movff	Gyros_Update@a+7,gyros@Gyros_LastAccel+7
  1674                           
  1675                           ;gyros.c: 31: Gyros_LastAccel.z = a.z;
  1676  000A8E  C140  F0E8         	movff	Gyros_Update@a+8,gyros@Gyros_LastAccel+8
  1677  000A92  C141  F0E9         	movff	Gyros_Update@a+9,gyros@Gyros_LastAccel+9
  1678  000A96  C142  F0EA         	movff	Gyros_Update@a+10,gyros@Gyros_LastAccel+10
  1679  000A9A  C143  F0EB         	movff	Gyros_Update@a+11,gyros@Gyros_LastAccel+11
  1680  000A9E  0012               	return		;funcret
  1681  000AA0                     __end_of_Gyros_Update:
  1682                           	opt stack 0
  1683                           tblptru	equ	0xFF8
  1684                           tblptrh	equ	0xFF7
  1685                           postinc0	equ	0xFEE
  1686                           wreg	equ	0xFE8
  1687                           
  1688 ;; *************** function _pow *****************
  1689 ;; Defined at:
  1690 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\pow.c"
  1691 ;; Parameters:    Size  Location     Type
  1692 ;;  x               4   65[BANK0 ] struct .
  1693 ;;  y               4   69[BANK0 ] struct .
  1694 ;; Auto vars:     Size  Location     Type
  1695 ;;  yi              4   82[BANK0 ] unsigned long 
  1696 ;;  sign            1   81[BANK0 ] unsigned char 
  1697 ;; Return value:  Size  Location     Type
  1698 ;;                  4   65[BANK0 ] unsigned char 
  1699 ;; Registers used:
  1700 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1701 ;; Tracked objects:
  1702 ;;		On entry : 0/0
  1703 ;;		On exit  : 0/0
  1704 ;;		Unchanged: 0/0
  1705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1706 ;;      Params:         0       8       0       0       0       0       0
  1707 ;;      Locals:         0      13       0       0       0       0       0
  1708 ;;      Temps:          0       0       0       0       0       0       0
  1709 ;;      Totals:         0      21       0       0       0       0       0
  1710 ;;Total ram usage:       21 bytes
  1711 ;; Hardware stack levels used:    1
  1712 ;; Hardware stack levels required when called:    6
  1713 ;; This function calls:
  1714 ;;		___flge
  1715 ;;		___flmul
  1716 ;;		___flneg
  1717 ;;		___fltol
  1718 ;;		___lltofl
  1719 ;;		_exp
  1720 ;;		_log
  1721 ;; This function is called by:
  1722 ;;		_Gyros_Update
  1723 ;; This function uses a non-reentrant model
  1724 ;;
  1725                           
  1726                           	psect	text7
  1727  00172E                     __ptext7:
  1728                           	opt stack 0
  1729  00172E                     _pow:
  1730                           	opt stack 23
  1731                           
  1732                           ;incstack = 0
  1733  00172E  0E00               	movlw	0
  1734  001730  0100               	movlb	0	; () banked
  1735  001732  6FB1               	movwf	pow@sign& (0+255),b
  1736                           
  1737                           ; BSR set to: 0
  1738  001734  0100               	movlb	0	; () banked
  1739  001736  51A1               	movf	pow@x& (0+255),w,b
  1740  001738  0100               	movlb	0	; () banked
  1741  00173A  11A2               	iorwf	(pow@x+1)& (0+255),w,b
  1742  00173C  0100               	movlb	0	; () banked
  1743  00173E  11A3               	iorwf	(pow@x+2)& (0+255),w,b
  1744  001740  0100               	movlb	0	; () banked
  1745  001742  11A4               	iorwf	(pow@x+3)& (0+255),w,b
  1746  001744  A4D8               	btfss	status,2,c
  1747  001746  D025               	goto	l4047
  1748                           
  1749                           ; BSR set to: 0
  1750  001748  0E00               	movlw	0
  1751  00174A  0100               	movlb	0	; () banked
  1752  00174C  6F60               	movwf	___flge@ff1& (0+255),b
  1753  00174E  0E00               	movlw	0
  1754  001750  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  1755  001752  0E00               	movlw	0
  1756  001754  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  1757  001756  0E00               	movlw	0
  1758  001758  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  1759  00175A  C0A5  F064         	movff	pow@y,___flge@ff2
  1760  00175E  C0A6  F065         	movff	pow@y+1,___flge@ff2+1
  1761  001762  C0A7  F066         	movff	pow@y+2,___flge@ff2+2
  1762  001766  C0A8  F067         	movff	pow@y+3,___flge@ff2+3
  1763  00176A  ECB9  F012         	call	___flge	;wreg free
  1764  00176E  0100               	movlb	0	; () banked
  1765  001770  A0D8               	btfss	status,0,c
  1766  001772  D005               	goto	l1031
  1767                           
  1768                           ; BSR set to: 0
  1769  001774  0E00               	movlw	0
  1770  001776  0100               	movlb	0	; () banked
  1771  001778  6FF9               	movwf	(_errno+1)& (0+255),b
  1772  00177A  0E21               	movlw	33
  1773  00177C  6FF8               	movwf	_errno& (0+255),b
  1774  00177E                     l1031:
  1775                           
  1776                           ; BSR set to: 0
  1777  00177E  0E00               	movlw	0
  1778  001780  0100               	movlb	0	; () banked
  1779  001782  6FA1               	movwf	?_pow& (0+255),b
  1780  001784  0E00               	movlw	0
  1781  001786  6FA2               	movwf	(?_pow+1)& (0+255),b
  1782  001788  0E00               	movlw	0
  1783  00178A  6FA3               	movwf	(?_pow+2)& (0+255),b
  1784  00178C  0E00               	movlw	0
  1785  00178E  6FA4               	movwf	(?_pow+3)& (0+255),b
  1786                           
  1787                           ; BSR set to: 0
  1788  001790  0012               	return	
  1789  001792                     l4047:
  1790                           
  1791                           ; BSR set to: 0
  1792  001792  0100               	movlb	0	; () banked
  1793  001794  51A5               	movf	pow@y& (0+255),w,b
  1794  001796  0100               	movlb	0	; () banked
  1795  001798  11A6               	iorwf	(pow@y+1)& (0+255),w,b
  1796  00179A  0100               	movlb	0	; () banked
  1797  00179C  11A7               	iorwf	(pow@y+2)& (0+255),w,b
  1798  00179E  0100               	movlb	0	; () banked
  1799  0017A0  11A8               	iorwf	(pow@y+3)& (0+255),w,b
  1800  0017A2  A4D8               	btfss	status,2,c
  1801  0017A4  D00A               	goto	l4053
  1802                           
  1803                           ; BSR set to: 0
  1804  0017A6  0E00               	movlw	0
  1805  0017A8  0100               	movlb	0	; () banked
  1806  0017AA  6FA1               	movwf	?_pow& (0+255),b
  1807  0017AC  0E00               	movlw	0
  1808  0017AE  6FA2               	movwf	(?_pow+1)& (0+255),b
  1809  0017B0  0E80               	movlw	128
  1810  0017B2  6FA3               	movwf	(?_pow+2)& (0+255),b
  1811  0017B4  0E3F               	movlw	63
  1812  0017B6  6FA4               	movwf	(?_pow+3)& (0+255),b
  1813                           
  1814                           ; BSR set to: 0
  1815  0017B8  0012               	return	
  1816  0017BA                     l4053:
  1817                           
  1818                           ; BSR set to: 0
  1819  0017BA  0100               	movlb	0	; () banked
  1820  0017BC  AFA4               	btfss	(pow@x+3)& (0+255),7,b
  1821  0017BE  D058               	goto	l4065
  1822                           
  1823                           ; BSR set to: 0
  1824  0017C0  C0A5  F020         	movff	pow@y,___fltol@f1
  1825  0017C4  C0A6  F021         	movff	pow@y+1,___fltol@f1+1
  1826  0017C8  C0A7  F022         	movff	pow@y+2,___fltol@f1+2
  1827  0017CC  C0A8  F023         	movff	pow@y+3,___fltol@f1+3
  1828  0017D0  EC44  F012         	call	___fltol	;wreg free
  1829  0017D4  C020  F0B2         	movff	?___fltol,pow@yi
  1830  0017D8  C021  F0B3         	movff	?___fltol+1,pow@yi+1
  1831  0017DC  C022  F0B4         	movff	?___fltol+2,pow@yi+2
  1832  0017E0  C023  F0B5         	movff	?___fltol+3,pow@yi+3
  1833  0017E4  C0B2  F060         	movff	pow@yi,___lltofl@c
  1834  0017E8  C0B3  F061         	movff	pow@yi+1,___lltofl@c+1
  1835  0017EC  C0B4  F062         	movff	pow@yi+2,___lltofl@c+2
  1836  0017F0  C0B5  F063         	movff	pow@yi+3,___lltofl@c+3
  1837  0017F4  ECA5  F016         	call	___lltofl	;wreg free
  1838  0017F8  0100               	movlb	0	; () banked
  1839  0017FA  51A5               	movf	pow@y& (0+255),w,b
  1840  0017FC  0100               	movlb	0	; () banked
  1841  0017FE  1960               	xorwf	?___lltofl& (0+255),w,b
  1842  001800  E110               	bnz	u5200
  1843  001802  0100               	movlb	0	; () banked
  1844  001804  51A6               	movf	(pow@y+1)& (0+255),w,b
  1845  001806  0100               	movlb	0	; () banked
  1846  001808  1961               	xorwf	(?___lltofl+1)& (0+255),w,b
  1847  00180A  E10B               	bnz	u5200
  1848  00180C  0100               	movlb	0	; () banked
  1849  00180E  51A7               	movf	(pow@y+2)& (0+255),w,b
  1850  001810  0100               	movlb	0	; () banked
  1851  001812  1962               	xorwf	(?___lltofl+2)& (0+255),w,b
  1852  001814  E106               	bnz	u5200
  1853  001816  0100               	movlb	0	; () banked
  1854  001818  51A8               	movf	(pow@y+3)& (0+255),w,b
  1855  00181A  0100               	movlb	0	; () banked
  1856  00181C  1963               	xorwf	(?___lltofl+3)& (0+255),w,b
  1857  00181E  B4D8               	btfsc	status,2,c
  1858  001820  D00F               	goto	l4061
  1859  001822                     u5200:
  1860                           
  1861                           ; BSR set to: 0
  1862  001822  0E00               	movlw	0
  1863  001824  0100               	movlb	0	; () banked
  1864  001826  6FF9               	movwf	(_errno+1)& (0+255),b
  1865  001828  0E21               	movlw	33
  1866  00182A  6FF8               	movwf	_errno& (0+255),b
  1867  00182C  0E00               	movlw	0
  1868  00182E  0100               	movlb	0	; () banked
  1869  001830  6FA1               	movwf	?_pow& (0+255),b
  1870  001832  0E00               	movlw	0
  1871  001834  6FA2               	movwf	(?_pow+1)& (0+255),b
  1872  001836  0E00               	movlw	0
  1873  001838  6FA3               	movwf	(?_pow+2)& (0+255),b
  1874  00183A  0E00               	movlw	0
  1875  00183C  6FA4               	movwf	(?_pow+3)& (0+255),b
  1876                           
  1877                           ; BSR set to: 0
  1878  00183E  0012               	return	
  1879  001840                     l4061:
  1880                           
  1881                           ; BSR set to: 0
  1882  001840  0100               	movlb	0	; () banked
  1883  001842  51B2               	movf	pow@yi& (0+255),w,b
  1884  001844  0B01               	andlw	1
  1885  001846  0100               	movlb	0	; () banked
  1886  001848  6FB1               	movwf	pow@sign& (0+255),b
  1887                           
  1888                           ; BSR set to: 0
  1889  00184A  C0A1  F020         	movff	pow@x,___flneg@f1
  1890  00184E  C0A2  F021         	movff	pow@x+1,___flneg@f1+1
  1891  001852  C0A3  F022         	movff	pow@x+2,___flneg@f1+2
  1892  001856  C0A4  F023         	movff	pow@x+3,___flneg@f1+3
  1893  00185A  EC73  F016         	call	___flneg	;wreg free
  1894  00185E  C020  F0A1         	movff	?___flneg,pow@x
  1895  001862  C021  F0A2         	movff	?___flneg+1,pow@x+1
  1896  001866  C022  F0A3         	movff	?___flneg+2,pow@x+2
  1897  00186A  C023  F0A4         	movff	?___flneg+3,pow@x+3
  1898  00186E  D000               	goto	l4065
  1899  001870                     l4065:
  1900  001870  C0A1  F08E         	movff	pow@x,log@x
  1901  001874  C0A2  F08F         	movff	pow@x+1,log@x+1
  1902  001878  C0A3  F090         	movff	pow@x+2,log@x+2
  1903  00187C  C0A4  F091         	movff	pow@x+3,log@x+3
  1904  001880  EC84  F00D         	call	_log	;wreg free
  1905  001884  C08E  F0A9         	movff	?_log,_pow$2032
  1906  001888  C08F  F0AA         	movff	?_log+1,_pow$2032+1
  1907  00188C  C090  F0AB         	movff	?_log+2,_pow$2032+2
  1908  001890  C091  F0AC         	movff	?_log+3,_pow$2032+3
  1909  001894  C0A9  F06F         	movff	_pow$2032,___flmul@f1
  1910  001898  C0AA  F070         	movff	_pow$2032+1,___flmul@f1+1
  1911  00189C  C0AB  F071         	movff	_pow$2032+2,___flmul@f1+2
  1912  0018A0  C0AC  F072         	movff	_pow$2032+3,___flmul@f1+3
  1913  0018A4  C0A5  F073         	movff	pow@y,___flmul@f2
  1914  0018A8  C0A6  F074         	movff	pow@y+1,___flmul@f2+1
  1915  0018AC  C0A7  F075         	movff	pow@y+2,___flmul@f2+2
  1916  0018B0  C0A8  F076         	movff	pow@y+3,___flmul@f2+3
  1917  0018B4  EC41  F00E         	call	___flmul	;wreg free
  1918  0018B8  C06F  F0AD         	movff	?___flmul,_pow$2033
  1919  0018BC  C070  F0AE         	movff	?___flmul+1,_pow$2033+1
  1920  0018C0  C071  F0AF         	movff	?___flmul+2,_pow$2033+2
  1921  0018C4  C072  F0B0         	movff	?___flmul+3,_pow$2033+3
  1922  0018C8  C0AD  F096         	movff	_pow$2033,exp@x
  1923  0018CC  C0AE  F097         	movff	_pow$2033+1,exp@x+1
  1924  0018D0  C0AF  F098         	movff	_pow$2033+2,exp@x+2
  1925  0018D4  C0B0  F099         	movff	_pow$2033+3,exp@x+3
  1926  0018D8  ECE2  F006         	call	_exp	;wreg free
  1927  0018DC  C096  F0A1         	movff	?_exp,pow@x
  1928  0018E0  C097  F0A2         	movff	?_exp+1,pow@x+1
  1929  0018E4  C098  F0A3         	movff	?_exp+2,pow@x+2
  1930  0018E8  C099  F0A4         	movff	?_exp+3,pow@x+3
  1931  0018EC  0100               	movlb	0	; () banked
  1932  0018EE  51B1               	movf	pow@sign& (0+255),w,b
  1933  0018F0  0100               	movlb	0	; () banked
  1934  0018F2  B4D8               	btfsc	status,2,c
  1935  0018F4  D013               	goto	l1036
  1936                           
  1937                           ; BSR set to: 0
  1938  0018F6  C0A1  F020         	movff	pow@x,___flneg@f1
  1939  0018FA  C0A2  F021         	movff	pow@x+1,___flneg@f1+1
  1940  0018FE  C0A3  F022         	movff	pow@x+2,___flneg@f1+2
  1941  001902  C0A4  F023         	movff	pow@x+3,___flneg@f1+3
  1942  001906  EC73  F016         	call	___flneg	;wreg free
  1943  00190A  C020  F0A1         	movff	?___flneg,?_pow
  1944  00190E  C021  F0A2         	movff	?___flneg+1,?_pow+1
  1945  001912  C022  F0A3         	movff	?___flneg+2,?_pow+2
  1946  001916  C023  F0A4         	movff	?___flneg+3,?_pow+3
  1947  00191A  0012               	return	
  1948  00191C                     l1036:
  1949                           
  1950                           ; BSR set to: 0
  1951  00191C  C0A1  F0A1         	movff	pow@x,?_pow
  1952  001920  C0A2  F0A2         	movff	pow@x+1,?_pow+1
  1953  001924  C0A3  F0A3         	movff	pow@x+2,?_pow+2
  1954  001928  C0A4  F0A4         	movff	pow@x+3,?_pow+3
  1955  00192C  0012               	return		;funcret
  1956  00192E                     __end_of_pow:
  1957                           	opt stack 0
  1958                           tblptru	equ	0xFF8
  1959                           tblptrh	equ	0xFF7
  1960                           postinc0	equ	0xFEE
  1961                           wreg	equ	0xFE8
  1962                           status	equ	0xFD8
  1963                           
  1964 ;; *************** function _log *****************
  1965 ;; Defined at:
  1966 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  1967 ;; Parameters:    Size  Location     Type
  1968 ;;  x               4   46[BANK0 ] unsigned char 
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;  exponent        2   50[BANK0 ] int 
  1971 ;; Return value:  Size  Location     Type
  1972 ;;                  4   46[BANK0 ] int 
  1973 ;; Registers used:
  1974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1975 ;; Tracked objects:
  1976 ;;		On entry : 0/0
  1977 ;;		On exit  : 0/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1980 ;;      Params:         0       4       0       0       0       0       0
  1981 ;;      Locals:         0       2       0       0       0       0       0
  1982 ;;      Temps:          0       0       0       0       0       0       0
  1983 ;;      Totals:         0       6       0       0       0       0       0
  1984 ;;Total ram usage:        6 bytes
  1985 ;; Hardware stack levels used:    1
  1986 ;; Hardware stack levels required when called:    5
  1987 ;; This function calls:
  1988 ;;		___awtofl
  1989 ;;		___fladd
  1990 ;;		___flmul
  1991 ;;		_eval_poly
  1992 ;;		_frexp
  1993 ;; This function is called by:
  1994 ;;		_pow
  1995 ;; This function uses a non-reentrant model
  1996 ;;
  1997                           
  1998                           	psect	text8
  1999  001B08                     __ptext8:
  2000                           	opt stack 0
  2001  001B08                     _log:
  2002                           	opt stack 23
  2003                           
  2004                           ;incstack = 0
  2005  001B08  0100               	movlb	0	; () banked
  2006  001B0A  AF91               	btfss	(log@x+3)& (0+255),7,b
  2007  001B0C  D00F               	goto	l3937
  2008                           
  2009                           ; BSR set to: 0
  2010  001B0E  0E00               	movlw	0
  2011  001B10  0100               	movlb	0	; () banked
  2012  001B12  6FF9               	movwf	(_errno+1)& (0+255),b
  2013  001B14  0E21               	movlw	33
  2014  001B16  6FF8               	movwf	_errno& (0+255),b
  2015  001B18  0E00               	movlw	0
  2016  001B1A  0100               	movlb	0	; () banked
  2017  001B1C  6F8E               	movwf	?_log& (0+255),b
  2018  001B1E  0E00               	movlw	0
  2019  001B20  6F8F               	movwf	(?_log+1)& (0+255),b
  2020  001B22  0E00               	movlw	0
  2021  001B24  6F90               	movwf	(?_log+2)& (0+255),b
  2022  001B26  0E00               	movlw	0
  2023  001B28  6F91               	movwf	(?_log+3)& (0+255),b
  2024                           
  2025                           ; BSR set to: 0
  2026  001B2A  0012               	return	
  2027  001B2C                     l3937:
  2028                           
  2029                           ; BSR set to: 0
  2030  001B2C  0100               	movlb	0	; () banked
  2031  001B2E  518E               	movf	log@x& (0+255),w,b
  2032  001B30  0100               	movlb	0	; () banked
  2033  001B32  118F               	iorwf	(log@x+1)& (0+255),w,b
  2034  001B34  0100               	movlb	0	; () banked
  2035  001B36  1190               	iorwf	(log@x+2)& (0+255),w,b
  2036  001B38  0100               	movlb	0	; () banked
  2037  001B3A  1191               	iorwf	(log@x+3)& (0+255),w,b
  2038  001B3C  A4D8               	btfss	status,2,c
  2039  001B3E  D00F               	goto	l3943
  2040                           
  2041                           ; BSR set to: 0
  2042  001B40  0E00               	movlw	0
  2043  001B42  0100               	movlb	0	; () banked
  2044  001B44  6FF9               	movwf	(_errno+1)& (0+255),b
  2045  001B46  0E22               	movlw	34
  2046  001B48  6FF8               	movwf	_errno& (0+255),b
  2047  001B4A  0E00               	movlw	0
  2048  001B4C  0100               	movlb	0	; () banked
  2049  001B4E  6F8E               	movwf	?_log& (0+255),b
  2050  001B50  0E00               	movlw	0
  2051  001B52  6F8F               	movwf	(?_log+1)& (0+255),b
  2052  001B54  0E00               	movlw	0
  2053  001B56  6F90               	movwf	(?_log+2)& (0+255),b
  2054  001B58  0E00               	movlw	0
  2055  001B5A  6F91               	movwf	(?_log+3)& (0+255),b
  2056                           
  2057                           ; BSR set to: 0
  2058  001B5C  0012               	return	
  2059  001B5E                     l3943:
  2060                           
  2061                           ; BSR set to: 0
  2062  001B5E  0E00               	movlw	0
  2063  001B60  0100               	movlb	0	; () banked
  2064  001B62  6F73               	movwf	___flmul@f2& (0+255),b
  2065  001B64  0E00               	movlw	0
  2066  001B66  6F74               	movwf	(___flmul@f2+1)& (0+255),b
  2067  001B68  0E00               	movlw	0
  2068  001B6A  6F75               	movwf	(___flmul@f2+2)& (0+255),b
  2069  001B6C  0E40               	movlw	64
  2070  001B6E  6F76               	movwf	(___flmul@f2+3)& (0+255),b
  2071  001B70  0E92               	movlw	low log@exponent
  2072  001B72  6E24               	movwf	frexp@eptr,c
  2073  001B74  0E00               	movlw	high log@exponent
  2074  001B76  6E25               	movwf	frexp@eptr+1,c
  2075  001B78  C08E  F020         	movff	log@x,frexp@value
  2076  001B7C  C08F  F021         	movff	log@x+1,frexp@value+1
  2077  001B80  C090  F022         	movff	log@x+2,frexp@value+2
  2078  001B84  C091  F023         	movff	log@x+3,frexp@value+3
  2079  001B88  EC80  F013         	call	_frexp	;wreg free
  2080  001B8C  C020  F06F         	movff	?_frexp,___flmul@f1
  2081  001B90  C021  F070         	movff	?_frexp+1,___flmul@f1+1
  2082  001B94  C022  F071         	movff	?_frexp+2,___flmul@f1+2
  2083  001B98  C023  F072         	movff	?_frexp+3,___flmul@f1+3
  2084  001B9C  EC41  F00E         	call	___flmul	;wreg free
  2085  001BA0  C06F  F064         	movff	?___flmul,___fladd@f1
  2086  001BA4  C070  F065         	movff	?___flmul+1,___fladd@f1+1
  2087  001BA8  C071  F066         	movff	?___flmul+2,___fladd@f1+2
  2088  001BAC  C072  F067         	movff	?___flmul+3,___fladd@f1+3
  2089  001BB0  0E00               	movlw	0
  2090  001BB2  0100               	movlb	0	; () banked
  2091  001BB4  6F68               	movwf	___fladd@f2& (0+255),b
  2092  001BB6  0E00               	movlw	0
  2093  001BB8  6F69               	movwf	(___fladd@f2+1)& (0+255),b
  2094  001BBA  0E80               	movlw	128
  2095  001BBC  6F6A               	movwf	(___fladd@f2+2)& (0+255),b
  2096  001BBE  0EBF               	movlw	191
  2097  001BC0  6F6B               	movwf	(___fladd@f2+3)& (0+255),b
  2098  001BC2  EC28  F008         	call	___fladd	;wreg free
  2099  001BC6  C064  F08E         	movff	?___fladd,log@x
  2100  001BCA  C065  F08F         	movff	?___fladd+1,log@x+1
  2101  001BCE  C066  F090         	movff	?___fladd+2,log@x+2
  2102  001BD2  C067  F091         	movff	?___fladd+3,log@x+3
  2103  001BD6  0100               	movlb	0	; () banked
  2104  001BD8  0792               	decf	log@exponent& (0+255),f,b
  2105  001BDA  A0D8               	btfss	status,0,c
  2106  001BDC  0793               	decf	(log@exponent+1)& (0+255),f,b
  2107                           
  2108                           ; BSR set to: 0
  2109  001BDE  C08E  F07E         	movff	log@x,eval_poly@x
  2110  001BE2  C08F  F07F         	movff	log@x+1,eval_poly@x+1
  2111  001BE6  C090  F080         	movff	log@x+2,eval_poly@x+2
  2112  001BEA  C091  F081         	movff	log@x+3,eval_poly@x+3
  2113  001BEE  0E29               	movlw	low log@coeff
  2114  001BF0  0100               	movlb	0	; () banked
  2115  001BF2  6F82               	movwf	eval_poly@d& (0+255),b
  2116  001BF4  0E06               	movlw	high log@coeff
  2117  001BF6  0100               	movlb	0	; () banked
  2118  001BF8  6F83               	movwf	(eval_poly@d+1)& (0+255),b
  2119  001BFA  0E00               	movlw	0
  2120  001BFC  0100               	movlb	0	; () banked
  2121  001BFE  6F85               	movwf	(eval_poly@n+1)& (0+255),b
  2122  001C00  0E08               	movlw	8
  2123  001C02  6F84               	movwf	eval_poly@n& (0+255),b
  2124  001C04  ECB6  F010         	call	_eval_poly	;wreg free
  2125  001C08  C07E  F08E         	movff	?_eval_poly,log@x
  2126  001C0C  C07F  F08F         	movff	?_eval_poly+1,log@x+1
  2127  001C10  C080  F090         	movff	?_eval_poly+2,log@x+2
  2128  001C14  C081  F091         	movff	?_eval_poly+3,log@x+3
  2129  001C18  0E18               	movlw	24
  2130  001C1A  0100               	movlb	0	; () banked
  2131  001C1C  6F73               	movwf	___flmul@f2& (0+255),b
  2132  001C1E  0E72               	movlw	114
  2133  001C20  6F74               	movwf	(___flmul@f2+1)& (0+255),b
  2134  001C22  0E31               	movlw	49
  2135  001C24  6F75               	movwf	(___flmul@f2+2)& (0+255),b
  2136  001C26  0E3F               	movlw	63
  2137  001C28  6F76               	movwf	(___flmul@f2+3)& (0+255),b
  2138  001C2A  C092  F060         	movff	log@exponent,___awtofl@c
  2139  001C2E  C093  F061         	movff	log@exponent+1,___awtofl@c+1
  2140  001C32  ECD9  F015         	call	___awtofl	;wreg free
  2141  001C36  C060  F06F         	movff	?___awtofl,___flmul@f1
  2142  001C3A  C061  F070         	movff	?___awtofl+1,___flmul@f1+1
  2143  001C3E  C062  F071         	movff	?___awtofl+2,___flmul@f1+2
  2144  001C42  C063  F072         	movff	?___awtofl+3,___flmul@f1+3
  2145  001C46  EC41  F00E         	call	___flmul	;wreg free
  2146  001C4A  C06F  F064         	movff	?___flmul,___fladd@f1
  2147  001C4E  C070  F065         	movff	?___flmul+1,___fladd@f1+1
  2148  001C52  C071  F066         	movff	?___flmul+2,___fladd@f1+2
  2149  001C56  C072  F067         	movff	?___flmul+3,___fladd@f1+3
  2150  001C5A  C08E  F068         	movff	log@x,___fladd@f2
  2151  001C5E  C08F  F069         	movff	log@x+1,___fladd@f2+1
  2152  001C62  C090  F06A         	movff	log@x+2,___fladd@f2+2
  2153  001C66  C091  F06B         	movff	log@x+3,___fladd@f2+3
  2154  001C6A  EC28  F008         	call	___fladd	;wreg free
  2155  001C6E  C064  F08E         	movff	?___fladd,?_log
  2156  001C72  C065  F08F         	movff	?___fladd+1,?_log+1
  2157  001C76  C066  F090         	movff	?___fladd+2,?_log+2
  2158  001C7A  C067  F091         	movff	?___fladd+3,?_log+3
  2159  001C7E  0012               	return	
  2160  001C80  0012               	return		;funcret
  2161  001C82                     __end_of_log:
  2162                           	opt stack 0
  2163                           tblptru	equ	0xFF8
  2164                           tblptrh	equ	0xFF7
  2165                           postinc0	equ	0xFEE
  2166                           wreg	equ	0xFE8
  2167                           status	equ	0xFD8
  2168                           
  2169 ;; *************** function _exp *****************
  2170 ;; Defined at:
  2171 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\exp.c"
  2172 ;; Parameters:    Size  Location     Type
  2173 ;;  x               4   54[BANK0 ] int 
  2174 ;; Auto vars:     Size  Location     Type
  2175 ;;  exponent        2   62[BANK0 ] int 
  2176 ;;  sign            1   64[BANK0 ] unsigned char 
  2177 ;; Return value:  Size  Location     Type
  2178 ;;                  4   54[BANK0 ] unsigned char 
  2179 ;; Registers used:
  2180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2181 ;; Tracked objects:
  2182 ;;		On entry : 0/0
  2183 ;;		On exit  : 0/0
  2184 ;;		Unchanged: 0/0
  2185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2186 ;;      Params:         0       4       0       0       0       0       0
  2187 ;;      Locals:         0       7       0       0       0       0       0
  2188 ;;      Temps:          0       0       0       0       0       0       0
  2189 ;;      Totals:         0      11       0       0       0       0       0
  2190 ;;Total ram usage:       11 bytes
  2191 ;; Hardware stack levels used:    1
  2192 ;; Hardware stack levels required when called:    5
  2193 ;; This function calls:
  2194 ;;		___awtofl
  2195 ;;		___fldiv
  2196 ;;		___flge
  2197 ;;		___flmul
  2198 ;;		___flneg
  2199 ;;		___flsub
  2200 ;;		___fltol
  2201 ;;		_eval_poly
  2202 ;;		_floor
  2203 ;;		_ldexp
  2204 ;; This function is called by:
  2205 ;;		_pow
  2206 ;; This function uses a non-reentrant model
  2207 ;;
  2208                           
  2209                           	psect	text9
  2210  000DC4                     __ptext9:
  2211                           	opt stack 0
  2212  000DC4                     _exp:
  2213                           	opt stack 23
  2214                           
  2215                           ;incstack = 0
  2216  000DC4  0100               	movlb	0	; () banked
  2217  000DC6  5196               	movf	exp@x& (0+255),w,b
  2218  000DC8  0100               	movlb	0	; () banked
  2219  000DCA  1197               	iorwf	(exp@x+1)& (0+255),w,b
  2220  000DCC  0100               	movlb	0	; () banked
  2221  000DCE  1198               	iorwf	(exp@x+2)& (0+255),w,b
  2222  000DD0  0100               	movlb	0	; () banked
  2223  000DD2  1199               	iorwf	(exp@x+3)& (0+255),w,b
  2224  000DD4  A4D8               	btfss	status,2,c
  2225  000DD6  D00A               	goto	l3959
  2226                           
  2227                           ; BSR set to: 0
  2228  000DD8  0E00               	movlw	0
  2229  000DDA  0100               	movlb	0	; () banked
  2230  000DDC  6F96               	movwf	?_exp& (0+255),b
  2231  000DDE  0E00               	movlw	0
  2232  000DE0  6F97               	movwf	(?_exp+1)& (0+255),b
  2233  000DE2  0E80               	movlw	128
  2234  000DE4  6F98               	movwf	(?_exp+2)& (0+255),b
  2235  000DE6  0E3F               	movlw	63
  2236  000DE8  6F99               	movwf	(?_exp+3)& (0+255),b
  2237                           
  2238                           ; BSR set to: 0
  2239  000DEA  0012               	return	
  2240  000DEC                     l3959:
  2241                           
  2242                           ; BSR set to: 0
  2243  000DEC  0E18               	movlw	24
  2244  000DEE  0100               	movlb	0	; () banked
  2245  000DF0  6F60               	movwf	___flge@ff1& (0+255),b
  2246  000DF2  0E72               	movlw	114
  2247  000DF4  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  2248  000DF6  0E31               	movlw	49
  2249  000DF8  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  2250  000DFA  0E44               	movlw	68
  2251  000DFC  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  2252  000DFE  C096  F064         	movff	exp@x,___flge@ff2
  2253  000E02  C097  F065         	movff	exp@x+1,___flge@ff2+1
  2254  000E06  C098  F066         	movff	exp@x+2,___flge@ff2+2
  2255  000E0A  C099  F067         	movff	exp@x+3,___flge@ff2+3
  2256  000E0E  ECB9  F012         	call	___flge	;wreg free
  2257  000E12  0100               	movlb	0	; () banked
  2258  000E14  B0D8               	btfsc	status,0,c
  2259  000E16  D00F               	goto	l3965
  2260                           
  2261                           ; BSR set to: 0
  2262  000E18  0E00               	movlw	0
  2263  000E1A  0100               	movlb	0	; () banked
  2264  000E1C  6FF9               	movwf	(_errno+1)& (0+255),b
  2265  000E1E  0E22               	movlw	34
  2266  000E20  6FF8               	movwf	_errno& (0+255),b
  2267  000E22  0EFF               	movlw	255
  2268  000E24  0100               	movlb	0	; () banked
  2269  000E26  6F96               	movwf	?_exp& (0+255),b
  2270  000E28  0EFF               	movlw	255
  2271  000E2A  6F97               	movwf	(?_exp+1)& (0+255),b
  2272  000E2C  0E7F               	movlw	127
  2273  000E2E  6F98               	movwf	(?_exp+2)& (0+255),b
  2274  000E30  0E7F               	movlw	127
  2275  000E32  6F99               	movwf	(?_exp+3)& (0+255),b
  2276                           
  2277                           ; BSR set to: 0
  2278  000E34  0012               	return	
  2279  000E36                     l3965:
  2280                           
  2281                           ; BSR set to: 0
  2282  000E36  C096  F060         	movff	exp@x,___flge@ff1
  2283  000E3A  C097  F061         	movff	exp@x+1,___flge@ff1+1
  2284  000E3E  C098  F062         	movff	exp@x+2,___flge@ff1+2
  2285  000E42  C099  F063         	movff	exp@x+3,___flge@ff1+3
  2286  000E46  0E87               	movlw	135
  2287  000E48  0100               	movlb	0	; () banked
  2288  000E4A  6F64               	movwf	___flge@ff2& (0+255),b
  2289  000E4C  0E48               	movlw	72
  2290  000E4E  6F65               	movwf	(___flge@ff2+1)& (0+255),b
  2291  000E50  0E3A               	movlw	58
  2292  000E52  6F66               	movwf	(___flge@ff2+2)& (0+255),b
  2293  000E54  0EC4               	movlw	196
  2294  000E56  6F67               	movwf	(___flge@ff2+3)& (0+255),b
  2295  000E58  ECB9  F012         	call	___flge	;wreg free
  2296  000E5C  0100               	movlb	0	; () banked
  2297  000E5E  B0D8               	btfsc	status,0,c
  2298  000E60  D00F               	goto	l3971
  2299                           
  2300                           ; BSR set to: 0
  2301  000E62  0E00               	movlw	0
  2302  000E64  0100               	movlb	0	; () banked
  2303  000E66  6FF9               	movwf	(_errno+1)& (0+255),b
  2304  000E68  0E22               	movlw	34
  2305  000E6A  6FF8               	movwf	_errno& (0+255),b
  2306  000E6C  0E00               	movlw	0
  2307  000E6E  0100               	movlb	0	; () banked
  2308  000E70  6F96               	movwf	?_exp& (0+255),b
  2309  000E72  0E00               	movlw	0
  2310  000E74  6F97               	movwf	(?_exp+1)& (0+255),b
  2311  000E76  0E00               	movlw	0
  2312  000E78  6F98               	movwf	(?_exp+2)& (0+255),b
  2313  000E7A  0E00               	movlw	0
  2314  000E7C  6F99               	movwf	(?_exp+3)& (0+255),b
  2315                           
  2316                           ; BSR set to: 0
  2317  000E7E  0012               	return	
  2318  000E80                     l3971:
  2319                           
  2320                           ; BSR set to: 0
  2321  000E80  0100               	movlb	0	; () banked
  2322  000E82  AF99               	btfss	(exp@x+3)& (0+255),7,b
  2323  000E84  D002               	goto	u5070
  2324  000E86  0E01               	movlw	1
  2325  000E88  D001               	goto	u5080
  2326  000E8A                     u5070:
  2327  000E8A  0E00               	movlw	0
  2328  000E8C                     u5080:
  2329  000E8C  0100               	movlb	0	; () banked
  2330  000E8E  6FA0               	movwf	exp@sign& (0+255),b
  2331                           
  2332                           ; BSR set to: 0
  2333  000E90  0100               	movlb	0	; () banked
  2334  000E92  51A0               	movf	exp@sign& (0+255),w,b
  2335  000E94  0100               	movlb	0	; () banked
  2336  000E96  B4D8               	btfsc	status,2,c
  2337  000E98  D012               	goto	l1062
  2338                           
  2339                           ; BSR set to: 0
  2340  000E9A  C096  F020         	movff	exp@x,___flneg@f1
  2341  000E9E  C097  F021         	movff	exp@x+1,___flneg@f1+1
  2342  000EA2  C098  F022         	movff	exp@x+2,___flneg@f1+2
  2343  000EA6  C099  F023         	movff	exp@x+3,___flneg@f1+3
  2344  000EAA  EC73  F016         	call	___flneg	;wreg free
  2345  000EAE  C020  F096         	movff	?___flneg,exp@x
  2346  000EB2  C021  F097         	movff	?___flneg+1,exp@x+1
  2347  000EB6  C022  F098         	movff	?___flneg+2,exp@x+2
  2348  000EBA  C023  F099         	movff	?___flneg+3,exp@x+3
  2349  000EBE                     l1062:
  2350  000EBE  C096  F06F         	movff	exp@x,___flmul@f1
  2351  000EC2  C097  F070         	movff	exp@x+1,___flmul@f1+1
  2352  000EC6  C098  F071         	movff	exp@x+2,___flmul@f1+2
  2353  000ECA  C099  F072         	movff	exp@x+3,___flmul@f1+3
  2354  000ECE  0E3B               	movlw	59
  2355  000ED0  0100               	movlb	0	; () banked
  2356  000ED2  6F73               	movwf	___flmul@f2& (0+255),b
  2357  000ED4  0EAA               	movlw	170
  2358  000ED6  6F74               	movwf	(___flmul@f2+1)& (0+255),b
  2359  000ED8  0EB8               	movlw	184
  2360  000EDA  6F75               	movwf	(___flmul@f2+2)& (0+255),b
  2361  000EDC  0E3F               	movlw	63
  2362  000EDE  6F76               	movwf	(___flmul@f2+3)& (0+255),b
  2363  000EE0  EC41  F00E         	call	___flmul	;wreg free
  2364  000EE4  C06F  F096         	movff	?___flmul,exp@x
  2365  000EE8  C070  F097         	movff	?___flmul+1,exp@x+1
  2366  000EEC  C071  F098         	movff	?___flmul+2,exp@x+2
  2367  000EF0  C072  F099         	movff	?___flmul+3,exp@x+3
  2368  000EF4  C096  F06F         	movff	exp@x,floor@x
  2369  000EF8  C097  F070         	movff	exp@x+1,floor@x+1
  2370  000EFC  C098  F071         	movff	exp@x+2,floor@x+2
  2371  000F00  C099  F072         	movff	exp@x+3,floor@x+3
  2372  000F04  EC27  F010         	call	_floor	;wreg free
  2373  000F08  C06F  F09A         	movff	?_floor,_exp$2034
  2374  000F0C  C070  F09B         	movff	?_floor+1,_exp$2034+1
  2375  000F10  C071  F09C         	movff	?_floor+2,_exp$2034+2
  2376  000F14  C072  F09D         	movff	?_floor+3,_exp$2034+3
  2377  000F18  C09A  F020         	movff	_exp$2034,___fltol@f1
  2378  000F1C  C09B  F021         	movff	_exp$2034+1,___fltol@f1+1
  2379  000F20  C09C  F022         	movff	_exp$2034+2,___fltol@f1+2
  2380  000F24  C09D  F023         	movff	_exp$2034+3,___fltol@f1+3
  2381  000F28  EC44  F012         	call	___fltol	;wreg free
  2382  000F2C  C020  F09E         	movff	?___fltol,exp@exponent
  2383  000F30  C021  F09F         	movff	?___fltol+1,exp@exponent+1
  2384  000F34  C096  F06F         	movff	exp@x,___flsub@f1
  2385  000F38  C097  F070         	movff	exp@x+1,___flsub@f1+1
  2386  000F3C  C098  F071         	movff	exp@x+2,___flsub@f1+2
  2387  000F40  C099  F072         	movff	exp@x+3,___flsub@f1+3
  2388  000F44  C09E  F060         	movff	exp@exponent,___awtofl@c
  2389  000F48  C09F  F061         	movff	exp@exponent+1,___awtofl@c+1
  2390  000F4C  ECD9  F015         	call	___awtofl	;wreg free
  2391  000F50  C060  F073         	movff	?___awtofl,___flsub@f2
  2392  000F54  C061  F074         	movff	?___awtofl+1,___flsub@f2+1
  2393  000F58  C062  F075         	movff	?___awtofl+2,___flsub@f2+2
  2394  000F5C  C063  F076         	movff	?___awtofl+3,___flsub@f2+3
  2395  000F60  EC30  F015         	call	___flsub	;wreg free
  2396  000F64  C06F  F096         	movff	?___flsub,exp@x
  2397  000F68  C070  F097         	movff	?___flsub+1,exp@x+1
  2398  000F6C  C071  F098         	movff	?___flsub+2,exp@x+2
  2399  000F70  C072  F099         	movff	?___flsub+3,exp@x+3
  2400  000F74  C096  F07E         	movff	exp@x,eval_poly@x
  2401  000F78  C097  F07F         	movff	exp@x+1,eval_poly@x+1
  2402  000F7C  C098  F080         	movff	exp@x+2,eval_poly@x+2
  2403  000F80  C099  F081         	movff	exp@x+3,eval_poly@x+3
  2404  000F84  0E01               	movlw	low exp@coeff
  2405  000F86  0100               	movlb	0	; () banked
  2406  000F88  6F82               	movwf	eval_poly@d& (0+255),b
  2407  000F8A  0E06               	movlw	high exp@coeff
  2408  000F8C  0100               	movlb	0	; () banked
  2409  000F8E  6F83               	movwf	(eval_poly@d+1)& (0+255),b
  2410  000F90  0E00               	movlw	0
  2411  000F92  0100               	movlb	0	; () banked
  2412  000F94  6F85               	movwf	(eval_poly@n+1)& (0+255),b
  2413  000F96  0E09               	movlw	9
  2414  000F98  6F84               	movwf	eval_poly@n& (0+255),b
  2415  000F9A  ECB6  F010         	call	_eval_poly	;wreg free
  2416  000F9E  C07E  F08E         	movff	?_eval_poly,ldexp@value
  2417  000FA2  C07F  F08F         	movff	?_eval_poly+1,ldexp@value+1
  2418  000FA6  C080  F090         	movff	?_eval_poly+2,ldexp@value+2
  2419  000FAA  C081  F091         	movff	?_eval_poly+3,ldexp@value+3
  2420  000FAE  C09E  F092         	movff	exp@exponent,ldexp@newexp
  2421  000FB2  C09F  F093         	movff	exp@exponent+1,ldexp@newexp+1
  2422  000FB6  EC8E  F00F         	call	_ldexp	;wreg free
  2423  000FBA  C08E  F096         	movff	?_ldexp,exp@x
  2424  000FBE  C08F  F097         	movff	?_ldexp+1,exp@x+1
  2425  000FC2  C090  F098         	movff	?_ldexp+2,exp@x+2
  2426  000FC6  C091  F099         	movff	?_ldexp+3,exp@x+3
  2427  000FCA  0100               	movlb	0	; () banked
  2428  000FCC  51A0               	movf	exp@sign& (0+255),w,b
  2429  000FCE  0100               	movlb	0	; () banked
  2430  000FD0  B4D8               	btfsc	status,2,c
  2431  000FD2  D035               	goto	l1063
  2432                           
  2433                           ; BSR set to: 0
  2434  000FD4  0100               	movlb	0	; () banked
  2435  000FD6  2996               	incf	exp@x& (0+255),w,b
  2436  000FD8  E116               	bnz	l3993
  2437  000FDA  0100               	movlb	0	; () banked
  2438  000FDC  2997               	incf	(exp@x+1)& (0+255),w,b
  2439  000FDE  E113               	bnz	l3993
  2440  000FE0  0E7F               	movlw	127
  2441  000FE2  0100               	movlb	0	; () banked
  2442  000FE4  1998               	xorwf	(exp@x+2)& (0+255),w,b
  2443  000FE6  E10F               	bnz	l3993
  2444  000FE8  0E7F               	movlw	127
  2445  000FEA  0100               	movlb	0	; () banked
  2446  000FEC  1999               	xorwf	(exp@x+3)& (0+255),w,b
  2447  000FEE  A4D8               	btfss	status,2,c
  2448  000FF0  D00A               	goto	l3993
  2449                           
  2450                           ; BSR set to: 0
  2451  000FF2  0E00               	movlw	0
  2452  000FF4  0100               	movlb	0	; () banked
  2453  000FF6  6F96               	movwf	?_exp& (0+255),b
  2454  000FF8  0E00               	movlw	0
  2455  000FFA  6F97               	movwf	(?_exp+1)& (0+255),b
  2456  000FFC  0E00               	movlw	0
  2457  000FFE  6F98               	movwf	(?_exp+2)& (0+255),b
  2458  001000  0E00               	movlw	0
  2459  001002  6F99               	movwf	(?_exp+3)& (0+255),b
  2460                           
  2461                           ; BSR set to: 0
  2462  001004  0012               	return	
  2463  001006                     l3993:
  2464                           
  2465                           ; BSR set to: 0
  2466  001006  0E00               	movlw	0
  2467  001008  0100               	movlb	0	; () banked
  2468  00100A  6F7E               	movwf	___fldiv@f1& (0+255),b
  2469  00100C  0E00               	movlw	0
  2470  00100E  6F7F               	movwf	(___fldiv@f1+1)& (0+255),b
  2471  001010  0E80               	movlw	128
  2472  001012  6F80               	movwf	(___fldiv@f1+2)& (0+255),b
  2473  001014  0E3F               	movlw	63
  2474  001016  6F81               	movwf	(___fldiv@f1+3)& (0+255),b
  2475  001018  C096  F082         	movff	exp@x,___fldiv@f2
  2476  00101C  C097  F083         	movff	exp@x+1,___fldiv@f2+1
  2477  001020  C098  F084         	movff	exp@x+2,___fldiv@f2+2
  2478  001024  C099  F085         	movff	exp@x+3,___fldiv@f2+3
  2479  001028  ECF3  F00E         	call	___fldiv	;wreg free
  2480  00102C  C07E  F096         	movff	?___fldiv,?_exp
  2481  001030  C07F  F097         	movff	?___fldiv+1,?_exp+1
  2482  001034  C080  F098         	movff	?___fldiv+2,?_exp+2
  2483  001038  C081  F099         	movff	?___fldiv+3,?_exp+3
  2484  00103C  0012               	return	
  2485  00103E                     l1063:
  2486                           
  2487                           ; BSR set to: 0
  2488  00103E  C096  F096         	movff	exp@x,?_exp
  2489  001042  C097  F097         	movff	exp@x+1,?_exp+1
  2490  001046  C098  F098         	movff	exp@x+2,?_exp+2
  2491  00104A  C099  F099         	movff	exp@x+3,?_exp+3
  2492  00104E  0012               	return		;funcret
  2493  001050                     __end_of_exp:
  2494                           	opt stack 0
  2495                           tblptru	equ	0xFF8
  2496                           tblptrh	equ	0xFF7
  2497                           postinc0	equ	0xFEE
  2498                           wreg	equ	0xFE8
  2499                           status	equ	0xFD8
  2500                           
  2501 ;; *************** function _ldexp *****************
  2502 ;; Defined at:
  2503 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  2504 ;; Parameters:    Size  Location     Type
  2505 ;;  value           4   46[BANK0 ] unsigned char 
  2506 ;;  newexp          2   50[BANK0 ] int 
  2507 ;; Auto vars:     Size  Location     Type
  2508 ;;		None
  2509 ;; Return value:  Size  Location     Type
  2510 ;;                  4   46[BANK0 ] int 
  2511 ;; Registers used:
  2512 ;;		wreg, status,2, status,0
  2513 ;; Tracked objects:
  2514 ;;		On entry : 0/0
  2515 ;;		On exit  : 0/0
  2516 ;;		Unchanged: 0/0
  2517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2518 ;;      Params:         0       6       0       0       0       0       0
  2519 ;;      Locals:         0       0       0       0       0       0       0
  2520 ;;      Temps:          0       2       0       0       0       0       0
  2521 ;;      Totals:         0       8       0       0       0       0       0
  2522 ;;Total ram usage:        8 bytes
  2523 ;; Hardware stack levels used:    1
  2524 ;; Hardware stack levels required when called:    2
  2525 ;; This function calls:
  2526 ;;		Nothing
  2527 ;; This function is called by:
  2528 ;;		_exp
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           	psect	text10
  2533  001F1C                     __ptext10:
  2534                           	opt stack 0
  2535  001F1C                     _ldexp:
  2536                           	opt stack 25
  2537                           
  2538                           ;incstack = 0
  2539  001F1C  0100               	movlb	0	; () banked
  2540  001F1E  518E               	movf	ldexp@value& (0+255),w,b
  2541  001F20  0100               	movlb	0	; () banked
  2542  001F22  118F               	iorwf	(ldexp@value+1)& (0+255),w,b
  2543  001F24  0100               	movlb	0	; () banked
  2544  001F26  1190               	iorwf	(ldexp@value+2)& (0+255),w,b
  2545  001F28  0100               	movlb	0	; () banked
  2546  001F2A  1191               	iorwf	(ldexp@value+3)& (0+255),w,b
  2547  001F2C  A4D8               	btfss	status,2,c
  2548  001F2E  D00A               	goto	l3843
  2549                           
  2550                           ; BSR set to: 0
  2551  001F30  0E00               	movlw	0
  2552  001F32  0100               	movlb	0	; () banked
  2553  001F34  6F8E               	movwf	?_ldexp& (0+255),b
  2554  001F36  0E00               	movlw	0
  2555  001F38  6F8F               	movwf	(?_ldexp+1)& (0+255),b
  2556  001F3A  0E00               	movlw	0
  2557  001F3C  6F90               	movwf	(?_ldexp+2)& (0+255),b
  2558  001F3E  0E00               	movlw	0
  2559  001F40  6F91               	movwf	(?_ldexp+3)& (0+255),b
  2560                           
  2561                           ; BSR set to: 0
  2562  001F42  0012               	return	
  2563  001F44                     l3843:
  2564                           
  2565                           ; BSR set to: 0
  2566  001F44  0100               	movlb	0	; () banked
  2567  001F46  5191               	movf	(ldexp@value+3)& (0+255),w,b
  2568  001F48  0B7F               	andlw	127
  2569  001F4A  0100               	movlb	0	; () banked
  2570  001F4C  6F94               	movwf	??_ldexp& (0+255),b
  2571  001F4E  6B95               	clrf	(??_ldexp+1)& (0+255),b
  2572  001F50  90D8               	bcf	status,0,c
  2573  001F52  0100               	movlb	0	; () banked
  2574  001F54  3794               	rlcf	??_ldexp& (0+255),f,b
  2575  001F56  3795               	rlcf	(??_ldexp+1)& (0+255),f,b
  2576  001F58  0100               	movlb	0	; () banked
  2577  001F5A  5194               	movf	??_ldexp& (0+255),w,b
  2578  001F5C  0100               	movlb	0	; () banked
  2579  001F5E  2792               	addwf	ldexp@newexp& (0+255),f,b
  2580  001F60  0100               	movlb	0	; () banked
  2581  001F62  5195               	movf	(??_ldexp+1)& (0+255),w,b
  2582  001F64  0100               	movlb	0	; () banked
  2583  001F66  2393               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  2584  001F68  0100               	movlb	0	; () banked
  2585  001F6A  AF90               	btfss	(ldexp@value+2)& (0+255),7,b
  2586  001F6C  D004               	goto	u4940
  2587  001F6E  0100               	movlb	0	; () banked
  2588  001F70  6B94               	clrf	??_ldexp& (0+255),b
  2589  001F72  2B94               	incf	??_ldexp& (0+255),f,b
  2590  001F74  D002               	goto	u4948
  2591  001F76                     u4940:
  2592  001F76  0100               	movlb	0	; () banked
  2593  001F78  6B94               	clrf	??_ldexp& (0+255),b
  2594  001F7A                     u4948:
  2595  001F7A  0100               	movlb	0	; () banked
  2596  001F7C  5194               	movf	??_ldexp& (0+255),w,b
  2597  001F7E  0100               	movlb	0	; () banked
  2598  001F80  2792               	addwf	ldexp@newexp& (0+255),f,b
  2599  001F82  0E00               	movlw	0
  2600  001F84  2393               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  2601  001F86  0100               	movlb	0	; () banked
  2602  001F88  AF93               	btfss	(ldexp@newexp+1)& (0+255),7,b
  2603  001F8A  D010               	goto	l3851
  2604                           
  2605                           ; BSR set to: 0
  2606  001F8C  0E00               	movlw	0
  2607  001F8E  0100               	movlb	0	; () banked
  2608  001F90  6FF9               	movwf	(_errno+1)& (0+255),b
  2609  001F92  0E22               	movlw	34
  2610  001F94  6FF8               	movwf	_errno& (0+255),b
  2611  001F96  0E00               	movlw	0
  2612  001F98  0100               	movlb	0	; () banked
  2613  001F9A  6F8E               	movwf	?_ldexp& (0+255),b
  2614  001F9C  0E00               	movlw	0
  2615  001F9E  6F8F               	movwf	(?_ldexp+1)& (0+255),b
  2616  001FA0  0E00               	movlw	0
  2617  001FA2  6F90               	movwf	(?_ldexp+2)& (0+255),b
  2618  001FA4  0E00               	movlw	0
  2619  001FA6                     L1:
  2620  001FA6  6F91               	movwf	(?_ldexp+3)& (0+255),b
  2621                           
  2622                           ; BSR set to: 0
  2623  001FA8  0012               	return	
  2624                           
  2625                           ; BSR set to: 0
  2626  001FAA  D047               	goto	l3869
  2627  001FAC                     l3851:
  2628                           
  2629                           ; BSR set to: 0
  2630  001FAC  0100               	movlb	0	; () banked
  2631  001FAE  BF93               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  2632  001FB0  D022               	goto	l3867
  2633  001FB2  0100               	movlb	0	; () banked
  2634  001FB4  0593               	decf	(ldexp@newexp+1)& (0+255),w,b
  2635  001FB6  A0D8               	btfss	status,0,c
  2636  001FB8  D01E               	goto	l3867
  2637                           
  2638                           ; BSR set to: 0
  2639  001FBA  0E00               	movlw	0
  2640  001FBC  0100               	movlb	0	; () banked
  2641  001FBE  6FF9               	movwf	(_errno+1)& (0+255),b
  2642  001FC0  0E22               	movlw	34
  2643  001FC2  6FF8               	movwf	_errno& (0+255),b
  2644                           
  2645                           ; BSR set to: 0
  2646  001FC4  0100               	movlb	0	; () banked
  2647  001FC6  AF91               	btfss	(ldexp@value+3)& (0+255),7,b
  2648  001FC8  D00B               	goto	l3863
  2649                           
  2650                           ; BSR set to: 0
  2651  001FCA  0EFF               	movlw	255
  2652  001FCC  0100               	movlb	0	; () banked
  2653  001FCE  6F8E               	movwf	?_ldexp& (0+255),b
  2654  001FD0  0EFF               	movlw	255
  2655  001FD2  6F8F               	movwf	(?_ldexp+1)& (0+255),b
  2656  001FD4  0E7F               	movlw	127
  2657  001FD6  6F90               	movwf	(?_ldexp+2)& (0+255),b
  2658  001FD8  0EFF               	movlw	255
  2659  001FDA  D7E5               	goto	L1
  2660                           
  2661                           ; BSR set to: 0
  2662  001FDC  0012               	return	
  2663                           
  2664                           ; BSR set to: 0
  2665  001FDE  D02D               	goto	l3869
  2666  001FE0                     l3863:
  2667                           
  2668                           ; BSR set to: 0
  2669  001FE0  0EFF               	movlw	255
  2670  001FE2  0100               	movlb	0	; () banked
  2671  001FE4  6F8E               	movwf	?_ldexp& (0+255),b
  2672  001FE6  0EFF               	movlw	255
  2673  001FE8  6F8F               	movwf	(?_ldexp+1)& (0+255),b
  2674  001FEA  0E7F               	movlw	127
  2675  001FEC  6F90               	movwf	(?_ldexp+2)& (0+255),b
  2676  001FEE  0E7F               	movlw	127
  2677  001FF0  D7DA               	goto	L1
  2678                           
  2679                           ; BSR set to: 0
  2680  001FF2  0012               	return	
  2681                           
  2682                           ; BSR set to: 0
  2683  001FF4  D022               	goto	l3869
  2684  001FF6                     l3867:
  2685                           
  2686                           ; BSR set to: 0
  2687  001FF6  0100               	movlb	0	; () banked
  2688  001FF8  3593               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  2689  001FFA  3193               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  2690  001FFC  0100               	movlb	0	; () banked
  2691  001FFE  6F95               	movwf	(??_ldexp+1)& (0+255),b
  2692  002000  0100               	movlb	0	; () banked
  2693  002002  3192               	rrcf	ldexp@newexp& (0+255),w,b
  2694  002004  0100               	movlb	0	; () banked
  2695  002006  6F94               	movwf	??_ldexp& (0+255),b
  2696  002008  0100               	movlb	0	; () banked
  2697  00200A  5191               	movf	(ldexp@value+3)& (0+255),w,b
  2698  00200C  0100               	movlb	0	; () banked
  2699  00200E  1994               	xorwf	??_ldexp& (0+255),w,b
  2700  002010  0B80               	andlw	-128
  2701  002012  1994               	xorwf	??_ldexp& (0+255),w,b
  2702  002014  0100               	movlb	0	; () banked
  2703  002016  6F91               	movwf	(ldexp@value+3)& (0+255),b
  2704  002018  C092  F094         	movff	ldexp@newexp,??_ldexp
  2705  00201C  0E01               	movlw	1
  2706  00201E  0100               	movlb	0	; () banked
  2707  002020  1794               	andwf	??_ldexp& (0+255),f,b
  2708  002022  0100               	movlb	0	; () banked
  2709  002024  3394               	rrcf	??_ldexp& (0+255),f,b
  2710  002026  3394               	rrcf	??_ldexp& (0+255),f,b
  2711  002028  0100               	movlb	0	; () banked
  2712  00202A  5190               	movf	(ldexp@value+2)& (0+255),w,b
  2713  00202C  0100               	movlb	0	; () banked
  2714  00202E  1994               	xorwf	??_ldexp& (0+255),w,b
  2715  002030  0B7F               	andlw	-129
  2716  002032  1994               	xorwf	??_ldexp& (0+255),w,b
  2717  002034  0100               	movlb	0	; () banked
  2718  002036  6F90               	movwf	(ldexp@value+2)& (0+255),b
  2719                           
  2720                           ; BSR set to: 0
  2721  002038  D000               	goto	l3869
  2722  00203A                     l3869:
  2723                           
  2724                           ; BSR set to: 0
  2725  00203A  C08E  F08E         	movff	ldexp@value,?_ldexp
  2726  00203E  C08F  F08F         	movff	ldexp@value+1,?_ldexp+1
  2727  002042  C090  F090         	movff	ldexp@value+2,?_ldexp+2
  2728  002046  C091  F091         	movff	ldexp@value+3,?_ldexp+3
  2729  00204A  0012               	return	
  2730                           
  2731                           ; BSR set to: 0
  2732                           
  2733                           ; BSR set to: 0
  2734  00204C  0012               	return		;funcret
  2735  00204E                     __end_of_ldexp:
  2736                           	opt stack 0
  2737                           tblptru	equ	0xFF8
  2738                           tblptrh	equ	0xFF7
  2739                           postinc0	equ	0xFEE
  2740                           wreg	equ	0xFE8
  2741                           status	equ	0xFD8
  2742                           
  2743 ;; *************** function _floor *****************
  2744 ;; Defined at:
  2745 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\floor.c"
  2746 ;; Parameters:    Size  Location     Type
  2747 ;;  x               4   15[BANK0 ] int 
  2748 ;; Auto vars:     Size  Location     Type
  2749 ;;  i               4   19[BANK0 ] int 
  2750 ;;  expon           2   23[BANK0 ] int 
  2751 ;; Return value:  Size  Location     Type
  2752 ;;                  4   15[BANK0 ] int 
  2753 ;; Registers used:
  2754 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2755 ;; Tracked objects:
  2756 ;;		On entry : 0/0
  2757 ;;		On exit  : 0/0
  2758 ;;		Unchanged: 0/0
  2759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2760 ;;      Params:         0       4       0       0       0       0       0
  2761 ;;      Locals:         0       6       0       0       0       0       0
  2762 ;;      Temps:          0       0       0       0       0       0       0
  2763 ;;      Totals:         0      10       0       0       0       0       0
  2764 ;;Total ram usage:       10 bytes
  2765 ;; Hardware stack levels used:    1
  2766 ;; Hardware stack levels required when called:    4
  2767 ;; This function calls:
  2768 ;;		___altofl
  2769 ;;		___fladd
  2770 ;;		___flge
  2771 ;;		___fltol
  2772 ;;		_frexp
  2773 ;; This function is called by:
  2774 ;;		_exp
  2775 ;; This function uses a non-reentrant model
  2776 ;;
  2777                           
  2778                           	psect	text11
  2779  00204E                     __ptext11:
  2780                           	opt stack 0
  2781  00204E                     _floor:
  2782                           	opt stack 23
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;incstack = 0
  2786  00204E  C06F  F020         	movff	floor@x,frexp@value
  2787  002052  C070  F021         	movff	floor@x+1,frexp@value+1
  2788  002056  C071  F022         	movff	floor@x+2,frexp@value+2
  2789  00205A  C072  F023         	movff	floor@x+3,frexp@value+3
  2790  00205E  0E77               	movlw	low floor@expon
  2791  002060  6E24               	movwf	frexp@eptr,c
  2792  002062  0E00               	movlw	high floor@expon
  2793  002064  6E25               	movwf	frexp@eptr+1,c
  2794  002066  EC80  F013         	call	_frexp	;wreg free
  2795  00206A  0100               	movlb	0	; () banked
  2796  00206C  AF78               	btfss	(floor@expon+1)& (0+255),7,b
  2797  00206E  D017               	goto	l3827
  2798                           
  2799                           ; BSR set to: 0
  2800  002070  0100               	movlb	0	; () banked
  2801  002072  AF72               	btfss	(floor@x+3)& (0+255),7,b
  2802  002074  D00A               	goto	l3823
  2803                           
  2804                           ; BSR set to: 0
  2805  002076  0E00               	movlw	0
  2806  002078  0100               	movlb	0	; () banked
  2807  00207A  6F6F               	movwf	?_floor& (0+255),b
  2808  00207C  0E00               	movlw	0
  2809  00207E  6F70               	movwf	(?_floor+1)& (0+255),b
  2810  002080  0E80               	movlw	128
  2811  002082  6F71               	movwf	(?_floor+2)& (0+255),b
  2812  002084  0EBF               	movlw	191
  2813  002086  6F72               	movwf	(?_floor+3)& (0+255),b
  2814                           
  2815                           ; BSR set to: 0
  2816  002088  0012               	return	
  2817  00208A                     l3823:
  2818                           
  2819                           ; BSR set to: 0
  2820  00208A  0E00               	movlw	0
  2821  00208C  0100               	movlb	0	; () banked
  2822  00208E  6F6F               	movwf	?_floor& (0+255),b
  2823  002090  0E00               	movlw	0
  2824  002092  6F70               	movwf	(?_floor+1)& (0+255),b
  2825  002094  0E00               	movlw	0
  2826  002096  6F71               	movwf	(?_floor+2)& (0+255),b
  2827  002098  0E00               	movlw	0
  2828  00209A  6F72               	movwf	(?_floor+3)& (0+255),b
  2829                           
  2830                           ; BSR set to: 0
  2831  00209C  0012               	return	
  2832  00209E                     l3827:
  2833                           
  2834                           ; BSR set to: 0
  2835  00209E  0100               	movlb	0	; () banked
  2836  0020A0  5178               	movf	(floor@expon+1)& (0+255),w,b
  2837  0020A2  E105               	bnz	u4910
  2838  0020A4  0E1D               	movlw	29
  2839  0020A6  0100               	movlb	0	; () banked
  2840  0020A8  5D77               	subwf	floor@expon& (0+255),w,b
  2841  0020AA  A0D8               	btfss	status,0,c
  2842  0020AC  D009               	goto	l3831
  2843  0020AE                     u4910:
  2844                           
  2845                           ; BSR set to: 0
  2846  0020AE  C06F  F06F         	movff	floor@x,?_floor
  2847  0020B2  C070  F070         	movff	floor@x+1,?_floor+1
  2848  0020B6  C071  F071         	movff	floor@x+2,?_floor+2
  2849  0020BA  C072  F072         	movff	floor@x+3,?_floor+3
  2850  0020BE  0012               	return	
  2851  0020C0                     l3831:
  2852                           
  2853                           ; BSR set to: 0
  2854  0020C0  C06F  F020         	movff	floor@x,___fltol@f1
  2855  0020C4  C070  F021         	movff	floor@x+1,___fltol@f1+1
  2856  0020C8  C071  F022         	movff	floor@x+2,___fltol@f1+2
  2857  0020CC  C072  F023         	movff	floor@x+3,___fltol@f1+3
  2858  0020D0  EC44  F012         	call	___fltol	;wreg free
  2859  0020D4  C020  F060         	movff	?___fltol,___altofl@c
  2860  0020D8  C021  F061         	movff	?___fltol+1,___altofl@c+1
  2861  0020DC  C022  F062         	movff	?___fltol+2,___altofl@c+2
  2862  0020E0  C023  F063         	movff	?___fltol+3,___altofl@c+3
  2863  0020E4  EC8C  F015         	call	___altofl	;wreg free
  2864  0020E8  C060  F073         	movff	?___altofl,floor@i
  2865  0020EC  C061  F074         	movff	?___altofl+1,floor@i+1
  2866  0020F0  C062  F075         	movff	?___altofl+2,floor@i+2
  2867  0020F4  C063  F076         	movff	?___altofl+3,floor@i+3
  2868  0020F8  C06F  F060         	movff	floor@x,___flge@ff1
  2869  0020FC  C070  F061         	movff	floor@x+1,___flge@ff1+1
  2870  002100  C071  F062         	movff	floor@x+2,___flge@ff1+2
  2871  002104  C072  F063         	movff	floor@x+3,___flge@ff1+3
  2872  002108  C073  F064         	movff	floor@i,___flge@ff2
  2873  00210C  C074  F065         	movff	floor@i+1,___flge@ff2+1
  2874  002110  C075  F066         	movff	floor@i+2,___flge@ff2+2
  2875  002114  C076  F067         	movff	floor@i+3,___flge@ff2+3
  2876  002118  ECB9  F012         	call	___flge	;wreg free
  2877  00211C  0100               	movlb	0	; () banked
  2878  00211E  B0D8               	btfsc	status,0,c
  2879  002120  D01C               	goto	l1073
  2880                           
  2881                           ; BSR set to: 0
  2882  002122  C073  F064         	movff	floor@i,___fladd@f1
  2883  002126  C074  F065         	movff	floor@i+1,___fladd@f1+1
  2884  00212A  C075  F066         	movff	floor@i+2,___fladd@f1+2
  2885  00212E  C076  F067         	movff	floor@i+3,___fladd@f1+3
  2886  002132  0E00               	movlw	0
  2887  002134  0100               	movlb	0	; () banked
  2888  002136  6F68               	movwf	___fladd@f2& (0+255),b
  2889  002138  0E00               	movlw	0
  2890  00213A  6F69               	movwf	(___fladd@f2+1)& (0+255),b
  2891  00213C  0E80               	movlw	128
  2892  00213E  6F6A               	movwf	(___fladd@f2+2)& (0+255),b
  2893  002140  0EBF               	movlw	191
  2894  002142  6F6B               	movwf	(___fladd@f2+3)& (0+255),b
  2895  002144  EC28  F008         	call	___fladd	;wreg free
  2896  002148  C064  F06F         	movff	?___fladd,?_floor
  2897  00214C  C065  F070         	movff	?___fladd+1,?_floor+1
  2898  002150  C066  F071         	movff	?___fladd+2,?_floor+2
  2899  002154  C067  F072         	movff	?___fladd+3,?_floor+3
  2900  002158  0012               	return	
  2901  00215A                     l1073:
  2902                           
  2903                           ; BSR set to: 0
  2904  00215A  C073  F06F         	movff	floor@i,?_floor
  2905  00215E  C074  F070         	movff	floor@i+1,?_floor+1
  2906  002162  C075  F071         	movff	floor@i+2,?_floor+2
  2907  002166  C076  F072         	movff	floor@i+3,?_floor+3
  2908  00216A  0012               	return		;funcret
  2909  00216C                     __end_of_floor:
  2910                           	opt stack 0
  2911                           tblptru	equ	0xFF8
  2912                           tblptrh	equ	0xFF7
  2913                           postinc0	equ	0xFEE
  2914                           wreg	equ	0xFE8
  2915                           status	equ	0xFD8
  2916                           
  2917 ;; *************** function _frexp *****************
  2918 ;; Defined at:
  2919 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  2920 ;; Parameters:    Size  Location     Type
  2921 ;;  value           4   31[COMRAM] int 
  2922 ;;  eptr            2   35[COMRAM] PTR int 
  2923 ;;		 -> log@exponent(2), floor@expon(2), 
  2924 ;; Auto vars:     Size  Location     Type
  2925 ;;		None
  2926 ;; Return value:  Size  Location     Type
  2927 ;;                  4   31[COMRAM] PTR int 
  2928 ;; Registers used:
  2929 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2930 ;; Tracked objects:
  2931 ;;		On entry : 0/0
  2932 ;;		On exit  : 0/0
  2933 ;;		Unchanged: 0/0
  2934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2935 ;;      Params:         6       0       0       0       0       0       0
  2936 ;;      Locals:         0       0       0       0       0       0       0
  2937 ;;      Temps:          2       0       0       0       0       0       0
  2938 ;;      Totals:         8       0       0       0       0       0       0
  2939 ;;Total ram usage:        8 bytes
  2940 ;; Hardware stack levels used:    1
  2941 ;; Hardware stack levels required when called:    2
  2942 ;; This function calls:
  2943 ;;		Nothing
  2944 ;; This function is called by:
  2945 ;;		_floor
  2946 ;;		_log
  2947 ;; This function uses a non-reentrant model
  2948 ;;
  2949                           
  2950                           	psect	text12
  2951  002700                     __ptext12:
  2952                           	opt stack 0
  2953  002700                     _frexp:
  2954                           	opt stack 25
  2955                           
  2956                           ;incstack = 0
  2957  002700  5020               	movf	frexp@value,w,c
  2958  002702  1021               	iorwf	frexp@value+1,w,c
  2959  002704  1022               	iorwf	frexp@value+2,w,c
  2960  002706  1023               	iorwf	frexp@value+3,w,c
  2961  002708  A4D8               	btfss	status,2,c
  2962  00270A  D011               	goto	l3655
  2963  00270C  C024  FFD9         	movff	frexp@eptr,fsr2l
  2964  002710  C025  FFDA         	movff	frexp@eptr+1,fsr2h
  2965  002714  0E00               	movlw	0
  2966  002716  6EDE               	movwf	postinc2,c
  2967  002718  0E00               	movlw	0
  2968  00271A  6EDD               	movwf	postdec2,c
  2969  00271C  0E00               	movlw	0
  2970  00271E  6E20               	movwf	?_frexp,c
  2971  002720  0E00               	movlw	0
  2972  002722  6E21               	movwf	?_frexp+1,c
  2973  002724  0E00               	movlw	0
  2974  002726  6E22               	movwf	?_frexp+2,c
  2975  002728  0E00               	movlw	0
  2976  00272A  6E23               	movwf	?_frexp+3,c
  2977  00272C  0012               	return	
  2978  00272E                     l3655:
  2979  00272E  5023               	movf	frexp@value+3,w,c
  2980  002730  0B7F               	andlw	127
  2981  002732  6E26               	movwf	??_frexp& (0+255),c
  2982  002734  6A27               	clrf	(??_frexp+1)& (0+255),c
  2983  002736  90D8               	bcf	status,0,c
  2984  002738  3626               	rlcf	??_frexp,f,c
  2985  00273A  3627               	rlcf	??_frexp+1,f,c
  2986  00273C  C024  FFD9         	movff	frexp@eptr,fsr2l
  2987  002740  C025  FFDA         	movff	frexp@eptr+1,fsr2h
  2988  002744  C026  FFDE         	movff	??_frexp,postinc2
  2989  002748  C027  FFDD         	movff	??_frexp+1,postdec2
  2990  00274C  AE22               	btfss	frexp@value+2,7,c
  2991  00274E  D003               	goto	u4490
  2992  002750  6A26               	clrf	??_frexp& (0+255),c
  2993  002752  2A26               	incf	??_frexp& (0+255),f,c
  2994  002754  D001               	goto	u4498
  2995  002756                     u4490:
  2996  002756  6A26               	clrf	??_frexp& (0+255),c
  2997  002758                     u4498:
  2998  002758  5026               	movf	??_frexp,w,c
  2999  00275A  C024  FFD9         	movff	frexp@eptr,fsr2l
  3000  00275E  C025  FFDA         	movff	frexp@eptr+1,fsr2h
  3001  002762  12DE               	iorwf	postinc2,f,c
  3002  002764  0E00               	movlw	0
  3003  002766  12DD               	iorwf	postdec2,f,c
  3004  002768  C024  FFD9         	movff	frexp@eptr,fsr2l
  3005  00276C  C025  FFDA         	movff	frexp@eptr+1,fsr2h
  3006  002770  0E82               	movlw	130
  3007  002772  26DE               	addwf	postinc2,f,c
  3008  002774  0EFF               	movlw	255
  3009  002776  22DD               	addwfc	postdec2,f,c
  3010  002778  8023               	bsf	frexp@value+3,0,c
  3011  00277A  8223               	bsf	frexp@value+3,1,c
  3012  00277C  8423               	bsf	frexp@value+3,2,c
  3013  00277E  8623               	bsf	frexp@value+3,3,c
  3014  002780  8823               	bsf	frexp@value+3,4,c
  3015  002782  8A23               	bsf	frexp@value+3,5,c
  3016  002784  9C23               	bcf	frexp@value+3,6,c
  3017  002786  9E22               	bcf	frexp@value+2,7,c
  3018  002788  C020  F020         	movff	frexp@value,?_frexp
  3019  00278C  C021  F021         	movff	frexp@value+1,?_frexp+1
  3020  002790  C022  F022         	movff	frexp@value+2,?_frexp+2
  3021  002794  C023  F023         	movff	frexp@value+3,?_frexp+3
  3022  002798  0012               	return	
  3023  00279A  0012               	return		;funcret
  3024  00279C                     __end_of_frexp:
  3025                           	opt stack 0
  3026                           tblptru	equ	0xFF8
  3027                           tblptrh	equ	0xFF7
  3028                           postinc0	equ	0xFEE
  3029                           wreg	equ	0xFE8
  3030                           postinc2	equ	0xFDE
  3031                           postdec2	equ	0xFDD
  3032                           fsr2h	equ	0xFDA
  3033                           fsr2l	equ	0xFD9
  3034                           status	equ	0xFD8
  3035                           
  3036 ;; *************** function ___fltol *****************
  3037 ;; Defined at:
  3038 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fltol.c"
  3039 ;; Parameters:    Size  Location     Type
  3040 ;;  f1              4   31[COMRAM] PTR int 
  3041 ;; Auto vars:     Size  Location     Type
  3042 ;;  exp1            1   40[COMRAM] unsigned char 
  3043 ;;  sign1           1   39[COMRAM] unsigned char 
  3044 ;; Return value:  Size  Location     Type
  3045 ;;                  4   31[COMRAM] long 
  3046 ;; Registers used:
  3047 ;;		wreg, status,2, status,0
  3048 ;; Tracked objects:
  3049 ;;		On entry : 0/0
  3050 ;;		On exit  : 0/0
  3051 ;;		Unchanged: 0/0
  3052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3053 ;;      Params:         4       0       0       0       0       0       0
  3054 ;;      Locals:         2       0       0       0       0       0       0
  3055 ;;      Temps:          4       0       0       0       0       0       0
  3056 ;;      Totals:        10       0       0       0       0       0       0
  3057 ;;Total ram usage:       10 bytes
  3058 ;; Hardware stack levels used:    1
  3059 ;; Hardware stack levels required when called:    2
  3060 ;; This function calls:
  3061 ;;		Nothing
  3062 ;; This function is called by:
  3063 ;;		_pow
  3064 ;;		_exp
  3065 ;;		_floor
  3066 ;; This function uses a non-reentrant model
  3067 ;;
  3068                           
  3069                           	psect	text13
  3070  002488                     __ptext13:
  3071                           	opt stack 0
  3072  002488                     ___fltol:
  3073                           	opt stack 24
  3074                           
  3075                           ;incstack = 0
  3076  002488  3422               	rlcf	___fltol@f1+2,w,c
  3077  00248A  3423               	rlcf	___fltol@f1+3,w,c
  3078  00248C  6E29               	movwf	___fltol@exp1,c
  3079  00248E  5029               	movf	___fltol@exp1,w,c
  3080  002490  A4D8               	btfss	status,2,c
  3081  002492  D009               	goto	l2611
  3082  002494  0E00               	movlw	0
  3083  002496  6E20               	movwf	?___fltol,c
  3084  002498  0E00               	movlw	0
  3085  00249A  6E21               	movwf	?___fltol+1,c
  3086  00249C  0E00               	movlw	0
  3087  00249E  6E22               	movwf	?___fltol+2,c
  3088  0024A0  0E00               	movlw	0
  3089  0024A2  6E23               	movwf	?___fltol+3,c
  3090  0024A4  0012               	return	
  3091  0024A6                     l2611:
  3092  0024A6  C020  F024         	movff	___fltol@f1,??___fltol
  3093  0024AA  C021  F025         	movff	___fltol@f1+1,??___fltol+1
  3094  0024AE  C022  F026         	movff	___fltol@f1+2,??___fltol+2
  3095  0024B2  C023  F027         	movff	___fltol@f1+3,??___fltol+3
  3096  0024B6  0E20               	movlw	32
  3097  0024B8  D005               	goto	u2690
  3098  0024BA                     u2695:
  3099  0024BA  90D8               	bcf	status,0,c
  3100  0024BC  3227               	rrcf	??___fltol+3,f,c
  3101  0024BE  3226               	rrcf	??___fltol+2,f,c
  3102  0024C0  3225               	rrcf	??___fltol+1,f,c
  3103  0024C2  3224               	rrcf	??___fltol,f,c
  3104  0024C4                     u2690:
  3105  0024C4  2EE8               	decfsz	wreg,f,c
  3106  0024C6  D7F9               	goto	u2695
  3107  0024C8  5024               	movf	??___fltol,w,c
  3108  0024CA  6E28               	movwf	___fltol@sign1,c
  3109  0024CC  8E22               	bsf	___fltol@f1+2,7,c
  3110  0024CE  0EFF               	movlw	255
  3111  0024D0  1620               	andwf	___fltol@f1,f,c
  3112  0024D2  0EFF               	movlw	255
  3113  0024D4  1621               	andwf	___fltol@f1+1,f,c
  3114  0024D6  0EFF               	movlw	255
  3115  0024D8  1622               	andwf	___fltol@f1+2,f,c
  3116  0024DA  0E00               	movlw	0
  3117  0024DC  1623               	andwf	___fltol@f1+3,f,c
  3118  0024DE  0E96               	movlw	150
  3119  0024E0  5E29               	subwf	___fltol@exp1,f,c
  3120  0024E2  AE29               	btfss	___fltol@exp1,7,c
  3121  0024E4  D017               	goto	l2631
  3122  0024E6  5029               	movf	___fltol@exp1,w,c
  3123  0024E8  0A80               	xorlw	128
  3124  0024EA  0F97               	addlw	151
  3125  0024EC  B0D8               	btfsc	status,0,c
  3126  0024EE  D00A               	goto	l2627
  3127  0024F0  0E00               	movlw	0
  3128  0024F2  6E20               	movwf	?___fltol,c
  3129  0024F4  0E00               	movlw	0
  3130  0024F6  6E21               	movwf	?___fltol+1,c
  3131  0024F8  0E00               	movlw	0
  3132  0024FA  6E22               	movwf	?___fltol+2,c
  3133  0024FC  0E00               	movlw	0
  3134  0024FE  6E23               	movwf	?___fltol+3,c
  3135  002500  0012               	return	
  3136  002502  D000               	goto	l2627
  3137  002504                     l2627:
  3138  002504  90D8               	bcf	status,0,c
  3139  002506  3223               	rrcf	___fltol@f1+3,f,c
  3140  002508  3222               	rrcf	___fltol@f1+2,f,c
  3141  00250A  3221               	rrcf	___fltol@f1+1,f,c
  3142  00250C  3220               	rrcf	___fltol@f1,f,c
  3143  00250E  3E29               	incfsz	___fltol@exp1,f,c
  3144  002510  D7F9               	goto	l2627
  3145  002512  D019               	goto	l2641
  3146  002514                     l2631:
  3147  002514  0E1F               	movlw	31
  3148  002516  6429               	cpfsgt	___fltol@exp1,c
  3149  002518  D011               	goto	l2639
  3150  00251A  0E00               	movlw	0
  3151  00251C  6E20               	movwf	?___fltol,c
  3152  00251E  0E00               	movlw	0
  3153  002520  6E21               	movwf	?___fltol+1,c
  3154  002522  0E00               	movlw	0
  3155  002524  6E22               	movwf	?___fltol+2,c
  3156  002526  0E00               	movlw	0
  3157  002528  6E23               	movwf	?___fltol+3,c
  3158  00252A  0012               	return	
  3159  00252C  D007               	goto	l2639
  3160  00252E                     l2637:
  3161  00252E  90D8               	bcf	status,0,c
  3162  002530  3620               	rlcf	___fltol@f1,f,c
  3163  002532  3621               	rlcf	___fltol@f1+1,f,c
  3164  002534  3622               	rlcf	___fltol@f1+2,f,c
  3165  002536  3623               	rlcf	___fltol@f1+3,f,c
  3166  002538  0629               	decf	___fltol@exp1,f,c
  3167  00253A  D000               	goto	l2639
  3168  00253C                     l2639:
  3169  00253C  5029               	movf	___fltol@exp1,w,c
  3170  00253E  B4D8               	btfsc	status,2,c
  3171  002540  D002               	goto	l2641
  3172  002542  D7F5               	goto	l2637
  3173  002544  D000               	goto	l2641
  3174  002546                     l2641:
  3175  002546  5028               	movf	___fltol@sign1,w,c
  3176  002548  B4D8               	btfsc	status,2,c
  3177  00254A  D009               	goto	l2645
  3178  00254C  1E23               	comf	___fltol@f1+3,f,c
  3179  00254E  1E22               	comf	___fltol@f1+2,f,c
  3180  002550  1E21               	comf	___fltol@f1+1,f,c
  3181  002552  6C20               	negf	___fltol@f1,c
  3182  002554  0E00               	movlw	0
  3183  002556  2221               	addwfc	___fltol@f1+1,f,c
  3184  002558  2222               	addwfc	___fltol@f1+2,f,c
  3185  00255A  2223               	addwfc	___fltol@f1+3,f,c
  3186  00255C  D000               	goto	l2645
  3187  00255E                     l2645:
  3188  00255E  C020  F020         	movff	___fltol@f1,?___fltol
  3189  002562  C021  F021         	movff	___fltol@f1+1,?___fltol+1
  3190  002566  C022  F022         	movff	___fltol@f1+2,?___fltol+2
  3191  00256A  C023  F023         	movff	___fltol@f1+3,?___fltol+3
  3192  00256E  0012               	return	
  3193  002570  0012               	return		;funcret
  3194  002572                     __end_of___fltol:
  3195                           	opt stack 0
  3196                           tblptru	equ	0xFF8
  3197                           tblptrh	equ	0xFF7
  3198                           postinc0	equ	0xFEE
  3199                           wreg	equ	0xFE8
  3200                           postinc2	equ	0xFDE
  3201                           postdec2	equ	0xFDD
  3202                           fsr2h	equ	0xFDA
  3203                           fsr2l	equ	0xFD9
  3204                           status	equ	0xFD8
  3205                           
  3206 ;; *************** function ___altofl *****************
  3207 ;; Defined at:
  3208 ;;		line 36 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\altofl.c"
  3209 ;; Parameters:    Size  Location     Type
  3210 ;;  c               4    0[BANK0 ] long 
  3211 ;; Auto vars:     Size  Location     Type
  3212 ;;  sign            1   41[COMRAM] unsigned char 
  3213 ;; Return value:  Size  Location     Type
  3214 ;;                  4    0[BANK0 ] unsigned char 
  3215 ;; Registers used:
  3216 ;;		wreg, status,2, status,0, cstack
  3217 ;; Tracked objects:
  3218 ;;		On entry : 0/0
  3219 ;;		On exit  : 0/0
  3220 ;;		Unchanged: 0/0
  3221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3222 ;;      Params:         0       4       0       0       0       0       0
  3223 ;;      Locals:         1       0       0       0       0       0       0
  3224 ;;      Temps:          0       0       0       0       0       0       0
  3225 ;;      Totals:         1       4       0       0       0       0       0
  3226 ;;Total ram usage:        5 bytes
  3227 ;; Hardware stack levels used:    1
  3228 ;; Hardware stack levels required when called:    3
  3229 ;; This function calls:
  3230 ;;		___flpack
  3231 ;; This function is called by:
  3232 ;;		_floor
  3233 ;; This function uses a non-reentrant model
  3234 ;;
  3235                           
  3236                           	psect	text14
  3237  002B18                     __ptext14:
  3238                           	opt stack 0
  3239  002B18                     ___altofl:
  3240                           	opt stack 23
  3241                           
  3242                           ;incstack = 0
  3243  002B18  0E00               	movlw	0
  3244  002B1A  6E2A               	movwf	___altofl@sign,c
  3245  002B1C  0100               	movlb	0	; () banked
  3246  002B1E  AF63               	btfss	(___altofl@c+3)& (0+255),7,b
  3247  002B20  D00C               	goto	l3569
  3248                           
  3249                           ; BSR set to: 0
  3250  002B22  0100               	movlb	0	; () banked
  3251  002B24  1F63               	comf	(___altofl@c+3)& (0+255),f,b
  3252  002B26  1F62               	comf	(___altofl@c+2)& (0+255),f,b
  3253  002B28  1F61               	comf	(___altofl@c+1)& (0+255),f,b
  3254  002B2A  6D60               	negf	___altofl@c& (0+255),b
  3255  002B2C  0E00               	movlw	0
  3256  002B2E  2361               	addwfc	(___altofl@c+1)& (0+255),f,b
  3257  002B30  2362               	addwfc	(___altofl@c+2)& (0+255),f,b
  3258  002B32  2363               	addwfc	(___altofl@c+3)& (0+255),f,b
  3259                           
  3260                           ; BSR set to: 0
  3261  002B34  0E01               	movlw	1
  3262  002B36  6E2A               	movwf	___altofl@sign,c
  3263  002B38  D000               	goto	l3569
  3264  002B3A                     l3569:
  3265                           
  3266                           ; BSR set to: 0
  3267  002B3A  C060  F020         	movff	___altofl@c,___flpack@arg
  3268  002B3E  C061  F021         	movff	___altofl@c+1,___flpack@arg+1
  3269  002B42  C062  F022         	movff	___altofl@c+2,___flpack@arg+2
  3270  002B46  C063  F023         	movff	___altofl@c+3,___flpack@arg+3
  3271  002B4A  0E96               	movlw	150
  3272  002B4C  6E24               	movwf	___flpack@exp,c
  3273  002B4E  C02A  F025         	movff	___altofl@sign,___flpack@sign
  3274  002B52  EC3F  F011         	call	___flpack	;wreg free
  3275  002B56  C020  F060         	movff	?___flpack,?___altofl
  3276  002B5A  C021  F061         	movff	?___flpack+1,?___altofl+1
  3277  002B5E  C022  F062         	movff	?___flpack+2,?___altofl+2
  3278  002B62  C023  F063         	movff	?___flpack+3,?___altofl+3
  3279  002B66  0012               	return	
  3280  002B68  0012               	return		;funcret
  3281  002B6A                     __end_of___altofl:
  3282                           	opt stack 0
  3283                           tblptru	equ	0xFF8
  3284                           tblptrh	equ	0xFF7
  3285                           postinc0	equ	0xFEE
  3286                           wreg	equ	0xFE8
  3287                           postinc2	equ	0xFDE
  3288                           postdec2	equ	0xFDD
  3289                           fsr2h	equ	0xFDA
  3290                           fsr2l	equ	0xFD9
  3291                           status	equ	0xFD8
  3292                           
  3293 ;; *************** function ___lltofl *****************
  3294 ;; Defined at:
  3295 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltofl.c"
  3296 ;; Parameters:    Size  Location     Type
  3297 ;;  c               4    0[BANK0 ] unsigned long 
  3298 ;; Auto vars:     Size  Location     Type
  3299 ;;		None
  3300 ;; Return value:  Size  Location     Type
  3301 ;;                  4    0[BANK0 ] unsigned long 
  3302 ;; Registers used:
  3303 ;;		wreg, status,2, status,0, cstack
  3304 ;; Tracked objects:
  3305 ;;		On entry : 0/0
  3306 ;;		On exit  : 0/0
  3307 ;;		Unchanged: 0/0
  3308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3309 ;;      Params:         0       4       0       0       0       0       0
  3310 ;;      Locals:         0       0       0       0       0       0       0
  3311 ;;      Temps:          0       0       0       0       0       0       0
  3312 ;;      Totals:         0       4       0       0       0       0       0
  3313 ;;Total ram usage:        4 bytes
  3314 ;; Hardware stack levels used:    1
  3315 ;; Hardware stack levels required when called:    3
  3316 ;; This function calls:
  3317 ;;		___flpack
  3318 ;; This function is called by:
  3319 ;;		_pow
  3320 ;; This function uses a non-reentrant model
  3321 ;;
  3322                           
  3323                           	psect	text15
  3324  002D4A                     __ptext15:
  3325                           	opt stack 0
  3326  002D4A                     ___lltofl:
  3327                           	opt stack 25
  3328                           
  3329                           ;incstack = 0
  3330  002D4A  C060  F020         	movff	___lltofl@c,___flpack@arg
  3331  002D4E  C061  F021         	movff	___lltofl@c+1,___flpack@arg+1
  3332  002D52  C062  F022         	movff	___lltofl@c+2,___flpack@arg+2
  3333  002D56  C063  F023         	movff	___lltofl@c+3,___flpack@arg+3
  3334  002D5A  0E96               	movlw	150
  3335  002D5C  6E24               	movwf	___flpack@exp,c
  3336  002D5E  0E00               	movlw	0
  3337  002D60  6E25               	movwf	___flpack@sign,c
  3338  002D62  EC3F  F011         	call	___flpack	;wreg free
  3339  002D66  C020  F060         	movff	?___flpack,?___lltofl
  3340  002D6A  C021  F061         	movff	?___flpack+1,?___lltofl+1
  3341  002D6E  C022  F062         	movff	?___flpack+2,?___lltofl+2
  3342  002D72  C023  F063         	movff	?___flpack+3,?___lltofl+3
  3343  002D76  0012               	return	
  3344  002D78  0012               	return		;funcret
  3345  002D7A                     __end_of___lltofl:
  3346                           	opt stack 0
  3347                           tblptru	equ	0xFF8
  3348                           tblptrh	equ	0xFF7
  3349                           postinc0	equ	0xFEE
  3350                           wreg	equ	0xFE8
  3351                           postinc2	equ	0xFDE
  3352                           postdec2	equ	0xFDD
  3353                           fsr2h	equ	0xFDA
  3354                           fsr2l	equ	0xFD9
  3355                           status	equ	0xFD8
  3356                           
  3357 ;; *************** function _acos *****************
  3358 ;; Defined at:
  3359 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\acos.c"
  3360 ;; Parameters:    Size  Location     Type
  3361 ;;  x               4  115[BANK0 ] unsigned long 
  3362 ;; Auto vars:     Size  Location     Type
  3363 ;;		None
  3364 ;; Return value:  Size  Location     Type
  3365 ;;                  4  115[BANK0 ] unsigned long 
  3366 ;; Registers used:
  3367 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3368 ;; Tracked objects:
  3369 ;;		On entry : 0/0
  3370 ;;		On exit  : 0/0
  3371 ;;		Unchanged: 0/0
  3372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3373 ;;      Params:         0       4       0       0       0       0       0
  3374 ;;      Locals:         0       4       0       0       0       0       0
  3375 ;;      Temps:          0       0       0       0       0       0       0
  3376 ;;      Totals:         0       8       0       0       0       0       0
  3377 ;;Total ram usage:        8 bytes
  3378 ;; Hardware stack levels used:    1
  3379 ;; Hardware stack levels required when called:    7
  3380 ;; This function calls:
  3381 ;;		___fladd
  3382 ;;		___flneg
  3383 ;;		_asin
  3384 ;; This function is called by:
  3385 ;;		_Gyros_Update
  3386 ;; This function uses a non-reentrant model
  3387 ;;
  3388                           
  3389                           	psect	text16
  3390  002924                     __ptext16:
  3391                           	opt stack 0
  3392  002924                     _acos:
  3393                           	opt stack 22
  3394                           
  3395                           ;incstack = 0
  3396  002924  C0D3  F0CF         	movff	acos@x,asin@x
  3397  002928  C0D4  F0D0         	movff	acos@x+1,asin@x+1
  3398  00292C  C0D5  F0D1         	movff	acos@x+2,asin@x+2
  3399  002930  C0D6  F0D2         	movff	acos@x+3,asin@x+3
  3400  002934  EC50  F005         	call	_asin	;wreg free
  3401  002938  C0CF  F0D7         	movff	?_asin,_acos$2027
  3402  00293C  C0D0  F0D8         	movff	?_asin+1,_acos$2027+1
  3403  002940  C0D1  F0D9         	movff	?_asin+2,_acos$2027+2
  3404  002944  C0D2  F0DA         	movff	?_asin+3,_acos$2027+3
  3405  002948  C0D7  F020         	movff	_acos$2027,___flneg@f1
  3406  00294C  C0D8  F021         	movff	_acos$2027+1,___flneg@f1+1
  3407  002950  C0D9  F022         	movff	_acos$2027+2,___flneg@f1+2
  3408  002954  C0DA  F023         	movff	_acos$2027+3,___flneg@f1+3
  3409  002958  EC73  F016         	call	___flneg	;wreg free
  3410  00295C  C020  F064         	movff	?___flneg,___fladd@f1
  3411  002960  C021  F065         	movff	?___flneg+1,___fladd@f1+1
  3412  002964  C022  F066         	movff	?___flneg+2,___fladd@f1+2
  3413  002968  C023  F067         	movff	?___flneg+3,___fladd@f1+3
  3414  00296C  0EDB               	movlw	219
  3415  00296E  0100               	movlb	0	; () banked
  3416  002970  6F68               	movwf	___fladd@f2& (0+255),b
  3417  002972  0E0F               	movlw	15
  3418  002974  6F69               	movwf	(___fladd@f2+1)& (0+255),b
  3419  002976  0EC9               	movlw	201
  3420  002978  6F6A               	movwf	(___fladd@f2+2)& (0+255),b
  3421  00297A  0E3F               	movlw	63
  3422  00297C  6F6B               	movwf	(___fladd@f2+3)& (0+255),b
  3423  00297E  EC28  F008         	call	___fladd	;wreg free
  3424  002982  C064  F0D3         	movff	?___fladd,?_acos
  3425  002986  C065  F0D4         	movff	?___fladd+1,?_acos+1
  3426  00298A  C066  F0D5         	movff	?___fladd+2,?_acos+2
  3427  00298E  C067  F0D6         	movff	?___fladd+3,?_acos+3
  3428  002992  0012               	return	
  3429  002994  0012               	return		;funcret
  3430  002996                     __end_of_acos:
  3431                           	opt stack 0
  3432                           tblptru	equ	0xFF8
  3433                           tblptrh	equ	0xFF7
  3434                           postinc0	equ	0xFEE
  3435                           wreg	equ	0xFE8
  3436                           postinc2	equ	0xFDE
  3437                           postdec2	equ	0xFDD
  3438                           fsr2h	equ	0xFDA
  3439                           fsr2l	equ	0xFD9
  3440                           status	equ	0xFD8
  3441                           
  3442 ;; *************** function _asin *****************
  3443 ;; Defined at:
  3444 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\asin.c"
  3445 ;; Parameters:    Size  Location     Type
  3446 ;;  x               4  111[BANK0 ] unsigned long 
  3447 ;; Auto vars:     Size  Location     Type
  3448 ;;  y               4   16[BANK1 ] unsigned long 
  3449 ;;  sgn             4    0[BANK1 ] unsigned long 
  3450 ;; Return value:  Size  Location     Type
  3451 ;;                  4  111[BANK0 ] unsigned long 
  3452 ;; Registers used:
  3453 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3454 ;; Tracked objects:
  3455 ;;		On entry : 0/0
  3456 ;;		On exit  : 0/0
  3457 ;;		Unchanged: 0/0
  3458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3459 ;;      Params:         0       4       0       0       0       0       0
  3460 ;;      Locals:         0       0      24       0       0       0       0
  3461 ;;      Temps:          0       0       0       0       0       0       0
  3462 ;;      Totals:         0       4      24       0       0       0       0
  3463 ;;Total ram usage:       28 bytes
  3464 ;; Hardware stack levels used:    1
  3465 ;; Hardware stack levels required when called:    6
  3466 ;; This function calls:
  3467 ;;		___fladd
  3468 ;;		___fldiv
  3469 ;;		___flge
  3470 ;;		___flmul
  3471 ;;		___flneg
  3472 ;;		_atan
  3473 ;;		_fabs
  3474 ;;		_sqrt
  3475 ;; This function is called by:
  3476 ;;		_acos
  3477 ;; This function uses a non-reentrant model
  3478 ;;
  3479                           
  3480                           	psect	text17
  3481  000AA0                     __ptext17:
  3482                           	opt stack 0
  3483  000AA0                     _asin:
  3484                           	opt stack 22
  3485                           
  3486                           ;incstack = 0
  3487  000AA0  0E00               	movlw	0
  3488  000AA2  0100               	movlb	0	; () banked
  3489  000AA4  6F60               	movwf	___flge@ff1& (0+255),b
  3490  000AA6  0E00               	movlw	0
  3491  000AA8  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  3492  000AAA  0E80               	movlw	128
  3493  000AAC  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  3494  000AAE  0E3F               	movlw	63
  3495  000AB0  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  3496  000AB2  C0CF  F024         	movff	asin@x,fabs@d
  3497  000AB6  C0D0  F025         	movff	asin@x+1,fabs@d+1
  3498  000ABA  C0D1  F026         	movff	asin@x+2,fabs@d+2
  3499  000ABE  C0D2  F027         	movff	asin@x+3,fabs@d+3
  3500  000AC2  EC3C  F016         	call	_fabs	;wreg free
  3501  000AC6  C024  F064         	movff	?_fabs,___flge@ff2
  3502  000ACA  C025  F065         	movff	?_fabs+1,___flge@ff2+1
  3503  000ACE  C026  F066         	movff	?_fabs+2,___flge@ff2+2
  3504  000AD2  C027  F067         	movff	?_fabs+3,___flge@ff2+3
  3505  000AD6  ECB9  F012         	call	___flge	;wreg free
  3506  000ADA  0100               	movlb	0	; () banked
  3507  000ADC  B0D8               	btfsc	status,0,c
  3508  000ADE  D00F               	goto	l3893
  3509                           
  3510                           ; BSR set to: 0
  3511  000AE0  0E00               	movlw	0
  3512  000AE2  0100               	movlb	0	; () banked
  3513  000AE4  6FF9               	movwf	(_errno+1)& (0+255),b
  3514  000AE6  0E21               	movlw	33
  3515  000AE8  6FF8               	movwf	_errno& (0+255),b
  3516  000AEA  0E00               	movlw	0
  3517  000AEC  0100               	movlb	0	; () banked
  3518  000AEE  6FCF               	movwf	?_asin& (0+255),b
  3519  000AF0  0E00               	movlw	0
  3520  000AF2  6FD0               	movwf	(?_asin+1)& (0+255),b
  3521  000AF4  0E00               	movlw	0
  3522  000AF6  6FD1               	movwf	(?_asin+2)& (0+255),b
  3523  000AF8  0E00               	movlw	0
  3524  000AFA  6FD2               	movwf	(?_asin+3)& (0+255),b
  3525                           
  3526                           ; BSR set to: 0
  3527  000AFC  0012               	return	
  3528  000AFE                     l3893:
  3529                           
  3530                           ; BSR set to: 0
  3531  000AFE  0E00               	movlw	0
  3532  000B00  0101               	movlb	1	; () banked
  3533  000B02  6F00               	movwf	asin@sgn& (0+255),b
  3534  000B04  0E00               	movlw	0
  3535  000B06  6F01               	movwf	(asin@sgn+1)& (0+255),b
  3536  000B08  0E80               	movlw	128
  3537  000B0A  6F02               	movwf	(asin@sgn+2)& (0+255),b
  3538  000B0C  0E3F               	movlw	63
  3539  000B0E  6F03               	movwf	(asin@sgn+3)& (0+255),b
  3540                           
  3541                           ; BSR set to: 1
  3542  000B10  C0CF  F073         	movff	asin@x,___flmul@f2
  3543  000B14  C0D0  F074         	movff	asin@x+1,___flmul@f2+1
  3544  000B18  C0D1  F075         	movff	asin@x+2,___flmul@f2+2
  3545  000B1C  C0D2  F076         	movff	asin@x+3,___flmul@f2+3
  3546  000B20  C0CF  F06F         	movff	asin@x,___flmul@f1
  3547  000B24  C0D0  F070         	movff	asin@x+1,___flmul@f1+1
  3548  000B28  C0D1  F071         	movff	asin@x+2,___flmul@f1+2
  3549  000B2C  C0D2  F072         	movff	asin@x+3,___flmul@f1+3
  3550  000B30  EC41  F00E         	call	___flmul	;wreg free
  3551  000B34  C06F  F020         	movff	?___flmul,___flneg@f1
  3552  000B38  C070  F021         	movff	?___flmul+1,___flneg@f1+1
  3553  000B3C  C071  F022         	movff	?___flmul+2,___flneg@f1+2
  3554  000B40  C072  F023         	movff	?___flmul+3,___flneg@f1+3
  3555  000B44  EC73  F016         	call	___flneg	;wreg free
  3556  000B48  C020  F064         	movff	?___flneg,___fladd@f1
  3557  000B4C  C021  F065         	movff	?___flneg+1,___fladd@f1+1
  3558  000B50  C022  F066         	movff	?___flneg+2,___fladd@f1+2
  3559  000B54  C023  F067         	movff	?___flneg+3,___fladd@f1+3
  3560  000B58  0E00               	movlw	0
  3561  000B5A  0100               	movlb	0	; () banked
  3562  000B5C  6F68               	movwf	___fladd@f2& (0+255),b
  3563  000B5E  0E00               	movlw	0
  3564  000B60  6F69               	movwf	(___fladd@f2+1)& (0+255),b
  3565  000B62  0E80               	movlw	128
  3566  000B64  6F6A               	movwf	(___fladd@f2+2)& (0+255),b
  3567  000B66  0E3F               	movlw	63
  3568  000B68  6F6B               	movwf	(___fladd@f2+3)& (0+255),b
  3569  000B6A  EC28  F008         	call	___fladd	;wreg free
  3570  000B6E  C064  F104         	movff	?___fladd,_asin$2028
  3571  000B72  C065  F105         	movff	?___fladd+1,_asin$2028+1
  3572  000B76  C066  F106         	movff	?___fladd+2,_asin$2028+2
  3573  000B7A  C067  F107         	movff	?___fladd+3,_asin$2028+3
  3574  000B7E  C104  F0B6         	movff	_asin$2028,sqrt@y
  3575  000B82  C105  F0B7         	movff	_asin$2028+1,sqrt@y+1
  3576  000B86  C106  F0B8         	movff	_asin$2028+2,sqrt@y+2
  3577  000B8A  C107  F0B9         	movff	_asin$2028+3,sqrt@y+3
  3578  000B8E  EC83  F00A         	call	_sqrt	;wreg free
  3579  000B92  C0B6  F110         	movff	?_sqrt,asin@y
  3580  000B96  C0B7  F111         	movff	?_sqrt+1,asin@y+1
  3581  000B9A  C0B8  F112         	movff	?_sqrt+2,asin@y+2
  3582  000B9E  C0B9  F113         	movff	?_sqrt+3,asin@y+3
  3583  000BA2  C0CF  F024         	movff	asin@x,fabs@d
  3584  000BA6  C0D0  F025         	movff	asin@x+1,fabs@d+1
  3585  000BAA  C0D1  F026         	movff	asin@x+2,fabs@d+2
  3586  000BAE  C0D2  F027         	movff	asin@x+3,fabs@d+3
  3587  000BB2  EC3C  F016         	call	_fabs	;wreg free
  3588  000BB6  C024  F060         	movff	?_fabs,___flge@ff1
  3589  000BBA  C025  F061         	movff	?_fabs+1,___flge@ff1+1
  3590  000BBE  C026  F062         	movff	?_fabs+2,___flge@ff1+2
  3591  000BC2  C027  F063         	movff	?_fabs+3,___flge@ff1+3
  3592  000BC6  0E8F               	movlw	143
  3593  000BC8  0100               	movlb	0	; () banked
  3594  000BCA  6F64               	movwf	___flge@ff2& (0+255),b
  3595  000BCC  0EC2               	movlw	194
  3596  000BCE  6F65               	movwf	(___flge@ff2+1)& (0+255),b
  3597  000BD0  0E35               	movlw	53
  3598  000BD2  6F66               	movwf	(___flge@ff2+2)& (0+255),b
  3599  000BD4  0E3F               	movlw	63
  3600  000BD6  6F67               	movwf	(___flge@ff2+3)& (0+255),b
  3601  000BD8  ECB9  F012         	call	___flge	;wreg free
  3602  000BDC  0100               	movlb	0	; () banked
  3603  000BDE  B0D8               	btfsc	status,0,c
  3604  000BE0  D02D               	goto	l3907
  3605                           
  3606                           ; BSR set to: 0
  3607  000BE2  C0CF  F07E         	movff	asin@x,___fldiv@f1
  3608  000BE6  C0D0  F07F         	movff	asin@x+1,___fldiv@f1+1
  3609  000BEA  C0D1  F080         	movff	asin@x+2,___fldiv@f1+2
  3610  000BEE  C0D2  F081         	movff	asin@x+3,___fldiv@f1+3
  3611  000BF2  C110  F082         	movff	asin@y,___fldiv@f2
  3612  000BF6  C111  F083         	movff	asin@y+1,___fldiv@f2+1
  3613  000BFA  C112  F084         	movff	asin@y+2,___fldiv@f2+2
  3614  000BFE  C113  F085         	movff	asin@y+3,___fldiv@f2+3
  3615  000C02  ECF3  F00E         	call	___fldiv	;wreg free
  3616  000C06  C07E  F114         	movff	?___fldiv,_asin$2029
  3617  000C0A  C07F  F115         	movff	?___fldiv+1,_asin$2029+1
  3618  000C0E  C080  F116         	movff	?___fldiv+2,_asin$2029+2
  3619  000C12  C081  F117         	movff	?___fldiv+3,_asin$2029+3
  3620  000C16  C114  F08E         	movff	_asin$2029,atan@f
  3621  000C1A  C115  F08F         	movff	_asin$2029+1,atan@f+1
  3622  000C1E  C116  F090         	movff	_asin$2029+2,atan@f+2
  3623  000C22  C117  F091         	movff	_asin$2029+3,atan@f+3
  3624  000C26  EC58  F009         	call	_atan	;wreg free
  3625  000C2A  C08E  F0CF         	movff	?_atan,?_asin
  3626  000C2E  C08F  F0D0         	movff	?_atan+1,?_asin+1
  3627  000C32  C090  F0D1         	movff	?_atan+2,?_asin+2
  3628  000C36  C091  F0D2         	movff	?_atan+3,?_asin+3
  3629  000C3A  0012               	return	
  3630  000C3C                     l3907:
  3631  000C3C  0100               	movlb	0	; () banked
  3632  000C3E  AFD2               	btfss	(asin@x+3)& (0+255),7,b
  3633  000C40  D06E               	goto	l3919
  3634                           
  3635                           ; BSR set to: 0
  3636  000C42  C0CF  F082         	movff	asin@x,___fldiv@f2
  3637  000C46  C0D0  F083         	movff	asin@x+1,___fldiv@f2+1
  3638  000C4A  C0D1  F084         	movff	asin@x+2,___fldiv@f2+2
  3639  000C4E  C0D2  F085         	movff	asin@x+3,___fldiv@f2+3
  3640  000C52  C110  F020         	movff	asin@y,___flneg@f1
  3641  000C56  C111  F021         	movff	asin@y+1,___flneg@f1+1
  3642  000C5A  C112  F022         	movff	asin@y+2,___flneg@f1+2
  3643  000C5E  C113  F023         	movff	asin@y+3,___flneg@f1+3
  3644  000C62  EC73  F016         	call	___flneg	;wreg free
  3645  000C66  C020  F07E         	movff	?___flneg,___fldiv@f1
  3646  000C6A  C021  F07F         	movff	?___flneg+1,___fldiv@f1+1
  3647  000C6E  C022  F080         	movff	?___flneg+2,___fldiv@f1+2
  3648  000C72  C023  F081         	movff	?___flneg+3,___fldiv@f1+3
  3649  000C76  ECF3  F00E         	call	___fldiv	;wreg free
  3650  000C7A  C07E  F114         	movff	?___fldiv,_asin$2029
  3651  000C7E  C07F  F115         	movff	?___fldiv+1,_asin$2029+1
  3652  000C82  C080  F116         	movff	?___fldiv+2,_asin$2029+2
  3653  000C86  C081  F117         	movff	?___fldiv+3,_asin$2029+3
  3654  000C8A  C114  F08E         	movff	_asin$2029,atan@f
  3655  000C8E  C115  F08F         	movff	_asin$2029+1,atan@f+1
  3656  000C92  C116  F090         	movff	_asin$2029+2,atan@f+2
  3657  000C96  C117  F091         	movff	_asin$2029+3,atan@f+3
  3658  000C9A  EC58  F009         	call	_atan	;wreg free
  3659  000C9E  C08E  F10C         	movff	?_atan,_asin$2030
  3660  000CA2  C08F  F10D         	movff	?_atan+1,_asin$2030+1
  3661  000CA6  C090  F10E         	movff	?_atan+2,_asin$2030+2
  3662  000CAA  C091  F10F         	movff	?_atan+3,_asin$2030+3
  3663  000CAE  0EDB               	movlw	219
  3664  000CB0  0100               	movlb	0	; () banked
  3665  000CB2  6F68               	movwf	___fladd@f2& (0+255),b
  3666  000CB4  0E0F               	movlw	15
  3667  000CB6  6F69               	movwf	(___fladd@f2+1)& (0+255),b
  3668  000CB8  0EC9               	movlw	201
  3669  000CBA  6F6A               	movwf	(___fladd@f2+2)& (0+255),b
  3670  000CBC  0E3F               	movlw	63
  3671  000CBE  6F6B               	movwf	(___fladd@f2+3)& (0+255),b
  3672  000CC0  C10C  F020         	movff	_asin$2030,___flneg@f1
  3673  000CC4  C10D  F021         	movff	_asin$2030+1,___flneg@f1+1
  3674  000CC8  C10E  F022         	movff	_asin$2030+2,___flneg@f1+2
  3675  000CCC  C10F  F023         	movff	_asin$2030+3,___flneg@f1+3
  3676  000CD0  EC73  F016         	call	___flneg	;wreg free
  3677  000CD4  C020  F064         	movff	?___flneg,___fladd@f1
  3678  000CD8  C021  F065         	movff	?___flneg+1,___fladd@f1+1
  3679  000CDC  C022  F066         	movff	?___flneg+2,___fladd@f1+2
  3680  000CE0  C023  F067         	movff	?___flneg+3,___fladd@f1+3
  3681  000CE4  EC28  F008         	call	___fladd	;wreg free
  3682  000CE8  C064  F108         	movff	?___fladd,_asin$2031
  3683  000CEC  C065  F109         	movff	?___fladd+1,_asin$2031+1
  3684  000CF0  C066  F10A         	movff	?___fladd+2,_asin$2031+2
  3685  000CF4  C067  F10B         	movff	?___fladd+3,_asin$2031+3
  3686  000CF8  C108  F020         	movff	_asin$2031,___flneg@f1
  3687  000CFC  C109  F021         	movff	_asin$2031+1,___flneg@f1+1
  3688  000D00  C10A  F022         	movff	_asin$2031+2,___flneg@f1+2
  3689  000D04  C10B  F023         	movff	_asin$2031+3,___flneg@f1+3
  3690  000D08  EC73  F016         	call	___flneg	;wreg free
  3691  000D0C  C020  F0CF         	movff	?___flneg,?_asin
  3692  000D10  C021  F0D0         	movff	?___flneg+1,?_asin+1
  3693  000D14  C022  F0D1         	movff	?___flneg+2,?_asin+2
  3694  000D18  C023  F0D2         	movff	?___flneg+3,?_asin+3
  3695  000D1C  0012               	return	
  3696  000D1E                     l3919:
  3697  000D1E  C0CF  F082         	movff	asin@x,___fldiv@f2
  3698  000D22  C0D0  F083         	movff	asin@x+1,___fldiv@f2+1
  3699  000D26  C0D1  F084         	movff	asin@x+2,___fldiv@f2+2
  3700  000D2A  C0D2  F085         	movff	asin@x+3,___fldiv@f2+3
  3701  000D2E  C110  F07E         	movff	asin@y,___fldiv@f1
  3702  000D32  C111  F07F         	movff	asin@y+1,___fldiv@f1+1
  3703  000D36  C112  F080         	movff	asin@y+2,___fldiv@f1+2
  3704  000D3A  C113  F081         	movff	asin@y+3,___fldiv@f1+3
  3705  000D3E  ECF3  F00E         	call	___fldiv	;wreg free
  3706  000D42  C07E  F114         	movff	?___fldiv,_asin$2029
  3707  000D46  C07F  F115         	movff	?___fldiv+1,_asin$2029+1
  3708  000D4A  C080  F116         	movff	?___fldiv+2,_asin$2029+2
  3709  000D4E  C081  F117         	movff	?___fldiv+3,_asin$2029+3
  3710  000D52  C114  F08E         	movff	_asin$2029,atan@f
  3711  000D56  C115  F08F         	movff	_asin$2029+1,atan@f+1
  3712  000D5A  C116  F090         	movff	_asin$2029+2,atan@f+2
  3713  000D5E  C117  F091         	movff	_asin$2029+3,atan@f+3
  3714  000D62  EC58  F009         	call	_atan	;wreg free
  3715  000D66  C08E  F10C         	movff	?_atan,_asin$2030
  3716  000D6A  C08F  F10D         	movff	?_atan+1,_asin$2030+1
  3717  000D6E  C090  F10E         	movff	?_atan+2,_asin$2030+2
  3718  000D72  C091  F10F         	movff	?_atan+3,_asin$2030+3
  3719  000D76  C10C  F020         	movff	_asin$2030,___flneg@f1
  3720  000D7A  C10D  F021         	movff	_asin$2030+1,___flneg@f1+1
  3721  000D7E  C10E  F022         	movff	_asin$2030+2,___flneg@f1+2
  3722  000D82  C10F  F023         	movff	_asin$2030+3,___flneg@f1+3
  3723  000D86  EC73  F016         	call	___flneg	;wreg free
  3724  000D8A  C020  F064         	movff	?___flneg,___fladd@f1
  3725  000D8E  C021  F065         	movff	?___flneg+1,___fladd@f1+1
  3726  000D92  C022  F066         	movff	?___flneg+2,___fladd@f1+2
  3727  000D96  C023  F067         	movff	?___flneg+3,___fladd@f1+3
  3728  000D9A  0EDB               	movlw	219
  3729  000D9C  0100               	movlb	0	; () banked
  3730  000D9E  6F68               	movwf	___fladd@f2& (0+255),b
  3731  000DA0  0E0F               	movlw	15
  3732  000DA2  6F69               	movwf	(___fladd@f2+1)& (0+255),b
  3733  000DA4  0EC9               	movlw	201
  3734  000DA6  6F6A               	movwf	(___fladd@f2+2)& (0+255),b
  3735  000DA8  0E3F               	movlw	63
  3736  000DAA  6F6B               	movwf	(___fladd@f2+3)& (0+255),b
  3737  000DAC  EC28  F008         	call	___fladd	;wreg free
  3738  000DB0  C064  F0CF         	movff	?___fladd,?_asin
  3739  000DB4  C065  F0D0         	movff	?___fladd+1,?_asin+1
  3740  000DB8  C066  F0D1         	movff	?___fladd+2,?_asin+2
  3741  000DBC  C067  F0D2         	movff	?___fladd+3,?_asin+3
  3742  000DC0  0012               	return	
  3743  000DC2  0012               	return		;funcret
  3744  000DC4                     __end_of_asin:
  3745                           	opt stack 0
  3746                           tblptru	equ	0xFF8
  3747                           tblptrh	equ	0xFF7
  3748                           postinc0	equ	0xFEE
  3749                           wreg	equ	0xFE8
  3750                           postinc2	equ	0xFDE
  3751                           postdec2	equ	0xFDD
  3752                           fsr2h	equ	0xFDA
  3753                           fsr2l	equ	0xFD9
  3754                           status	equ	0xFD8
  3755                           
  3756 ;; *************** function _sqrt *****************
  3757 ;; Defined at:
  3758 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\sqrt.c"
  3759 ;; Parameters:    Size  Location     Type
  3760 ;;  y               4   86[BANK0 ] unsigned long 
  3761 ;; Auto vars:     Size  Location     Type
  3762 ;;  x               4  107[BANK0 ] unsigned long 
  3763 ;;  q               4  103[BANK0 ] unsigned long 
  3764 ;;  z               4   98[BANK0 ] unsigned long 
  3765 ;;  og              4   94[BANK0 ] unsigned long 
  3766 ;;  i               1  102[BANK0 ] unsigned char 
  3767 ;; Return value:  Size  Location     Type
  3768 ;;                  4   86[BANK0 ] unsigned char 
  3769 ;; Registers used:
  3770 ;;		wreg, status,2, status,0, cstack
  3771 ;; Tracked objects:
  3772 ;;		On entry : 0/0
  3773 ;;		On exit  : 0/0
  3774 ;;		Unchanged: 0/0
  3775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3776 ;;      Params:         0       4       0       0       0       0       0
  3777 ;;      Locals:         0      17       0       0       0       0       0
  3778 ;;      Temps:          0       4       0       0       0       0       0
  3779 ;;      Totals:         0      25       0       0       0       0       0
  3780 ;;Total ram usage:       25 bytes
  3781 ;; Hardware stack levels used:    1
  3782 ;; Hardware stack levels required when called:    5
  3783 ;; This function calls:
  3784 ;;		___flge
  3785 ;;		___flmul
  3786 ;;		___flsub
  3787 ;; This function is called by:
  3788 ;;		_Gyros_Update
  3789 ;;		_asin
  3790 ;; This function uses a non-reentrant model
  3791 ;;
  3792                           
  3793                           	psect	text18
  3794  001506                     __ptext18:
  3795                           	opt stack 0
  3796  001506                     _sqrt:
  3797                           	opt stack 24
  3798                           
  3799                           ;incstack = 0
  3800  001506  0E00               	movlw	0
  3801  001508  0100               	movlb	0	; () banked
  3802  00150A  6F60               	movwf	___flge@ff1& (0+255),b
  3803  00150C  0E00               	movlw	0
  3804  00150E  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  3805  001510  0E00               	movlw	0
  3806  001512  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  3807  001514  0E00               	movlw	0
  3808  001516  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  3809  001518  C0B6  F064         	movff	sqrt@y,___flge@ff2
  3810  00151C  C0B7  F065         	movff	sqrt@y+1,___flge@ff2+1
  3811  001520  C0B8  F066         	movff	sqrt@y+2,___flge@ff2+2
  3812  001524  C0B9  F067         	movff	sqrt@y+3,___flge@ff2+3
  3813  001528  ECB9  F012         	call	___flge	;wreg free
  3814  00152C  0100               	movlb	0	; () banked
  3815  00152E  A0D8               	btfss	status,0,c
  3816  001530  D012               	goto	l1041
  3817                           
  3818                           ; BSR set to: 0
  3819  001532  0100               	movlb	0	; () banked
  3820  001534  AFB9               	btfss	(sqrt@y+3)& (0+255),7,b
  3821  001536  D005               	goto	l1042
  3822                           
  3823                           ; BSR set to: 0
  3824  001538  0E00               	movlw	0
  3825  00153A  0100               	movlb	0	; () banked
  3826  00153C  6FF9               	movwf	(_errno+1)& (0+255),b
  3827  00153E  0E21               	movlw	33
  3828  001540  6FF8               	movwf	_errno& (0+255),b
  3829  001542                     l1042:
  3830                           
  3831                           ; BSR set to: 0
  3832  001542  0E00               	movlw	0
  3833  001544  0100               	movlb	0	; () banked
  3834  001546  6FB6               	movwf	?_sqrt& (0+255),b
  3835  001548  0E00               	movlw	0
  3836  00154A  6FB7               	movwf	(?_sqrt+1)& (0+255),b
  3837  00154C  0E00               	movlw	0
  3838  00154E  6FB8               	movwf	(?_sqrt+2)& (0+255),b
  3839  001550  0E00               	movlw	0
  3840  001552  6FB9               	movwf	(?_sqrt+3)& (0+255),b
  3841                           
  3842                           ; BSR set to: 0
  3843  001554  0012               	return	
  3844  001556                     l1041:
  3845                           
  3846                           ; BSR set to: 0
  3847  001556  C0B6  F0C2         	movff	sqrt@y,sqrt@z
  3848  00155A  C0B7  F0C3         	movff	sqrt@y+1,sqrt@z+1
  3849  00155E  C0B8  F0C4         	movff	sqrt@y+2,sqrt@z+2
  3850  001562  C0B9  F0C5         	movff	sqrt@y+3,sqrt@z+3
  3851                           
  3852                           ; BSR set to: 0
  3853  001566  C0B6  F0BA         	movff	sqrt@y,??_sqrt
  3854  00156A  C0B7  F0BB         	movff	sqrt@y+1,??_sqrt+1
  3855  00156E  C0B8  F0BC         	movff	sqrt@y+2,??_sqrt+2
  3856  001572  C0B9  F0BD         	movff	sqrt@y+3,??_sqrt+3
  3857  001576  0100               	movlb	0	; () banked
  3858  001578  1FBA               	comf	??_sqrt& (0+255),f,b
  3859  00157A  1FBB               	comf	(??_sqrt+1)& (0+255),f,b
  3860  00157C  1FBC               	comf	(??_sqrt+2)& (0+255),f,b
  3861  00157E  1FBD               	comf	(??_sqrt+3)& (0+255),f,b
  3862  001580  2BBA               	incf	??_sqrt& (0+255),f,b
  3863  001582  0E00               	movlw	0
  3864  001584  23BB               	addwfc	(??_sqrt+1)& (0+255),f,b
  3865  001586  23BC               	addwfc	(??_sqrt+2)& (0+255),f,b
  3866  001588  23BD               	addwfc	(??_sqrt+3)& (0+255),f,b
  3867  00158A  0E5E               	movlw	94
  3868  00158C  0100               	movlb	0	; () banked
  3869  00158E  25BA               	addwf	??_sqrt& (0+255),w,b
  3870  001590  0100               	movlb	0	; () banked
  3871  001592  6FCB               	movwf	sqrt@x& (0+255),b
  3872  001594  0EC8               	movlw	200
  3873  001596  0100               	movlb	0	; () banked
  3874  001598  21BB               	addwfc	(??_sqrt+1)& (0+255),w,b
  3875  00159A  0100               	movlb	0	; () banked
  3876  00159C  6FCC               	movwf	(sqrt@x+1)& (0+255),b
  3877  00159E  0E6E               	movlw	110
  3878  0015A0  0100               	movlb	0	; () banked
  3879  0015A2  21BC               	addwfc	(??_sqrt+2)& (0+255),w,b
  3880  0015A4  0100               	movlb	0	; () banked
  3881  0015A6  6FCD               	movwf	(sqrt@x+2)& (0+255),b
  3882  0015A8  0EBE               	movlw	190
  3883  0015AA  0100               	movlb	0	; () banked
  3884  0015AC  21BD               	addwfc	(??_sqrt+3)& (0+255),w,b
  3885  0015AE  0100               	movlb	0	; () banked
  3886  0015B0  6FCE               	movwf	(sqrt@x+3)& (0+255),b
  3887                           
  3888                           ; BSR set to: 0
  3889  0015B2  0100               	movlb	0	; () banked
  3890  0015B4  90D8               	bcf	status,0,c
  3891  0015B6  33CE               	rrcf	(sqrt@x+3)& (0+255),f,b
  3892  0015B8  33CD               	rrcf	(sqrt@x+2)& (0+255),f,b
  3893  0015BA  33CC               	rrcf	(sqrt@x+1)& (0+255),f,b
  3894  0015BC  33CB               	rrcf	sqrt@x& (0+255),f,b
  3895                           
  3896                           ; BSR set to: 0
  3897  0015BE  0E00               	movlw	0
  3898  0015C0  0100               	movlb	0	; () banked
  3899  0015C2  5FC2               	subwf	sqrt@z& (0+255),f,b
  3900  0015C4  0E00               	movlw	0
  3901  0015C6  5BC3               	subwfb	(sqrt@z+1)& (0+255),f,b
  3902  0015C8  0E80               	movlw	128
  3903  0015CA  5BC4               	subwfb	(sqrt@z+2)& (0+255),f,b
  3904  0015CC  0E00               	movlw	0
  3905  0015CE  5BC5               	subwfb	(sqrt@z+3)& (0+255),f,b
  3906                           
  3907                           ; BSR set to: 0
  3908  0015D0  0E04               	movlw	4
  3909  0015D2  0100               	movlb	0	; () banked
  3910  0015D4  6FC6               	movwf	sqrt@i& (0+255),b
  3911  0015D6  D000               	goto	l3785
  3912  0015D8                     l3785:
  3913                           
  3914                           ; BSR set to: 0
  3915  0015D8  C0CB  F0BE         	movff	sqrt@x,sqrt@og
  3916  0015DC  C0CC  F0BF         	movff	sqrt@x+1,sqrt@og+1
  3917  0015E0  C0CD  F0C0         	movff	sqrt@x+2,sqrt@og+2
  3918  0015E4  C0CE  F0C1         	movff	sqrt@x+3,sqrt@og+3
  3919                           
  3920                           ; BSR set to: 0
  3921  0015E8  C0CB  F06F         	movff	sqrt@x,___flmul@f1
  3922  0015EC  C0CC  F070         	movff	sqrt@x+1,___flmul@f1+1
  3923  0015F0  C0CD  F071         	movff	sqrt@x+2,___flmul@f1+2
  3924  0015F4  C0CE  F072         	movff	sqrt@x+3,___flmul@f1+3
  3925  0015F8  C0C2  F073         	movff	sqrt@z,___flmul@f2
  3926  0015FC  C0C3  F074         	movff	sqrt@z+1,___flmul@f2+1
  3927  001600  C0C4  F075         	movff	sqrt@z+2,___flmul@f2+2
  3928  001604  C0C5  F076         	movff	sqrt@z+3,___flmul@f2+3
  3929  001608  EC41  F00E         	call	___flmul	;wreg free
  3930  00160C  C06F  F0C7         	movff	?___flmul,sqrt@q
  3931  001610  C070  F0C8         	movff	?___flmul+1,sqrt@q+1
  3932  001614  C071  F0C9         	movff	?___flmul+2,sqrt@q+2
  3933  001618  C072  F0CA         	movff	?___flmul+3,sqrt@q+3
  3934  00161C  C0C7  F06F         	movff	sqrt@q,___flmul@f1
  3935  001620  C0C8  F070         	movff	sqrt@q+1,___flmul@f1+1
  3936  001624  C0C9  F071         	movff	sqrt@q+2,___flmul@f1+2
  3937  001628  C0CA  F072         	movff	sqrt@q+3,___flmul@f1+3
  3938  00162C  C0CB  F073         	movff	sqrt@x,___flmul@f2
  3939  001630  C0CC  F074         	movff	sqrt@x+1,___flmul@f2+1
  3940  001634  C0CD  F075         	movff	sqrt@x+2,___flmul@f2+2
  3941  001638  C0CE  F076         	movff	sqrt@x+3,___flmul@f2+3
  3942  00163C  EC41  F00E         	call	___flmul	;wreg free
  3943  001640  C06F  F0C7         	movff	?___flmul,sqrt@q
  3944  001644  C070  F0C8         	movff	?___flmul+1,sqrt@q+1
  3945  001648  C071  F0C9         	movff	?___flmul+2,sqrt@q+2
  3946  00164C  C072  F0CA         	movff	?___flmul+3,sqrt@q+3
  3947  001650  C0C7  F06F         	movff	sqrt@q,___flmul@f1
  3948  001654  C0C8  F070         	movff	sqrt@q+1,___flmul@f1+1
  3949  001658  C0C9  F071         	movff	sqrt@q+2,___flmul@f1+2
  3950  00165C  C0CA  F072         	movff	sqrt@q+3,___flmul@f1+3
  3951  001660  C0CB  F073         	movff	sqrt@x,___flmul@f2
  3952  001664  C0CC  F074         	movff	sqrt@x+1,___flmul@f2+1
  3953  001668  C0CD  F075         	movff	sqrt@x+2,___flmul@f2+2
  3954  00166C  C0CE  F076         	movff	sqrt@x+3,___flmul@f2+3
  3955  001670  EC41  F00E         	call	___flmul	;wreg free
  3956  001674  C06F  F0C7         	movff	?___flmul,sqrt@q
  3957  001678  C070  F0C8         	movff	?___flmul+1,sqrt@q+1
  3958  00167C  C071  F0C9         	movff	?___flmul+2,sqrt@q+2
  3959  001680  C072  F0CA         	movff	?___flmul+3,sqrt@q+3
  3960  001684  C0CB  F06F         	movff	sqrt@x,___flmul@f1
  3961  001688  C0CC  F070         	movff	sqrt@x+1,___flmul@f1+1
  3962  00168C  C0CD  F071         	movff	sqrt@x+2,___flmul@f1+2
  3963  001690  C0CE  F072         	movff	sqrt@x+3,___flmul@f1+3
  3964  001694  0E00               	movlw	0
  3965  001696  0100               	movlb	0	; () banked
  3966  001698  6F73               	movwf	___flmul@f2& (0+255),b
  3967  00169A  0E00               	movlw	0
  3968  00169C  6F74               	movwf	(___flmul@f2+1)& (0+255),b
  3969  00169E  0EC0               	movlw	192
  3970  0016A0  6F75               	movwf	(___flmul@f2+2)& (0+255),b
  3971  0016A2  0E3F               	movlw	63
  3972  0016A4  6F76               	movwf	(___flmul@f2+3)& (0+255),b
  3973  0016A6  EC41  F00E         	call	___flmul	;wreg free
  3974  0016AA  C06F  F0CB         	movff	?___flmul,sqrt@x
  3975  0016AE  C070  F0CC         	movff	?___flmul+1,sqrt@x+1
  3976  0016B2  C071  F0CD         	movff	?___flmul+2,sqrt@x+2
  3977  0016B6  C072  F0CE         	movff	?___flmul+3,sqrt@x+3
  3978  0016BA  C0CB  F06F         	movff	sqrt@x,___flsub@f1
  3979  0016BE  C0CC  F070         	movff	sqrt@x+1,___flsub@f1+1
  3980  0016C2  C0CD  F071         	movff	sqrt@x+2,___flsub@f1+2
  3981  0016C6  C0CE  F072         	movff	sqrt@x+3,___flsub@f1+3
  3982  0016CA  C0C7  F073         	movff	sqrt@q,___flsub@f2
  3983  0016CE  C0C8  F074         	movff	sqrt@q+1,___flsub@f2+1
  3984  0016D2  C0C9  F075         	movff	sqrt@q+2,___flsub@f2+2
  3985  0016D6  C0CA  F076         	movff	sqrt@q+3,___flsub@f2+3
  3986  0016DA  EC30  F015         	call	___flsub	;wreg free
  3987  0016DE  C06F  F0CB         	movff	?___flsub,sqrt@x
  3988  0016E2  C070  F0CC         	movff	?___flsub+1,sqrt@x+1
  3989  0016E6  C071  F0CD         	movff	?___flsub+2,sqrt@x+2
  3990  0016EA  C072  F0CE         	movff	?___flsub+3,sqrt@x+3
  3991  0016EE  0100               	movlb	0	; () banked
  3992  0016F0  2FC6               	decfsz	sqrt@i& (0+255),f,b
  3993  0016F2  D772               	goto	l3785
  3994  0016F4  D000               	goto	l3799
  3995  0016F6                     l3799:
  3996                           
  3997                           ; BSR set to: 0
  3998  0016F6  C0CB  F06F         	movff	sqrt@x,___flmul@f1
  3999  0016FA  C0CC  F070         	movff	sqrt@x+1,___flmul@f1+1
  4000  0016FE  C0CD  F071         	movff	sqrt@x+2,___flmul@f1+2
  4001  001702  C0CE  F072         	movff	sqrt@x+3,___flmul@f1+3
  4002  001706  C0B6  F073         	movff	sqrt@y,___flmul@f2
  4003  00170A  C0B7  F074         	movff	sqrt@y+1,___flmul@f2+1
  4004  00170E  C0B8  F075         	movff	sqrt@y+2,___flmul@f2+2
  4005  001712  C0B9  F076         	movff	sqrt@y+3,___flmul@f2+3
  4006  001716  EC41  F00E         	call	___flmul	;wreg free
  4007  00171A  C06F  F0B6         	movff	?___flmul,?_sqrt
  4008  00171E  C070  F0B7         	movff	?___flmul+1,?_sqrt+1
  4009  001722  C071  F0B8         	movff	?___flmul+2,?_sqrt+2
  4010  001726  C072  F0B9         	movff	?___flmul+3,?_sqrt+3
  4011  00172A  0012               	return	
  4012  00172C  0012               	return		;funcret
  4013  00172E                     __end_of_sqrt:
  4014                           	opt stack 0
  4015                           tblptru	equ	0xFF8
  4016                           tblptrh	equ	0xFF7
  4017                           postinc0	equ	0xFEE
  4018                           wreg	equ	0xFE8
  4019                           postinc2	equ	0xFDE
  4020                           postdec2	equ	0xFDD
  4021                           fsr2h	equ	0xFDA
  4022                           fsr2l	equ	0xFD9
  4023                           status	equ	0xFD8
  4024                           
  4025 ;; *************** function ___flsub *****************
  4026 ;; Defined at:
  4027 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flsub.c"
  4028 ;; Parameters:    Size  Location     Type
  4029 ;;  f1              4   15[BANK0 ] unsigned char 
  4030 ;;  f2              4   19[BANK0 ] unsigned char 
  4031 ;; Auto vars:     Size  Location     Type
  4032 ;;		None
  4033 ;; Return value:  Size  Location     Type
  4034 ;;                  4   15[BANK0 ] unsigned char 
  4035 ;; Registers used:
  4036 ;;		wreg, status,2, status,0, cstack
  4037 ;; Tracked objects:
  4038 ;;		On entry : 0/0
  4039 ;;		On exit  : 0/0
  4040 ;;		Unchanged: 0/0
  4041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4042 ;;      Params:         0       8       0       0       0       0       0
  4043 ;;      Locals:         0       0       0       0       0       0       0
  4044 ;;      Temps:          0       0       0       0       0       0       0
  4045 ;;      Totals:         0       8       0       0       0       0       0
  4046 ;;Total ram usage:        8 bytes
  4047 ;; Hardware stack levels used:    1
  4048 ;; Hardware stack levels required when called:    4
  4049 ;; This function calls:
  4050 ;;		___fladd
  4051 ;; This function is called by:
  4052 ;;		_sqrt
  4053 ;;		_exp
  4054 ;; This function uses a non-reentrant model
  4055 ;;
  4056                           
  4057                           	psect	text19
  4058  002A60                     __ptext19:
  4059                           	opt stack 0
  4060  002A60                     ___flsub:
  4061                           	opt stack 24
  4062                           
  4063                           ;incstack = 0
  4064  002A60  0100               	movlb	0	; () banked
  4065  002A62  5173               	movf	___flsub@f2& (0+255),w,b
  4066  002A64  0100               	movlb	0	; () banked
  4067  002A66  1174               	iorwf	(___flsub@f2+1)& (0+255),w,b
  4068  002A68  0100               	movlb	0	; () banked
  4069  002A6A  1175               	iorwf	(___flsub@f2+2)& (0+255),w,b
  4070  002A6C  0100               	movlb	0	; () banked
  4071  002A6E  1176               	iorwf	(___flsub@f2+3)& (0+255),w,b
  4072  002A70  B4D8               	btfsc	status,2,c
  4073  002A72  D00A               	goto	l3617
  4074                           
  4075                           ; BSR set to: 0
  4076  002A74  0E00               	movlw	0
  4077  002A76  0100               	movlb	0	; () banked
  4078  002A78  1B73               	xorwf	___flsub@f2& (0+255),f,b
  4079  002A7A  0E00               	movlw	0
  4080  002A7C  1B74               	xorwf	(___flsub@f2+1)& (0+255),f,b
  4081  002A7E  0E00               	movlw	0
  4082  002A80  1B75               	xorwf	(___flsub@f2+2)& (0+255),f,b
  4083  002A82  0E80               	movlw	128
  4084  002A84  1B76               	xorwf	(___flsub@f2+3)& (0+255),f,b
  4085  002A86  D000               	goto	l3617
  4086  002A88                     l3617:
  4087                           
  4088                           ; BSR set to: 0
  4089  002A88  C06F  F064         	movff	___flsub@f1,___fladd@f1
  4090  002A8C  C070  F065         	movff	___flsub@f1+1,___fladd@f1+1
  4091  002A90  C071  F066         	movff	___flsub@f1+2,___fladd@f1+2
  4092  002A94  C072  F067         	movff	___flsub@f1+3,___fladd@f1+3
  4093  002A98  C073  F068         	movff	___flsub@f2,___fladd@f2
  4094  002A9C  C074  F069         	movff	___flsub@f2+1,___fladd@f2+1
  4095  002AA0  C075  F06A         	movff	___flsub@f2+2,___fladd@f2+2
  4096  002AA4  C076  F06B         	movff	___flsub@f2+3,___fladd@f2+3
  4097  002AA8  EC28  F008         	call	___fladd	;wreg free
  4098  002AAC  C064  F06F         	movff	?___fladd,?___flsub
  4099  002AB0  C065  F070         	movff	?___fladd+1,?___flsub+1
  4100  002AB4  C066  F071         	movff	?___fladd+2,?___flsub+2
  4101  002AB8  C067  F072         	movff	?___fladd+3,?___flsub+3
  4102  002ABC  0012               	return	
  4103  002ABE  0012               	return		;funcret
  4104  002AC0                     __end_of___flsub:
  4105                           	opt stack 0
  4106                           tblptru	equ	0xFF8
  4107                           tblptrh	equ	0xFF7
  4108                           postinc0	equ	0xFEE
  4109                           wreg	equ	0xFE8
  4110                           postinc2	equ	0xFDE
  4111                           postdec2	equ	0xFDD
  4112                           fsr2h	equ	0xFDA
  4113                           fsr2l	equ	0xFD9
  4114                           status	equ	0xFD8
  4115                           
  4116 ;; *************** function _atan *****************
  4117 ;; Defined at:
  4118 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\atan.c"
  4119 ;; Parameters:    Size  Location     Type
  4120 ;;  f               4   46[BANK0 ] unsigned char 
  4121 ;; Auto vars:     Size  Location     Type
  4122 ;;  val             4   63[BANK0 ] unsigned char 
  4123 ;;  val_squared     4   59[BANK0 ] unsigned char 
  4124 ;;  x               4   54[BANK0 ] unsigned char 
  4125 ;;  y               4   50[BANK0 ] unsigned char 
  4126 ;;  recip           1   58[BANK0 ] unsigned char 
  4127 ;; Return value:  Size  Location     Type
  4128 ;;                  4   46[BANK0 ] unsigned char 
  4129 ;; Registers used:
  4130 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4131 ;; Tracked objects:
  4132 ;;		On entry : 0/0
  4133 ;;		On exit  : 0/0
  4134 ;;		Unchanged: 0/0
  4135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4136 ;;      Params:         0       4       0       0       0       0       0
  4137 ;;      Locals:         0      17       0       0       0       0       0
  4138 ;;      Temps:          0       0       0       0       0       0       0
  4139 ;;      Totals:         0      21       0       0       0       0       0
  4140 ;;Total ram usage:       21 bytes
  4141 ;; Hardware stack levels used:    1
  4142 ;; Hardware stack levels required when called:    5
  4143 ;; This function calls:
  4144 ;;		___fladd
  4145 ;;		___fldiv
  4146 ;;		___flge
  4147 ;;		___flmul
  4148 ;;		___flneg
  4149 ;;		_eval_poly
  4150 ;;		_fabs
  4151 ;; This function is called by:
  4152 ;;		_Gyros_Update
  4153 ;;		_asin
  4154 ;; This function uses a non-reentrant model
  4155 ;;
  4156                           
  4157                           	psect	text20
  4158  0012B0                     __ptext20:
  4159                           	opt stack 0
  4160  0012B0                     _atan:
  4161                           	opt stack 24
  4162                           
  4163                           ;incstack = 0
  4164  0012B0  C08E  F024         	movff	atan@f,fabs@d
  4165  0012B4  C08F  F025         	movff	atan@f+1,fabs@d+1
  4166  0012B8  C090  F026         	movff	atan@f+2,fabs@d+2
  4167  0012BC  C091  F027         	movff	atan@f+3,fabs@d+3
  4168  0012C0  EC3C  F016         	call	_fabs	;wreg free
  4169  0012C4  C024  F09F         	movff	?_fabs,atan@val
  4170  0012C8  C025  F0A0         	movff	?_fabs+1,atan@val+1
  4171  0012CC  C026  F0A1         	movff	?_fabs+2,atan@val+2
  4172  0012D0  C027  F0A2         	movff	?_fabs+3,atan@val+3
  4173  0012D4  0100               	movlb	0	; () banked
  4174  0012D6  519F               	movf	atan@val& (0+255),w,b
  4175  0012D8  0100               	movlb	0	; () banked
  4176  0012DA  11A0               	iorwf	(atan@val+1)& (0+255),w,b
  4177  0012DC  0100               	movlb	0	; () banked
  4178  0012DE  11A1               	iorwf	(atan@val+2)& (0+255),w,b
  4179  0012E0  0100               	movlb	0	; () banked
  4180  0012E2  11A2               	iorwf	(atan@val+3)& (0+255),w,b
  4181  0012E4  A4D8               	btfss	status,2,c
  4182  0012E6  D00A               	goto	l3749
  4183                           
  4184                           ; BSR set to: 0
  4185  0012E8  0E00               	movlw	0
  4186  0012EA  0100               	movlb	0	; () banked
  4187  0012EC  6F8E               	movwf	?_atan& (0+255),b
  4188  0012EE  0E00               	movlw	0
  4189  0012F0  6F8F               	movwf	(?_atan+1)& (0+255),b
  4190  0012F2  0E00               	movlw	0
  4191  0012F4  6F90               	movwf	(?_atan+2)& (0+255),b
  4192  0012F6  0E00               	movlw	0
  4193  0012F8  6F91               	movwf	(?_atan+3)& (0+255),b
  4194                           
  4195                           ; BSR set to: 0
  4196  0012FA  0012               	return	
  4197  0012FC                     l3749:
  4198                           
  4199                           ; BSR set to: 0
  4200  0012FC  0E00               	movlw	0
  4201  0012FE  0100               	movlb	0	; () banked
  4202  001300  6F60               	movwf	___flge@ff1& (0+255),b
  4203  001302  0E00               	movlw	0
  4204  001304  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  4205  001306  0E80               	movlw	128
  4206  001308  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  4207  00130A  0E3F               	movlw	63
  4208  00130C  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  4209  00130E  C09F  F064         	movff	atan@val,___flge@ff2
  4210  001312  C0A0  F065         	movff	atan@val+1,___flge@ff2+1
  4211  001316  C0A1  F066         	movff	atan@val+2,___flge@ff2+2
  4212  00131A  C0A2  F067         	movff	atan@val+3,___flge@ff2+3
  4213  00131E  ECB9  F012         	call	___flge	;wreg free
  4214  001322  0100               	movlb	0	; () banked
  4215  001324  B0D8               	btfsc	status,0,c
  4216  001326  D002               	goto	u4810
  4217  001328  0E01               	movlw	1
  4218  00132A  D001               	goto	u4820
  4219  00132C                     u4810:
  4220  00132C  0E00               	movlw	0
  4221  00132E                     u4820:
  4222  00132E  0100               	movlb	0	; () banked
  4223  001330  6F9A               	movwf	atan@recip& (0+255),b
  4224  001332  0100               	movlb	0	; () banked
  4225  001334  519A               	movf	atan@recip& (0+255),w,b
  4226  001336  B4D8               	btfsc	status,2,c
  4227  001338  D01B               	goto	l601
  4228                           
  4229                           ; BSR set to: 0
  4230  00133A  0E00               	movlw	0
  4231  00133C  0100               	movlb	0	; () banked
  4232  00133E  6F7E               	movwf	___fldiv@f1& (0+255),b
  4233  001340  0E00               	movlw	0
  4234  001342  6F7F               	movwf	(___fldiv@f1+1)& (0+255),b
  4235  001344  0E80               	movlw	128
  4236  001346  6F80               	movwf	(___fldiv@f1+2)& (0+255),b
  4237  001348  0E3F               	movlw	63
  4238  00134A  6F81               	movwf	(___fldiv@f1+3)& (0+255),b
  4239  00134C  C09F  F082         	movff	atan@val,___fldiv@f2
  4240  001350  C0A0  F083         	movff	atan@val+1,___fldiv@f2+1
  4241  001354  C0A1  F084         	movff	atan@val+2,___fldiv@f2+2
  4242  001358  C0A2  F085         	movff	atan@val+3,___fldiv@f2+3
  4243  00135C  ECF3  F00E         	call	___fldiv	;wreg free
  4244  001360  C07E  F09F         	movff	?___fldiv,atan@val
  4245  001364  C07F  F0A0         	movff	?___fldiv+1,atan@val+1
  4246  001368  C080  F0A1         	movff	?___fldiv+2,atan@val+2
  4247  00136C  C081  F0A2         	movff	?___fldiv+3,atan@val+3
  4248  001370                     l601:
  4249  001370  C09F  F06F         	movff	atan@val,___flmul@f1
  4250  001374  C0A0  F070         	movff	atan@val+1,___flmul@f1+1
  4251  001378  C0A1  F071         	movff	atan@val+2,___flmul@f1+2
  4252  00137C  C0A2  F072         	movff	atan@val+3,___flmul@f1+3
  4253  001380  C09F  F073         	movff	atan@val,___flmul@f2
  4254  001384  C0A0  F074         	movff	atan@val+1,___flmul@f2+1
  4255  001388  C0A1  F075         	movff	atan@val+2,___flmul@f2+2
  4256  00138C  C0A2  F076         	movff	atan@val+3,___flmul@f2+3
  4257  001390  EC41  F00E         	call	___flmul	;wreg free
  4258  001394  C06F  F09B         	movff	?___flmul,atan@val_squared
  4259  001398  C070  F09C         	movff	?___flmul+1,atan@val_squared+1
  4260  00139C  C071  F09D         	movff	?___flmul+2,atan@val_squared+2
  4261  0013A0  C072  F09E         	movff	?___flmul+3,atan@val_squared+3
  4262  0013A4  C09B  F07E         	movff	atan@val_squared,eval_poly@x
  4263  0013A8  C09C  F07F         	movff	atan@val_squared+1,eval_poly@x+1
  4264  0013AC  C09D  F080         	movff	atan@val_squared+2,eval_poly@x+2
  4265  0013B0  C09E  F081         	movff	atan@val_squared+3,eval_poly@x+3
  4266  0013B4  0E65               	movlw	low atan@coeff_b
  4267  0013B6  0100               	movlb	0	; () banked
  4268  0013B8  6F82               	movwf	eval_poly@d& (0+255),b
  4269  0013BA  0E06               	movlw	high atan@coeff_b
  4270  0013BC  0100               	movlb	0	; () banked
  4271  0013BE  6F83               	movwf	(eval_poly@d+1)& (0+255),b
  4272  0013C0  0E00               	movlw	0
  4273  0013C2  0100               	movlb	0	; () banked
  4274  0013C4  6F85               	movwf	(eval_poly@n+1)& (0+255),b
  4275  0013C6  0E04               	movlw	4
  4276  0013C8  6F84               	movwf	eval_poly@n& (0+255),b
  4277  0013CA  ECB6  F010         	call	_eval_poly	;wreg free
  4278  0013CE  C07E  F092         	movff	?_eval_poly,atan@y
  4279  0013D2  C07F  F093         	movff	?_eval_poly+1,atan@y+1
  4280  0013D6  C080  F094         	movff	?_eval_poly+2,atan@y+2
  4281  0013DA  C081  F095         	movff	?_eval_poly+3,atan@y+3
  4282  0013DE  C09B  F07E         	movff	atan@val_squared,eval_poly@x
  4283  0013E2  C09C  F07F         	movff	atan@val_squared+1,eval_poly@x+1
  4284  0013E6  C09D  F080         	movff	atan@val_squared+2,eval_poly@x+2
  4285  0013EA  C09E  F081         	movff	atan@val_squared+3,eval_poly@x+3
  4286  0013EE  0E4D               	movlw	low atan@coeff_a
  4287  0013F0  0100               	movlb	0	; () banked
  4288  0013F2  6F82               	movwf	eval_poly@d& (0+255),b
  4289  0013F4  0E06               	movlw	high atan@coeff_a
  4290  0013F6  0100               	movlb	0	; () banked
  4291  0013F8  6F83               	movwf	(eval_poly@d+1)& (0+255),b
  4292  0013FA  0E00               	movlw	0
  4293  0013FC  0100               	movlb	0	; () banked
  4294  0013FE  6F85               	movwf	(eval_poly@n+1)& (0+255),b
  4295  001400  0E05               	movlw	5
  4296  001402  6F84               	movwf	eval_poly@n& (0+255),b
  4297  001404  ECB6  F010         	call	_eval_poly	;wreg free
  4298  001408  C07E  F096         	movff	?_eval_poly,atan@x
  4299  00140C  C07F  F097         	movff	?_eval_poly+1,atan@x+1
  4300  001410  C080  F098         	movff	?_eval_poly+2,atan@x+2
  4301  001414  C081  F099         	movff	?_eval_poly+3,atan@x+3
  4302  001418  C09F  F06F         	movff	atan@val,___flmul@f1
  4303  00141C  C0A0  F070         	movff	atan@val+1,___flmul@f1+1
  4304  001420  C0A1  F071         	movff	atan@val+2,___flmul@f1+2
  4305  001424  C0A2  F072         	movff	atan@val+3,___flmul@f1+3
  4306  001428  C092  F082         	movff	atan@y,___fldiv@f2
  4307  00142C  C093  F083         	movff	atan@y+1,___fldiv@f2+1
  4308  001430  C094  F084         	movff	atan@y+2,___fldiv@f2+2
  4309  001434  C095  F085         	movff	atan@y+3,___fldiv@f2+3
  4310  001438  C096  F07E         	movff	atan@x,___fldiv@f1
  4311  00143C  C097  F07F         	movff	atan@x+1,___fldiv@f1+1
  4312  001440  C098  F080         	movff	atan@x+2,___fldiv@f1+2
  4313  001444  C099  F081         	movff	atan@x+3,___fldiv@f1+3
  4314  001448  ECF3  F00E         	call	___fldiv	;wreg free
  4315  00144C  C07E  F073         	movff	?___fldiv,___flmul@f2
  4316  001450  C07F  F074         	movff	?___fldiv+1,___flmul@f2+1
  4317  001454  C080  F075         	movff	?___fldiv+2,___flmul@f2+2
  4318  001458  C081  F076         	movff	?___fldiv+3,___flmul@f2+3
  4319  00145C  EC41  F00E         	call	___flmul	;wreg free
  4320  001460  C06F  F09F         	movff	?___flmul,atan@val
  4321  001464  C070  F0A0         	movff	?___flmul+1,atan@val+1
  4322  001468  C071  F0A1         	movff	?___flmul+2,atan@val+2
  4323  00146C  C072  F0A2         	movff	?___flmul+3,atan@val+3
  4324  001470  0100               	movlb	0	; () banked
  4325  001472  519A               	movf	atan@recip& (0+255),w,b
  4326  001474  0100               	movlb	0	; () banked
  4327  001476  B4D8               	btfsc	status,2,c
  4328  001478  D026               	goto	l3761
  4329                           
  4330                           ; BSR set to: 0
  4331  00147A  C09F  F020         	movff	atan@val,___flneg@f1
  4332  00147E  C0A0  F021         	movff	atan@val+1,___flneg@f1+1
  4333  001482  C0A1  F022         	movff	atan@val+2,___flneg@f1+2
  4334  001486  C0A2  F023         	movff	atan@val+3,___flneg@f1+3
  4335  00148A  EC73  F016         	call	___flneg	;wreg free
  4336  00148E  C020  F064         	movff	?___flneg,___fladd@f1
  4337  001492  C021  F065         	movff	?___flneg+1,___fladd@f1+1
  4338  001496  C022  F066         	movff	?___flneg+2,___fladd@f1+2
  4339  00149A  C023  F067         	movff	?___flneg+3,___fladd@f1+3
  4340  00149E  0EDB               	movlw	219
  4341  0014A0  0100               	movlb	0	; () banked
  4342  0014A2  6F68               	movwf	___fladd@f2& (0+255),b
  4343  0014A4  0E0F               	movlw	15
  4344  0014A6  6F69               	movwf	(___fladd@f2+1)& (0+255),b
  4345  0014A8  0EC9               	movlw	201
  4346  0014AA  6F6A               	movwf	(___fladd@f2+2)& (0+255),b
  4347  0014AC  0E3F               	movlw	63
  4348  0014AE  6F6B               	movwf	(___fladd@f2+3)& (0+255),b
  4349  0014B0  EC28  F008         	call	___fladd	;wreg free
  4350  0014B4  C064  F09F         	movff	?___fladd,atan@val
  4351  0014B8  C065  F0A0         	movff	?___fladd+1,atan@val+1
  4352  0014BC  C066  F0A1         	movff	?___fladd+2,atan@val+2
  4353  0014C0  C067  F0A2         	movff	?___fladd+3,atan@val+3
  4354  0014C4  D000               	goto	l3761
  4355  0014C6                     l3761:
  4356  0014C6  0100               	movlb	0	; () banked
  4357  0014C8  BF91               	btfsc	(atan@f+3)& (0+255),7,b
  4358  0014CA  D009               	goto	l3765
  4359                           
  4360                           ; BSR set to: 0
  4361  0014CC  C09F  F08E         	movff	atan@val,?_atan
  4362  0014D0  C0A0  F08F         	movff	atan@val+1,?_atan+1
  4363  0014D4  C0A1  F090         	movff	atan@val+2,?_atan+2
  4364  0014D8  C0A2  F091         	movff	atan@val+3,?_atan+3
  4365  0014DC  0012               	return	
  4366  0014DE                     l3765:
  4367                           
  4368                           ; BSR set to: 0
  4369  0014DE  C09F  F020         	movff	atan@val,___flneg@f1
  4370  0014E2  C0A0  F021         	movff	atan@val+1,___flneg@f1+1
  4371  0014E6  C0A1  F022         	movff	atan@val+2,___flneg@f1+2
  4372  0014EA  C0A2  F023         	movff	atan@val+3,___flneg@f1+3
  4373  0014EE  EC73  F016         	call	___flneg	;wreg free
  4374  0014F2  C020  F08E         	movff	?___flneg,?_atan
  4375  0014F6  C021  F08F         	movff	?___flneg+1,?_atan+1
  4376  0014FA  C022  F090         	movff	?___flneg+2,?_atan+2
  4377  0014FE  C023  F091         	movff	?___flneg+3,?_atan+3
  4378  001502  0012               	return	
  4379  001504  0012               	return		;funcret
  4380  001506                     __end_of_atan:
  4381                           	opt stack 0
  4382                           tblptru	equ	0xFF8
  4383                           tblptrh	equ	0xFF7
  4384                           postinc0	equ	0xFEE
  4385                           wreg	equ	0xFE8
  4386                           postinc2	equ	0xFDE
  4387                           postdec2	equ	0xFDD
  4388                           fsr2h	equ	0xFDA
  4389                           fsr2l	equ	0xFD9
  4390                           status	equ	0xFD8
  4391                           
  4392 ;; *************** function _fabs *****************
  4393 ;; Defined at:
  4394 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fabs.c"
  4395 ;; Parameters:    Size  Location     Type
  4396 ;;  d               4   35[COMRAM] unsigned char 
  4397 ;; Auto vars:     Size  Location     Type
  4398 ;;		None
  4399 ;; Return value:  Size  Location     Type
  4400 ;;                  4   35[COMRAM] unsigned char 
  4401 ;; Registers used:
  4402 ;;		wreg, status,2, status,0, cstack
  4403 ;; Tracked objects:
  4404 ;;		On entry : 0/0
  4405 ;;		On exit  : 0/0
  4406 ;;		Unchanged: 0/0
  4407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4408 ;;      Params:         4       0       0       0       0       0       0
  4409 ;;      Locals:         0       0       0       0       0       0       0
  4410 ;;      Temps:          0       0       0       0       0       0       0
  4411 ;;      Totals:         4       0       0       0       0       0       0
  4412 ;;Total ram usage:        4 bytes
  4413 ;; Hardware stack levels used:    1
  4414 ;; Hardware stack levels required when called:    3
  4415 ;; This function calls:
  4416 ;;		___flneg
  4417 ;; This function is called by:
  4418 ;;		_asin
  4419 ;;		_atan
  4420 ;; This function uses a non-reentrant model
  4421 ;;
  4422                           
  4423                           	psect	text21
  4424  002C78                     __ptext21:
  4425                           	opt stack 0
  4426  002C78                     _fabs:
  4427                           	opt stack 25
  4428                           
  4429                           ;incstack = 0
  4430  002C78  AE27               	btfss	fabs@d+3,7,c
  4431  002C7A  D013               	goto	l712
  4432  002C7C  C024  F020         	movff	fabs@d,___flneg@f1
  4433  002C80  C025  F021         	movff	fabs@d+1,___flneg@f1+1
  4434  002C84  C026  F022         	movff	fabs@d+2,___flneg@f1+2
  4435  002C88  C027  F023         	movff	fabs@d+3,___flneg@f1+3
  4436  002C8C  EC73  F016         	call	___flneg	;wreg free
  4437  002C90  C020  F024         	movff	?___flneg,?_fabs
  4438  002C94  C021  F025         	movff	?___flneg+1,?_fabs+1
  4439  002C98  C022  F026         	movff	?___flneg+2,?_fabs+2
  4440  002C9C  C023  F027         	movff	?___flneg+3,?_fabs+3
  4441  002CA0  0012               	return	
  4442  002CA2                     l712:
  4443  002CA2  C024  F024         	movff	fabs@d,?_fabs
  4444  002CA6  C025  F025         	movff	fabs@d+1,?_fabs+1
  4445  002CAA  C026  F026         	movff	fabs@d+2,?_fabs+2
  4446  002CAE  C027  F027         	movff	fabs@d+3,?_fabs+3
  4447  002CB2  0012               	return		;funcret
  4448  002CB4                     __end_of_fabs:
  4449                           	opt stack 0
  4450                           tblptru	equ	0xFF8
  4451                           tblptrh	equ	0xFF7
  4452                           postinc0	equ	0xFEE
  4453                           wreg	equ	0xFE8
  4454                           postinc2	equ	0xFDE
  4455                           postdec2	equ	0xFDD
  4456                           fsr2h	equ	0xFDA
  4457                           fsr2l	equ	0xFD9
  4458                           status	equ	0xFD8
  4459                           
  4460 ;; *************** function ___flneg *****************
  4461 ;; Defined at:
  4462 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flneg.c"
  4463 ;; Parameters:    Size  Location     Type
  4464 ;;  f1              4   31[COMRAM] unsigned char 
  4465 ;; Auto vars:     Size  Location     Type
  4466 ;;		None
  4467 ;; Return value:  Size  Location     Type
  4468 ;;                  4   31[COMRAM] unsigned char 
  4469 ;; Registers used:
  4470 ;;		wreg, status,2, status,0
  4471 ;; Tracked objects:
  4472 ;;		On entry : 0/0
  4473 ;;		On exit  : 0/0
  4474 ;;		Unchanged: 0/0
  4475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4476 ;;      Params:         4       0       0       0       0       0       0
  4477 ;;      Locals:         0       0       0       0       0       0       0
  4478 ;;      Temps:          0       0       0       0       0       0       0
  4479 ;;      Totals:         4       0       0       0       0       0       0
  4480 ;;Total ram usage:        4 bytes
  4481 ;; Hardware stack levels used:    1
  4482 ;; Hardware stack levels required when called:    2
  4483 ;; This function calls:
  4484 ;;		Nothing
  4485 ;; This function is called by:
  4486 ;;		_acos
  4487 ;;		_asin
  4488 ;;		_atan
  4489 ;;		_fabs
  4490 ;;		_pow
  4491 ;;		_exp
  4492 ;; This function uses a non-reentrant model
  4493 ;;
  4494                           
  4495                           	psect	text22
  4496  002CE6                     __ptext22:
  4497                           	opt stack 0
  4498  002CE6                     ___flneg:
  4499                           	opt stack 25
  4500                           
  4501                           ;incstack = 0
  4502  002CE6  5020               	movf	___flneg@f1,w,c
  4503  002CE8  1021               	iorwf	___flneg@f1+1,w,c
  4504  002CEA  1022               	iorwf	___flneg@f1+2,w,c
  4505  002CEC  1023               	iorwf	___flneg@f1+3,w,c
  4506  002CEE  B4D8               	btfsc	status,2,c
  4507  002CF0  D009               	goto	l3495
  4508  002CF2  0E00               	movlw	0
  4509  002CF4  1A20               	xorwf	___flneg@f1,f,c
  4510  002CF6  0E00               	movlw	0
  4511  002CF8  1A21               	xorwf	___flneg@f1+1,f,c
  4512  002CFA  0E00               	movlw	0
  4513  002CFC  1A22               	xorwf	___flneg@f1+2,f,c
  4514  002CFE  0E80               	movlw	128
  4515  002D00  1A23               	xorwf	___flneg@f1+3,f,c
  4516  002D02  D000               	goto	l3495
  4517  002D04                     l3495:
  4518  002D04  C020  F020         	movff	___flneg@f1,?___flneg
  4519  002D08  C021  F021         	movff	___flneg@f1+1,?___flneg+1
  4520  002D0C  C022  F022         	movff	___flneg@f1+2,?___flneg+2
  4521  002D10  C023  F023         	movff	___flneg@f1+3,?___flneg+3
  4522  002D14  0012               	return	
  4523  002D16  0012               	return		;funcret
  4524  002D18                     __end_of___flneg:
  4525                           	opt stack 0
  4526                           tblptru	equ	0xFF8
  4527                           tblptrh	equ	0xFF7
  4528                           postinc0	equ	0xFEE
  4529                           wreg	equ	0xFE8
  4530                           postinc2	equ	0xFDE
  4531                           postdec2	equ	0xFDD
  4532                           fsr2h	equ	0xFDA
  4533                           fsr2l	equ	0xFD9
  4534                           status	equ	0xFD8
  4535                           
  4536 ;; *************** function _eval_poly *****************
  4537 ;; Defined at:
  4538 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  4539 ;; Parameters:    Size  Location     Type
  4540 ;;  x               4   30[BANK0 ] unsigned char 
  4541 ;;  d               2   34[BANK0 ] PTR const 
  4542 ;;		 -> log@coeff(36), exp@coeff(40), atan@coeff_a(24), atan@coeff_b(20), 
  4543 ;;  n               2   36[BANK0 ] int 
  4544 ;; Auto vars:     Size  Location     Type
  4545 ;;  res             4   42[BANK0 ] int 
  4546 ;; Return value:  Size  Location     Type
  4547 ;;                  4   30[BANK0 ] int 
  4548 ;; Registers used:
  4549 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4550 ;; Tracked objects:
  4551 ;;		On entry : 0/0
  4552 ;;		On exit  : 0/0
  4553 ;;		Unchanged: 0/0
  4554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4555 ;;      Params:         0       8       0       0       0       0       0
  4556 ;;      Locals:         0       4       0       0       0       0       0
  4557 ;;      Temps:          0       4       0       0       0       0       0
  4558 ;;      Totals:         0      16       0       0       0       0       0
  4559 ;;Total ram usage:       16 bytes
  4560 ;; Hardware stack levels used:    1
  4561 ;; Hardware stack levels required when called:    4
  4562 ;; This function calls:
  4563 ;;		___fladd
  4564 ;;		___flmul
  4565 ;; This function is called by:
  4566 ;;		_atan
  4567 ;;		_exp
  4568 ;;		_log
  4569 ;; This function uses a non-reentrant model
  4570 ;;
  4571                           
  4572                           	psect	text23
  4573  00216C                     __ptext23:
  4574                           	opt stack 0
  4575  00216C                     _eval_poly:
  4576                           	opt stack 23
  4577                           
  4578                           ;incstack = 0
  4579  00216C  C084  F086         	movff	eval_poly@n,??_eval_poly
  4580  002170  C085  F087         	movff	eval_poly@n+1,??_eval_poly+1
  4581  002174  0100               	movlb	0	; () banked
  4582  002176  90D8               	bcf	status,0,c
  4583  002178  3786               	rlcf	??_eval_poly& (0+255),f,b
  4584  00217A  3787               	rlcf	(??_eval_poly+1)& (0+255),f,b
  4585  00217C  0100               	movlb	0	; () banked
  4586  00217E  90D8               	bcf	status,0,c
  4587  002180  3786               	rlcf	??_eval_poly& (0+255),f,b
  4588  002182  3787               	rlcf	(??_eval_poly+1)& (0+255),f,b
  4589  002184  C082  F088         	movff	eval_poly@d,??_eval_poly+2
  4590  002188  C083  F089         	movff	eval_poly@d+1,??_eval_poly+3
  4591  00218C  0100               	movlb	0	; () banked
  4592  00218E  5186               	movf	??_eval_poly& (0+255),w,b
  4593  002190  0100               	movlb	0	; () banked
  4594  002192  2788               	addwf	(??_eval_poly+2)& (0+255),f,b
  4595  002194  0100               	movlb	0	; () banked
  4596  002196  5187               	movf	(??_eval_poly+1)& (0+255),w,b
  4597  002198  0100               	movlb	0	; () banked
  4598  00219A  2389               	addwfc	(??_eval_poly+3)& (0+255),f,b
  4599  00219C  C088  FFF6         	movff	??_eval_poly+2,tblptrl
  4600  0021A0  C089  FFF7         	movff	??_eval_poly+3,tblptrh
  4601  0021A4                     	if	0	;tblptru may be non-zero
  4602  0021A4                     	endif
  4603  0021A4                     	if	0	;tblptru may be non-zero
  4604  0021A4                     	endif
  4605  0021A4  0009               	tblrd		*+
  4606  0021A6  CFF5 F08A          	movff	tablat,eval_poly@res
  4607  0021AA  0009               	tblrd		*+
  4608  0021AC  CFF5 F08B          	movff	tablat,eval_poly@res+1
  4609  0021B0  0009               	tblrd		*+
  4610  0021B2  CFF5 F08C          	movff	tablat,eval_poly@res+2
  4611  0021B6  000A               	tblrd		*-
  4612  0021B8  CFF5 F08D          	movff	tablat,eval_poly@res+3
  4613  0021BC  D051               	goto	l3631
  4614  0021BE                     l3629:
  4615                           
  4616                           ; BSR set to: 0
  4617  0021BE  C08A  F073         	movff	eval_poly@res,___flmul@f2
  4618  0021C2  C08B  F074         	movff	eval_poly@res+1,___flmul@f2+1
  4619  0021C6  C08C  F075         	movff	eval_poly@res+2,___flmul@f2+2
  4620  0021CA  C08D  F076         	movff	eval_poly@res+3,___flmul@f2+3
  4621  0021CE  C07E  F06F         	movff	eval_poly@x,___flmul@f1
  4622  0021D2  C07F  F070         	movff	eval_poly@x+1,___flmul@f1+1
  4623  0021D6  C080  F071         	movff	eval_poly@x+2,___flmul@f1+2
  4624  0021DA  C081  F072         	movff	eval_poly@x+3,___flmul@f1+3
  4625  0021DE  EC41  F00E         	call	___flmul	;wreg free
  4626  0021E2  C06F  F064         	movff	?___flmul,___fladd@f1
  4627  0021E6  C070  F065         	movff	?___flmul+1,___fladd@f1+1
  4628  0021EA  C071  F066         	movff	?___flmul+2,___fladd@f1+2
  4629  0021EE  C072  F067         	movff	?___flmul+3,___fladd@f1+3
  4630  0021F2  0100               	movlb	0	; () banked
  4631  0021F4  0784               	decf	eval_poly@n& (0+255),f,b
  4632  0021F6  A0D8               	btfss	status,0,c
  4633  0021F8  0785               	decf	(eval_poly@n+1)& (0+255),f,b
  4634  0021FA  C084  F086         	movff	eval_poly@n,??_eval_poly
  4635  0021FE  C085  F087         	movff	eval_poly@n+1,??_eval_poly+1
  4636  002202  0100               	movlb	0	; () banked
  4637  002204  90D8               	bcf	status,0,c
  4638  002206  3786               	rlcf	??_eval_poly& (0+255),f,b
  4639  002208  3787               	rlcf	(??_eval_poly+1)& (0+255),f,b
  4640  00220A  0100               	movlb	0	; () banked
  4641  00220C  90D8               	bcf	status,0,c
  4642  00220E  3786               	rlcf	??_eval_poly& (0+255),f,b
  4643  002210  3787               	rlcf	(??_eval_poly+1)& (0+255),f,b
  4644  002212  C082  F088         	movff	eval_poly@d,??_eval_poly+2
  4645  002216  C083  F089         	movff	eval_poly@d+1,??_eval_poly+3
  4646  00221A  0100               	movlb	0	; () banked
  4647  00221C  5186               	movf	??_eval_poly& (0+255),w,b
  4648  00221E  0100               	movlb	0	; () banked
  4649  002220  2788               	addwf	(??_eval_poly+2)& (0+255),f,b
  4650  002222  0100               	movlb	0	; () banked
  4651  002224  5187               	movf	(??_eval_poly+1)& (0+255),w,b
  4652  002226  0100               	movlb	0	; () banked
  4653  002228  2389               	addwfc	(??_eval_poly+3)& (0+255),f,b
  4654  00222A  C088  FFF6         	movff	??_eval_poly+2,tblptrl
  4655  00222E  C089  FFF7         	movff	??_eval_poly+3,tblptrh
  4656  002232                     	if	0	;tblptru may be non-zero
  4657  002232                     	endif
  4658  002232                     	if	0	;tblptru may be non-zero
  4659  002232                     	endif
  4660  002232  0009               	tblrd		*+
  4661  002234  CFF5 F068          	movff	tablat,___fladd@f2
  4662  002238  0009               	tblrd		*+
  4663  00223A  CFF5 F069          	movff	tablat,___fladd@f2+1
  4664  00223E  0009               	tblrd		*+
  4665  002240  CFF5 F06A          	movff	tablat,___fladd@f2+2
  4666  002244  000A               	tblrd		*-
  4667  002246  CFF5 F06B          	movff	tablat,___fladd@f2+3
  4668  00224A  EC28  F008         	call	___fladd	;wreg free
  4669  00224E  C064  F08A         	movff	?___fladd,eval_poly@res
  4670  002252  C065  F08B         	movff	?___fladd+1,eval_poly@res+1
  4671  002256  C066  F08C         	movff	?___fladd+2,eval_poly@res+2
  4672  00225A  C067  F08D         	movff	?___fladd+3,eval_poly@res+3
  4673  00225E  D000               	goto	l3631
  4674  002260                     l3631:
  4675  002260  0100               	movlb	0	; () banked
  4676  002262  5184               	movf	eval_poly@n& (0+255),w,b
  4677  002264  0100               	movlb	0	; () banked
  4678  002266  1185               	iorwf	(eval_poly@n+1)& (0+255),w,b
  4679  002268  A4D8               	btfss	status,2,c
  4680  00226A  D7A9               	goto	l3629
  4681                           
  4682                           ; BSR set to: 0
  4683  00226C  C08A  F07E         	movff	eval_poly@res,?_eval_poly
  4684  002270  C08B  F07F         	movff	eval_poly@res+1,?_eval_poly+1
  4685  002274  C08C  F080         	movff	eval_poly@res+2,?_eval_poly+2
  4686  002278  C08D  F081         	movff	eval_poly@res+3,?_eval_poly+3
  4687                           
  4688                           ; BSR set to: 0
  4689  00227C  0012               	return		;funcret
  4690  00227E                     __end_of_eval_poly:
  4691                           	opt stack 0
  4692                           tblptru	equ	0xFF8
  4693                           tblptrh	equ	0xFF7
  4694                           tblptrl	equ	0xFF6
  4695                           tablat	equ	0xFF5
  4696                           postinc0	equ	0xFEE
  4697                           wreg	equ	0xFE8
  4698                           postinc2	equ	0xFDE
  4699                           postdec2	equ	0xFDD
  4700                           fsr2h	equ	0xFDA
  4701                           fsr2l	equ	0xFD9
  4702                           status	equ	0xFD8
  4703                           
  4704 ;; *************** function ___flmul *****************
  4705 ;; Defined at:
  4706 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flmul.c"
  4707 ;; Parameters:    Size  Location     Type
  4708 ;;  f1              4   15[BANK0 ] int 
  4709 ;;  f2              4   19[BANK0 ] int 
  4710 ;; Auto vars:     Size  Location     Type
  4711 ;;  f3_as_produc    4   24[BANK0 ] unsigned long 
  4712 ;;  sign            1   29[BANK0 ] unsigned char 
  4713 ;;  cntr            1   28[BANK0 ] unsigned char 
  4714 ;;  exp             1   23[BANK0 ] unsigned char 
  4715 ;; Return value:  Size  Location     Type
  4716 ;;                  4   15[BANK0 ] unsigned char 
  4717 ;; Registers used:
  4718 ;;		wreg, status,2, status,0, cstack
  4719 ;; Tracked objects:
  4720 ;;		On entry : 0/0
  4721 ;;		On exit  : 0/0
  4722 ;;		Unchanged: 0/0
  4723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4724 ;;      Params:         0       8       0       0       0       0       0
  4725 ;;      Locals:         0       7       0       0       0       0       0
  4726 ;;      Temps:          0       0       0       0       0       0       0
  4727 ;;      Totals:         0      15       0       0       0       0       0
  4728 ;;Total ram usage:       15 bytes
  4729 ;; Hardware stack levels used:    1
  4730 ;; Hardware stack levels required when called:    3
  4731 ;; This function calls:
  4732 ;;		___flpack
  4733 ;; This function is called by:
  4734 ;;		_Gyros_Update
  4735 ;;		_asin
  4736 ;;		_atan
  4737 ;;		_eval_poly
  4738 ;;		_pow
  4739 ;;		_sqrt
  4740 ;;		_exp
  4741 ;;		_log
  4742 ;; This function uses a non-reentrant model
  4743 ;;
  4744                           
  4745                           	psect	text24
  4746  001C82                     __ptext24:
  4747                           	opt stack 0
  4748  001C82                     ___flmul:
  4749                           	opt stack 25
  4750                           
  4751                           ; BSR set to: 0
  4752                           ;incstack = 0
  4753  001C82  0100               	movlb	0	; () banked
  4754  001C84  3571               	rlcf	(___flmul@f1+2)& (0+255),w,b
  4755  001C86  3572               	rlcf	(___flmul@f1+3)& (0+255),w,b
  4756  001C88  0100               	movlb	0	; () banked
  4757  001C8A  6F77               	movwf	___flmul@exp& (0+255),b
  4758  001C8C  0100               	movlb	0	; () banked
  4759  001C8E  5177               	movf	___flmul@exp& (0+255),w,b
  4760  001C90  A4D8               	btfss	status,2,c
  4761  001C92  D00A               	goto	l3447
  4762                           
  4763                           ; BSR set to: 0
  4764  001C94  0E00               	movlw	0
  4765  001C96  0100               	movlb	0	; () banked
  4766  001C98  6F6F               	movwf	?___flmul& (0+255),b
  4767  001C9A  0E00               	movlw	0
  4768  001C9C  6F70               	movwf	(?___flmul+1)& (0+255),b
  4769  001C9E  0E00               	movlw	0
  4770  001CA0  6F71               	movwf	(?___flmul+2)& (0+255),b
  4771  001CA2  0E00               	movlw	0
  4772  001CA4  6F72               	movwf	(?___flmul+3)& (0+255),b
  4773                           
  4774                           ; BSR set to: 0
  4775  001CA6  0012               	return	
  4776  001CA8                     l3447:
  4777                           
  4778                           ; BSR set to: 0
  4779  001CA8  0100               	movlb	0	; () banked
  4780  001CAA  3575               	rlcf	(___flmul@f2+2)& (0+255),w,b
  4781  001CAC  3576               	rlcf	(___flmul@f2+3)& (0+255),w,b
  4782  001CAE  0100               	movlb	0	; () banked
  4783  001CB0  6F7D               	movwf	___flmul@sign& (0+255),b
  4784  001CB2  0100               	movlb	0	; () banked
  4785  001CB4  517D               	movf	___flmul@sign& (0+255),w,b
  4786  001CB6  A4D8               	btfss	status,2,c
  4787  001CB8  D00A               	goto	l3453
  4788                           
  4789                           ; BSR set to: 0
  4790  001CBA  0E00               	movlw	0
  4791  001CBC  0100               	movlb	0	; () banked
  4792  001CBE  6F6F               	movwf	?___flmul& (0+255),b
  4793  001CC0  0E00               	movlw	0
  4794  001CC2  6F70               	movwf	(?___flmul+1)& (0+255),b
  4795  001CC4  0E00               	movlw	0
  4796  001CC6  6F71               	movwf	(?___flmul+2)& (0+255),b
  4797  001CC8  0E00               	movlw	0
  4798  001CCA  6F72               	movwf	(?___flmul+3)& (0+255),b
  4799                           
  4800                           ; BSR set to: 0
  4801  001CCC  0012               	return	
  4802  001CCE                     l3453:
  4803                           
  4804                           ; BSR set to: 0
  4805  001CCE  0100               	movlb	0	; () banked
  4806  001CD0  517D               	movf	___flmul@sign& (0+255),w,b
  4807  001CD2  0F7B               	addlw	123
  4808  001CD4  0100               	movlb	0	; () banked
  4809  001CD6  2777               	addwf	___flmul@exp& (0+255),f,b
  4810                           
  4811                           ; BSR set to: 0
  4812  001CD8  C072  F07D         	movff	___flmul@f1+3,___flmul@sign
  4813  001CDC  0100               	movlb	0	; () banked
  4814  001CDE  5176               	movf	(___flmul@f2+3)& (0+255),w,b
  4815  001CE0  0100               	movlb	0	; () banked
  4816  001CE2  1B7D               	xorwf	___flmul@sign& (0+255),f,b
  4817  001CE4  0E80               	movlw	128
  4818  001CE6  0100               	movlb	0	; () banked
  4819  001CE8  177D               	andwf	___flmul@sign& (0+255),f,b
  4820                           
  4821                           ; BSR set to: 0
  4822  001CEA  0100               	movlb	0	; () banked
  4823  001CEC  8F71               	bsf	(___flmul@f1+2)& (0+255),7,b
  4824                           
  4825                           ; BSR set to: 0
  4826  001CEE  0100               	movlb	0	; () banked
  4827  001CF0  8F75               	bsf	(___flmul@f2+2)& (0+255),7,b
  4828  001CF2  0EFF               	movlw	255
  4829  001CF4  0100               	movlb	0	; () banked
  4830  001CF6  1773               	andwf	___flmul@f2& (0+255),f,b
  4831  001CF8  0EFF               	movlw	255
  4832  001CFA  1774               	andwf	(___flmul@f2+1)& (0+255),f,b
  4833  001CFC  0EFF               	movlw	255
  4834  001CFE  1775               	andwf	(___flmul@f2+2)& (0+255),f,b
  4835  001D00  0E00               	movlw	0
  4836  001D02  1776               	andwf	(___flmul@f2+3)& (0+255),f,b
  4837                           
  4838                           ; BSR set to: 0
  4839  001D04  0E00               	movlw	0
  4840  001D06  0100               	movlb	0	; () banked
  4841  001D08  6F78               	movwf	___flmul@f3_as_product& (0+255),b
  4842  001D0A  0E00               	movlw	0
  4843  001D0C  6F79               	movwf	(___flmul@f3_as_product+1)& (0+255),b
  4844  001D0E  0E00               	movlw	0
  4845  001D10  6F7A               	movwf	(___flmul@f3_as_product+2)& (0+255),b
  4846  001D12  0E00               	movlw	0
  4847  001D14  6F7B               	movwf	(___flmul@f3_as_product+3)& (0+255),b
  4848                           
  4849                           ; BSR set to: 0
  4850  001D16  0E07               	movlw	7
  4851  001D18  0100               	movlb	0	; () banked
  4852  001D1A  6F7C               	movwf	___flmul@cntr& (0+255),b
  4853  001D1C  D000               	goto	l3465
  4854  001D1E                     l3465:
  4855                           
  4856                           ; BSR set to: 0
  4857  001D1E  0100               	movlb	0	; () banked
  4858  001D20  A16F               	btfss	___flmul@f1& (0+255),0,b
  4859  001D22  D011               	goto	l3469
  4860                           
  4861                           ; BSR set to: 0
  4862  001D24  0100               	movlb	0	; () banked
  4863  001D26  5173               	movf	___flmul@f2& (0+255),w,b
  4864  001D28  0100               	movlb	0	; () banked
  4865  001D2A  2778               	addwf	___flmul@f3_as_product& (0+255),f,b
  4866  001D2C  0100               	movlb	0	; () banked
  4867  001D2E  5174               	movf	(___flmul@f2+1)& (0+255),w,b
  4868  001D30  0100               	movlb	0	; () banked
  4869  001D32  2379               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
  4870  001D34  0100               	movlb	0	; () banked
  4871  001D36  5175               	movf	(___flmul@f2+2)& (0+255),w,b
  4872  001D38  0100               	movlb	0	; () banked
  4873  001D3A  237A               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
  4874  001D3C  0100               	movlb	0	; () banked
  4875  001D3E  5176               	movf	(___flmul@f2+3)& (0+255),w,b
  4876  001D40  0100               	movlb	0	; () banked
  4877  001D42  237B               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
  4878  001D44  D000               	goto	l3469
  4879  001D46                     l3469:
  4880                           
  4881                           ; BSR set to: 0
  4882  001D46  0100               	movlb	0	; () banked
  4883  001D48  90D8               	bcf	status,0,c
  4884  001D4A  3372               	rrcf	(___flmul@f1+3)& (0+255),f,b
  4885  001D4C  3371               	rrcf	(___flmul@f1+2)& (0+255),f,b
  4886  001D4E  3370               	rrcf	(___flmul@f1+1)& (0+255),f,b
  4887  001D50  336F               	rrcf	___flmul@f1& (0+255),f,b
  4888                           
  4889                           ; BSR set to: 0
  4890  001D52  0100               	movlb	0	; () banked
  4891  001D54  90D8               	bcf	status,0,c
  4892  001D56  3773               	rlcf	___flmul@f2& (0+255),f,b
  4893  001D58  3774               	rlcf	(___flmul@f2+1)& (0+255),f,b
  4894  001D5A  3775               	rlcf	(___flmul@f2+2)& (0+255),f,b
  4895  001D5C  3776               	rlcf	(___flmul@f2+3)& (0+255),f,b
  4896                           
  4897                           ; BSR set to: 0
  4898  001D5E  0100               	movlb	0	; () banked
  4899  001D60  2F7C               	decfsz	___flmul@cntr& (0+255),f,b
  4900  001D62  D7DD               	goto	l3465
  4901  001D64  D000               	goto	l3475
  4902  001D66                     l3475:
  4903                           
  4904                           ; BSR set to: 0
  4905  001D66  0E11               	movlw	17
  4906  001D68  0100               	movlb	0	; () banked
  4907  001D6A  6F7C               	movwf	___flmul@cntr& (0+255),b
  4908  001D6C  D000               	goto	l3477
  4909  001D6E                     l3477:
  4910                           
  4911                           ; BSR set to: 0
  4912  001D6E  0100               	movlb	0	; () banked
  4913  001D70  A16F               	btfss	___flmul@f1& (0+255),0,b
  4914  001D72  D011               	goto	l3481
  4915                           
  4916                           ; BSR set to: 0
  4917  001D74  0100               	movlb	0	; () banked
  4918  001D76  5173               	movf	___flmul@f2& (0+255),w,b
  4919  001D78  0100               	movlb	0	; () banked
  4920  001D7A  2778               	addwf	___flmul@f3_as_product& (0+255),f,b
  4921  001D7C  0100               	movlb	0	; () banked
  4922  001D7E  5174               	movf	(___flmul@f2+1)& (0+255),w,b
  4923  001D80  0100               	movlb	0	; () banked
  4924  001D82  2379               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
  4925  001D84  0100               	movlb	0	; () banked
  4926  001D86  5175               	movf	(___flmul@f2+2)& (0+255),w,b
  4927  001D88  0100               	movlb	0	; () banked
  4928  001D8A  237A               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
  4929  001D8C  0100               	movlb	0	; () banked
  4930  001D8E  5176               	movf	(___flmul@f2+3)& (0+255),w,b
  4931  001D90  0100               	movlb	0	; () banked
  4932  001D92  237B               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
  4933  001D94  D000               	goto	l3481
  4934  001D96                     l3481:
  4935                           
  4936                           ; BSR set to: 0
  4937  001D96  0100               	movlb	0	; () banked
  4938  001D98  90D8               	bcf	status,0,c
  4939  001D9A  3372               	rrcf	(___flmul@f1+3)& (0+255),f,b
  4940  001D9C  3371               	rrcf	(___flmul@f1+2)& (0+255),f,b
  4941  001D9E  3370               	rrcf	(___flmul@f1+1)& (0+255),f,b
  4942  001DA0  336F               	rrcf	___flmul@f1& (0+255),f,b
  4943                           
  4944                           ; BSR set to: 0
  4945  001DA2  0100               	movlb	0	; () banked
  4946  001DA4  90D8               	bcf	status,0,c
  4947  001DA6  337B               	rrcf	(___flmul@f3_as_product+3)& (0+255),f,b
  4948  001DA8  337A               	rrcf	(___flmul@f3_as_product+2)& (0+255),f,b
  4949  001DAA  3379               	rrcf	(___flmul@f3_as_product+1)& (0+255),f,b
  4950  001DAC  3378               	rrcf	___flmul@f3_as_product& (0+255),f,b
  4951                           
  4952                           ; BSR set to: 0
  4953  001DAE  0100               	movlb	0	; () banked
  4954  001DB0  2F7C               	decfsz	___flmul@cntr& (0+255),f,b
  4955  001DB2  D7DD               	goto	l3477
  4956  001DB4  D000               	goto	l3487
  4957  001DB6                     l3487:
  4958                           
  4959                           ; BSR set to: 0
  4960  001DB6  C078  F020         	movff	___flmul@f3_as_product,___flpack@arg
  4961  001DBA  C079  F021         	movff	___flmul@f3_as_product+1,___flpack@arg+1
  4962  001DBE  C07A  F022         	movff	___flmul@f3_as_product+2,___flpack@arg+2
  4963  001DC2  C07B  F023         	movff	___flmul@f3_as_product+3,___flpack@arg+3
  4964  001DC6  C077  F024         	movff	___flmul@exp,___flpack@exp
  4965  001DCA  C07D  F025         	movff	___flmul@sign,___flpack@sign
  4966  001DCE  EC3F  F011         	call	___flpack	;wreg free
  4967  001DD2  C020  F06F         	movff	?___flpack,?___flmul
  4968  001DD6  C021  F070         	movff	?___flpack+1,?___flmul+1
  4969  001DDA  C022  F071         	movff	?___flpack+2,?___flmul+2
  4970  001DDE  C023  F072         	movff	?___flpack+3,?___flmul+3
  4971  001DE2  0012               	return	
  4972  001DE4  0012               	return		;funcret
  4973  001DE6                     __end_of___flmul:
  4974                           	opt stack 0
  4975                           tblptru	equ	0xFF8
  4976                           tblptrh	equ	0xFF7
  4977                           tblptrl	equ	0xFF6
  4978                           tablat	equ	0xFF5
  4979                           postinc0	equ	0xFEE
  4980                           wreg	equ	0xFE8
  4981                           postinc2	equ	0xFDE
  4982                           postdec2	equ	0xFDD
  4983                           fsr2h	equ	0xFDA
  4984                           fsr2l	equ	0xFD9
  4985                           status	equ	0xFD8
  4986                           
  4987 ;; *************** function ___fladd *****************
  4988 ;; Defined at:
  4989 ;;		line 88 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fladd.c"
  4990 ;; Parameters:    Size  Location     Type
  4991 ;;  f1              4    4[BANK0 ] unsigned char 
  4992 ;;  f2              4    8[BANK0 ] unsigned char 
  4993 ;; Auto vars:     Size  Location     Type
  4994 ;;  exp1            1   14[BANK0 ] unsigned char 
  4995 ;;  exp2            1   13[BANK0 ] unsigned char 
  4996 ;;  sign            1   12[BANK0 ] unsigned char 
  4997 ;; Return value:  Size  Location     Type
  4998 ;;                  4    4[BANK0 ] unsigned char 
  4999 ;; Registers used:
  5000 ;;		wreg, status,2, status,0, cstack
  5001 ;; Tracked objects:
  5002 ;;		On entry : 0/0
  5003 ;;		On exit  : 0/0
  5004 ;;		Unchanged: 0/0
  5005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5006 ;;      Params:         0       8       0       0       0       0       0
  5007 ;;      Locals:         0       3       0       0       0       0       0
  5008 ;;      Temps:          1       0       0       0       0       0       0
  5009 ;;      Totals:         1      11       0       0       0       0       0
  5010 ;;Total ram usage:       12 bytes
  5011 ;; Hardware stack levels used:    1
  5012 ;; Hardware stack levels required when called:    3
  5013 ;; This function calls:
  5014 ;;		___flpack
  5015 ;; This function is called by:
  5016 ;;		_Gyros_Update
  5017 ;;		_acos
  5018 ;;		_asin
  5019 ;;		_atan
  5020 ;;		_eval_poly
  5021 ;;		___flsub
  5022 ;;		_floor
  5023 ;;		_log
  5024 ;; This function uses a non-reentrant model
  5025 ;;
  5026                           
  5027                           	psect	text25
  5028  001050                     __ptext25:
  5029                           	opt stack 0
  5030  001050                     ___fladd:
  5031                           	opt stack 24
  5032                           
  5033                           ;incstack = 0
  5034  001050  0100               	movlb	0	; () banked
  5035  001052  3566               	rlcf	(___fladd@f1+2)& (0+255),w,b
  5036  001054  3567               	rlcf	(___fladd@f1+3)& (0+255),w,b
  5037  001056  0100               	movlb	0	; () banked
  5038  001058  6F6E               	movwf	___fladd@exp1& (0+255),b
  5039  00105A  0100               	movlb	0	; () banked
  5040  00105C  356A               	rlcf	(___fladd@f2+2)& (0+255),w,b
  5041  00105E  356B               	rlcf	(___fladd@f2+3)& (0+255),w,b
  5042  001060  0100               	movlb	0	; () banked
  5043  001062  6F6D               	movwf	___fladd@exp2& (0+255),b
  5044  001064  0100               	movlb	0	; () banked
  5045  001066  516E               	movf	___fladd@exp1& (0+255),w,b
  5046  001068  0100               	movlb	0	; () banked
  5047  00106A  B4D8               	btfsc	status,2,c
  5048  00106C  D00F               	goto	l720
  5049                           
  5050                           ; BSR set to: 0
  5051  00106E  0100               	movlb	0	; () banked
  5052  001070  516D               	movf	___fladd@exp2& (0+255),w,b
  5053  001072  0100               	movlb	0	; () banked
  5054  001074  5D6E               	subwf	___fladd@exp1& (0+255),w,b
  5055  001076  B0D8               	btfsc	status,0,c
  5056  001078  D012               	goto	l3379
  5057                           
  5058                           ; BSR set to: 0
  5059  00107A  0100               	movlb	0	; () banked
  5060  00107C  516E               	movf	___fladd@exp1& (0+255),w,b
  5061  00107E  0800               	sublw	0
  5062  001080  0100               	movlb	0	; () banked
  5063  001082  256D               	addwf	___fladd@exp2& (0+255),w,b
  5064  001084  6E2B               	movwf	??___fladd& (0+255),c
  5065  001086  0E20               	movlw	32
  5066  001088  642B               	cpfsgt	??___fladd,c
  5067  00108A  D009               	goto	l3379
  5068  00108C                     l720:
  5069                           
  5070                           ; BSR set to: 0
  5071  00108C  C068  F064         	movff	___fladd@f2,?___fladd
  5072  001090  C069  F065         	movff	___fladd@f2+1,?___fladd+1
  5073  001094  C06A  F066         	movff	___fladd@f2+2,?___fladd+2
  5074  001098  C06B  F067         	movff	___fladd@f2+3,?___fladd+3
  5075  00109C  0012               	return	
  5076  00109E                     l3379:
  5077                           
  5078                           ; BSR set to: 0
  5079  00109E  0100               	movlb	0	; () banked
  5080  0010A0  516D               	movf	___fladd@exp2& (0+255),w,b
  5081  0010A2  0100               	movlb	0	; () banked
  5082  0010A4  B4D8               	btfsc	status,2,c
  5083  0010A6  D00F               	goto	l724
  5084                           
  5085                           ; BSR set to: 0
  5086  0010A8  0100               	movlb	0	; () banked
  5087  0010AA  516E               	movf	___fladd@exp1& (0+255),w,b
  5088  0010AC  0100               	movlb	0	; () banked
  5089  0010AE  5D6D               	subwf	___fladd@exp2& (0+255),w,b
  5090  0010B0  B0D8               	btfsc	status,0,c
  5091  0010B2  D012               	goto	l3385
  5092                           
  5093                           ; BSR set to: 0
  5094  0010B4  0100               	movlb	0	; () banked
  5095  0010B6  516D               	movf	___fladd@exp2& (0+255),w,b
  5096  0010B8  0800               	sublw	0
  5097  0010BA  0100               	movlb	0	; () banked
  5098  0010BC  256E               	addwf	___fladd@exp1& (0+255),w,b
  5099  0010BE  6E2B               	movwf	??___fladd& (0+255),c
  5100  0010C0  0E20               	movlw	32
  5101  0010C2  642B               	cpfsgt	??___fladd,c
  5102  0010C4  D009               	goto	l3385
  5103  0010C6                     l724:
  5104                           
  5105                           ; BSR set to: 0
  5106  0010C6  C064  F064         	movff	___fladd@f1,?___fladd
  5107  0010CA  C065  F065         	movff	___fladd@f1+1,?___fladd+1
  5108  0010CE  C066  F066         	movff	___fladd@f1+2,?___fladd+2
  5109  0010D2  C067  F067         	movff	___fladd@f1+3,?___fladd+3
  5110  0010D6  0012               	return	
  5111  0010D8                     l3385:
  5112                           
  5113                           ; BSR set to: 0
  5114  0010D8  0E06               	movlw	6
  5115  0010DA  0100               	movlb	0	; () banked
  5116  0010DC  6F6C               	movwf	___fladd@sign& (0+255),b
  5117                           
  5118                           ; BSR set to: 0
  5119  0010DE  0100               	movlb	0	; () banked
  5120  0010E0  AF67               	btfss	(___fladd@f1+3)& (0+255),7,b
  5121  0010E2  D003               	goto	l3391
  5122                           
  5123                           ; BSR set to: 0
  5124  0010E4  0100               	movlb	0	; () banked
  5125  0010E6  8F6C               	bsf	___fladd@sign& (0+255),7,b
  5126  0010E8  D000               	goto	l3391
  5127  0010EA                     l3391:
  5128                           
  5129                           ; BSR set to: 0
  5130  0010EA  0100               	movlb	0	; () banked
  5131  0010EC  AF6B               	btfss	(___fladd@f2+3)& (0+255),7,b
  5132  0010EE  D002               	goto	l726
  5133                           
  5134                           ; BSR set to: 0
  5135  0010F0  0100               	movlb	0	; () banked
  5136  0010F2  8D6C               	bsf	___fladd@sign& (0+255),6,b
  5137  0010F4                     l726:
  5138                           
  5139                           ; BSR set to: 0
  5140  0010F4  0100               	movlb	0	; () banked
  5141  0010F6  8F66               	bsf	(___fladd@f1+2)& (0+255),7,b
  5142                           
  5143                           ; BSR set to: 0
  5144  0010F8  0EFF               	movlw	255
  5145  0010FA  0100               	movlb	0	; () banked
  5146  0010FC  1764               	andwf	___fladd@f1& (0+255),f,b
  5147  0010FE  0EFF               	movlw	255
  5148  001100  1765               	andwf	(___fladd@f1+1)& (0+255),f,b
  5149  001102  0EFF               	movlw	255
  5150  001104  1766               	andwf	(___fladd@f1+2)& (0+255),f,b
  5151  001106  0E00               	movlw	0
  5152  001108  1767               	andwf	(___fladd@f1+3)& (0+255),f,b
  5153                           
  5154                           ; BSR set to: 0
  5155  00110A  0100               	movlb	0	; () banked
  5156  00110C  8F6A               	bsf	(___fladd@f2+2)& (0+255),7,b
  5157  00110E  0EFF               	movlw	255
  5158  001110  0100               	movlb	0	; () banked
  5159  001112  1768               	andwf	___fladd@f2& (0+255),f,b
  5160  001114  0EFF               	movlw	255
  5161  001116  1769               	andwf	(___fladd@f2+1)& (0+255),f,b
  5162  001118  0EFF               	movlw	255
  5163  00111A  176A               	andwf	(___fladd@f2+2)& (0+255),f,b
  5164  00111C  0E00               	movlw	0
  5165  00111E  176B               	andwf	(___fladd@f2+3)& (0+255),f,b
  5166  001120  0100               	movlb	0	; () banked
  5167  001122  516D               	movf	___fladd@exp2& (0+255),w,b
  5168  001124  0100               	movlb	0	; () banked
  5169  001126  5D6E               	subwf	___fladd@exp1& (0+255),w,b
  5170  001128  B0D8               	btfsc	status,0,c
  5171  00112A  D029               	goto	l3409
  5172  00112C                     l3399:
  5173                           
  5174                           ; BSR set to: 0
  5175  00112C  0100               	movlb	0	; () banked
  5176  00112E  90D8               	bcf	status,0,c
  5177  001130  3768               	rlcf	___fladd@f2& (0+255),f,b
  5178  001132  3769               	rlcf	(___fladd@f2+1)& (0+255),f,b
  5179  001134  376A               	rlcf	(___fladd@f2+2)& (0+255),f,b
  5180  001136  376B               	rlcf	(___fladd@f2+3)& (0+255),f,b
  5181  001138  0100               	movlb	0	; () banked
  5182  00113A  076D               	decf	___fladd@exp2& (0+255),f,b
  5183                           
  5184                           ; BSR set to: 0
  5185  00113C  0100               	movlb	0	; () banked
  5186  00113E  516E               	movf	___fladd@exp1& (0+255),w,b
  5187  001140  0100               	movlb	0	; () banked
  5188  001142  196D               	xorwf	___fladd@exp2& (0+255),w,b
  5189  001144  B4D8               	btfsc	status,2,c
  5190  001146  D013               	goto	l3407
  5191                           
  5192                           ; BSR set to: 0
  5193  001148  0100               	movlb	0	; () banked
  5194  00114A  076C               	decf	___fladd@sign& (0+255),f,b
  5195  00114C  C06C  F02B         	movff	___fladd@sign,??___fladd
  5196  001150  0E07               	movlw	7
  5197  001152  162B               	andwf	??___fladd,f,c
  5198  001154  B4D8               	btfsc	status,2,c
  5199  001156  D00B               	goto	l3407
  5200  001158  D7E9               	goto	l3399
  5201                           
  5202                           ; BSR set to: 0
  5203                           
  5204                           ; BSR set to: 0
  5205  00115A  D009               	goto	l3407
  5206  00115C                     l3405:
  5207                           
  5208                           ; BSR set to: 0
  5209  00115C  0100               	movlb	0	; () banked
  5210  00115E  90D8               	bcf	status,0,c
  5211  001160  3367               	rrcf	(___fladd@f1+3)& (0+255),f,b
  5212  001162  3366               	rrcf	(___fladd@f1+2)& (0+255),f,b
  5213  001164  3365               	rrcf	(___fladd@f1+1)& (0+255),f,b
  5214  001166  3364               	rrcf	___fladd@f1& (0+255),f,b
  5215  001168  0100               	movlb	0	; () banked
  5216  00116A  2B6E               	incf	___fladd@exp1& (0+255),f,b
  5217  00116C  D000               	goto	l3407
  5218  00116E                     l3407:
  5219                           
  5220                           ; BSR set to: 0
  5221  00116E  0100               	movlb	0	; () banked
  5222  001170  516D               	movf	___fladd@exp2& (0+255),w,b
  5223  001172  0100               	movlb	0	; () banked
  5224  001174  196E               	xorwf	___fladd@exp1& (0+255),w,b
  5225  001176  B4D8               	btfsc	status,2,c
  5226  001178  D031               	goto	l735
  5227  00117A  D7F0               	goto	l3405
  5228                           
  5229                           ; BSR set to: 0
  5230  00117C  D02F               	goto	l735
  5231  00117E                     l3409:
  5232                           
  5233                           ; BSR set to: 0
  5234  00117E  0100               	movlb	0	; () banked
  5235  001180  516E               	movf	___fladd@exp1& (0+255),w,b
  5236  001182  0100               	movlb	0	; () banked
  5237  001184  5D6D               	subwf	___fladd@exp2& (0+255),w,b
  5238  001186  B0D8               	btfsc	status,0,c
  5239  001188  D029               	goto	l735
  5240  00118A                     l3411:
  5241                           
  5242                           ; BSR set to: 0
  5243  00118A  0100               	movlb	0	; () banked
  5244  00118C  90D8               	bcf	status,0,c
  5245  00118E  3764               	rlcf	___fladd@f1& (0+255),f,b
  5246  001190  3765               	rlcf	(___fladd@f1+1)& (0+255),f,b
  5247  001192  3766               	rlcf	(___fladd@f1+2)& (0+255),f,b
  5248  001194  3767               	rlcf	(___fladd@f1+3)& (0+255),f,b
  5249  001196  0100               	movlb	0	; () banked
  5250  001198  076E               	decf	___fladd@exp1& (0+255),f,b
  5251                           
  5252                           ; BSR set to: 0
  5253  00119A  0100               	movlb	0	; () banked
  5254  00119C  516E               	movf	___fladd@exp1& (0+255),w,b
  5255  00119E  0100               	movlb	0	; () banked
  5256  0011A0  196D               	xorwf	___fladd@exp2& (0+255),w,b
  5257  0011A2  B4D8               	btfsc	status,2,c
  5258  0011A4  D013               	goto	l3419
  5259                           
  5260                           ; BSR set to: 0
  5261  0011A6  0100               	movlb	0	; () banked
  5262  0011A8  076C               	decf	___fladd@sign& (0+255),f,b
  5263  0011AA  C06C  F02B         	movff	___fladd@sign,??___fladd
  5264  0011AE  0E07               	movlw	7
  5265  0011B0  162B               	andwf	??___fladd,f,c
  5266  0011B2  B4D8               	btfsc	status,2,c
  5267  0011B4  D00B               	goto	l3419
  5268  0011B6  D7E9               	goto	l3411
  5269                           
  5270                           ; BSR set to: 0
  5271                           
  5272                           ; BSR set to: 0
  5273  0011B8  D009               	goto	l3419
  5274  0011BA                     l3417:
  5275                           
  5276                           ; BSR set to: 0
  5277  0011BA  0100               	movlb	0	; () banked
  5278  0011BC  90D8               	bcf	status,0,c
  5279  0011BE  336B               	rrcf	(___fladd@f2+3)& (0+255),f,b
  5280  0011C0  336A               	rrcf	(___fladd@f2+2)& (0+255),f,b
  5281  0011C2  3369               	rrcf	(___fladd@f2+1)& (0+255),f,b
  5282  0011C4  3368               	rrcf	___fladd@f2& (0+255),f,b
  5283  0011C6  0100               	movlb	0	; () banked
  5284  0011C8  2B6D               	incf	___fladd@exp2& (0+255),f,b
  5285  0011CA  D000               	goto	l3419
  5286  0011CC                     l3419:
  5287                           
  5288                           ; BSR set to: 0
  5289  0011CC  0100               	movlb	0	; () banked
  5290  0011CE  516D               	movf	___fladd@exp2& (0+255),w,b
  5291  0011D0  0100               	movlb	0	; () banked
  5292  0011D2  196E               	xorwf	___fladd@exp1& (0+255),w,b
  5293  0011D4  B4D8               	btfsc	status,2,c
  5294  0011D6  D002               	goto	l735
  5295  0011D8  D7F0               	goto	l3417
  5296                           
  5297                           ; BSR set to: 0
  5298  0011DA  D000               	goto	l735
  5299  0011DC                     l735:
  5300                           
  5301                           ; BSR set to: 0
  5302  0011DC  0100               	movlb	0	; () banked
  5303  0011DE  AF6C               	btfss	___fladd@sign& (0+255),7,b
  5304  0011E0  D011               	goto	l3423
  5305                           
  5306                           ; BSR set to: 0
  5307  0011E2  0EFF               	movlw	255
  5308  0011E4  0100               	movlb	0	; () banked
  5309  0011E6  1B64               	xorwf	___fladd@f1& (0+255),f,b
  5310  0011E8  0EFF               	movlw	255
  5311  0011EA  1B65               	xorwf	(___fladd@f1+1)& (0+255),f,b
  5312  0011EC  0EFF               	movlw	255
  5313  0011EE  1B66               	xorwf	(___fladd@f1+2)& (0+255),f,b
  5314  0011F0  0EFF               	movlw	255
  5315  0011F2  1B67               	xorwf	(___fladd@f1+3)& (0+255),f,b
  5316  0011F4  0E01               	movlw	1
  5317  0011F6  0100               	movlb	0	; () banked
  5318  0011F8  2764               	addwf	___fladd@f1& (0+255),f,b
  5319  0011FA  0E00               	movlw	0
  5320  0011FC  2365               	addwfc	(___fladd@f1+1)& (0+255),f,b
  5321  0011FE  2366               	addwfc	(___fladd@f1+2)& (0+255),f,b
  5322  001200  2367               	addwfc	(___fladd@f1+3)& (0+255),f,b
  5323  001202  D000               	goto	l3423
  5324  001204                     l3423:
  5325                           
  5326                           ; BSR set to: 0
  5327  001204  0100               	movlb	0	; () banked
  5328  001206  AD6C               	btfss	___fladd@sign& (0+255),6,b
  5329  001208  D011               	goto	l3427
  5330                           
  5331                           ; BSR set to: 0
  5332  00120A  0EFF               	movlw	255
  5333  00120C  0100               	movlb	0	; () banked
  5334  00120E  1B68               	xorwf	___fladd@f2& (0+255),f,b
  5335  001210  0EFF               	movlw	255
  5336  001212  1B69               	xorwf	(___fladd@f2+1)& (0+255),f,b
  5337  001214  0EFF               	movlw	255
  5338  001216  1B6A               	xorwf	(___fladd@f2+2)& (0+255),f,b
  5339  001218  0EFF               	movlw	255
  5340  00121A  1B6B               	xorwf	(___fladd@f2+3)& (0+255),f,b
  5341  00121C  0E01               	movlw	1
  5342  00121E  0100               	movlb	0	; () banked
  5343  001220  2768               	addwf	___fladd@f2& (0+255),f,b
  5344  001222  0E00               	movlw	0
  5345  001224  2369               	addwfc	(___fladd@f2+1)& (0+255),f,b
  5346  001226  236A               	addwfc	(___fladd@f2+2)& (0+255),f,b
  5347  001228  236B               	addwfc	(___fladd@f2+3)& (0+255),f,b
  5348  00122A  D000               	goto	l3427
  5349  00122C                     l3427:
  5350                           
  5351                           ; BSR set to: 0
  5352  00122C  0E00               	movlw	0
  5353  00122E  0100               	movlb	0	; () banked
  5354  001230  6F6C               	movwf	___fladd@sign& (0+255),b
  5355                           
  5356                           ; BSR set to: 0
  5357  001232  0100               	movlb	0	; () banked
  5358  001234  5164               	movf	___fladd@f1& (0+255),w,b
  5359  001236  0100               	movlb	0	; () banked
  5360  001238  2768               	addwf	___fladd@f2& (0+255),f,b
  5361  00123A  0100               	movlb	0	; () banked
  5362  00123C  5165               	movf	(___fladd@f1+1)& (0+255),w,b
  5363  00123E  0100               	movlb	0	; () banked
  5364  001240  2369               	addwfc	(___fladd@f2+1)& (0+255),f,b
  5365  001242  0100               	movlb	0	; () banked
  5366  001244  5166               	movf	(___fladd@f1+2)& (0+255),w,b
  5367  001246  0100               	movlb	0	; () banked
  5368  001248  236A               	addwfc	(___fladd@f2+2)& (0+255),f,b
  5369  00124A  0100               	movlb	0	; () banked
  5370  00124C  5167               	movf	(___fladd@f1+3)& (0+255),w,b
  5371  00124E  0100               	movlb	0	; () banked
  5372  001250  236B               	addwfc	(___fladd@f2+3)& (0+255),f,b
  5373                           
  5374                           ; BSR set to: 0
  5375  001252  0100               	movlb	0	; () banked
  5376  001254  AF6B               	btfss	(___fladd@f2+3)& (0+255),7,b
  5377  001256  D014               	goto	l3437
  5378                           
  5379                           ; BSR set to: 0
  5380  001258  0EFF               	movlw	255
  5381  00125A  0100               	movlb	0	; () banked
  5382  00125C  1B68               	xorwf	___fladd@f2& (0+255),f,b
  5383  00125E  0EFF               	movlw	255
  5384  001260  1B69               	xorwf	(___fladd@f2+1)& (0+255),f,b
  5385  001262  0EFF               	movlw	255
  5386  001264  1B6A               	xorwf	(___fladd@f2+2)& (0+255),f,b
  5387  001266  0EFF               	movlw	255
  5388  001268  1B6B               	xorwf	(___fladd@f2+3)& (0+255),f,b
  5389  00126A  0E01               	movlw	1
  5390  00126C  0100               	movlb	0	; () banked
  5391  00126E  2768               	addwf	___fladd@f2& (0+255),f,b
  5392  001270  0E00               	movlw	0
  5393  001272  2369               	addwfc	(___fladd@f2+1)& (0+255),f,b
  5394  001274  236A               	addwfc	(___fladd@f2+2)& (0+255),f,b
  5395  001276  236B               	addwfc	(___fladd@f2+3)& (0+255),f,b
  5396                           
  5397                           ; BSR set to: 0
  5398  001278  0E01               	movlw	1
  5399  00127A  0100               	movlb	0	; () banked
  5400  00127C  6F6C               	movwf	___fladd@sign& (0+255),b
  5401  00127E  D000               	goto	l3437
  5402  001280                     l3437:
  5403                           
  5404                           ; BSR set to: 0
  5405  001280  C068  F020         	movff	___fladd@f2,___flpack@arg
  5406  001284  C069  F021         	movff	___fladd@f2+1,___flpack@arg+1
  5407  001288  C06A  F022         	movff	___fladd@f2+2,___flpack@arg+2
  5408  00128C  C06B  F023         	movff	___fladd@f2+3,___flpack@arg+3
  5409  001290  C06E  F024         	movff	___fladd@exp1,___flpack@exp
  5410  001294  C06C  F025         	movff	___fladd@sign,___flpack@sign
  5411  001298  EC3F  F011         	call	___flpack	;wreg free
  5412  00129C  C020  F064         	movff	?___flpack,?___fladd
  5413  0012A0  C021  F065         	movff	?___flpack+1,?___fladd+1
  5414  0012A4  C022  F066         	movff	?___flpack+2,?___fladd+2
  5415  0012A8  C023  F067         	movff	?___flpack+3,?___fladd+3
  5416  0012AC  0012               	return	
  5417  0012AE  0012               	return		;funcret
  5418  0012B0                     __end_of___fladd:
  5419                           	opt stack 0
  5420                           tblptru	equ	0xFF8
  5421                           tblptrh	equ	0xFF7
  5422                           tblptrl	equ	0xFF6
  5423                           tablat	equ	0xFF5
  5424                           postinc0	equ	0xFEE
  5425                           wreg	equ	0xFE8
  5426                           postinc2	equ	0xFDE
  5427                           postdec2	equ	0xFDD
  5428                           fsr2h	equ	0xFDA
  5429                           fsr2l	equ	0xFD9
  5430                           status	equ	0xFD8
  5431                           
  5432 ;; *************** function ___flge *****************
  5433 ;; Defined at:
  5434 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flge.c"
  5435 ;; Parameters:    Size  Location     Type
  5436 ;;  ff1             4    0[BANK0 ] unsigned char 
  5437 ;;  ff2             4    4[BANK0 ] unsigned char 
  5438 ;; Auto vars:     Size  Location     Type
  5439 ;;		None
  5440 ;; Return value:  Size  Location     Type
  5441 ;;		None               void
  5442 ;; Registers used:
  5443 ;;		wreg, status,2, status,0
  5444 ;; Tracked objects:
  5445 ;;		On entry : 0/0
  5446 ;;		On exit  : 0/0
  5447 ;;		Unchanged: 0/0
  5448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5449 ;;      Params:         0       8       0       0       0       0       0
  5450 ;;      Locals:         0       0       0       0       0       0       0
  5451 ;;      Temps:          4       0       0       0       0       0       0
  5452 ;;      Totals:         4       8       0       0       0       0       0
  5453 ;;Total ram usage:       12 bytes
  5454 ;; Hardware stack levels used:    1
  5455 ;; Hardware stack levels required when called:    2
  5456 ;; This function calls:
  5457 ;;		Nothing
  5458 ;; This function is called by:
  5459 ;;		_asin
  5460 ;;		_atan
  5461 ;;		_pow
  5462 ;;		_sqrt
  5463 ;;		_exp
  5464 ;;		_floor
  5465 ;; This function uses a non-reentrant model
  5466 ;;
  5467                           
  5468                           	psect	text26
  5469  002572                     __ptext26:
  5470                           	opt stack 0
  5471  002572                     ___flge:
  5472                           	opt stack 26
  5473                           
  5474                           ;incstack = 0
  5475  002572  0100               	movlb	0	; () banked
  5476  002574  AF63               	btfss	(___flge@ff1+3)& (0+255),7,b
  5477  002576  D022               	goto	l3637
  5478                           
  5479                           ; BSR set to: 0
  5480  002578  C060  F028         	movff	___flge@ff1,??___flge
  5481  00257C  C061  F029         	movff	___flge@ff1+1,??___flge+1
  5482  002580  C062  F02A         	movff	___flge@ff1+2,??___flge+2
  5483  002584  C063  F02B         	movff	___flge@ff1+3,??___flge+3
  5484  002588  1E28               	comf	??___flge,f,c
  5485  00258A  1E29               	comf	??___flge+1,f,c
  5486  00258C  1E2A               	comf	??___flge+2,f,c
  5487  00258E  1E2B               	comf	??___flge+3,f,c
  5488  002590  2A28               	incf	??___flge,f,c
  5489  002592  0E00               	movlw	0
  5490  002594  2229               	addwfc	??___flge+1,f,c
  5491  002596  222A               	addwfc	??___flge+2,f,c
  5492  002598  222B               	addwfc	??___flge+3,f,c
  5493  00259A  0E00               	movlw	0
  5494  00259C  2428               	addwf	??___flge,w,c
  5495  00259E  0100               	movlb	0	; () banked
  5496  0025A0  6F60               	movwf	___flge@ff1& (0+255),b
  5497  0025A2  0E00               	movlw	0
  5498  0025A4  2029               	addwfc	??___flge+1,w,c
  5499  0025A6  0100               	movlb	0	; () banked
  5500  0025A8  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  5501  0025AA  0E00               	movlw	0
  5502  0025AC  202A               	addwfc	??___flge+2,w,c
  5503  0025AE  0100               	movlb	0	; () banked
  5504  0025B0  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  5505  0025B2  0E80               	movlw	128
  5506  0025B4  202B               	addwfc	??___flge+3,w,c
  5507  0025B6  0100               	movlb	0	; () banked
  5508  0025B8  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  5509  0025BA  D000               	goto	l3637
  5510  0025BC                     l3637:
  5511                           
  5512                           ; BSR set to: 0
  5513  0025BC  0100               	movlb	0	; () banked
  5514  0025BE  AF67               	btfss	(___flge@ff2+3)& (0+255),7,b
  5515  0025C0  D021               	goto	l760
  5516                           
  5517                           ; BSR set to: 0
  5518  0025C2  C064  F028         	movff	___flge@ff2,??___flge
  5519  0025C6  C065  F029         	movff	___flge@ff2+1,??___flge+1
  5520  0025CA  C066  F02A         	movff	___flge@ff2+2,??___flge+2
  5521  0025CE  C067  F02B         	movff	___flge@ff2+3,??___flge+3
  5522  0025D2  1E28               	comf	??___flge,f,c
  5523  0025D4  1E29               	comf	??___flge+1,f,c
  5524  0025D6  1E2A               	comf	??___flge+2,f,c
  5525  0025D8  1E2B               	comf	??___flge+3,f,c
  5526  0025DA  2A28               	incf	??___flge,f,c
  5527  0025DC  0E00               	movlw	0
  5528  0025DE  2229               	addwfc	??___flge+1,f,c
  5529  0025E0  222A               	addwfc	??___flge+2,f,c
  5530  0025E2  222B               	addwfc	??___flge+3,f,c
  5531  0025E4  0E00               	movlw	0
  5532  0025E6  2428               	addwf	??___flge,w,c
  5533  0025E8  0100               	movlb	0	; () banked
  5534  0025EA  6F64               	movwf	___flge@ff2& (0+255),b
  5535  0025EC  0E00               	movlw	0
  5536  0025EE  2029               	addwfc	??___flge+1,w,c
  5537  0025F0  0100               	movlb	0	; () banked
  5538  0025F2  6F65               	movwf	(___flge@ff2+1)& (0+255),b
  5539  0025F4  0E00               	movlw	0
  5540  0025F6  202A               	addwfc	??___flge+2,w,c
  5541  0025F8  0100               	movlb	0	; () banked
  5542  0025FA  6F66               	movwf	(___flge@ff2+2)& (0+255),b
  5543  0025FC  0E80               	movlw	128
  5544  0025FE  202B               	addwfc	??___flge+3,w,c
  5545  002600  0100               	movlb	0	; () banked
  5546  002602  6F67               	movwf	(___flge@ff2+3)& (0+255),b
  5547  002604                     l760:
  5548                           
  5549                           ; BSR set to: 0
  5550  002604  0E00               	movlw	0
  5551  002606  0100               	movlb	0	; () banked
  5552  002608  1B60               	xorwf	___flge@ff1& (0+255),f,b
  5553  00260A  0E00               	movlw	0
  5554  00260C  1B61               	xorwf	(___flge@ff1+1)& (0+255),f,b
  5555  00260E  0E00               	movlw	0
  5556  002610  1B62               	xorwf	(___flge@ff1+2)& (0+255),f,b
  5557  002612  0E80               	movlw	128
  5558  002614  1B63               	xorwf	(___flge@ff1+3)& (0+255),f,b
  5559  002616  0E00               	movlw	0
  5560  002618  0100               	movlb	0	; () banked
  5561  00261A  1B64               	xorwf	___flge@ff2& (0+255),f,b
  5562  00261C  0E00               	movlw	0
  5563  00261E  1B65               	xorwf	(___flge@ff2+1)& (0+255),f,b
  5564  002620  0E00               	movlw	0
  5565  002622  1B66               	xorwf	(___flge@ff2+2)& (0+255),f,b
  5566  002624  0E80               	movlw	128
  5567  002626  1B67               	xorwf	(___flge@ff2+3)& (0+255),f,b
  5568  002628  0100               	movlb	0	; () banked
  5569  00262A  5164               	movf	___flge@ff2& (0+255),w,b
  5570  00262C  0100               	movlb	0	; () banked
  5571  00262E  5D60               	subwf	___flge@ff1& (0+255),w,b
  5572  002630  0100               	movlb	0	; () banked
  5573  002632  5165               	movf	(___flge@ff2+1)& (0+255),w,b
  5574  002634  0100               	movlb	0	; () banked
  5575  002636  5961               	subwfb	(___flge@ff1+1)& (0+255),w,b
  5576  002638  0100               	movlb	0	; () banked
  5577  00263A  5166               	movf	(___flge@ff2+2)& (0+255),w,b
  5578  00263C  0100               	movlb	0	; () banked
  5579  00263E  5962               	subwfb	(___flge@ff1+2)& (0+255),w,b
  5580  002640  0100               	movlb	0	; () banked
  5581  002642  5167               	movf	(___flge@ff2+3)& (0+255),w,b
  5582  002644  0100               	movlb	0	; () banked
  5583  002646  5963               	subwfb	(___flge@ff1+3)& (0+255),w,b
  5584  002648  B0D8               	btfsc	status,0,c
  5585  00264A  D002               	goto	l3643
  5586                           
  5587                           ; BSR set to: 0
  5588  00264C  90D8               	bcf	status,0,c
  5589  00264E  0012               	return	
  5590  002650                     l3643:
  5591                           
  5592                           ; BSR set to: 0
  5593  002650  80D8               	bsf	status,0,c
  5594                           
  5595                           ; BSR set to: 0
  5596  002652  0012               	return	
  5597                           
  5598                           ; BSR set to: 0
  5599                           
  5600                           ; BSR set to: 0
  5601  002654  0012               	return		;funcret
  5602  002656                     __end_of___flge:
  5603                           	opt stack 0
  5604                           tblptru	equ	0xFF8
  5605                           tblptrh	equ	0xFF7
  5606                           tblptrl	equ	0xFF6
  5607                           tablat	equ	0xFF5
  5608                           postinc0	equ	0xFEE
  5609                           wreg	equ	0xFE8
  5610                           postinc2	equ	0xFDE
  5611                           postdec2	equ	0xFDD
  5612                           fsr2h	equ	0xFDA
  5613                           fsr2l	equ	0xFD9
  5614                           status	equ	0xFD8
  5615                           
  5616 ;; *************** function _Accel_Get *****************
  5617 ;; Defined at:
  5618 ;;		line 33 in file "accel.c"
  5619 ;; Parameters:    Size  Location     Type
  5620 ;;  out             2   45[BANK0 ] PTR struct .
  5621 ;;		 -> Gyros_Update@a(12), 
  5622 ;; Auto vars:     Size  Location     Type
  5623 ;;  gCount          2   59[BANK0 ] int 
  5624 ;;  i               2   63[BANK0 ] int 
  5625 ;;  raw             6   53[BANK0 ] unsigned char [6]
  5626 ;;  f_out           2   61[BANK0 ] PTR float 
  5627 ;;		 -> Gyros_Update@a(12), 
  5628 ;; Return value:  Size  Location     Type
  5629 ;;		None               void
  5630 ;; Registers used:
  5631 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5632 ;; Tracked objects:
  5633 ;;		On entry : 0/0
  5634 ;;		On exit  : 0/0
  5635 ;;		Unchanged: 0/0
  5636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5637 ;;      Params:         0       2       0       0       0       0       0
  5638 ;;      Locals:         0      12       0       0       0       0       0
  5639 ;;      Temps:          0       6       0       0       0       0       0
  5640 ;;      Totals:         0      20       0       0       0       0       0
  5641 ;;Total ram usage:       20 bytes
  5642 ;; Hardware stack levels used:    1
  5643 ;; Hardware stack levels required when called:    6
  5644 ;; This function calls:
  5645 ;;		_Accel_ReadRegisters
  5646 ;;		___awtofl
  5647 ;;		___fldiv
  5648 ;;		___wmul
  5649 ;; This function is called by:
  5650 ;;		_Gyros_Update
  5651 ;; This function uses a non-reentrant model
  5652 ;;
  5653                           
  5654                           	psect	text27
  5655  00192E                     __ptext27:
  5656                           	opt stack 0
  5657  00192E                     _Accel_Get:
  5658                           	opt stack 23
  5659                           
  5660                           ;accel.c: 35: char raw[6];
  5661                           ;accel.c: 36: float* f_out = (float*) out;
  5662                           
  5663                           ; BSR set to: 0
  5664                           ;incstack = 0
  5665  00192E  C08D  F09D         	movff	Accel_Get@out,Accel_Get@f_out
  5666  001932  C08E  F09E         	movff	Accel_Get@out+1,Accel_Get@f_out+1
  5667                           
  5668                           ;accel.c: 37: f_out[0] = 0;
  5669  001936  C09D  FFD9         	movff	Accel_Get@f_out,fsr2l
  5670  00193A  C09E  FFDA         	movff	Accel_Get@f_out+1,fsr2h
  5671  00193E  0E00               	movlw	0
  5672  001940  6EDE               	movwf	postinc2,c
  5673  001942  0E00               	movlw	0
  5674  001944  6EDE               	movwf	postinc2,c
  5675  001946  0E00               	movlw	0
  5676  001948  6EDE               	movwf	postinc2,c
  5677  00194A  0E00               	movlw	0
  5678  00194C  6EDD               	movwf	postdec2,c
  5679                           
  5680                           ;accel.c: 38: f_out[1] = 0;
  5681  00194E  0100               	movlb	0	; () banked
  5682  001950  EE20 F004          	lfsr	2,4
  5683  001954  519D               	movf	Accel_Get@f_out& (0+255),w,b
  5684  001956  26D9               	addwf	fsr2l,f,c
  5685  001958  519E               	movf	(Accel_Get@f_out+1)& (0+255),w,b
  5686  00195A  22DA               	addwfc	fsr2h,f,c
  5687  00195C  0E00               	movlw	0
  5688  00195E  6EDE               	movwf	postinc2,c
  5689  001960  0E00               	movlw	0
  5690  001962  6EDE               	movwf	postinc2,c
  5691  001964  0E00               	movlw	0
  5692  001966  6EDE               	movwf	postinc2,c
  5693  001968  0E00               	movlw	0
  5694  00196A  6EDD               	movwf	postdec2,c
  5695                           
  5696                           ; BSR set to: 0
  5697                           ;accel.c: 39: f_out[2] = 0;
  5698  00196C  0100               	movlb	0	; () banked
  5699  00196E  EE20 F008          	lfsr	2,8
  5700  001972  519D               	movf	Accel_Get@f_out& (0+255),w,b
  5701  001974  26D9               	addwf	fsr2l,f,c
  5702  001976  519E               	movf	(Accel_Get@f_out+1)& (0+255),w,b
  5703  001978  22DA               	addwfc	fsr2h,f,c
  5704  00197A  0E00               	movlw	0
  5705  00197C  6EDE               	movwf	postinc2,c
  5706  00197E  0E00               	movlw	0
  5707  001980  6EDE               	movwf	postinc2,c
  5708  001982  0E00               	movlw	0
  5709  001984  6EDE               	movwf	postinc2,c
  5710  001986  0E00               	movlw	0
  5711  001988  6EDD               	movwf	postdec2,c
  5712                           
  5713                           ; BSR set to: 0
  5714                           ;accel.c: 41: Accel_ReadRegisters(0x01, raw, 6);
  5715  00198A  0E95               	movlw	low Accel_Get@raw
  5716  00198C  6E28               	movwf	Accel_ReadRegisters@out,c
  5717  00198E  0E00               	movlw	high Accel_Get@raw
  5718  001990  6E29               	movwf	Accel_ReadRegisters@out+1,c
  5719  001992  0E00               	movlw	0
  5720  001994  6E2B               	movwf	Accel_ReadRegisters@length+1,c
  5721  001996  0E06               	movlw	6
  5722  001998  6E2A               	movwf	Accel_ReadRegisters@length,c
  5723  00199A  0E01               	movlw	1
  5724  00199C  EC8C  F016         	call	_Accel_ReadRegisters
  5725                           
  5726                           ;accel.c: 43: for(int i = 0; i < 3 ; i++)
  5727  0019A0  0E00               	movlw	0
  5728  0019A2  0100               	movlb	0	; () banked
  5729  0019A4  6FA0               	movwf	(Accel_Get@i+1)& (0+255),b
  5730  0019A6  0E00               	movlw	0
  5731  0019A8  6F9F               	movwf	Accel_Get@i& (0+255),b
  5732                           
  5733                           ; BSR set to: 0
  5734  0019AA  0100               	movlb	0	; () banked
  5735  0019AC  BFA0               	btfsc	(Accel_Get@i+1)& (0+255),7,b
  5736  0019AE  D00A               	goto	l4021
  5737  0019B0  0100               	movlb	0	; () banked
  5738  0019B2  51A0               	movf	(Accel_Get@i+1)& (0+255),w,b
  5739  0019B4  E106               	bnz	u5120
  5740  0019B6  0E03               	movlw	3
  5741  0019B8  0100               	movlb	0	; () banked
  5742  0019BA  5D9F               	subwf	Accel_Get@i& (0+255),w,b
  5743  0019BC  B0D8               	btfsc	status,0,c
  5744  0019BE  0012               	return	
  5745  0019C0  D001               	goto	l4021
  5746  0019C2                     u5120:
  5747                           
  5748                           ; BSR set to: 0
  5749  0019C2  0012               	return	
  5750  0019C4                     l4021:
  5751                           
  5752                           ; BSR set to: 0
  5753                           ;accel.c: 44: {
  5754                           ;accel.c: 45: int gCount = (raw[i*2] << 8) | raw[(i*2)+1];
  5755  0019C4  90D8               	bcf	status,0,c
  5756  0019C6  0100               	movlb	0	; () banked
  5757  0019C8  359F               	rlcf	Accel_Get@i& (0+255),w,b
  5758  0019CA  6ED9               	movwf	fsr2l,c
  5759  0019CC  0100               	movlb	0	; () banked
  5760  0019CE  35A0               	rlcf	(Accel_Get@i+1)& (0+255),w,b
  5761  0019D0  6EDA               	movwf	fsr2h,c
  5762  0019D2  0E95               	movlw	low Accel_Get@raw
  5763  0019D4  26D9               	addwf	fsr2l,f,c
  5764  0019D6  0E00               	movlw	high Accel_Get@raw
  5765  0019D8  22DA               	addwfc	fsr2h,f,c
  5766  0019DA  50DF               	movf	indf2,w,c
  5767  0019DC  0100               	movlb	0	; () banked
  5768  0019DE  6F8F               	movwf	??_Accel_Get& (0+255),b
  5769  0019E0  0100               	movlb	0	; () banked
  5770  0019E2  518F               	movf	??_Accel_Get& (0+255),w,b
  5771  0019E4  0100               	movlb	0	; () banked
  5772  0019E6  6F91               	movwf	(??_Accel_Get+2)& (0+255),b
  5773  0019E8  6B90               	clrf	(??_Accel_Get+1)& (0+255),b
  5774  0019EA  C09F  F092         	movff	Accel_Get@i,??_Accel_Get+3
  5775  0019EE  C0A0  F093         	movff	Accel_Get@i+1,??_Accel_Get+4
  5776  0019F2  90D8               	bcf	status,0,c
  5777  0019F4  0100               	movlb	0	; () banked
  5778  0019F6  3792               	rlcf	(??_Accel_Get+3)& (0+255),f,b
  5779  0019F8  3793               	rlcf	(??_Accel_Get+4)& (0+255),f,b
  5780  0019FA  0E01               	movlw	1
  5781  0019FC  0100               	movlb	0	; () banked
  5782  0019FE  2792               	addwf	(??_Accel_Get+3)& (0+255),f,b
  5783  001A00  0E00               	movlw	0
  5784  001A02  2393               	addwfc	(??_Accel_Get+4)& (0+255),f,b
  5785  001A04  0E95               	movlw	low Accel_Get@raw
  5786  001A06  0100               	movlb	0	; () banked
  5787  001A08  2592               	addwf	(??_Accel_Get+3)& (0+255),w,b
  5788  001A0A  6ED9               	movwf	fsr2l,c
  5789  001A0C  0E00               	movlw	high Accel_Get@raw
  5790  001A0E  0100               	movlb	0	; () banked
  5791  001A10  2193               	addwfc	(??_Accel_Get+4)& (0+255),w,b
  5792  001A12  6EDA               	movwf	fsr2h,c
  5793  001A14  50DF               	movf	indf2,w,c
  5794  001A16  0100               	movlb	0	; () banked
  5795  001A18  6F94               	movwf	(??_Accel_Get+5)& (0+255),b
  5796  001A1A  0100               	movlb	0	; () banked
  5797  001A1C  5194               	movf	(??_Accel_Get+5)& (0+255),w,b
  5798  001A1E  0100               	movlb	0	; () banked
  5799  001A20  1190               	iorwf	(??_Accel_Get+1)& (0+255),w,b
  5800  001A22  0100               	movlb	0	; () banked
  5801  001A24  6F9B               	movwf	Accel_Get@gCount& (0+255),b
  5802  001A26  0100               	movlb	0	; () banked
  5803  001A28  5191               	movf	(??_Accel_Get+2)& (0+255),w,b
  5804  001A2A  0100               	movlb	0	; () banked
  5805  001A2C  6F9C               	movwf	(Accel_Get@gCount+1)& (0+255),b
  5806                           
  5807                           ; BSR set to: 0
  5808                           ;accel.c: 46: gCount >>= 4;
  5809  001A2E  0100               	movlb	0	; () banked
  5810  001A30  0E04               	movlw	4
  5811  001A32  0100               	movlb	0	; () banked
  5812  001A34  6F8F               	movwf	??_Accel_Get& (0+255),b
  5813  001A36                     u5135:
  5814  001A36  0100               	movlb	0	; () banked
  5815  001A38  359C               	rlcf	(Accel_Get@gCount+1)& (0+255),w,b
  5816  001A3A  339C               	rrcf	(Accel_Get@gCount+1)& (0+255),f,b
  5817  001A3C  339B               	rrcf	Accel_Get@gCount& (0+255),f,b
  5818  001A3E  0100               	movlb	0	; () banked
  5819  001A40  2F8F               	decfsz	??_Accel_Get& (0+255),f,b
  5820  001A42  D7F9               	goto	u5135
  5821                           
  5822                           ; BSR set to: 0
  5823                           ;accel.c: 49: if (raw[i*2] > 0x7F)
  5824  001A44  90D8               	bcf	status,0,c
  5825  001A46  0100               	movlb	0	; () banked
  5826  001A48  359F               	rlcf	Accel_Get@i& (0+255),w,b
  5827  001A4A  6ED9               	movwf	fsr2l,c
  5828  001A4C  0100               	movlb	0	; () banked
  5829  001A4E  35A0               	rlcf	(Accel_Get@i+1)& (0+255),w,b
  5830  001A50  6EDA               	movwf	fsr2h,c
  5831  001A52  0E95               	movlw	low Accel_Get@raw
  5832  001A54  26D9               	addwf	fsr2l,f,c
  5833  001A56  0E00               	movlw	high Accel_Get@raw
  5834  001A58  22DA               	addwfc	fsr2h,f,c
  5835  001A5A  0E7F               	movlw	127
  5836  001A5C  64DF               	cpfsgt	indf2,c
  5837  001A5E  D013               	goto	l4031
  5838                           
  5839                           ; BSR set to: 0
  5840                           ;accel.c: 50: {
  5841                           ;accel.c: 51: gCount = ~gCount + 1;
  5842  001A60  0100               	movlb	0	; () banked
  5843  001A62  6D9B               	negf	Accel_Get@gCount& (0+255),b
  5844  001A64  1F9C               	comf	(Accel_Get@gCount+1)& (0+255),f,b
  5845  001A66  B0D8               	btfsc	status,0,c
  5846  001A68  2B9C               	incf	(Accel_Get@gCount+1)& (0+255),f,b
  5847                           
  5848                           ; BSR set to: 0
  5849                           ;accel.c: 52: gCount *= -1;
  5850  001A6A  C09B  F020         	movff	Accel_Get@gCount,___wmul@multiplier
  5851  001A6E  C09C  F021         	movff	Accel_Get@gCount+1,___wmul@multiplier+1
  5852  001A72  0EFF               	movlw	255
  5853  001A74  6E23               	movwf	___wmul@multiplicand+1,c
  5854  001A76  6822               	setf	___wmul@multiplicand,c
  5855  001A78  ECD2  F016         	call	___wmul	;wreg free
  5856  001A7C  C020  F09B         	movff	?___wmul,Accel_Get@gCount
  5857  001A80  C021  F09C         	movff	?___wmul+1,Accel_Get@gCount+1
  5858  001A84  D000               	goto	l4031
  5859  001A86                     l4031:
  5860                           
  5861                           ;accel.c: 53: }
  5862                           ;accel.c: 55: f_out[i] = (float) gCount / ((1<<12)/(2*2));
  5863  001A86  C09B  F060         	movff	Accel_Get@gCount,___awtofl@c
  5864  001A8A  C09C  F061         	movff	Accel_Get@gCount+1,___awtofl@c+1
  5865  001A8E  ECD9  F015         	call	___awtofl	;wreg free
  5866  001A92  C060  F07E         	movff	?___awtofl,___fldiv@f1
  5867  001A96  C061  F07F         	movff	?___awtofl+1,___fldiv@f1+1
  5868  001A9A  C062  F080         	movff	?___awtofl+2,___fldiv@f1+2
  5869  001A9E  C063  F081         	movff	?___awtofl+3,___fldiv@f1+3
  5870  001AA2  0E00               	movlw	0
  5871  001AA4  0100               	movlb	0	; () banked
  5872  001AA6  6F82               	movwf	___fldiv@f2& (0+255),b
  5873  001AA8  0E00               	movlw	0
  5874  001AAA  6F83               	movwf	(___fldiv@f2+1)& (0+255),b
  5875  001AAC  0E80               	movlw	128
  5876  001AAE  6F84               	movwf	(___fldiv@f2+2)& (0+255),b
  5877  001AB0  0E44               	movlw	68
  5878  001AB2  6F85               	movwf	(___fldiv@f2+3)& (0+255),b
  5879  001AB4  ECF3  F00E         	call	___fldiv	;wreg free
  5880  001AB8  90D8               	bcf	status,0,c
  5881  001ABA  0100               	movlb	0	; () banked
  5882  001ABC  359F               	rlcf	Accel_Get@i& (0+255),w,b
  5883  001ABE  6ED9               	movwf	fsr2l,c
  5884  001AC0  0100               	movlb	0	; () banked
  5885  001AC2  35A0               	rlcf	(Accel_Get@i+1)& (0+255),w,b
  5886  001AC4  6EDA               	movwf	fsr2h,c
  5887  001AC6  90D8               	bcf	status,0,c
  5888  001AC8  36D9               	rlcf	fsr2l,f,c
  5889  001ACA  36DA               	rlcf	fsr2h,f,c
  5890  001ACC  0100               	movlb	0	; () banked
  5891  001ACE  519D               	movf	Accel_Get@f_out& (0+255),w,b
  5892  001AD0  26D9               	addwf	fsr2l,f,c
  5893  001AD2  0100               	movlb	0	; () banked
  5894  001AD4  519E               	movf	(Accel_Get@f_out+1)& (0+255),w,b
  5895  001AD6  22DA               	addwfc	fsr2h,f,c
  5896  001AD8  0100               	movlb	0	; () banked
  5897  001ADA  C07E  FFDE         	movff	?___fldiv,postinc2
  5898  001ADE  0100               	movlb	0	; () banked
  5899  001AE0  C07F  FFDE         	movff	?___fldiv+1,postinc2
  5900  001AE4  0100               	movlb	0	; () banked
  5901  001AE6  C080  FFDE         	movff	?___fldiv+2,postinc2
  5902  001AEA  0100               	movlb	0	; () banked
  5903  001AEC  C081  FFDE         	movff	?___fldiv+3,postinc2
  5904                           
  5905                           ; BSR set to: 0
  5906  001AF0  0100               	movlb	0	; () banked
  5907  001AF2  4B9F               	infsnz	Accel_Get@i& (0+255),f,b
  5908  001AF4  2BA0               	incf	(Accel_Get@i+1)& (0+255),f,b
  5909                           
  5910                           ; BSR set to: 0
  5911  001AF6  0100               	movlb	0	; () banked
  5912  001AF8  BFA0               	btfsc	(Accel_Get@i+1)& (0+255),7,b
  5913  001AFA  D764               	goto	l4021
  5914  001AFC  0100               	movlb	0	; () banked
  5915  001AFE  51A0               	movf	(Accel_Get@i+1)& (0+255),w,b
  5916  001B00  E102               	bnz	l89
  5917  001B02  D759               	goto	L2
  5918  001B04  0012               	return	
  5919  001B06                     l89:
  5920                           
  5921                           ; BSR set to: 0
  5922  001B06  0012               	return		;funcret
  5923  001B08                     __end_of_Accel_Get:
  5924                           	opt stack 0
  5925                           tblptru	equ	0xFF8
  5926                           tblptrh	equ	0xFF7
  5927                           tblptrl	equ	0xFF6
  5928                           tablat	equ	0xFF5
  5929                           postinc0	equ	0xFEE
  5930                           wreg	equ	0xFE8
  5931                           indf2	equ	0xFDF
  5932                           postinc2	equ	0xFDE
  5933                           postdec2	equ	0xFDD
  5934                           fsr2h	equ	0xFDA
  5935                           fsr2l	equ	0xFD9
  5936                           status	equ	0xFD8
  5937                           
  5938 ;; *************** function ___wmul *****************
  5939 ;; Defined at:
  5940 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  5941 ;; Parameters:    Size  Location     Type
  5942 ;;  multiplier      2   31[COMRAM] unsigned int 
  5943 ;;  multiplicand    2   33[COMRAM] unsigned int 
  5944 ;; Auto vars:     Size  Location     Type
  5945 ;;  product         2   35[COMRAM] unsigned int 
  5946 ;; Return value:  Size  Location     Type
  5947 ;;                  2   31[COMRAM] unsigned int 
  5948 ;; Registers used:
  5949 ;;		wreg, status,2, status,0, prodl, prodh
  5950 ;; Tracked objects:
  5951 ;;		On entry : 0/0
  5952 ;;		On exit  : 0/0
  5953 ;;		Unchanged: 0/0
  5954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5955 ;;      Params:         4       0       0       0       0       0       0
  5956 ;;      Locals:         2       0       0       0       0       0       0
  5957 ;;      Temps:          0       0       0       0       0       0       0
  5958 ;;      Totals:         6       0       0       0       0       0       0
  5959 ;;Total ram usage:        6 bytes
  5960 ;; Hardware stack levels used:    1
  5961 ;; Hardware stack levels required when called:    2
  5962 ;; This function calls:
  5963 ;;		Nothing
  5964 ;; This function is called by:
  5965 ;;		_Accel_Get
  5966 ;; This function uses a non-reentrant model
  5967 ;;
  5968                           
  5969                           	psect	text28
  5970  002DA4                     __ptext28:
  5971                           	opt stack 0
  5972  002DA4                     ___wmul:
  5973                           	opt stack 26
  5974                           
  5975                           ; BSR set to: 0
  5976                           ;incstack = 0
  5977  002DA4  5020               	movf	___wmul@multiplier,w,c
  5978  002DA6  0222               	mulwf	___wmul@multiplicand,c
  5979  002DA8  CFF3 F024          	movff	prodl,___wmul@product
  5980  002DAC  CFF4 F025          	movff	prodh,___wmul@product+1
  5981  002DB0  5020               	movf	___wmul@multiplier,w,c
  5982  002DB2  0223               	mulwf	___wmul@multiplicand+1,c
  5983  002DB4  50F3               	movf	prodl,w,c
  5984  002DB6  2625               	addwf	___wmul@product+1,f,c
  5985  002DB8  5021               	movf	___wmul@multiplier+1,w,c
  5986  002DBA  0222               	mulwf	___wmul@multiplicand,c
  5987  002DBC  50F3               	movf	prodl,w,c
  5988  002DBE  2625               	addwf	___wmul@product+1,f,c
  5989  002DC0  C024  F020         	movff	___wmul@product,?___wmul
  5990  002DC4  C025  F021         	movff	___wmul@product+1,?___wmul+1
  5991  002DC8  0012               	return	
  5992  002DCA  0012               	return		;funcret
  5993  002DCC                     __end_of___wmul:
  5994                           	opt stack 0
  5995                           tblptru	equ	0xFF8
  5996                           tblptrh	equ	0xFF7
  5997                           tblptrl	equ	0xFF6
  5998                           tablat	equ	0xFF5
  5999                           prodh	equ	0xFF4
  6000                           prodl	equ	0xFF3
  6001                           postinc0	equ	0xFEE
  6002                           wreg	equ	0xFE8
  6003                           indf2	equ	0xFDF
  6004                           postinc2	equ	0xFDE
  6005                           postdec2	equ	0xFDD
  6006                           fsr2h	equ	0xFDA
  6007                           fsr2l	equ	0xFD9
  6008                           status	equ	0xFD8
  6009                           
  6010 ;; *************** function ___fldiv *****************
  6011 ;; Defined at:
  6012 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldiv.c"
  6013 ;; Parameters:    Size  Location     Type
  6014 ;;  f1              4   30[BANK0 ] unsigned int 
  6015 ;;  f2              4   34[BANK0 ] unsigned int 
  6016 ;; Auto vars:     Size  Location     Type
  6017 ;;  f3              4   38[BANK0 ] unsigned int 
  6018 ;;  sign            1   44[BANK0 ] unsigned char 
  6019 ;;  exp             1   43[BANK0 ] unsigned char 
  6020 ;;  cntr            1   42[BANK0 ] unsigned char 
  6021 ;; Return value:  Size  Location     Type
  6022 ;;                  4   30[BANK0 ] unsigned char 
  6023 ;; Registers used:
  6024 ;;		wreg, status,2, status,0, cstack
  6025 ;; Tracked objects:
  6026 ;;		On entry : 0/0
  6027 ;;		On exit  : 0/0
  6028 ;;		Unchanged: 0/0
  6029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6030 ;;      Params:         0       8       0       0       0       0       0
  6031 ;;      Locals:         0       7       0       0       0       0       0
  6032 ;;      Temps:          0       0       0       0       0       0       0
  6033 ;;      Totals:         0      15       0       0       0       0       0
  6034 ;;Total ram usage:       15 bytes
  6035 ;; Hardware stack levels used:    1
  6036 ;; Hardware stack levels required when called:    3
  6037 ;; This function calls:
  6038 ;;		___flpack
  6039 ;; This function is called by:
  6040 ;;		_Accel_Get
  6041 ;;		_Gyros_Update
  6042 ;;		_asin
  6043 ;;		_atan
  6044 ;;		_exp
  6045 ;; This function uses a non-reentrant model
  6046 ;;
  6047                           
  6048                           	psect	text29
  6049  001DE6                     __ptext29:
  6050                           	opt stack 0
  6051  001DE6                     ___fldiv:
  6052                           	opt stack 24
  6053                           
  6054                           ;incstack = 0
  6055  001DE6  0100               	movlb	0	; () banked
  6056  001DE8  3580               	rlcf	(___fldiv@f1+2)& (0+255),w,b
  6057  001DEA  3581               	rlcf	(___fldiv@f1+3)& (0+255),w,b
  6058  001DEC  0100               	movlb	0	; () banked
  6059  001DEE  6F8B               	movwf	___fldiv@exp& (0+255),b
  6060  001DF0  0100               	movlb	0	; () banked
  6061  001DF2  518B               	movf	___fldiv@exp& (0+255),w,b
  6062  001DF4  A4D8               	btfss	status,2,c
  6063  001DF6  D00A               	goto	l3579
  6064                           
  6065                           ; BSR set to: 0
  6066  001DF8  0E00               	movlw	0
  6067  001DFA  0100               	movlb	0	; () banked
  6068  001DFC  6F7E               	movwf	?___fldiv& (0+255),b
  6069  001DFE  0E00               	movlw	0
  6070  001E00  6F7F               	movwf	(?___fldiv+1)& (0+255),b
  6071  001E02  0E00               	movlw	0
  6072  001E04  6F80               	movwf	(?___fldiv+2)& (0+255),b
  6073  001E06  0E00               	movlw	0
  6074  001E08  6F81               	movwf	(?___fldiv+3)& (0+255),b
  6075                           
  6076                           ; BSR set to: 0
  6077  001E0A  0012               	return	
  6078  001E0C                     l3579:
  6079                           
  6080                           ; BSR set to: 0
  6081  001E0C  0100               	movlb	0	; () banked
  6082  001E0E  3584               	rlcf	(___fldiv@f2+2)& (0+255),w,b
  6083  001E10  3585               	rlcf	(___fldiv@f2+3)& (0+255),w,b
  6084  001E12  0100               	movlb	0	; () banked
  6085  001E14  6F8C               	movwf	___fldiv@sign& (0+255),b
  6086  001E16  0100               	movlb	0	; () banked
  6087  001E18  518C               	movf	___fldiv@sign& (0+255),w,b
  6088  001E1A  A4D8               	btfss	status,2,c
  6089  001E1C  D00A               	goto	l3585
  6090                           
  6091                           ; BSR set to: 0
  6092  001E1E  0E00               	movlw	0
  6093  001E20  0100               	movlb	0	; () banked
  6094  001E22  6F7E               	movwf	?___fldiv& (0+255),b
  6095  001E24  0E00               	movlw	0
  6096  001E26  6F7F               	movwf	(?___fldiv+1)& (0+255),b
  6097  001E28  0E00               	movlw	0
  6098  001E2A  6F80               	movwf	(?___fldiv+2)& (0+255),b
  6099  001E2C  0E00               	movlw	0
  6100  001E2E  6F81               	movwf	(?___fldiv+3)& (0+255),b
  6101                           
  6102                           ; BSR set to: 0
  6103  001E30  0012               	return	
  6104  001E32                     l3585:
  6105                           
  6106                           ; BSR set to: 0
  6107  001E32  0100               	movlb	0	; () banked
  6108  001E34  518C               	movf	___fldiv@sign& (0+255),w,b
  6109  001E36  0F89               	addlw	137
  6110  001E38  0100               	movlb	0	; () banked
  6111  001E3A  5F8B               	subwf	___fldiv@exp& (0+255),f,b
  6112                           
  6113                           ; BSR set to: 0
  6114  001E3C  C081  F08C         	movff	___fldiv@f1+3,___fldiv@sign
  6115  001E40  0100               	movlb	0	; () banked
  6116  001E42  5185               	movf	(___fldiv@f2+3)& (0+255),w,b
  6117  001E44  0100               	movlb	0	; () banked
  6118  001E46  1B8C               	xorwf	___fldiv@sign& (0+255),f,b
  6119  001E48  0E80               	movlw	128
  6120  001E4A  0100               	movlb	0	; () banked
  6121  001E4C  178C               	andwf	___fldiv@sign& (0+255),f,b
  6122                           
  6123                           ; BSR set to: 0
  6124  001E4E  0100               	movlb	0	; () banked
  6125  001E50  8F80               	bsf	(___fldiv@f1+2)& (0+255),7,b
  6126                           
  6127                           ; BSR set to: 0
  6128  001E52  0EFF               	movlw	255
  6129  001E54  0100               	movlb	0	; () banked
  6130  001E56  177E               	andwf	___fldiv@f1& (0+255),f,b
  6131  001E58  0EFF               	movlw	255
  6132  001E5A  177F               	andwf	(___fldiv@f1+1)& (0+255),f,b
  6133  001E5C  0EFF               	movlw	255
  6134  001E5E  1780               	andwf	(___fldiv@f1+2)& (0+255),f,b
  6135  001E60  0E00               	movlw	0
  6136  001E62  1781               	andwf	(___fldiv@f1+3)& (0+255),f,b
  6137  001E64  0100               	movlb	0	; () banked
  6138  001E66  8F84               	bsf	(___fldiv@f2+2)& (0+255),7,b
  6139                           
  6140                           ; BSR set to: 0
  6141  001E68  0EFF               	movlw	255
  6142  001E6A  0100               	movlb	0	; () banked
  6143  001E6C  1782               	andwf	___fldiv@f2& (0+255),f,b
  6144  001E6E  0EFF               	movlw	255
  6145  001E70  1783               	andwf	(___fldiv@f2+1)& (0+255),f,b
  6146  001E72  0EFF               	movlw	255
  6147  001E74  1784               	andwf	(___fldiv@f2+2)& (0+255),f,b
  6148  001E76  0E00               	movlw	0
  6149  001E78  1785               	andwf	(___fldiv@f2+3)& (0+255),f,b
  6150                           
  6151                           ; BSR set to: 0
  6152  001E7A  0E20               	movlw	32
  6153  001E7C  0100               	movlb	0	; () banked
  6154  001E7E  6F8A               	movwf	___fldiv@cntr& (0+255),b
  6155  001E80  D000               	goto	l3597
  6156  001E82                     l3597:
  6157                           
  6158                           ; BSR set to: 0
  6159  001E82  0100               	movlb	0	; () banked
  6160  001E84  90D8               	bcf	status,0,c
  6161  001E86  3786               	rlcf	___fldiv@f3& (0+255),f,b
  6162  001E88  3787               	rlcf	(___fldiv@f3+1)& (0+255),f,b
  6163  001E8A  3788               	rlcf	(___fldiv@f3+2)& (0+255),f,b
  6164  001E8C  3789               	rlcf	(___fldiv@f3+3)& (0+255),f,b
  6165                           
  6166                           ; BSR set to: 0
  6167  001E8E  0100               	movlb	0	; () banked
  6168  001E90  5182               	movf	___fldiv@f2& (0+255),w,b
  6169  001E92  0100               	movlb	0	; () banked
  6170  001E94  5D7E               	subwf	___fldiv@f1& (0+255),w,b
  6171  001E96  0100               	movlb	0	; () banked
  6172  001E98  5183               	movf	(___fldiv@f2+1)& (0+255),w,b
  6173  001E9A  0100               	movlb	0	; () banked
  6174  001E9C  597F               	subwfb	(___fldiv@f1+1)& (0+255),w,b
  6175  001E9E  0100               	movlb	0	; () banked
  6176  001EA0  5184               	movf	(___fldiv@f2+2)& (0+255),w,b
  6177  001EA2  0100               	movlb	0	; () banked
  6178  001EA4  5980               	subwfb	(___fldiv@f1+2)& (0+255),w,b
  6179  001EA6  0100               	movlb	0	; () banked
  6180  001EA8  5185               	movf	(___fldiv@f2+3)& (0+255),w,b
  6181  001EAA  0100               	movlb	0	; () banked
  6182  001EAC  5981               	subwfb	(___fldiv@f1+3)& (0+255),w,b
  6183  001EAE  A0D8               	btfss	status,0,c
  6184  001EB0  D013               	goto	l3605
  6185                           
  6186                           ; BSR set to: 0
  6187  001EB2  0100               	movlb	0	; () banked
  6188  001EB4  5182               	movf	___fldiv@f2& (0+255),w,b
  6189  001EB6  0100               	movlb	0	; () banked
  6190  001EB8  5F7E               	subwf	___fldiv@f1& (0+255),f,b
  6191  001EBA  0100               	movlb	0	; () banked
  6192  001EBC  5183               	movf	(___fldiv@f2+1)& (0+255),w,b
  6193  001EBE  0100               	movlb	0	; () banked
  6194  001EC0  5B7F               	subwfb	(___fldiv@f1+1)& (0+255),f,b
  6195  001EC2  0100               	movlb	0	; () banked
  6196  001EC4  5184               	movf	(___fldiv@f2+2)& (0+255),w,b
  6197  001EC6  0100               	movlb	0	; () banked
  6198  001EC8  5B80               	subwfb	(___fldiv@f1+2)& (0+255),f,b
  6199  001ECA  0100               	movlb	0	; () banked
  6200  001ECC  5185               	movf	(___fldiv@f2+3)& (0+255),w,b
  6201  001ECE  0100               	movlb	0	; () banked
  6202  001ED0  5B81               	subwfb	(___fldiv@f1+3)& (0+255),f,b
  6203                           
  6204                           ; BSR set to: 0
  6205  001ED2  0100               	movlb	0	; () banked
  6206  001ED4  8186               	bsf	___fldiv@f3& (0+255),0,b
  6207  001ED6  D000               	goto	l3605
  6208  001ED8                     l3605:
  6209                           
  6210                           ; BSR set to: 0
  6211  001ED8  0100               	movlb	0	; () banked
  6212  001EDA  90D8               	bcf	status,0,c
  6213  001EDC  377E               	rlcf	___fldiv@f1& (0+255),f,b
  6214  001EDE  377F               	rlcf	(___fldiv@f1+1)& (0+255),f,b
  6215  001EE0  3780               	rlcf	(___fldiv@f1+2)& (0+255),f,b
  6216  001EE2  3781               	rlcf	(___fldiv@f1+3)& (0+255),f,b
  6217                           
  6218                           ; BSR set to: 0
  6219  001EE4  0100               	movlb	0	; () banked
  6220  001EE6  2F8A               	decfsz	___fldiv@cntr& (0+255),f,b
  6221  001EE8  D7CC               	goto	l3597
  6222  001EEA  D000               	goto	l3609
  6223  001EEC                     l3609:
  6224                           
  6225                           ; BSR set to: 0
  6226  001EEC  C086  F020         	movff	___fldiv@f3,___flpack@arg
  6227  001EF0  C087  F021         	movff	___fldiv@f3+1,___flpack@arg+1
  6228  001EF4  C088  F022         	movff	___fldiv@f3+2,___flpack@arg+2
  6229  001EF8  C089  F023         	movff	___fldiv@f3+3,___flpack@arg+3
  6230  001EFC  C08B  F024         	movff	___fldiv@exp,___flpack@exp
  6231  001F00  C08C  F025         	movff	___fldiv@sign,___flpack@sign
  6232  001F04  EC3F  F011         	call	___flpack	;wreg free
  6233  001F08  C020  F07E         	movff	?___flpack,?___fldiv
  6234  001F0C  C021  F07F         	movff	?___flpack+1,?___fldiv+1
  6235  001F10  C022  F080         	movff	?___flpack+2,?___fldiv+2
  6236  001F14  C023  F081         	movff	?___flpack+3,?___fldiv+3
  6237  001F18  0012               	return	
  6238  001F1A  0012               	return		;funcret
  6239  001F1C                     __end_of___fldiv:
  6240                           	opt stack 0
  6241                           tblptru	equ	0xFF8
  6242                           tblptrh	equ	0xFF7
  6243                           tblptrl	equ	0xFF6
  6244                           tablat	equ	0xFF5
  6245                           prodh	equ	0xFF4
  6246                           prodl	equ	0xFF3
  6247                           postinc0	equ	0xFEE
  6248                           wreg	equ	0xFE8
  6249                           indf2	equ	0xFDF
  6250                           postinc2	equ	0xFDE
  6251                           postdec2	equ	0xFDD
  6252                           fsr2h	equ	0xFDA
  6253                           fsr2l	equ	0xFD9
  6254                           status	equ	0xFD8
  6255                           
  6256 ;; *************** function ___awtofl *****************
  6257 ;; Defined at:
  6258 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtofl.c"
  6259 ;; Parameters:    Size  Location     Type
  6260 ;;  c               2    0[BANK0 ] int 
  6261 ;; Auto vars:     Size  Location     Type
  6262 ;;  f1              4    0        int 
  6263 ;;  sign            1   41[COMRAM] unsigned char 
  6264 ;; Return value:  Size  Location     Type
  6265 ;;                  4    0[BANK0 ] unsigned char 
  6266 ;; Registers used:
  6267 ;;		wreg, status,2, status,0, cstack
  6268 ;; Tracked objects:
  6269 ;;		On entry : 0/0
  6270 ;;		On exit  : 0/0
  6271 ;;		Unchanged: 0/0
  6272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6273 ;;      Params:         0       4       0       0       0       0       0
  6274 ;;      Locals:         1       0       0       0       0       0       0
  6275 ;;      Temps:          0       0       0       0       0       0       0
  6276 ;;      Totals:         1       4       0       0       0       0       0
  6277 ;;Total ram usage:        5 bytes
  6278 ;; Hardware stack levels used:    1
  6279 ;; Hardware stack levels required when called:    3
  6280 ;; This function calls:
  6281 ;;		___flpack
  6282 ;; This function is called by:
  6283 ;;		_Accel_Get
  6284 ;;		_exp
  6285 ;;		_log
  6286 ;; This function uses a non-reentrant model
  6287 ;;
  6288                           
  6289                           	psect	text30
  6290  002BB2                     __ptext30:
  6291                           	opt stack 0
  6292  002BB2                     ___awtofl:
  6293                           	opt stack 24
  6294                           
  6295                           ;incstack = 0
  6296  002BB2  0E00               	movlw	0
  6297  002BB4  6E2A               	movwf	___awtofl@sign,c
  6298  002BB6  0100               	movlb	0	; () banked
  6299  002BB8  AF61               	btfss	(___awtofl@c+1)& (0+255),7,b
  6300  002BBA  D007               	goto	l3809
  6301                           
  6302                           ; BSR set to: 0
  6303  002BBC  0100               	movlb	0	; () banked
  6304  002BBE  6D60               	negf	___awtofl@c& (0+255),b
  6305  002BC0  1F61               	comf	(___awtofl@c+1)& (0+255),f,b
  6306  002BC2  B0D8               	btfsc	status,0,c
  6307  002BC4  2B61               	incf	(___awtofl@c+1)& (0+255),f,b
  6308  002BC6  2A2A               	incf	___awtofl@sign,f,c
  6309  002BC8  D000               	goto	l3809
  6310  002BCA                     l3809:
  6311                           
  6312                           ; BSR set to: 0
  6313  002BCA  C060  F020         	movff	___awtofl@c,___flpack@arg
  6314  002BCE  C061  F021         	movff	___awtofl@c+1,___flpack@arg+1
  6315  002BD2  6A22               	clrf	___flpack@arg+2,c
  6316  002BD4  6A23               	clrf	___flpack@arg+3,c
  6317  002BD6  0E96               	movlw	150
  6318  002BD8  6E24               	movwf	___flpack@exp,c
  6319  002BDA  C02A  F025         	movff	___awtofl@sign,___flpack@sign
  6320  002BDE  EC3F  F011         	call	___flpack	;wreg free
  6321  002BE2  C020  F060         	movff	?___flpack,?___awtofl
  6322  002BE6  C021  F061         	movff	?___flpack+1,?___awtofl+1
  6323  002BEA  C022  F062         	movff	?___flpack+2,?___awtofl+2
  6324  002BEE  C023  F063         	movff	?___flpack+3,?___awtofl+3
  6325  002BF2  0012               	return	
  6326  002BF4  0012               	return		;funcret
  6327  002BF6                     __end_of___awtofl:
  6328                           	opt stack 0
  6329                           tblptru	equ	0xFF8
  6330                           tblptrh	equ	0xFF7
  6331                           tblptrl	equ	0xFF6
  6332                           tablat	equ	0xFF5
  6333                           prodh	equ	0xFF4
  6334                           prodl	equ	0xFF3
  6335                           postinc0	equ	0xFEE
  6336                           wreg	equ	0xFE8
  6337                           indf2	equ	0xFDF
  6338                           postinc2	equ	0xFDE
  6339                           postdec2	equ	0xFDD
  6340                           fsr2h	equ	0xFDA
  6341                           fsr2l	equ	0xFD9
  6342                           status	equ	0xFD8
  6343                           
  6344 ;; *************** function ___flpack *****************
  6345 ;; Defined at:
  6346 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\double.c"
  6347 ;; Parameters:    Size  Location     Type
  6348 ;;  arg             4   31[COMRAM] unsigned long 
  6349 ;;  exp             1   35[COMRAM] unsigned char 
  6350 ;;  sign            1   36[COMRAM] unsigned char 
  6351 ;; Auto vars:     Size  Location     Type
  6352 ;;		None
  6353 ;; Return value:  Size  Location     Type
  6354 ;;                  4   31[COMRAM] unsigned char 
  6355 ;; Registers used:
  6356 ;;		wreg, status,2, status,0
  6357 ;; Tracked objects:
  6358 ;;		On entry : 0/0
  6359 ;;		On exit  : 0/0
  6360 ;;		Unchanged: 0/0
  6361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6362 ;;      Params:         6       0       0       0       0       0       0
  6363 ;;      Locals:         0       0       0       0       0       0       0
  6364 ;;      Temps:          4       0       0       0       0       0       0
  6365 ;;      Totals:        10       0       0       0       0       0       0
  6366 ;;Total ram usage:       10 bytes
  6367 ;; Hardware stack levels used:    1
  6368 ;; Hardware stack levels required when called:    2
  6369 ;; This function calls:
  6370 ;;		Nothing
  6371 ;; This function is called by:
  6372 ;;		___altofl
  6373 ;;		___awtofl
  6374 ;;		___fladd
  6375 ;;		___fldiv
  6376 ;;		___flmul
  6377 ;;		___lltofl
  6378 ;; This function uses a non-reentrant model
  6379 ;;
  6380                           
  6381                           	psect	text31
  6382  00227E                     __ptext31:
  6383                           	opt stack 0
  6384  00227E                     ___flpack:
  6385                           	opt stack 24
  6386                           
  6387                           ;incstack = 0
  6388  00227E  5024               	movf	___flpack@exp,w,c
  6389  002280  B4D8               	btfsc	status,2,c
  6390  002282  D006               	goto	l3273
  6391  002284  5020               	movf	___flpack@arg,w,c
  6392  002286  1021               	iorwf	___flpack@arg+1,w,c
  6393  002288  1022               	iorwf	___flpack@arg+2,w,c
  6394  00228A  1023               	iorwf	___flpack@arg+3,w,c
  6395  00228C  A4D8               	btfss	status,2,c
  6396  00228E  D011               	goto	l3279
  6397  002290                     l3273:
  6398  002290  0E00               	movlw	0
  6399  002292  6E20               	movwf	?___flpack,c
  6400  002294  0E00               	movlw	0
  6401  002296  6E21               	movwf	?___flpack+1,c
  6402  002298  0E00               	movlw	0
  6403  00229A  6E22               	movwf	?___flpack+2,c
  6404  00229C  0E00               	movlw	0
  6405  00229E  6E23               	movwf	?___flpack+3,c
  6406  0022A0  0012               	return	
  6407  0022A2  D007               	goto	l3279
  6408  0022A4                     l3277:
  6409  0022A4  2A24               	incf	___flpack@exp,f,c
  6410  0022A6  90D8               	bcf	status,0,c
  6411  0022A8  3223               	rrcf	___flpack@arg+3,f,c
  6412  0022AA  3222               	rrcf	___flpack@arg+2,f,c
  6413  0022AC  3221               	rrcf	___flpack@arg+1,f,c
  6414  0022AE  3220               	rrcf	___flpack@arg,f,c
  6415  0022B0  D000               	goto	l3279
  6416  0022B2                     l3279:
  6417  0022B2  0E00               	movlw	0
  6418  0022B4  1420               	andwf	___flpack@arg,w,c
  6419  0022B6  6E26               	movwf	??___flpack& (0+255),c
  6420  0022B8  0E00               	movlw	0
  6421  0022BA  1421               	andwf	___flpack@arg+1,w,c
  6422  0022BC  6E27               	movwf	(??___flpack+1)& (0+255),c
  6423  0022BE  0E00               	movlw	0
  6424  0022C0  1422               	andwf	___flpack@arg+2,w,c
  6425  0022C2  6E28               	movwf	(??___flpack+2)& (0+255),c
  6426  0022C4  0EFE               	movlw	254
  6427  0022C6  1423               	andwf	___flpack@arg+3,w,c
  6428  0022C8  6E29               	movwf	(??___flpack+3)& (0+255),c
  6429  0022CA  5026               	movf	??___flpack,w,c
  6430  0022CC  1027               	iorwf	??___flpack+1,w,c
  6431  0022CE  1028               	iorwf	??___flpack+2,w,c
  6432  0022D0  1029               	iorwf	??___flpack+3,w,c
  6433  0022D2  B4D8               	btfsc	status,2,c
  6434  0022D4  D00E               	goto	l692
  6435  0022D6  D7E6               	goto	l3277
  6436  0022D8  D00C               	goto	l692
  6437  0022DA                     l3281:
  6438  0022DA  2A24               	incf	___flpack@exp,f,c
  6439  0022DC  0E01               	movlw	1
  6440  0022DE  2620               	addwf	___flpack@arg,f,c
  6441  0022E0  0E00               	movlw	0
  6442  0022E2  2221               	addwfc	___flpack@arg+1,f,c
  6443  0022E4  2222               	addwfc	___flpack@arg+2,f,c
  6444  0022E6  2223               	addwfc	___flpack@arg+3,f,c
  6445  0022E8  90D8               	bcf	status,0,c
  6446  0022EA  3223               	rrcf	___flpack@arg+3,f,c
  6447  0022EC  3222               	rrcf	___flpack@arg+2,f,c
  6448  0022EE  3221               	rrcf	___flpack@arg+1,f,c
  6449  0022F0  3220               	rrcf	___flpack@arg,f,c
  6450  0022F2                     l692:
  6451  0022F2  0E00               	movlw	0
  6452  0022F4  1420               	andwf	___flpack@arg,w,c
  6453  0022F6  6E26               	movwf	??___flpack& (0+255),c
  6454  0022F8  0E00               	movlw	0
  6455  0022FA  1421               	andwf	___flpack@arg+1,w,c
  6456  0022FC  6E27               	movwf	(??___flpack+1)& (0+255),c
  6457  0022FE  0E00               	movlw	0
  6458  002300  1422               	andwf	___flpack@arg+2,w,c
  6459  002302  6E28               	movwf	(??___flpack+2)& (0+255),c
  6460  002304  0EFF               	movlw	255
  6461  002306  1423               	andwf	___flpack@arg+3,w,c
  6462  002308  6E29               	movwf	(??___flpack+3)& (0+255),c
  6463  00230A  5026               	movf	??___flpack,w,c
  6464  00230C  1027               	iorwf	??___flpack+1,w,c
  6465  00230E  1028               	iorwf	??___flpack+2,w,c
  6466  002310  1029               	iorwf	??___flpack+3,w,c
  6467  002312  B4D8               	btfsc	status,2,c
  6468  002314  D009               	goto	l3289
  6469  002316  D7E1               	goto	l3281
  6470  002318  D007               	goto	l3289
  6471  00231A                     l3287:
  6472  00231A  0624               	decf	___flpack@exp,f,c
  6473  00231C  90D8               	bcf	status,0,c
  6474  00231E  3620               	rlcf	___flpack@arg,f,c
  6475  002320  3621               	rlcf	___flpack@arg+1,f,c
  6476  002322  3622               	rlcf	___flpack@arg+2,f,c
  6477  002324  3623               	rlcf	___flpack@arg+3,f,c
  6478  002326  D000               	goto	l3289
  6479  002328                     l3289:
  6480  002328  BE22               	btfsc	___flpack@arg+2,7,c
  6481  00232A  D004               	goto	l699
  6482  00232C  0E02               	movlw	2
  6483  00232E  6024               	cpfslt	___flpack@exp,c
  6484  002330  D7F4               	goto	l3287
  6485  002332  D000               	goto	l699
  6486  002334                     l699:
  6487  002334  B024               	btfsc	___flpack@exp,0,c
  6488  002336  D008               	goto	l700
  6489  002338  0EFF               	movlw	255
  6490  00233A  1620               	andwf	___flpack@arg,f,c
  6491  00233C  0EFF               	movlw	255
  6492  00233E  1621               	andwf	___flpack@arg+1,f,c
  6493  002340  0E7F               	movlw	127
  6494  002342  1622               	andwf	___flpack@arg+2,f,c
  6495  002344  0EFF               	movlw	255
  6496  002346  1623               	andwf	___flpack@arg+3,f,c
  6497  002348                     l700:
  6498  002348  90D8               	bcf	status,0,c
  6499  00234A  3224               	rrcf	___flpack@exp,f,c
  6500  00234C  C024  F026         	movff	___flpack@exp,??___flpack
  6501  002350  6A27               	clrf	(??___flpack+1)& (0+255),c
  6502  002352  6A28               	clrf	(??___flpack+2)& (0+255),c
  6503  002354  6A29               	clrf	(??___flpack+3)& (0+255),c
  6504  002356  C026  F029         	movff	??___flpack,??___flpack+3
  6505  00235A  6A28               	clrf	??___flpack+2,c
  6506  00235C  6A27               	clrf	??___flpack+1,c
  6507  00235E  6A26               	clrf	??___flpack,c
  6508  002360  5026               	movf	??___flpack,w,c
  6509  002362  1220               	iorwf	___flpack@arg,f,c
  6510  002364  5027               	movf	??___flpack+1,w,c
  6511  002366  1221               	iorwf	___flpack@arg+1,f,c
  6512  002368  5028               	movf	??___flpack+2,w,c
  6513  00236A  1222               	iorwf	___flpack@arg+2,f,c
  6514  00236C  5029               	movf	??___flpack+3,w,c
  6515  00236E  1223               	iorwf	___flpack@arg+3,f,c
  6516  002370  5025               	movf	___flpack@sign,w,c
  6517  002372  B4D8               	btfsc	status,2,c
  6518  002374  D002               	goto	l3299
  6519  002376  8E23               	bsf	___flpack@arg+3,7,c
  6520  002378  D000               	goto	l3299
  6521  00237A                     l3299:
  6522  00237A  C020  F020         	movff	___flpack@arg,?___flpack
  6523  00237E  C021  F021         	movff	___flpack@arg+1,?___flpack+1
  6524  002382  C022  F022         	movff	___flpack@arg+2,?___flpack+2
  6525  002386  C023  F023         	movff	___flpack@arg+3,?___flpack+3
  6526  00238A  0012               	return	
  6527  00238C  0012               	return		;funcret
  6528  00238E                     __end_of___flpack:
  6529                           	opt stack 0
  6530                           tblptru	equ	0xFF8
  6531                           tblptrh	equ	0xFF7
  6532                           tblptrl	equ	0xFF6
  6533                           tablat	equ	0xFF5
  6534                           prodh	equ	0xFF4
  6535                           prodl	equ	0xFF3
  6536                           postinc0	equ	0xFEE
  6537                           wreg	equ	0xFE8
  6538                           indf2	equ	0xFDF
  6539                           postinc2	equ	0xFDE
  6540                           postdec2	equ	0xFDD
  6541                           fsr2h	equ	0xFDA
  6542                           fsr2l	equ	0xFD9
  6543                           status	equ	0xFD8
  6544                           
  6545 ;; *************** function _Gyros_Init *****************
  6546 ;; Defined at:
  6547 ;;		line 3 in file "gyros.c"
  6548 ;; Parameters:    Size  Location     Type
  6549 ;;		None
  6550 ;; Auto vars:     Size  Location     Type
  6551 ;;		None
  6552 ;; Return value:  Size  Location     Type
  6553 ;;		None               void
  6554 ;; Registers used:
  6555 ;;		wreg, status,2
  6556 ;; Tracked objects:
  6557 ;;		On entry : 0/0
  6558 ;;		On exit  : 0/0
  6559 ;;		Unchanged: 0/0
  6560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6561 ;;      Params:         0       0       0       0       0       0       0
  6562 ;;      Locals:         0       0       0       0       0       0       0
  6563 ;;      Temps:          0       0       0       0       0       0       0
  6564 ;;      Totals:         0       0       0       0       0       0       0
  6565 ;;Total ram usage:        0 bytes
  6566 ;; Hardware stack levels used:    1
  6567 ;; Hardware stack levels required when called:    2
  6568 ;; This function calls:
  6569 ;;		Nothing
  6570 ;; This function is called by:
  6571 ;;		_main
  6572 ;; This function uses a non-reentrant model
  6573 ;;
  6574                           
  6575                           	psect	text32
  6576  00279C                     __ptext32:
  6577                           	opt stack 0
  6578  00279C                     _Gyros_Init:
  6579                           	opt stack 28
  6580                           
  6581                           ;gyros.c: 5: Gyros_LastAccel.x = 0;
  6582                           
  6583                           ;incstack = 0
  6584  00279C  0E00               	movlw	0
  6585  00279E  0100               	movlb	0	; () banked
  6586  0027A0  6FE0               	movwf	gyros@Gyros_LastAccel& (0+255),b
  6587  0027A2  0E00               	movlw	0
  6588  0027A4  6FE1               	movwf	(gyros@Gyros_LastAccel+1)& (0+255),b
  6589  0027A6  0E00               	movlw	0
  6590  0027A8  6FE2               	movwf	(gyros@Gyros_LastAccel+2)& (0+255),b
  6591  0027AA  0E00               	movlw	0
  6592  0027AC  6FE3               	movwf	(gyros@Gyros_LastAccel+3)& (0+255),b
  6593                           
  6594                           ;gyros.c: 6: Gyros_LastAccel.y = 0;
  6595  0027AE  0E00               	movlw	0
  6596  0027B0  0100               	movlb	0	; () banked
  6597  0027B2  6FE4               	movwf	(gyros@Gyros_LastAccel+4)& (0+255),b
  6598  0027B4  0E00               	movlw	0
  6599  0027B6  6FE5               	movwf	(gyros@Gyros_LastAccel+5)& (0+255),b
  6600  0027B8  0E00               	movlw	0
  6601  0027BA  6FE6               	movwf	(gyros@Gyros_LastAccel+6)& (0+255),b
  6602  0027BC  0E00               	movlw	0
  6603  0027BE  6FE7               	movwf	(gyros@Gyros_LastAccel+7)& (0+255),b
  6604                           
  6605                           ;gyros.c: 7: Gyros_LastAccel.z = 0;
  6606  0027C0  0E00               	movlw	0
  6607  0027C2  0100               	movlb	0	; () banked
  6608  0027C4  6FE8               	movwf	(gyros@Gyros_LastAccel+8)& (0+255),b
  6609  0027C6  0E00               	movlw	0
  6610  0027C8  6FE9               	movwf	(gyros@Gyros_LastAccel+9)& (0+255),b
  6611  0027CA  0E00               	movlw	0
  6612  0027CC  6FEA               	movwf	(gyros@Gyros_LastAccel+10)& (0+255),b
  6613  0027CE  0E00               	movlw	0
  6614  0027D0  6FEB               	movwf	(gyros@Gyros_LastAccel+11)& (0+255),b
  6615                           
  6616                           ;gyros.c: 9: Gyros_Vel.x = 0;
  6617  0027D2  0E00               	movlw	0
  6618  0027D4  0100               	movlb	0	; () banked
  6619  0027D6  6FEC               	movwf	gyros@Gyros_Vel& (0+255),b
  6620  0027D8  0E00               	movlw	0
  6621  0027DA  6FED               	movwf	(gyros@Gyros_Vel+1)& (0+255),b
  6622  0027DC  0E00               	movlw	0
  6623  0027DE  6FEE               	movwf	(gyros@Gyros_Vel+2)& (0+255),b
  6624  0027E0  0E00               	movlw	0
  6625  0027E2  6FEF               	movwf	(gyros@Gyros_Vel+3)& (0+255),b
  6626                           
  6627                           ;gyros.c: 10: Gyros_Vel.y = 0;
  6628  0027E4  0E00               	movlw	0
  6629  0027E6  0100               	movlb	0	; () banked
  6630  0027E8  6FF0               	movwf	(gyros@Gyros_Vel+4)& (0+255),b
  6631  0027EA  0E00               	movlw	0
  6632  0027EC  6FF1               	movwf	(gyros@Gyros_Vel+5)& (0+255),b
  6633  0027EE  0E00               	movlw	0
  6634  0027F0  6FF2               	movwf	(gyros@Gyros_Vel+6)& (0+255),b
  6635  0027F2  0E00               	movlw	0
  6636  0027F4  6FF3               	movwf	(gyros@Gyros_Vel+7)& (0+255),b
  6637                           
  6638                           ;gyros.c: 11: Gyros_Vel.z = 0;
  6639  0027F6  0E00               	movlw	0
  6640  0027F8  0100               	movlb	0	; () banked
  6641  0027FA  6FF4               	movwf	(gyros@Gyros_Vel+8)& (0+255),b
  6642  0027FC  0E00               	movlw	0
  6643  0027FE  6FF5               	movwf	(gyros@Gyros_Vel+9)& (0+255),b
  6644  002800  0E00               	movlw	0
  6645  002802  6FF6               	movwf	(gyros@Gyros_Vel+10)& (0+255),b
  6646  002804  0E00               	movlw	0
  6647  002806  6FF7               	movwf	(gyros@Gyros_Vel+11)& (0+255),b
  6648                           
  6649                           ;gyros.c: 13: Gyros_Angle.phi = 0;
  6650  002808  0E00               	movlw	0
  6651  00280A  0101               	movlb	1	; () banked
  6652  00280C  6F54               	movwf	(gyros@Gyros_Angle+4)& (0+255),b
  6653  00280E  0E00               	movlw	0
  6654  002810  6F55               	movwf	(gyros@Gyros_Angle+5)& (0+255),b
  6655  002812  0E00               	movlw	0
  6656  002814  6F56               	movwf	(gyros@Gyros_Angle+6)& (0+255),b
  6657  002816  0E00               	movlw	0
  6658  002818  6F57               	movwf	(gyros@Gyros_Angle+7)& (0+255),b
  6659                           
  6660                           ;gyros.c: 14: Gyros_Angle.theta = 0;
  6661  00281A  0E00               	movlw	0
  6662  00281C  0101               	movlb	1	; () banked
  6663  00281E  6F50               	movwf	gyros@Gyros_Angle& (0+255),b
  6664  002820  0E00               	movlw	0
  6665  002822  6F51               	movwf	(gyros@Gyros_Angle+1)& (0+255),b
  6666  002824  0E00               	movlw	0
  6667  002826  6F52               	movwf	(gyros@Gyros_Angle+2)& (0+255),b
  6668  002828  0E00               	movlw	0
  6669  00282A  6F53               	movwf	(gyros@Gyros_Angle+3)& (0+255),b
  6670                           
  6671                           ; BSR set to: 1
  6672  00282C  0012               	return		;funcret
  6673  00282E                     __end_of_Gyros_Init:
  6674                           	opt stack 0
  6675                           tblptru	equ	0xFF8
  6676                           tblptrh	equ	0xFF7
  6677                           tblptrl	equ	0xFF6
  6678                           tablat	equ	0xFF5
  6679                           prodh	equ	0xFF4
  6680                           prodl	equ	0xFF3
  6681                           postinc0	equ	0xFEE
  6682                           wreg	equ	0xFE8
  6683                           indf2	equ	0xFDF
  6684                           postinc2	equ	0xFDE
  6685                           postdec2	equ	0xFDD
  6686                           fsr2h	equ	0xFDA
  6687                           fsr2l	equ	0xFD9
  6688                           status	equ	0xFD8
  6689                           
  6690 ;; *************** function _Accel_Init *****************
  6691 ;; Defined at:
  6692 ;;		line 3 in file "accel.c"
  6693 ;; Parameters:    Size  Location     Type
  6694 ;;		None
  6695 ;; Auto vars:     Size  Location     Type
  6696 ;;  fsr             1    5[BANK0 ] unsigned char 
  6697 ;;  name            1    4[BANK0 ] unsigned char 
  6698 ;; Return value:  Size  Location     Type
  6699 ;;		None               void
  6700 ;; Registers used:
  6701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6702 ;; Tracked objects:
  6703 ;;		On entry : 0/0
  6704 ;;		On exit  : 0/0
  6705 ;;		Unchanged: 0/0
  6706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6707 ;;      Params:         0       0       0       0       0       0       0
  6708 ;;      Locals:         0       2       0       0       0       0       0
  6709 ;;      Temps:          0       0       0       0       0       0       0
  6710 ;;      Totals:         0       2       0       0       0       0       0
  6711 ;;Total ram usage:        2 bytes
  6712 ;; Hardware stack levels used:    1
  6713 ;; Hardware stack levels required when called:    8
  6714 ;; This function calls:
  6715 ;;		_Accel_Active
  6716 ;;		_Accel_ReadRegister
  6717 ;;		_Accel_StandBy
  6718 ;;		_Accel_WriteRegister
  6719 ;; This function is called by:
  6720 ;;		_main
  6721 ;; This function uses a non-reentrant model
  6722 ;;
  6723                           
  6724                           	psect	text33
  6725  002B6A                     __ptext33:
  6726                           	opt stack 0
  6727  002B6A                     _Accel_Init:
  6728                           	opt stack 22
  6729  002B6A                     
  6730                           ;accel.c: 7: name = Accel_ReadRegister(0x0D);
  6731  002B6A  0E0D               	movlw	13
  6732  002B6C  ECBD  F016         	call	_Accel_ReadRegister
  6733  002B70  0100               	movlb	0	; () banked
  6734  002B72  6F64               	movwf	Accel_Init@name& (0+255),b
  6735                           
  6736                           ; BSR set to: 0
  6737                           ;accel.c: 8: } while (name != 0x2A);
  6738  002B74  0E2A               	movlw	42
  6739  002B76  0100               	movlb	0	; () banked
  6740  002B78  1964               	xorwf	Accel_Init@name& (0+255),w,b
  6741  002B7A  A4D8               	btfss	status,2,c
  6742  002B7C  D7F6               	goto	l4083
  6743                           
  6744                           ; BSR set to: 0
  6745                           ;accel.c: 10: Accel_StandBy();
  6746                           
  6747                           ; BSR set to: 0
  6748  002B7E  EC16  F017         	call	_Accel_StandBy	;wreg free
  6749                           
  6750                           ;accel.c: 13: byte fsr = 2;
  6751  002B82  0E02               	movlw	2
  6752  002B84  0100               	movlb	0	; () banked
  6753  002B86  6F65               	movwf	Accel_Init@fsr& (0+255),b
  6754                           
  6755                           ; BSR set to: 0
  6756                           ;accel.c: 14: if(fsr > 8) fsr = 8;
  6757  002B88  0E08               	movlw	8
  6758  002B8A  0100               	movlb	0	; () banked
  6759  002B8C  6565               	cpfsgt	Accel_Init@fsr& (0+255),b
  6760  002B8E  D004               	goto	l4095
  6761                           
  6762                           ; BSR set to: 0
  6763  002B90  0E08               	movlw	8
  6764  002B92  0100               	movlb	0	; () banked
  6765  002B94  6F65               	movwf	Accel_Init@fsr& (0+255),b
  6766  002B96  D000               	goto	l4095
  6767  002B98                     l4095:
  6768                           
  6769                           ; BSR set to: 0
  6770                           ;accel.c: 15: fsr >>= 2;
  6771  002B98  0100               	movlb	0	; () banked
  6772  002B9A  90D8               	bcf	status,0,c
  6773  002B9C  3365               	rrcf	Accel_Init@fsr& (0+255),f,b
  6774  002B9E  90D8               	bcf	status,0,c
  6775  002BA0  3365               	rrcf	Accel_Init@fsr& (0+255),f,b
  6776                           
  6777                           ; BSR set to: 0
  6778                           ;accel.c: 16: Accel_WriteRegister(0x0E, fsr);
  6779  002BA2  C065  F025         	movff	Accel_Init@fsr,Accel_WriteRegister@value
  6780  002BA6  0E0E               	movlw	14
  6781  002BA8  ECF7  F016         	call	_Accel_WriteRegister
  6782                           
  6783                           ;accel.c: 18: Accel_Active();
  6784  002BAC  EC21  F017         	call	_Accel_Active	;wreg free
  6785  002BB0  0012               	return		;funcret
  6786  002BB2                     __end_of_Accel_Init:
  6787                           	opt stack 0
  6788                           tblptru	equ	0xFF8
  6789                           tblptrh	equ	0xFF7
  6790                           tblptrl	equ	0xFF6
  6791                           tablat	equ	0xFF5
  6792                           prodh	equ	0xFF4
  6793                           prodl	equ	0xFF3
  6794                           postinc0	equ	0xFEE
  6795                           wreg	equ	0xFE8
  6796                           indf2	equ	0xFDF
  6797                           postinc2	equ	0xFDE
  6798                           postdec2	equ	0xFDD
  6799                           fsr2h	equ	0xFDA
  6800                           fsr2l	equ	0xFD9
  6801                           status	equ	0xFD8
  6802                           
  6803 ;; *************** function _Accel_StandBy *****************
  6804 ;; Defined at:
  6805 ;;		line 21 in file "accel.c"
  6806 ;; Parameters:    Size  Location     Type
  6807 ;;		None
  6808 ;; Auto vars:     Size  Location     Type
  6809 ;;  c               1   43[COMRAM] unsigned char 
  6810 ;; Return value:  Size  Location     Type
  6811 ;;		None               void
  6812 ;; Registers used:
  6813 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6814 ;; Tracked objects:
  6815 ;;		On entry : 0/0
  6816 ;;		On exit  : 0/0
  6817 ;;		Unchanged: 0/0
  6818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6819 ;;      Params:         0       0       0       0       0       0       0
  6820 ;;      Locals:         1       0       0       0       0       0       0
  6821 ;;      Temps:          0       0       0       0       0       0       0
  6822 ;;      Totals:         1       0       0       0       0       0       0
  6823 ;;Total ram usage:        1 bytes
  6824 ;; Hardware stack levels used:    1
  6825 ;; Hardware stack levels required when called:    7
  6826 ;; This function calls:
  6827 ;;		_Accel_ReadRegister
  6828 ;;		_Accel_WriteRegister
  6829 ;; This function is called by:
  6830 ;;		_Accel_Init
  6831 ;; This function uses a non-reentrant model
  6832 ;;
  6833                           
  6834                           	psect	text34
  6835  002E2C                     __ptext34:
  6836                           	opt stack 0
  6837  002E2C                     _Accel_StandBy:
  6838                           	opt stack 22
  6839                           
  6840                           ;accel.c: 23: byte c = Accel_ReadRegister(0x2A);
  6841                           
  6842                           ;incstack = 0
  6843  002E2C  0E2A               	movlw	42
  6844  002E2E  ECBD  F016         	call	_Accel_ReadRegister
  6845  002E32  6E2C               	movwf	Accel_StandBy@c,c
  6846                           
  6847                           ;accel.c: 24: Accel_WriteRegister(0x2A, c & 0xFE);
  6848  002E34  502C               	movf	Accel_StandBy@c,w,c
  6849  002E36  0BFE               	andlw	254
  6850  002E38  6E25               	movwf	Accel_WriteRegister@value,c
  6851  002E3A  0E2A               	movlw	42
  6852  002E3C  ECF7  F016         	call	_Accel_WriteRegister
  6853  002E40  0012               	return		;funcret
  6854  002E42                     __end_of_Accel_StandBy:
  6855                           	opt stack 0
  6856                           tblptru	equ	0xFF8
  6857                           tblptrh	equ	0xFF7
  6858                           tblptrl	equ	0xFF6
  6859                           tablat	equ	0xFF5
  6860                           prodh	equ	0xFF4
  6861                           prodl	equ	0xFF3
  6862                           postinc0	equ	0xFEE
  6863                           wreg	equ	0xFE8
  6864                           indf2	equ	0xFDF
  6865                           postinc2	equ	0xFDE
  6866                           postdec2	equ	0xFDD
  6867                           fsr2h	equ	0xFDA
  6868                           fsr2l	equ	0xFD9
  6869                           status	equ	0xFD8
  6870                           
  6871 ;; *************** function _Accel_Active *****************
  6872 ;; Defined at:
  6873 ;;		line 27 in file "accel.c"
  6874 ;; Parameters:    Size  Location     Type
  6875 ;;		None
  6876 ;; Auto vars:     Size  Location     Type
  6877 ;;  c               1   43[COMRAM] unsigned char 
  6878 ;; Return value:  Size  Location     Type
  6879 ;;		None               void
  6880 ;; Registers used:
  6881 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6882 ;; Tracked objects:
  6883 ;;		On entry : 0/0
  6884 ;;		On exit  : 0/0
  6885 ;;		Unchanged: 0/0
  6886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6887 ;;      Params:         0       0       0       0       0       0       0
  6888 ;;      Locals:         1       0       0       0       0       0       0
  6889 ;;      Temps:          0       0       0       0       0       0       0
  6890 ;;      Totals:         1       0       0       0       0       0       0
  6891 ;;Total ram usage:        1 bytes
  6892 ;; Hardware stack levels used:    1
  6893 ;; Hardware stack levels required when called:    7
  6894 ;; This function calls:
  6895 ;;		_Accel_ReadRegister
  6896 ;;		_Accel_WriteRegister
  6897 ;; This function is called by:
  6898 ;;		_Accel_Init
  6899 ;; This function uses a non-reentrant model
  6900 ;;
  6901                           
  6902                           	psect	text35
  6903  002E42                     __ptext35:
  6904                           	opt stack 0
  6905  002E42                     _Accel_Active:
  6906                           	opt stack 22
  6907                           
  6908                           ;accel.c: 29: byte c = Accel_ReadRegister(0x2A);
  6909                           
  6910                           ;incstack = 0
  6911  002E42  0E2A               	movlw	42
  6912  002E44  ECBD  F016         	call	_Accel_ReadRegister
  6913  002E48  6E2C               	movwf	Accel_Active@c,c
  6914                           
  6915                           ;accel.c: 30: Accel_WriteRegister(0x2A, c | 0x01);
  6916  002E4A  502C               	movf	Accel_Active@c,w,c
  6917  002E4C  0901               	iorlw	1
  6918  002E4E  6E25               	movwf	Accel_WriteRegister@value,c
  6919  002E50  0E2A               	movlw	42
  6920  002E52  ECF7  F016         	call	_Accel_WriteRegister
  6921  002E56  0012               	return		;funcret
  6922  002E58                     __end_of_Accel_Active:
  6923                           	opt stack 0
  6924                           tblptru	equ	0xFF8
  6925                           tblptrh	equ	0xFF7
  6926                           tblptrl	equ	0xFF6
  6927                           tablat	equ	0xFF5
  6928                           prodh	equ	0xFF4
  6929                           prodl	equ	0xFF3
  6930                           postinc0	equ	0xFEE
  6931                           wreg	equ	0xFE8
  6932                           indf2	equ	0xFDF
  6933                           postinc2	equ	0xFDE
  6934                           postdec2	equ	0xFDD
  6935                           fsr2h	equ	0xFDA
  6936                           fsr2l	equ	0xFD9
  6937                           status	equ	0xFD8
  6938                           
  6939 ;; *************** function _Accel_WriteRegister *****************
  6940 ;; Defined at:
  6941 ;;		line 59 in file "accel.c"
  6942 ;; Parameters:    Size  Location     Type
  6943 ;;  reg             1    wreg     unsigned char 
  6944 ;;  value           1   36[COMRAM] unsigned char 
  6945 ;; Auto vars:     Size  Location     Type
  6946 ;;  reg             1   37[COMRAM] unsigned char 
  6947 ;;  status          1   38[COMRAM] char 
  6948 ;; Return value:  Size  Location     Type
  6949 ;;		None               void
  6950 ;; Registers used:
  6951 ;;		wreg, status,2, status,0, cstack
  6952 ;; Tracked objects:
  6953 ;;		On entry : 0/0
  6954 ;;		On exit  : 0/0
  6955 ;;		Unchanged: 0/0
  6956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6957 ;;      Params:         1       0       0       0       0       0       0
  6958 ;;      Locals:         2       0       0       0       0       0       0
  6959 ;;      Temps:          0       0       0       0       0       0       0
  6960 ;;      Totals:         3       0       0       0       0       0       0
  6961 ;;Total ram usage:        3 bytes
  6962 ;; Hardware stack levels used:    1
  6963 ;; Hardware stack levels required when called:    5
  6964 ;; This function calls:
  6965 ;;		_EEAckPolling
  6966 ;;		_EEByteWrite
  6967 ;; This function is called by:
  6968 ;;		_Accel_Init
  6969 ;;		_Accel_StandBy
  6970 ;;		_Accel_Active
  6971 ;; This function uses a non-reentrant model
  6972 ;;
  6973                           
  6974                           	psect	text36
  6975  002DEE                     __ptext36:
  6976                           	opt stack 0
  6977  002DEE                     _Accel_WriteRegister:
  6978                           	opt stack 24
  6979                           
  6980                           ;incstack = 0
  6981                           ;Accel_WriteRegister@reg stored from wreg
  6982  002DEE  6E26               	movwf	Accel_WriteRegister@reg,c
  6983  002DF0                     
  6984                           ;accel.c: 63: status = EEByteWrite(0x3A, reg, value);
  6985  002DF0  C026  F022         	movff	Accel_WriteRegister@reg,EEByteWrite@address
  6986  002DF4  C025  F023         	movff	Accel_WriteRegister@value,EEByteWrite@data
  6987  002DF8  0E3A               	movlw	58
  6988  002DFA  EC2B  F013         	call	_EEByteWrite
  6989  002DFE  6E27               	movwf	Accel_WriteRegister@status,c
  6990                           
  6991                           ;accel.c: 64: } while (status != 0);
  6992  002E00  5027               	movf	Accel_WriteRegister@status,w,c
  6993  002E02  A4D8               	btfss	status,2,c
  6994  002E04  D7F5               	goto	l3881
  6995                           
  6996                           ;accel.c: 66: EEAckPolling(0x3A);
  6997  002E06  0E3A               	movlw	58
  6998  002E08  EC17  F014         	call	_EEAckPolling
  6999  002E0C  0012               	return		;funcret
  7000  002E0E                     __end_of_Accel_WriteRegister:
  7001                           	opt stack 0
  7002                           tblptru	equ	0xFF8
  7003                           tblptrh	equ	0xFF7
  7004                           tblptrl	equ	0xFF6
  7005                           tablat	equ	0xFF5
  7006                           prodh	equ	0xFF4
  7007                           prodl	equ	0xFF3
  7008                           postinc0	equ	0xFEE
  7009                           wreg	equ	0xFE8
  7010                           indf2	equ	0xFDF
  7011                           postinc2	equ	0xFDE
  7012                           postdec2	equ	0xFDD
  7013                           fsr2h	equ	0xFDA
  7014                           fsr2l	equ	0xFD9
  7015                           status	equ	0xFD8
  7016                           
  7017 ;; *************** function _EEByteWrite *****************
  7018 ;; Defined at:
  7019 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_eebw.c"
  7020 ;; Parameters:    Size  Location     Type
  7021 ;;  control         1    wreg     unsigned char 
  7022 ;;  address         1   33[COMRAM] unsigned char 
  7023 ;;  data            1   34[COMRAM] unsigned char 
  7024 ;; Auto vars:     Size  Location     Type
  7025 ;;  control         1   35[COMRAM] unsigned char 
  7026 ;; Return value:  Size  Location     Type
  7027 ;;                  1    wreg      char 
  7028 ;; Registers used:
  7029 ;;		wreg, status,2, status,0, cstack
  7030 ;; Tracked objects:
  7031 ;;		On entry : 0/0
  7032 ;;		On exit  : 0/0
  7033 ;;		Unchanged: 0/0
  7034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7035 ;;      Params:         2       0       0       0       0       0       0
  7036 ;;      Locals:         1       0       0       0       0       0       0
  7037 ;;      Temps:          0       0       0       0       0       0       0
  7038 ;;      Totals:         3       0       0       0       0       0       0
  7039 ;;Total ram usage:        3 bytes
  7040 ;; Hardware stack levels used:    1
  7041 ;; Hardware stack levels required when called:    4
  7042 ;; This function calls:
  7043 ;;		_IdleI2C
  7044 ;;		_WriteI2C
  7045 ;; This function is called by:
  7046 ;;		_Accel_WriteRegister
  7047 ;; This function uses a non-reentrant model
  7048 ;;
  7049                           
  7050                           	psect	text37
  7051  002656                     __ptext37:
  7052                           	opt stack 0
  7053  002656                     _EEByteWrite:
  7054                           	opt stack 24
  7055                           
  7056                           ;incstack = 0
  7057                           ;EEByteWrite@control stored from wreg
  7058  002656  6E24               	movwf	EEByteWrite@control,c
  7059  002658  EC2C  F017         	call	_IdleI2C	;wreg free
  7060  00265C  80C5               	bsf	4037,0,c	;volatile
  7061  00265E  D000               	goto	l222
  7062  002660                     l222:
  7063  002660  A0C5               	btfss	4037,0,c	;volatile
  7064  002662  D002               	goto	l225
  7065  002664  D7FD               	goto	l222
  7066  002666  D000               	goto	l225
  7067  002668                     l225:
  7068  002668  B0C5               	btfsc	4037,0,c	;volatile
  7069  00266A  D7FE               	goto	l225
  7070  00266C  A6A1               	btfss	4001,3,c	;volatile
  7071  00266E  D003               	goto	l3683
  7072  002670  0EFF               	movlw	255
  7073  002672  0012               	return	
  7074  002674  D036               	goto	l230
  7075  002676                     l3683:
  7076  002676  5024               	movf	EEByteWrite@control,w,c
  7077  002678  ECFE  F014         	call	_WriteI2C
  7078  00267C  0900               	iorlw	0
  7079  00267E  B4D8               	btfsc	status,2,c
  7080  002680  D006               	goto	l231
  7081  002682  84C5               	bsf	4037,2,c	;volatile
  7082  002684  D000               	goto	l232
  7083  002686                     l232:
  7084  002686  B4C5               	btfsc	4037,2,c	;volatile
  7085  002688  D7FE               	goto	l232
  7086  00268A  0EFD               	movlw	253
  7087  00268C  0012               	return	
  7088  00268E                     l231:
  7089  00268E  BCC5               	btfsc	4037,6,c	;volatile
  7090  002690  D022               	goto	l235
  7091  002692  5022               	movf	EEByteWrite@address,w,c
  7092  002694  ECFE  F014         	call	_WriteI2C
  7093  002698  0900               	iorlw	0
  7094  00269A  B4D8               	btfsc	status,2,c
  7095  00269C  D006               	goto	l236
  7096  00269E  84C5               	bsf	4037,2,c	;volatile
  7097  0026A0  D000               	goto	l237
  7098  0026A2                     l237:
  7099  0026A2  B4C5               	btfsc	4037,2,c	;volatile
  7100  0026A4  D7FE               	goto	l237
  7101  0026A6  0EFD               	movlw	253
  7102  0026A8  0012               	return	
  7103  0026AA                     l236:
  7104  0026AA  BCC5               	btfsc	4037,6,c	;volatile
  7105  0026AC  D00D               	goto	l240
  7106  0026AE  5023               	movf	EEByteWrite@data,w,c
  7107  0026B0  ECFE  F014         	call	_WriteI2C
  7108  0026B4  0900               	iorlw	0
  7109  0026B6  B4D8               	btfsc	status,2,c
  7110  0026B8  D014               	goto	l230
  7111  0026BA  84C5               	bsf	4037,2,c	;volatile
  7112  0026BC  D000               	goto	l242
  7113  0026BE                     l242:
  7114  0026BE  B4C5               	btfsc	4037,2,c	;volatile
  7115  0026C0  D7FE               	goto	l242
  7116  0026C2  0EFD               	movlw	253
  7117  0026C4  0012               	return	
  7118  0026C6  D00D               	goto	l230
  7119  0026C8                     l240:
  7120  0026C8  84C5               	bsf	4037,2,c	;volatile
  7121  0026CA  D000               	goto	l246
  7122  0026CC                     l246:
  7123  0026CC  B4C5               	btfsc	4037,2,c	;volatile
  7124  0026CE  D7FE               	goto	l246
  7125  0026D0  0EFE               	movlw	254
  7126  0026D2  0012               	return	
  7127  0026D4  D006               	goto	l230
  7128  0026D6                     l235:
  7129  0026D6  84C5               	bsf	4037,2,c	;volatile
  7130  0026D8  D000               	goto	l250
  7131  0026DA                     l250:
  7132  0026DA  B4C5               	btfsc	4037,2,c	;volatile
  7133  0026DC  D7FE               	goto	l250
  7134  0026DE  0EFE               	movlw	254
  7135  0026E0  0012               	return	
  7136  0026E2                     l230:
  7137  0026E2  84C5               	bsf	4037,2,c	;volatile
  7138  0026E4  D000               	goto	l253
  7139  0026E6                     l253:
  7140  0026E6  A4C5               	btfss	4037,2,c	;volatile
  7141  0026E8  D002               	goto	l256
  7142  0026EA  D7FD               	goto	l253
  7143  0026EC  D000               	goto	l256
  7144  0026EE                     l256:
  7145  0026EE  B4C5               	btfsc	4037,2,c	;volatile
  7146  0026F0  D7FE               	goto	l256
  7147  0026F2  A6A1               	btfss	4001,3,c	;volatile
  7148  0026F4  D002               	goto	l3719
  7149  0026F6  0EFF               	movlw	255
  7150  0026F8  0012               	return	
  7151  0026FA                     l3719:
  7152  0026FA  0E00               	movlw	0
  7153  0026FC  0012               	return	
  7154  0026FE  0012               	return		;funcret
  7155  002700                     __end_of_EEByteWrite:
  7156                           	opt stack 0
  7157                           tblptru	equ	0xFF8
  7158                           tblptrh	equ	0xFF7
  7159                           tblptrl	equ	0xFF6
  7160                           tablat	equ	0xFF5
  7161                           prodh	equ	0xFF4
  7162                           prodl	equ	0xFF3
  7163                           postinc0	equ	0xFEE
  7164                           wreg	equ	0xFE8
  7165                           indf2	equ	0xFDF
  7166                           postinc2	equ	0xFDE
  7167                           postdec2	equ	0xFDD
  7168                           fsr2h	equ	0xFDA
  7169                           fsr2l	equ	0xFD9
  7170                           status	equ	0xFD8
  7171                           
  7172 ;; *************** function _EEAckPolling *****************
  7173 ;; Defined at:
  7174 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_eeap.c"
  7175 ;; Parameters:    Size  Location     Type
  7176 ;;  control         1    wreg     unsigned char 
  7177 ;; Auto vars:     Size  Location     Type
  7178 ;;  control         1   33[COMRAM] unsigned char 
  7179 ;; Return value:  Size  Location     Type
  7180 ;;                  1    wreg      char 
  7181 ;; Registers used:
  7182 ;;		wreg, status,2, status,0, cstack
  7183 ;; Tracked objects:
  7184 ;;		On entry : 0/0
  7185 ;;		On exit  : 0/0
  7186 ;;		Unchanged: 0/0
  7187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7188 ;;      Params:         0       0       0       0       0       0       0
  7189 ;;      Locals:         1       0       0       0       0       0       0
  7190 ;;      Temps:          0       0       0       0       0       0       0
  7191 ;;      Totals:         1       0       0       0       0       0       0
  7192 ;;Total ram usage:        1 bytes
  7193 ;; Hardware stack levels used:    1
  7194 ;; Hardware stack levels required when called:    4
  7195 ;; This function calls:
  7196 ;;		_IdleI2C
  7197 ;;		_WriteI2C
  7198 ;; This function is called by:
  7199 ;;		_Accel_WriteRegister
  7200 ;; This function uses a non-reentrant model
  7201 ;;
  7202                           
  7203                           	psect	text38
  7204  00282E                     __ptext38:
  7205                           	opt stack 0
  7206  00282E                     _EEAckPolling:
  7207                           	opt stack 24
  7208                           
  7209                           ;incstack = 0
  7210                           ;EEAckPolling@control stored from wreg
  7211  00282E  6E22               	movwf	EEAckPolling@control,c
  7212  002830  EC2C  F017         	call	_IdleI2C	;wreg free
  7213  002834  80C5               	bsf	4037,0,c	;volatile
  7214  002836  D000               	goto	l178
  7215  002838                     l178:
  7216  002838  A0C5               	btfss	4037,0,c	;volatile
  7217  00283A  D002               	goto	l181
  7218  00283C  D7FD               	goto	l178
  7219  00283E  D000               	goto	l181
  7220  002840                     l181:
  7221  002840  B0C5               	btfsc	4037,0,c	;volatile
  7222  002842  D7FE               	goto	l181
  7223  002844  B6A1               	btfsc	4001,3,c	;volatile
  7224  002846  0012               	return	
  7225  002848  D002               	goto	l3731
  7226                           
  7227                           ;	Return value of _EEAckPolling is never used
  7228  00284A  0012               	return	
  7229  00284C  D027               	goto	l186
  7230  00284E                     l3731:
  7231  00284E  5022               	movf	EEAckPolling@control,w,c
  7232  002850  ECFE  F014         	call	_WriteI2C
  7233  002854  0AFF               	xorlw	-1
  7234  002856  A4D8               	btfss	status,2,c
  7235  002858  D01F               	goto	l191
  7236  00285A  84C5               	bsf	4037,2,c	;volatile
  7237  00285C  D000               	goto	l188
  7238  00285E                     l188:
  7239  00285E  A4C5               	btfss	4037,2,c	;volatile
  7240  002860  0012               	return	
  7241  002862  D7FD               	goto	l188
  7242                           
  7243                           ;	Return value of _EEAckPolling is never used
  7244  002864  0012               	return	
  7245  002866  D018               	goto	l191
  7246  002868                     l192:
  7247  002868  82C5               	bsf	4037,1,c	;volatile
  7248  00286A  D000               	goto	l193
  7249  00286C                     l193:
  7250  00286C  A2C5               	btfss	4037,1,c	;volatile
  7251  00286E  D002               	goto	l196
  7252  002870  D7FD               	goto	l193
  7253  002872  D000               	goto	l196
  7254  002874                     l196:
  7255  002874  B2C5               	btfsc	4037,1,c	;volatile
  7256  002876  D7FE               	goto	l196
  7257  002878  B6A1               	btfsc	4001,3,c	;volatile
  7258  00287A  0012               	return	
  7259  00287C  D001               	goto	l3737
  7260                           
  7261                           ;	Return value of _EEAckPolling is never used
  7262  00287E  0012               	return	
  7263  002880                     l3737:
  7264  002880  5022               	movf	EEAckPolling@control,w,c
  7265  002882  ECFE  F014         	call	_WriteI2C
  7266  002886  0AFF               	xorlw	-1
  7267  002888  A4D8               	btfss	status,2,c
  7268  00288A  D006               	goto	l191
  7269  00288C  84C5               	bsf	4037,2,c	;volatile
  7270  00288E  D000               	goto	l201
  7271  002890                     l201:
  7272  002890  A4C5               	btfss	4037,2,c	;volatile
  7273  002892  0012               	return	
  7274  002894  D7FD               	goto	l201
  7275                           
  7276                           ;	Return value of _EEAckPolling is never used
  7277  002896  0012               	return	
  7278  002898                     l191:
  7279  002898  BCC5               	btfsc	4037,6,c	;volatile
  7280  00289A  D7E6               	goto	l192
  7281  00289C                     l186:
  7282  00289C  84C5               	bsf	4037,2,c	;volatile
  7283  00289E  D000               	goto	l205
  7284  0028A0                     l205:
  7285  0028A0  A4C5               	btfss	4037,2,c	;volatile
  7286  0028A2  D002               	goto	l208
  7287  0028A4  D7FD               	goto	l205
  7288  0028A6  D000               	goto	l208
  7289  0028A8                     l208:
  7290  0028A8  B4C5               	btfsc	4037,2,c	;volatile
  7291  0028AA  D7FE               	goto	l208
  7292  0028AC  50A1               	movf	4001,w,c	;volatile
  7293                           
  7294                           ;	Return value of _EEAckPolling is never used
  7295  0028AE  0012               	return	
  7296                           
  7297                           ;	Return value of _EEAckPolling is never used
  7298  0028B0  0012               	return		;funcret
  7299  0028B2                     __end_of_EEAckPolling:
  7300                           	opt stack 0
  7301                           tblptru	equ	0xFF8
  7302                           tblptrh	equ	0xFF7
  7303                           tblptrl	equ	0xFF6
  7304                           tablat	equ	0xFF5
  7305                           prodh	equ	0xFF4
  7306                           prodl	equ	0xFF3
  7307                           postinc0	equ	0xFEE
  7308                           wreg	equ	0xFE8
  7309                           indf2	equ	0xFDF
  7310                           postinc2	equ	0xFDE
  7311                           postdec2	equ	0xFDD
  7312                           fsr2h	equ	0xFDA
  7313                           fsr2l	equ	0xFD9
  7314                           status	equ	0xFD8
  7315                           
  7316 ;; *************** function _Accel_ReadRegister *****************
  7317 ;; Defined at:
  7318 ;;		line 69 in file "accel.c"
  7319 ;; Parameters:    Size  Location     Type
  7320 ;;  reg             1    wreg     unsigned char 
  7321 ;; Auto vars:     Size  Location     Type
  7322 ;;  reg             1    2[BANK0 ] unsigned char 
  7323 ;;  out             1    3[BANK0 ] unsigned char 
  7324 ;; Return value:  Size  Location     Type
  7325 ;;                  1    wreg      unsigned char 
  7326 ;; Registers used:
  7327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7328 ;; Tracked objects:
  7329 ;;		On entry : 0/0
  7330 ;;		On exit  : 0/0
  7331 ;;		Unchanged: 0/0
  7332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7333 ;;      Params:         0       0       0       0       0       0       0
  7334 ;;      Locals:         0       2       0       0       0       0       0
  7335 ;;      Temps:          0       0       0       0       0       0       0
  7336 ;;      Totals:         0       2       0       0       0       0       0
  7337 ;;Total ram usage:        2 bytes
  7338 ;; Hardware stack levels used:    1
  7339 ;; Hardware stack levels required when called:    6
  7340 ;; This function calls:
  7341 ;;		_Accel_ReadRegisters
  7342 ;; This function is called by:
  7343 ;;		_Accel_Init
  7344 ;;		_Accel_StandBy
  7345 ;;		_Accel_Active
  7346 ;; This function uses a non-reentrant model
  7347 ;;
  7348                           
  7349                           	psect	text39
  7350  002D7A                     __ptext39:
  7351                           	opt stack 0
  7352  002D7A                     _Accel_ReadRegister:
  7353                           	opt stack 22
  7354                           
  7355                           ;incstack = 0
  7356                           ;Accel_ReadRegister@reg stored from wreg
  7357  002D7A  0100               	movlb	0	; () banked
  7358  002D7C  6F62               	movwf	Accel_ReadRegister@reg& (0+255),b
  7359                           
  7360                           ; BSR set to: 0
  7361                           ;accel.c: 71: byte out = 0;
  7362  002D7E  0E00               	movlw	0
  7363  002D80  0100               	movlb	0	; () banked
  7364  002D82  6F63               	movwf	Accel_ReadRegister@out& (0+255),b
  7365                           
  7366                           ; BSR set to: 0
  7367                           ;accel.c: 72: Accel_ReadRegisters(reg, &out, 1);
  7368  002D84  0E63               	movlw	low Accel_ReadRegister@out
  7369  002D86  6E28               	movwf	Accel_ReadRegisters@out,c
  7370  002D88  0E00               	movlw	high Accel_ReadRegister@out
  7371  002D8A  6E29               	movwf	Accel_ReadRegisters@out+1,c
  7372  002D8C  0E00               	movlw	0
  7373  002D8E  6E2B               	movwf	Accel_ReadRegisters@length+1,c
  7374  002D90  0E01               	movlw	1
  7375  002D92  6E2A               	movwf	Accel_ReadRegisters@length,c
  7376  002D94  0100               	movlb	0	; () banked
  7377  002D96  5162               	movf	Accel_ReadRegister@reg& (0+255),w,b
  7378  002D98  EC8C  F016         	call	_Accel_ReadRegisters
  7379                           
  7380                           ;accel.c: 74: return out;
  7381  002D9C  0100               	movlb	0	; () banked
  7382  002D9E  5163               	movf	Accel_ReadRegister@out& (0+255),w,b
  7383  002DA0  0012               	return	
  7384                           
  7385                           ; BSR set to: 0
  7386                           
  7387                           ; BSR set to: 0
  7388  002DA2  0012               	return		;funcret
  7389  002DA4                     __end_of_Accel_ReadRegister:
  7390                           	opt stack 0
  7391                           tblptru	equ	0xFF8
  7392                           tblptrh	equ	0xFF7
  7393                           tblptrl	equ	0xFF6
  7394                           tablat	equ	0xFF5
  7395                           prodh	equ	0xFF4
  7396                           prodl	equ	0xFF3
  7397                           postinc0	equ	0xFEE
  7398                           wreg	equ	0xFE8
  7399                           indf2	equ	0xFDF
  7400                           postinc2	equ	0xFDE
  7401                           postdec2	equ	0xFDD
  7402                           fsr2h	equ	0xFDA
  7403                           fsr2l	equ	0xFD9
  7404                           status	equ	0xFD8
  7405                           
  7406 ;; *************** function _Accel_ReadRegisters *****************
  7407 ;; Defined at:
  7408 ;;		line 77 in file "accel.c"
  7409 ;; Parameters:    Size  Location     Type
  7410 ;;  reg             1    wreg     unsigned char 
  7411 ;;  out             2   39[COMRAM] PTR unsigned char 
  7412 ;;		 -> Accel_ReadRegister@out(1), Accel_Get@raw(6), 
  7413 ;;  length          2   41[COMRAM] int 
  7414 ;; Auto vars:     Size  Location     Type
  7415 ;;  reg             1    0[BANK0 ] unsigned char 
  7416 ;;  status          1    1[BANK0 ] char 
  7417 ;; Return value:  Size  Location     Type
  7418 ;;		None               void
  7419 ;; Registers used:
  7420 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7421 ;; Tracked objects:
  7422 ;;		On entry : 0/0
  7423 ;;		On exit  : 0/0
  7424 ;;		Unchanged: 0/0
  7425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7426 ;;      Params:         4       0       0       0       0       0       0
  7427 ;;      Locals:         0       2       0       0       0       0       0
  7428 ;;      Temps:          0       0       0       0       0       0       0
  7429 ;;      Totals:         4       2       0       0       0       0       0
  7430 ;;Total ram usage:        6 bytes
  7431 ;; Hardware stack levels used:    1
  7432 ;; Hardware stack levels required when called:    5
  7433 ;; This function calls:
  7434 ;;		_EESequentialRead
  7435 ;; This function is called by:
  7436 ;;		_Accel_Get
  7437 ;;		_Accel_ReadRegister
  7438 ;; This function uses a non-reentrant model
  7439 ;;
  7440                           
  7441                           	psect	text40
  7442  002D18                     __ptext40:
  7443                           	opt stack 0
  7444  002D18                     _Accel_ReadRegisters:
  7445                           	opt stack 23
  7446                           
  7447                           ; BSR set to: 0
  7448                           ;incstack = 0
  7449                           ;Accel_ReadRegisters@reg stored from wreg
  7450  002D18  0100               	movlb	0	; () banked
  7451  002D1A  6F60               	movwf	Accel_ReadRegisters@reg& (0+255),b
  7452                           
  7453                           ; BSR set to: 0
  7454                           ;accel.c: 79: signed char status = 0;
  7455  002D1C  0E00               	movlw	0
  7456  002D1E  0100               	movlb	0	; () banked
  7457  002D20  6F61               	movwf	Accel_ReadRegisters@status& (0+255),b
  7458  002D22  D000               	goto	l3669
  7459  002D24                     l3669:
  7460                           
  7461                           ; BSR set to: 0
  7462                           ;accel.c: 82: status = EESequentialRead(0x3A, reg, out, length);
  7463  002D24  C060  F023         	movff	Accel_ReadRegisters@reg,EESequentialRead@address
  7464  002D28  C028  F024         	movff	Accel_ReadRegisters@out,EESequentialRead@rdptr
  7465  002D2C  C029  F025         	movff	Accel_ReadRegisters@out+1,EESequentialRead@rdptr+1
  7466  002D30  C02A  F026         	movff	Accel_ReadRegisters@length,EESequentialRead@length
  7467  002D34  0E3A               	movlw	58
  7468  002D36  ECC7  F011         	call	_EESequentialRead
  7469  002D3A  0100               	movlb	0	; () banked
  7470  002D3C  6F61               	movwf	Accel_ReadRegisters@status& (0+255),b
  7471                           
  7472                           ; BSR set to: 0
  7473                           ;accel.c: 83: } while (status != 0);
  7474  002D3E  0100               	movlb	0	; () banked
  7475  002D40  5161               	movf	Accel_ReadRegisters@status& (0+255),w,b
  7476  002D42  0100               	movlb	0	; () banked
  7477  002D44  A4D8               	btfss	status,2,c
  7478  002D46  D7EE               	goto	l3669
  7479                           
  7480                           ; BSR set to: 0
  7481                           
  7482                           ; BSR set to: 0
  7483  002D48  0012               	return		;funcret
  7484  002D4A                     __end_of_Accel_ReadRegisters:
  7485                           	opt stack 0
  7486                           tblptru	equ	0xFF8
  7487                           tblptrh	equ	0xFF7
  7488                           tblptrl	equ	0xFF6
  7489                           tablat	equ	0xFF5
  7490                           prodh	equ	0xFF4
  7491                           prodl	equ	0xFF3
  7492                           postinc0	equ	0xFEE
  7493                           wreg	equ	0xFE8
  7494                           indf2	equ	0xFDF
  7495                           postinc2	equ	0xFDE
  7496                           postdec2	equ	0xFDD
  7497                           fsr2h	equ	0xFDA
  7498                           fsr2l	equ	0xFD9
  7499                           status	equ	0xFD8
  7500                           
  7501 ;; *************** function _EESequentialRead *****************
  7502 ;; Defined at:
  7503 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_eesr.c"
  7504 ;; Parameters:    Size  Location     Type
  7505 ;;  control         1    wreg     unsigned char 
  7506 ;;  address         1   34[COMRAM] unsigned char 
  7507 ;;  rdptr           2   35[COMRAM] PTR unsigned char 
  7508 ;;		 -> Accel_ReadRegister@out(1), Accel_Get@raw(6), 
  7509 ;;  length          1   37[COMRAM] unsigned char 
  7510 ;; Auto vars:     Size  Location     Type
  7511 ;;  control         1   38[COMRAM] unsigned char 
  7512 ;; Return value:  Size  Location     Type
  7513 ;;                  1    wreg      char 
  7514 ;; Registers used:
  7515 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7516 ;; Tracked objects:
  7517 ;;		On entry : 0/0
  7518 ;;		On exit  : 0/0
  7519 ;;		Unchanged: 0/0
  7520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7521 ;;      Params:         4       0       0       0       0       0       0
  7522 ;;      Locals:         1       0       0       0       0       0       0
  7523 ;;      Temps:          0       0       0       0       0       0       0
  7524 ;;      Totals:         5       0       0       0       0       0       0
  7525 ;;Total ram usage:        5 bytes
  7526 ;; Hardware stack levels used:    1
  7527 ;; Hardware stack levels required when called:    4
  7528 ;; This function calls:
  7529 ;;		_IdleI2C
  7530 ;;		_WriteI2C
  7531 ;;		_getsI2C
  7532 ;; This function is called by:
  7533 ;;		_Accel_ReadRegisters
  7534 ;; This function uses a non-reentrant model
  7535 ;;
  7536                           
  7537                           	psect	text41
  7538  00238E                     __ptext41:
  7539                           	opt stack 0
  7540  00238E                     _EESequentialRead:
  7541                           	opt stack 23
  7542                           
  7543                           ; BSR set to: 0
  7544                           ;incstack = 0
  7545                           ;EESequentialRead@control stored from wreg
  7546  00238E  6E27               	movwf	EESequentialRead@control,c
  7547  002390  EC2C  F017         	call	_IdleI2C	;wreg free
  7548  002394  80C5               	bsf	4037,0,c	;volatile
  7549  002396  D000               	goto	l272
  7550  002398                     l272:
  7551  002398  A0C5               	btfss	4037,0,c	;volatile
  7552  00239A  D002               	goto	l275
  7553  00239C  D7FD               	goto	l272
  7554  00239E  D000               	goto	l275
  7555  0023A0                     l275:
  7556  0023A0  B0C5               	btfsc	4037,0,c	;volatile
  7557  0023A2  D7FE               	goto	l275
  7558  0023A4  A6A1               	btfss	4001,3,c	;volatile
  7559  0023A6  D003               	goto	l3509
  7560  0023A8                     l3503:
  7561  0023A8  0EFF               	movlw	255
  7562  0023AA  0012               	return	
  7563  0023AC  D06A               	goto	l3557
  7564  0023AE                     l3509:
  7565  0023AE  5027               	movf	EESequentialRead@control,w,c
  7566  0023B0  ECFE  F014         	call	_WriteI2C
  7567  0023B4  0900               	iorlw	0
  7568  0023B6  B4D8               	btfsc	status,2,c
  7569  0023B8  D006               	goto	l281
  7570  0023BA  84C5               	bsf	4037,2,c	;volatile
  7571  0023BC  D000               	goto	l282
  7572  0023BE                     l282:
  7573  0023BE  B4C5               	btfsc	4037,2,c	;volatile
  7574  0023C0  D7FE               	goto	l282
  7575  0023C2  0EFD               	movlw	253
  7576  0023C4  0012               	return	
  7577  0023C6                     l281:
  7578  0023C6  BCC5               	btfsc	4037,6,c	;volatile
  7579  0023C8  D055               	goto	l285
  7580  0023CA  5023               	movf	EESequentialRead@address,w,c
  7581  0023CC  ECFE  F014         	call	_WriteI2C
  7582  0023D0  0900               	iorlw	0
  7583  0023D2  B4D8               	btfsc	status,2,c
  7584  0023D4  D006               	goto	l286
  7585  0023D6  84C5               	bsf	4037,2,c	;volatile
  7586  0023D8  D000               	goto	l287
  7587  0023DA                     l287:
  7588  0023DA  B4C5               	btfsc	4037,2,c	;volatile
  7589  0023DC  D7FE               	goto	l287
  7590  0023DE  0EFD               	movlw	253
  7591  0023E0  0012               	return	
  7592  0023E2                     l286:
  7593  0023E2  BCC5               	btfsc	4037,6,c	;volatile
  7594  0023E4  D040               	goto	l290
  7595  0023E6  82C5               	bsf	4037,1,c	;volatile
  7596  0023E8  D000               	goto	l291
  7597  0023EA                     l291:
  7598  0023EA  A2C5               	btfss	4037,1,c	;volatile
  7599  0023EC  D002               	goto	l294
  7600  0023EE  D7FD               	goto	l291
  7601  0023F0  D000               	goto	l294
  7602  0023F2                     l294:
  7603  0023F2  B2C5               	btfsc	4037,1,c	;volatile
  7604  0023F4  D7FE               	goto	l294
  7605  0023F6  2827               	incf	EESequentialRead@control,w,c
  7606  0023F8  ECFE  F014         	call	_WriteI2C
  7607  0023FC  0900               	iorlw	0
  7608  0023FE  B4D8               	btfsc	status,2,c
  7609  002400  D006               	goto	l297
  7610  002402  84C5               	bsf	4037,2,c	;volatile
  7611  002404  D000               	goto	l298
  7612  002406                     l298:
  7613  002406  B4C5               	btfsc	4037,2,c	;volatile
  7614  002408  D7FE               	goto	l298
  7615  00240A  0EFD               	movlw	253
  7616  00240C  0012               	return	
  7617  00240E                     l297:
  7618  00240E  BCC5               	btfsc	4037,6,c	;volatile
  7619  002410  D023               	goto	l301
  7620  002412  C024  F020         	movff	EESequentialRead@rdptr,getsI2C@rdptr
  7621  002416  C025  F021         	movff	EESequentialRead@rdptr+1,getsI2C@rdptr+1
  7622  00241A  C026  F022         	movff	EESequentialRead@length,getsI2C@length
  7623  00241E  EC60  F015         	call	_getsI2C	;wreg free
  7624  002422  0900               	iorlw	0
  7625  002424  B4D8               	btfsc	status,2,c
  7626  002426  D002               	goto	l302
  7627  002428  0EFF               	movlw	255
  7628  00242A  0012               	return	
  7629  00242C                     l302:
  7630  00242C  8AC5               	bsf	4037,5,c	;volatile
  7631  00242E  88C5               	bsf	4037,4,c	;volatile
  7632  002430  D000               	goto	l303
  7633  002432                     l303:
  7634  002432  A8C5               	btfss	4037,4,c	;volatile
  7635  002434  D002               	goto	l306
  7636  002436  D7FD               	goto	l303
  7637  002438  D000               	goto	l306
  7638  00243A                     l306:
  7639  00243A  B8C5               	btfsc	4037,4,c	;volatile
  7640  00243C  D7FE               	goto	l306
  7641  00243E  84C5               	bsf	4037,2,c	;volatile
  7642  002440  D000               	goto	l309
  7643  002442                     l309:
  7644  002442  A4C5               	btfss	4037,2,c	;volatile
  7645  002444  D002               	goto	l312
  7646  002446  D7FD               	goto	l309
  7647  002448  D000               	goto	l312
  7648  00244A                     l312:
  7649  00244A  B4C5               	btfsc	4037,2,c	;volatile
  7650  00244C  D7FE               	goto	l312
  7651  00244E  A6A1               	btfss	4001,3,c	;volatile
  7652  002450  D018               	goto	l3557
  7653  002452  D7AA               	goto	l3503
  7654  002454  0012               	return	
  7655  002456  D015               	goto	l3557
  7656  002458                     l301:
  7657  002458  84C5               	bsf	4037,2,c	;volatile
  7658  00245A  D000               	goto	l317
  7659  00245C                     l317:
  7660  00245C  B4C5               	btfsc	4037,2,c	;volatile
  7661  00245E  D7FE               	goto	l317
  7662  002460                     l3545:
  7663  002460  0EFE               	movlw	254
  7664  002462  0012               	return	
  7665  002464  D00E               	goto	l3557
  7666  002466                     l290:
  7667  002466  84C5               	bsf	4037,2,c	;volatile
  7668  002468  D000               	goto	l321
  7669  00246A                     l321:
  7670  00246A  B4C5               	btfsc	4037,2,c	;volatile
  7671  00246C  D7FE               	goto	l321
  7672  00246E  D7F8               	goto	l3545
  7673  002470  0012               	return	
  7674  002472  D007               	goto	l3557
  7675  002474                     l285:
  7676  002474  84C5               	bsf	4037,2,c	;volatile
  7677  002476  D000               	goto	l325
  7678  002478                     l325:
  7679  002478  B4C5               	btfsc	4037,2,c	;volatile
  7680  00247A  D7FE               	goto	l325
  7681  00247C  D7F1               	goto	l3545
  7682  00247E  0012               	return	
  7683  002480  D000               	goto	l3557
  7684  002482                     l3557:
  7685  002482  0E00               	movlw	0
  7686  002484  0012               	return	
  7687  002486  0012               	return		;funcret
  7688  002488                     __end_of_EESequentialRead:
  7689                           	opt stack 0
  7690                           tblptru	equ	0xFF8
  7691                           tblptrh	equ	0xFF7
  7692                           tblptrl	equ	0xFF6
  7693                           tablat	equ	0xFF5
  7694                           prodh	equ	0xFF4
  7695                           prodl	equ	0xFF3
  7696                           postinc0	equ	0xFEE
  7697                           wreg	equ	0xFE8
  7698                           indf2	equ	0xFDF
  7699                           postinc2	equ	0xFDE
  7700                           postdec2	equ	0xFDD
  7701                           fsr2h	equ	0xFDA
  7702                           fsr2l	equ	0xFD9
  7703                           status	equ	0xFD8
  7704                           
  7705 ;; *************** function _getsI2C *****************
  7706 ;; Defined at:
  7707 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_gets.c"
  7708 ;; Parameters:    Size  Location     Type
  7709 ;;  rdptr           2   31[COMRAM] PTR unsigned char 
  7710 ;;		 -> Accel_ReadRegister@out(1), Accel_Get@raw(6), 
  7711 ;;  length          1   33[COMRAM] unsigned char 
  7712 ;; Auto vars:     Size  Location     Type
  7713 ;;		None
  7714 ;; Return value:  Size  Location     Type
  7715 ;;                  1    wreg      char 
  7716 ;; Registers used:
  7717 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7718 ;; Tracked objects:
  7719 ;;		On entry : 0/0
  7720 ;;		On exit  : 0/0
  7721 ;;		Unchanged: 0/0
  7722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7723 ;;      Params:         3       0       0       0       0       0       0
  7724 ;;      Locals:         0       0       0       0       0       0       0
  7725 ;;      Temps:          0       0       0       0       0       0       0
  7726 ;;      Totals:         3       0       0       0       0       0       0
  7727 ;;Total ram usage:        3 bytes
  7728 ;; Hardware stack levels used:    1
  7729 ;; Hardware stack levels required when called:    3
  7730 ;; This function calls:
  7731 ;;		_ReadI2C
  7732 ;; This function is called by:
  7733 ;;		_EESequentialRead
  7734 ;; This function uses a non-reentrant model
  7735 ;;
  7736                           
  7737                           	psect	text42
  7738  002AC0                     __ptext42:
  7739                           	opt stack 0
  7740  002AC0                     _getsI2C:
  7741                           	opt stack 23
  7742                           
  7743                           ;incstack = 0
  7744  002AC0  D024               	goto	l3367
  7745  002AC2                     l3351:
  7746  002AC2  ECE6  F016         	call	_ReadI2C	;wreg free
  7747  002AC6  C020  FFD9         	movff	getsI2C@rdptr,fsr2l
  7748  002ACA  C021  FFDA         	movff	getsI2C@rdptr+1,fsr2h
  7749  002ACE  6EDF               	movwf	indf2,c
  7750  002AD0  4A20               	infsnz	getsI2C@rdptr,f,c
  7751  002AD2  2A21               	incf	getsI2C@rdptr+1,f,c
  7752  002AD4  D000               	goto	l340
  7753  002AD6                     l340:
  7754  002AD6  B6C5               	btfsc	4037,3,c	;volatile
  7755  002AD8  D7FE               	goto	l340
  7756  002ADA  A6A1               	btfss	4001,3,c	;volatile
  7757  002ADC  D002               	goto	l3359
  7758  002ADE  0EFF               	movlw	255
  7759  002AE0  0012               	return	
  7760  002AE2                     l3359:
  7761  002AE2  50C6               	movf	4038,w,c	;volatile
  7762  002AE4  0B0F               	andlw	15
  7763  002AE6  0A08               	xorlw	8
  7764  002AE8  B4D8               	btfsc	status,2,c
  7765  002AEA  D005               	goto	l3363
  7766  002AEC  50C6               	movf	4038,w,c	;volatile
  7767  002AEE  0B0F               	andlw	15
  7768  002AF0  0A0B               	xorlw	11
  7769  002AF2  A4D8               	btfss	status,2,c
  7770  002AF4  D00A               	goto	l3367
  7771  002AF6                     l3363:
  7772  002AF6  5022               	movf	getsI2C@length,w,c
  7773  002AF8  B4D8               	btfsc	status,2,c
  7774  002AFA  D007               	goto	l3367
  7775  002AFC  9AC5               	bcf	4037,5,c	;volatile
  7776  002AFE  88C5               	bsf	4037,4,c	;volatile
  7777  002B00  D000               	goto	l349
  7778  002B02                     l349:
  7779  002B02  A8C5               	btfss	4037,4,c	;volatile
  7780  002B04  D002               	goto	l3367
  7781  002B06  D7FD               	goto	l349
  7782  002B08  D000               	goto	l3367
  7783  002B0A                     l3367:
  7784  002B0A  0622               	decf	getsI2C@length,f,c
  7785  002B0C  2822               	incf	getsI2C@length,w,c
  7786  002B0E  A4D8               	btfss	status,2,c
  7787  002B10  D7D8               	goto	l3351
  7788  002B12  0E00               	movlw	0
  7789  002B14  0012               	return	
  7790  002B16  0012               	return		;funcret
  7791  002B18                     __end_of_getsI2C:
  7792                           	opt stack 0
  7793                           tblptru	equ	0xFF8
  7794                           tblptrh	equ	0xFF7
  7795                           tblptrl	equ	0xFF6
  7796                           tablat	equ	0xFF5
  7797                           prodh	equ	0xFF4
  7798                           prodl	equ	0xFF3
  7799                           postinc0	equ	0xFEE
  7800                           wreg	equ	0xFE8
  7801                           indf2	equ	0xFDF
  7802                           postinc2	equ	0xFDE
  7803                           postdec2	equ	0xFDD
  7804                           fsr2h	equ	0xFDA
  7805                           fsr2l	equ	0xFD9
  7806                           status	equ	0xFD8
  7807                           
  7808 ;; *************** function _ReadI2C *****************
  7809 ;; Defined at:
  7810 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_read.c"
  7811 ;; Parameters:    Size  Location     Type
  7812 ;;		None
  7813 ;; Auto vars:     Size  Location     Type
  7814 ;;		None
  7815 ;; Return value:  Size  Location     Type
  7816 ;;                  1    wreg      unsigned char 
  7817 ;; Registers used:
  7818 ;;		wreg, status,2, status,0
  7819 ;; Tracked objects:
  7820 ;;		On entry : 0/0
  7821 ;;		On exit  : 0/0
  7822 ;;		Unchanged: 0/0
  7823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7824 ;;      Params:         0       0       0       0       0       0       0
  7825 ;;      Locals:         0       0       0       0       0       0       0
  7826 ;;      Temps:          0       0       0       0       0       0       0
  7827 ;;      Totals:         0       0       0       0       0       0       0
  7828 ;;Total ram usage:        0 bytes
  7829 ;; Hardware stack levels used:    1
  7830 ;; Hardware stack levels required when called:    2
  7831 ;; This function calls:
  7832 ;;		Nothing
  7833 ;; This function is called by:
  7834 ;;		_getsI2C
  7835 ;; This function uses a non-reentrant model
  7836 ;;
  7837                           
  7838                           	psect	text43
  7839  002DCC                     __ptext43:
  7840                           	opt stack 0
  7841  002DCC                     _ReadI2C:
  7842                           	opt stack 23
  7843                           
  7844                           ;incstack = 0
  7845  002DCC  50C6               	movf	4038,w,c	;volatile
  7846  002DCE  0B0F               	andlw	15
  7847  002DD0  0A08               	xorlw	8
  7848  002DD2  B4D8               	btfsc	status,2,c
  7849  002DD4  D005               	goto	l386
  7850  002DD6  50C6               	movf	4038,w,c	;volatile
  7851  002DD8  0B0F               	andlw	15
  7852  002DDA  0A0B               	xorlw	11
  7853  002DDC  A4D8               	btfss	status,2,c
  7854  002DDE  D002               	goto	l387
  7855  002DE0                     l386:
  7856  002DE0  86C5               	bsf	4037,3,c	;volatile
  7857  002DE2  D000               	goto	l387
  7858  002DE4                     l387:
  7859  002DE4  A0C7               	btfss	4039,0,c	;volatile
  7860  002DE6  D7FE               	goto	l387
  7861  002DE8  50C9               	movf	4041,w,c	;volatile
  7862  002DEA  0012               	return	
  7863  002DEC  0012               	return		;funcret
  7864  002DEE                     __end_of_ReadI2C:
  7865                           	opt stack 0
  7866                           tblptru	equ	0xFF8
  7867                           tblptrh	equ	0xFF7
  7868                           tblptrl	equ	0xFF6
  7869                           tablat	equ	0xFF5
  7870                           prodh	equ	0xFF4
  7871                           prodl	equ	0xFF3
  7872                           postinc0	equ	0xFEE
  7873                           wreg	equ	0xFE8
  7874                           indf2	equ	0xFDF
  7875                           postinc2	equ	0xFDE
  7876                           postdec2	equ	0xFDD
  7877                           fsr2h	equ	0xFDA
  7878                           fsr2l	equ	0xFD9
  7879                           status	equ	0xFD8
  7880                           
  7881 ;; *************** function _WriteI2C *****************
  7882 ;; Defined at:
  7883 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_writ.c"
  7884 ;; Parameters:    Size  Location     Type
  7885 ;;  data_out        1    wreg     unsigned char 
  7886 ;; Auto vars:     Size  Location     Type
  7887 ;;  data_out        1   32[COMRAM] unsigned char 
  7888 ;; Return value:  Size  Location     Type
  7889 ;;                  1    wreg      char 
  7890 ;; Registers used:
  7891 ;;		wreg, status,2, status,0, cstack
  7892 ;; Tracked objects:
  7893 ;;		On entry : 0/0
  7894 ;;		On exit  : 0/0
  7895 ;;		Unchanged: 0/0
  7896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7897 ;;      Params:         0       0       0       0       0       0       0
  7898 ;;      Locals:         1       0       0       0       0       0       0
  7899 ;;      Temps:          0       0       0       0       0       0       0
  7900 ;;      Totals:         1       0       0       0       0       0       0
  7901 ;;Total ram usage:        1 bytes
  7902 ;; Hardware stack levels used:    1
  7903 ;; Hardware stack levels required when called:    3
  7904 ;; This function calls:
  7905 ;;		_IdleI2C
  7906 ;; This function is called by:
  7907 ;;		_EEAckPolling
  7908 ;;		_EEByteWrite
  7909 ;;		_EESequentialRead
  7910 ;; This function uses a non-reentrant model
  7911 ;;
  7912                           
  7913                           	psect	text44
  7914  0029FC                     __ptext44:
  7915                           	opt stack 0
  7916  0029FC                     _WriteI2C:
  7917                           	opt stack 23
  7918                           
  7919                           ;incstack = 0
  7920                           ;WriteI2C@data_out stored from wreg
  7921  0029FC  6E21               	movwf	WriteI2C@data_out,c
  7922  0029FE  C021  FFC9         	movff	WriteI2C@data_out,4041	;volatile
  7923  002A02  AEC6               	btfss	4038,7,c	;volatile
  7924  002A04  D002               	goto	l3313
  7925  002A06  0EFF               	movlw	255
  7926  002A08  0012               	return	
  7927  002A0A                     l3313:
  7928  002A0A  50C6               	movf	4038,w,c	;volatile
  7929  002A0C  0B0F               	andlw	15
  7930  002A0E  0A08               	xorlw	8
  7931  002A10  B4D8               	btfsc	status,2,c
  7932  002A12  D010               	goto	l3331
  7933  002A14  50C6               	movf	4038,w,c	;volatile
  7934  002A16  0B0F               	andlw	15
  7935  002A18  0A0B               	xorlw	11
  7936  002A1A  B4D8               	btfsc	status,2,c
  7937  002A1C  D00B               	goto	l3331
  7938  002A1E  88C6               	bsf	4038,4,c	;volatile
  7939  002A20  D000               	goto	l411
  7940  002A22                     l411:
  7941  002A22  A69E               	btfss	3998,3,c	;volatile
  7942  002A24  D7FE               	goto	l411
  7943  002A26  A4C7               	btfss	4039,2,c	;volatile
  7944  002A28  B0C7               	btfsc	4039,0,c	;volatile
  7945  002A2A  D002               	goto	l3327
  7946  002A2C  0EFE               	movlw	254
  7947  002A2E  0012               	return	
  7948  002A30                     l3327:
  7949  002A30  0E00               	movlw	0
  7950  002A32  0012               	return	
  7951  002A34                     l3331:
  7952  002A34  50C6               	movf	4038,w,c	;volatile
  7953  002A36  0B0F               	andlw	15
  7954  002A38  0A08               	xorlw	8
  7955  002A3A  B4D8               	btfsc	status,2,c
  7956  002A3C  D006               	goto	l420
  7957  002A3E  50C6               	movf	4038,w,c	;volatile
  7958  002A40  0B0F               	andlw	15
  7959  002A42  0A0B               	xorlw	11
  7960  002A44  A4D8               	btfss	status,2,c
  7961  002A46  0012               	return	
  7962  002A48  D000               	goto	l420
  7963  002A4A                     l420:
  7964  002A4A  B0C7               	btfsc	4039,0,c	;volatile
  7965  002A4C  D7FE               	goto	l420
  7966  002A4E  EC2C  F017         	call	_IdleI2C	;wreg free
  7967  002A52  ACC5               	btfss	4037,6,c	;volatile
  7968  002A54  D002               	goto	l3345
  7969  002A56  0EFE               	movlw	254
  7970  002A58  0012               	return	
  7971  002A5A                     l3345:
  7972  002A5A  0E00               	movlw	0
  7973  002A5C  0012               	return	
  7974  002A5E  0012               	return		;funcret
  7975  002A60                     __end_of_WriteI2C:
  7976                           	opt stack 0
  7977                           tblptru	equ	0xFF8
  7978                           tblptrh	equ	0xFF7
  7979                           tblptrl	equ	0xFF6
  7980                           tablat	equ	0xFF5
  7981                           prodh	equ	0xFF4
  7982                           prodl	equ	0xFF3
  7983                           postinc0	equ	0xFEE
  7984                           wreg	equ	0xFE8
  7985                           indf2	equ	0xFDF
  7986                           postinc2	equ	0xFDE
  7987                           postdec2	equ	0xFDD
  7988                           fsr2h	equ	0xFDA
  7989                           fsr2l	equ	0xFD9
  7990                           status	equ	0xFD8
  7991                           
  7992 ;; *************** function _IdleI2C *****************
  7993 ;; Defined at:
  7994 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_idle.c"
  7995 ;; Parameters:    Size  Location     Type
  7996 ;;		None
  7997 ;; Auto vars:     Size  Location     Type
  7998 ;;		None
  7999 ;; Return value:  Size  Location     Type
  8000 ;;		None               void
  8001 ;; Registers used:
  8002 ;;		wreg, status,2, status,0
  8003 ;; Tracked objects:
  8004 ;;		On entry : 0/0
  8005 ;;		On exit  : 0/0
  8006 ;;		Unchanged: 0/0
  8007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8008 ;;      Params:         0       0       0       0       0       0       0
  8009 ;;      Locals:         0       0       0       0       0       0       0
  8010 ;;      Temps:          1       0       0       0       0       0       0
  8011 ;;      Totals:         1       0       0       0       0       0       0
  8012 ;;Total ram usage:        1 bytes
  8013 ;; Hardware stack levels used:    1
  8014 ;; Hardware stack levels required when called:    2
  8015 ;; This function calls:
  8016 ;;		Nothing
  8017 ;; This function is called by:
  8018 ;;		_EEAckPolling
  8019 ;;		_EEByteWrite
  8020 ;;		_EESequentialRead
  8021 ;;		_WriteI2C
  8022 ;; This function uses a non-reentrant model
  8023 ;;
  8024                           
  8025                           	psect	text45
  8026  002E58                     __ptext45:
  8027                           	opt stack 0
  8028  002E58                     _IdleI2C:
  8029                           	opt stack 23
  8030                           
  8031                           ;incstack = 0
  8032  002E58  D000               	goto	l3257
  8033  002E5A                     l3257:
  8034  002E5A  CFC5 F020          	movff	4037,??_IdleI2C	;volatile
  8035  002E5E  0E1F               	movlw	31
  8036  002E60  1620               	andwf	??_IdleI2C,f,c
  8037  002E62  B4D8               	btfsc	status,2,c
  8038  002E64  B4C7               	btfsc	4039,2,c	;volatile
  8039  002E66  D7F9               	goto	l3257
  8040  002E68  0012               	return		;funcret
  8041  002E6A                     __end_of_IdleI2C:
  8042                           	opt stack 0
  8043                           tblptru	equ	0xFF8
  8044                           tblptrh	equ	0xFF7
  8045                           tblptrl	equ	0xFF6
  8046                           tablat	equ	0xFF5
  8047                           prodh	equ	0xFF4
  8048                           prodl	equ	0xFF3
  8049                           postinc0	equ	0xFEE
  8050                           wreg	equ	0xFE8
  8051                           indf2	equ	0xFDF
  8052                           postinc2	equ	0xFDE
  8053                           postdec2	equ	0xFDD
  8054                           fsr2h	equ	0xFDA
  8055                           fsr2l	equ	0xFD9
  8056                           status	equ	0xFD8
  8057                           
  8058 ;; *************** function _System_LowPriorityInterrupt *****************
  8059 ;; Defined at:
  8060 ;;		line 8 in file "system.c"
  8061 ;; Parameters:    Size  Location     Type
  8062 ;;		None
  8063 ;; Auto vars:     Size  Location     Type
  8064 ;;		None
  8065 ;; Return value:  Size  Location     Type
  8066 ;;		None               void
  8067 ;; Registers used:
  8068 ;;		None
  8069 ;; Tracked objects:
  8070 ;;		On entry : 0/0
  8071 ;;		On exit  : 0/0
  8072 ;;		Unchanged: 0/0
  8073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8074 ;;      Params:         0       0       0       0       0       0       0
  8075 ;;      Locals:         0       0       0       0       0       0       0
  8076 ;;      Temps:         17       0       0       0       0       0       0
  8077 ;;      Totals:        17       0       0       0       0       0       0
  8078 ;;Total ram usage:       17 bytes
  8079 ;; Hardware stack levels used:    1
  8080 ;; Hardware stack levels required when called:    1
  8081 ;; This function calls:
  8082 ;;		Nothing
  8083 ;; This function is called by:
  8084 ;;		Interrupt level 1
  8085 ;; This function uses a non-reentrant model
  8086 ;;
  8087                           
  8088                           	psect	intcodelo
  8089  000018                     __pintcodelo:
  8090                           	opt stack 0
  8091  000018                     _System_LowPriorityInterrupt:
  8092                           	opt stack 22
  8093                           
  8094                           ;incstack = 0
  8095  000018  CFD8 F001          	movff	status,??_System_LowPriorityInterrupt
  8096  00001C  CFE8 F002          	movff	wreg,??_System_LowPriorityInterrupt+1
  8097  000020  CFE0 F003          	movff	bsr,??_System_LowPriorityInterrupt+2
  8098  000024  CFFA F004          	movff	pclath,??_System_LowPriorityInterrupt+3
  8099  000028  CFFB F005          	movff	pclatu,??_System_LowPriorityInterrupt+4
  8100  00002C  CFE9 F006          	movff	fsr0l,??_System_LowPriorityInterrupt+5
  8101  000030  CFEA F007          	movff	fsr0h,??_System_LowPriorityInterrupt+6
  8102  000034  CFE1 F008          	movff	fsr1l,??_System_LowPriorityInterrupt+7
  8103  000038  CFE2 F009          	movff	fsr1h,??_System_LowPriorityInterrupt+8
  8104  00003C  CFD9 F00A          	movff	fsr2l,??_System_LowPriorityInterrupt+9
  8105  000040  CFDA F00B          	movff	fsr2h,??_System_LowPriorityInterrupt+10
  8106  000044  CFF3 F00C          	movff	prodl,??_System_LowPriorityInterrupt+11
  8107  000048  CFF4 F00D          	movff	prodh,??_System_LowPriorityInterrupt+12
  8108  00004C  CFF6 F00E          	movff	tblptrl,??_System_LowPriorityInterrupt+13
  8109  000050  CFF7 F00F          	movff	tblptrh,??_System_LowPriorityInterrupt+14
  8110  000054  CFF8 F010          	movff	tblptru,??_System_LowPriorityInterrupt+15
  8111  000058  CFF5 F011          	movff	tablat,??_System_LowPriorityInterrupt+16
  8112  00005C  C011  FFF5         	movff	??_System_LowPriorityInterrupt+16,tablat
  8113  000060  C010  FFF8         	movff	??_System_LowPriorityInterrupt+15,tblptru
  8114  000064  C00F  FFF7         	movff	??_System_LowPriorityInterrupt+14,tblptrh
  8115  000068  C00E  FFF6         	movff	??_System_LowPriorityInterrupt+13,tblptrl
  8116  00006C  C00D  FFF4         	movff	??_System_LowPriorityInterrupt+12,prodh
  8117  000070  C00C  FFF3         	movff	??_System_LowPriorityInterrupt+11,prodl
  8118  000074  C00B  FFDA         	movff	??_System_LowPriorityInterrupt+10,fsr2h
  8119  000078  C00A  FFD9         	movff	??_System_LowPriorityInterrupt+9,fsr2l
  8120  00007C  C009  FFE2         	movff	??_System_LowPriorityInterrupt+8,fsr1h
  8121  000080  C008  FFE1         	movff	??_System_LowPriorityInterrupt+7,fsr1l
  8122  000084  C007  FFEA         	movff	??_System_LowPriorityInterrupt+6,fsr0h
  8123  000088  C006  FFE9         	movff	??_System_LowPriorityInterrupt+5,fsr0l
  8124  00008C  C005  FFFB         	movff	??_System_LowPriorityInterrupt+4,pclatu
  8125  000090  C004  FFFA         	movff	??_System_LowPriorityInterrupt+3,pclath
  8126  000094  C003  FFE0         	movff	??_System_LowPriorityInterrupt+2,bsr
  8127  000098  C002  FFE8         	movff	??_System_LowPriorityInterrupt+1,wreg
  8128  00009C  C001  FFD8         	movff	??_System_LowPriorityInterrupt,status
  8129  0000A0  0010               	retfie	
  8130  0000A2                     __end_of_System_LowPriorityInterrupt:
  8131                           	opt stack 0
  8132                           pclatu	equ	0xFFB
  8133                           pclath	equ	0xFFA
  8134                           tblptru	equ	0xFF8
  8135                           tblptrh	equ	0xFF7
  8136                           tblptrl	equ	0xFF6
  8137                           tablat	equ	0xFF5
  8138                           prodh	equ	0xFF4
  8139                           prodl	equ	0xFF3
  8140                           postinc0	equ	0xFEE
  8141                           fsr0h	equ	0xFEA
  8142                           fsr0l	equ	0xFE9
  8143                           wreg	equ	0xFE8
  8144                           fsr1h	equ	0xFE2
  8145                           fsr1l	equ	0xFE1
  8146                           bsr	equ	0xFE0
  8147                           indf2	equ	0xFDF
  8148                           postinc2	equ	0xFDE
  8149                           postdec2	equ	0xFDD
  8150                           fsr2h	equ	0xFDA
  8151                           fsr2l	equ	0xFD9
  8152                           status	equ	0xFD8
  8153                           
  8154 ;; *************** function _System_HighPriorityInterrupt *****************
  8155 ;; Defined at:
  8156 ;;		line 3 in file "system.c"
  8157 ;; Parameters:    Size  Location     Type
  8158 ;;		None
  8159 ;; Auto vars:     Size  Location     Type
  8160 ;;		None
  8161 ;; Return value:  Size  Location     Type
  8162 ;;		None               void
  8163 ;; Registers used:
  8164 ;;		None
  8165 ;; Tracked objects:
  8166 ;;		On entry : 0/0
  8167 ;;		On exit  : 0/0
  8168 ;;		Unchanged: 0/0
  8169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8170 ;;      Params:         0       0       0       0       0       0       0
  8171 ;;      Locals:         0       0       0       0       0       0       0
  8172 ;;      Temps:         14       0       0       0       0       0       0
  8173 ;;      Totals:        14       0       0       0       0       0       0
  8174 ;;Total ram usage:       14 bytes
  8175 ;; Hardware stack levels used:    1
  8176 ;; This function calls:
  8177 ;;		Nothing
  8178 ;; This function is called by:
  8179 ;;		Interrupt level 2
  8180 ;; This function uses a non-reentrant model
  8181 ;;
  8182                           
  8183                           	psect	intcode
  8184  000008                     __pintcode:
  8185                           	opt stack 0
  8186  000008                     _System_HighPriorityInterrupt:
  8187                           	opt stack 22
  8188                           
  8189                           ;incstack = 0
  8190  000008  CFFA F012          	movff	pclath,??_System_HighPriorityInterrupt
  8191  00000C  CFFB F013          	movff	pclatu,??_System_HighPriorityInterrupt+1
  8192  000010  CFE9 F014          	movff	fsr0l,??_System_HighPriorityInterrupt+2
  8193  000014  EFCB  F014         	goto	int_func
  8194                           pclatu	equ	0xFFB
  8195                           pclath	equ	0xFFA
  8196                           tblptru	equ	0xFF8
  8197                           tblptrh	equ	0xFF7
  8198                           tblptrl	equ	0xFF6
  8199                           tablat	equ	0xFF5
  8200                           prodh	equ	0xFF4
  8201                           prodl	equ	0xFF3
  8202                           postinc0	equ	0xFEE
  8203                           fsr0h	equ	0xFEA
  8204                           fsr0l	equ	0xFE9
  8205                           wreg	equ	0xFE8
  8206                           fsr1h	equ	0xFE2
  8207                           fsr1l	equ	0xFE1
  8208                           bsr	equ	0xFE0
  8209                           indf2	equ	0xFDF
  8210                           postinc2	equ	0xFDE
  8211                           postdec2	equ	0xFDD
  8212                           fsr2h	equ	0xFDA
  8213                           fsr2l	equ	0xFD9
  8214                           status	equ	0xFD8
  8215                           
  8216                           	psect	intcode_body
  8217  002996                     __pintcode_body:
  8218                           	opt stack 22
  8219  002996                     int_func:
  8220                           	opt stack 22
  8221  002996  CFEA F015          	movff	fsr0h,??_System_HighPriorityInterrupt+3
  8222  00299A  CFE1 F016          	movff	fsr1l,??_System_HighPriorityInterrupt+4
  8223  00299E  CFE2 F017          	movff	fsr1h,??_System_HighPriorityInterrupt+5
  8224  0029A2  CFD9 F018          	movff	fsr2l,??_System_HighPriorityInterrupt+6
  8225  0029A6  CFDA F019          	movff	fsr2h,??_System_HighPriorityInterrupt+7
  8226  0029AA  CFF3 F01A          	movff	prodl,??_System_HighPriorityInterrupt+8
  8227  0029AE  CFF4 F01B          	movff	prodh,??_System_HighPriorityInterrupt+9
  8228  0029B2  CFF6 F01C          	movff	tblptrl,??_System_HighPriorityInterrupt+10
  8229  0029B6  CFF7 F01D          	movff	tblptrh,??_System_HighPriorityInterrupt+11
  8230  0029BA  CFF8 F01E          	movff	tblptru,??_System_HighPriorityInterrupt+12
  8231  0029BE  CFF5 F01F          	movff	tablat,??_System_HighPriorityInterrupt+13
  8232  0029C2  C01F  FFF5         	movff	??_System_HighPriorityInterrupt+13,tablat
  8233  0029C6  C01E  FFF8         	movff	??_System_HighPriorityInterrupt+12,tblptru
  8234  0029CA  C01D  FFF7         	movff	??_System_HighPriorityInterrupt+11,tblptrh
  8235  0029CE  C01C  FFF6         	movff	??_System_HighPriorityInterrupt+10,tblptrl
  8236  0029D2  C01B  FFF4         	movff	??_System_HighPriorityInterrupt+9,prodh
  8237  0029D6  C01A  FFF3         	movff	??_System_HighPriorityInterrupt+8,prodl
  8238  0029DA  C019  FFDA         	movff	??_System_HighPriorityInterrupt+7,fsr2h
  8239  0029DE  C018  FFD9         	movff	??_System_HighPriorityInterrupt+6,fsr2l
  8240  0029E2  C017  FFE2         	movff	??_System_HighPriorityInterrupt+5,fsr1h
  8241  0029E6  C016  FFE1         	movff	??_System_HighPriorityInterrupt+4,fsr1l
  8242  0029EA  C015  FFEA         	movff	??_System_HighPriorityInterrupt+3,fsr0h
  8243  0029EE  C014  FFE9         	movff	??_System_HighPriorityInterrupt+2,fsr0l
  8244  0029F2  C013  FFFB         	movff	??_System_HighPriorityInterrupt+1,pclatu
  8245  0029F6  C012  FFFA         	movff	??_System_HighPriorityInterrupt,pclath
  8246  0029FA  0011               	retfie		f
  8247  0029FC                     __end_of_System_HighPriorityInterrupt:
  8248                           	opt stack 0
  8249                           pclatu	equ	0xFFB
  8250                           pclath	equ	0xFFA
  8251                           tblptru	equ	0xFF8
  8252                           tblptrh	equ	0xFF7
  8253                           tblptrl	equ	0xFF6
  8254                           tablat	equ	0xFF5
  8255                           prodh	equ	0xFF4
  8256                           prodl	equ	0xFF3
  8257                           postinc0	equ	0xFEE
  8258                           fsr0h	equ	0xFEA
  8259                           fsr0l	equ	0xFE9
  8260                           wreg	equ	0xFE8
  8261                           fsr1h	equ	0xFE2
  8262                           fsr1l	equ	0xFE1
  8263                           bsr	equ	0xFE0
  8264                           indf2	equ	0xFDF
  8265                           postinc2	equ	0xFDE
  8266                           postdec2	equ	0xFDD
  8267                           fsr2h	equ	0xFDA
  8268                           fsr2l	equ	0xFD9
  8269                           status	equ	0xFD8
  8270                           pclatu	equ	0xFFB
  8271                           pclath	equ	0xFFA
  8272                           tblptru	equ	0xFF8
  8273                           tblptrh	equ	0xFF7
  8274                           tblptrl	equ	0xFF6
  8275                           tablat	equ	0xFF5
  8276                           prodh	equ	0xFF4
  8277                           prodl	equ	0xFF3
  8278                           postinc0	equ	0xFEE
  8279                           fsr0h	equ	0xFEA
  8280                           fsr0l	equ	0xFE9
  8281                           wreg	equ	0xFE8
  8282                           fsr1h	equ	0xFE2
  8283                           fsr1l	equ	0xFE1
  8284                           bsr	equ	0xFE0
  8285                           indf2	equ	0xFDF
  8286                           postinc2	equ	0xFDE
  8287                           postdec2	equ	0xFDD
  8288                           fsr2h	equ	0xFDA
  8289                           fsr2l	equ	0xFD9
  8290                           status	equ	0xFD8
  8291                           
  8292                           	psect	rparam
  8293  0000                     pclatu	equ	0xFFB
  8294                           pclath	equ	0xFFA
  8295                           tblptru	equ	0xFF8
  8296                           tblptrh	equ	0xFF7
  8297                           tblptrl	equ	0xFF6
  8298                           tablat	equ	0xFF5
  8299                           prodh	equ	0xFF4
  8300                           prodl	equ	0xFF3
  8301                           postinc0	equ	0xFEE
  8302                           fsr0h	equ	0xFEA
  8303                           fsr0l	equ	0xFE9
  8304                           wreg	equ	0xFE8
  8305                           fsr1h	equ	0xFE2
  8306                           fsr1l	equ	0xFE1
  8307                           bsr	equ	0xFE0
  8308                           indf2	equ	0xFDF
  8309                           postinc2	equ	0xFDE
  8310                           postdec2	equ	0xFDD
  8311                           fsr2h	equ	0xFDA
  8312                           fsr2l	equ	0xFD9
  8313                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    120
    Data        0
    BSS         66
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     44      64
    BANK0           160    128     154
    BANK1           256     68      88
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), atan@coeff_a(CODE[24]), atan@coeff_b(CODE[20]), 

    getsI2C@rdptr	PTR unsigned char  size(2) Largest target is 6
		 -> Accel_ReadRegister@out(BANK0[1]), Accel_Get@raw(BANK0[6]), 

    EESequentialRead@rdptr	PTR unsigned char  size(2) Largest target is 6
		 -> Accel_ReadRegister@out(BANK0[1]), Accel_Get@raw(BANK0[6]), 

    Accel_ReadRegisters@out	PTR unsigned char  size(2) Largest target is 6
		 -> Accel_ReadRegister@out(BANK0[1]), Accel_Get@raw(BANK0[6]), 

    Accel_Get@out	PTR struct . size(2) Largest target is 12
		 -> Gyros_Update@a(BANK1[12]), 

    Accel_Get@f_out	PTR float  size(2) Largest target is 12
		 -> Gyros_Update@a(BANK1[12]), 


Critical Paths under _main in COMRAM

    _System_Init->_OpenUSART
    _Gyros_Update->___fladd
    _pow->___flge
    _log->___fladd
    _exp->___flge
    _floor->___fladd
    _floor->___flge
    ___altofl->___flpack
    ___altofl->___fltol
    ___lltofl->___flpack
    _acos->___fladd
    _asin->___fladd
    _asin->___flge
    _sqrt->___flge
    ___flsub->___fladd
    _atan->___fladd
    _atan->___flge
    _fabs->___flneg
    _eval_poly->___fladd
    ___flmul->___fladd
    ___fladd->___awtofl
    ___flge->_fabs
    _Accel_Get->_Accel_ReadRegisters
    ___fldiv->___fladd
    ___awtofl->___flpack
    _Accel_Init->_Accel_Active
    _Accel_Init->_Accel_StandBy
    _Accel_WriteRegister->_EEByteWrite
    _EEByteWrite->_WriteI2C
    _EEAckPolling->_WriteI2C
    _Accel_ReadRegister->_Accel_ReadRegisters
    _Accel_ReadRegisters->_EESequentialRead
    _EESequentialRead->_getsI2C
    _WriteI2C->_IdleI2C

Critical Paths under _System_HighPriorityInterrupt in COMRAM

    None.

Critical Paths under _System_LowPriorityInterrupt in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_Gyros_Update
    _Gyros_Update->_acos
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___fladd
    _acos->_asin
    _asin->_sqrt
    _sqrt->_pow
    ___flsub->___fladd
    _atan->_eval_poly
    _eval_poly->___flmul
    ___flmul->___fladd
    ___fladd->___awtofl
    _Accel_Get->___fldiv
    ___fldiv->___flmul
    _Accel_Init->_Accel_ReadRegister
    _Accel_StandBy->_Accel_ReadRegister
    _Accel_Active->_Accel_ReadRegister
    _Accel_ReadRegister->_Accel_ReadRegisters

Critical Paths under _System_HighPriorityInterrupt in BANK0

    None.

Critical Paths under _System_LowPriorityInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Gyros_Update
    _acos->_asin

Critical Paths under _System_HighPriorityInterrupt in BANK1

    None.

Critical Paths under _System_LowPriorityInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _System_HighPriorityInterrupt in BANK2

    None.

Critical Paths under _System_LowPriorityInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _System_HighPriorityInterrupt in BANK3

    None.

Critical Paths under _System_LowPriorityInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _System_HighPriorityInterrupt in BANK4

    None.

Critical Paths under _System_LowPriorityInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _System_HighPriorityInterrupt in BANK5

    None.

Critical Paths under _System_LowPriorityInterrupt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  259439
                                            127 BANK0      1     1      0
                         _Accel_Init
                         _Gyros_Init
                       _Gyros_Update
                        _System_Init
 ---------------------------------------------------------------------------------
 (1) _System_Init                                          0     0      0     407
                           _CloseI2C
                            _OpenI2C
                          _OpenUSART
                          _baudUSART
 ---------------------------------------------------------------------------------
 (2) _baudUSART                                            1     1      0      15
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     284
                                             31 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _OpenI2C                                              2     1      1     108
                                             31 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _CloseI2C                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Gyros_Update                                        56    52      4  253144
                                            123 BANK0      4     0      4
                                             24 BANK1     44    44      0
                          _Accel_Get
                            ___fladd
                            ___fldiv
                            ___flmul
                               _acos
                               _atan
                                _pow
                               _sqrt
 ---------------------------------------------------------------------------------
 (2) _pow                                                 21    13      8   93251
                                             65 BANK0     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___lltofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  6     2      4   30058
                                             46 BANK0      6     2      4
                           ___awtofl
                            ___fladd
                            ___flmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                 11     7      4   50918
                                             54 BANK0     11     7      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                8     2      6     513
                                             46 BANK0      8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                               10     6      4   12415
                                             15 BANK0     10     6      4
                           ___altofl
                            ___fladd
                             ___flge
                            ___fltol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                8     2      6     630
                                             31 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) ___fltol                                             10     6      4     421
                                             31 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (5) ___altofl                                             5     1      4    2794
                                             41 COMRAM     1     1      0
                                              0 BANK0      4     0      4
                           ___flpack
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lltofl                                             4     0      4    2692
                                              0 BANK0      4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) _acos                                                 8     4      4   80623
                                            115 BANK0      8     4      4
                            ___fladd
                            ___flneg
                               _asin
                                _pow (ARG)
 ---------------------------------------------------------------------------------
 (3) _asin                                                40    36      4   72797
                                            111 BANK0      4     0      4
                                              0 BANK1     24    24      0
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                               _atan
                               _fabs
                               _sqrt
 ---------------------------------------------------------------------------------
 (2) _sqrt                                                25    21      4   15121
                                             86 BANK0     25    21      4
                            ___fldiv (ARG)
                             ___flge
                            ___flmul
                            ___flneg (ARG)
                            ___flsub
                                _pow (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    7213
                                             15 BANK0      8     0      8
                           ___awtofl (ARG)
                            ___fladd
 ---------------------------------------------------------------------------------
 (2) _atan                                                21    17      4   35588
                                             46 BANK0     21    17      4
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                          _eval_poly
                               _fabs
 ---------------------------------------------------------------------------------
 (3) _fabs                                                 4     0      4    1313
                                             35 COMRAM     4     0      4
                            ___flneg
 ---------------------------------------------------------------------------------
 (4) ___flneg                                              4     0      4     989
                                             31 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           16     8      8   13637
                                             30 BANK0     16     8      8
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             15     7      8    5764
                                             15 BANK0     15     7      8
                           ___awtofl (ARG)
                            ___fladd (ARG)
                            ___flneg (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             12     4      8    6695
                                             42 COMRAM     1     1      0
                                              4 BANK0     11     3      8
                           ___awtofl (ARG)
                            ___flneg (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8    1430
                                             39 COMRAM     4     4      0
                                              0 BANK0      8     0      8
                               _fabs (ARG)
 ---------------------------------------------------------------------------------
 (2) _Accel_Get                                           20    18      2    9974
                                             45 BANK0     20    18      2
                _Accel_ReadRegisters
                           ___awtofl
                            ___fldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     287
                                             31 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___fldiv                                             15     7      8    4963
                                             30 BANK0     15     7      8
                           ___awtofl (ARG)
                            ___fladd (ARG)
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (4) ___awtofl                                             9     5      4    2948
                                             41 COMRAM     1     1      0
                                              0 BANK0      4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (5) ___flpack                                            10     4      6    2584
                                             31 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (1) _Gyros_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Accel_Init                                           2     2      0    5888
                                              4 BANK0      2     2      0
                       _Accel_Active
                 _Accel_ReadRegister
                      _Accel_StandBy
                _Accel_WriteRegister
 ---------------------------------------------------------------------------------
 (2) _Accel_StandBy                                        1     1      0    1939
                                             43 COMRAM     1     1      0
                 _Accel_ReadRegister
                _Accel_WriteRegister
 ---------------------------------------------------------------------------------
 (2) _Accel_Active                                         1     1      0    1939
                                             43 COMRAM     1     1      0
                 _Accel_ReadRegister
                _Accel_WriteRegister
 ---------------------------------------------------------------------------------
 (2) _Accel_WriteRegister                                  3     2      1     698
                                             36 COMRAM     3     2      1
                       _EEAckPolling
                        _EEByteWrite
 ---------------------------------------------------------------------------------
 (3) _EEByteWrite                                          3     1      2     278
                                             33 COMRAM     3     1      2
                            _IdleI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (3) _EEAckPolling                                         1     1      0      93
                                             33 COMRAM     1     1      0
                            _IdleI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (3) _Accel_ReadRegister                                   2     2      0    1207
                                              2 BANK0      2     2      0
                _Accel_ReadRegisters
 ---------------------------------------------------------------------------------
 (3) _Accel_ReadRegisters                                  6     2      4    1105
                                             39 COMRAM     4     0      4
                                              0 BANK0      2     2      0
                   _EESequentialRead
 ---------------------------------------------------------------------------------
 (4) _EESequentialRead                                     5     1      4     667
                                             34 COMRAM     5     1      4
                            _IdleI2C
                           _WriteI2C
                            _getsI2C
 ---------------------------------------------------------------------------------
 (5) _getsI2C                                              3     0      3     250
                                             31 COMRAM     3     0      3
                            _ReadI2C
 ---------------------------------------------------------------------------------
 (6) _ReadI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _WriteI2C                                             1     1      0      31
                                             32 COMRAM     1     1      0
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (6) _IdleI2C                                              1     1      0       0
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _System_LowPriorityInterrupt                         17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _System_HighPriorityInterrupt                        14    14      0       0
                                             17 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Accel_Init
     _Accel_Active
       _Accel_ReadRegister
         _Accel_ReadRegisters
           _EESequentialRead
             _IdleI2C
             _WriteI2C
               _IdleI2C
             _getsI2C
               _ReadI2C
       _Accel_WriteRegister
         _EEAckPolling
           _IdleI2C
           _WriteI2C
             _IdleI2C
         _EEByteWrite
           _IdleI2C
           _WriteI2C
             _IdleI2C
     _Accel_ReadRegister
       _Accel_ReadRegisters
         _EESequentialRead
           _IdleI2C
           _WriteI2C
             _IdleI2C
           _getsI2C
             _ReadI2C
     _Accel_StandBy
       _Accel_ReadRegister
         _Accel_ReadRegisters
           _EESequentialRead
             _IdleI2C
             _WriteI2C
               _IdleI2C
             _getsI2C
               _ReadI2C
       _Accel_WriteRegister
         _EEAckPolling
           _IdleI2C
           _WriteI2C
             _IdleI2C
         _EEByteWrite
           _IdleI2C
           _WriteI2C
             _IdleI2C
     _Accel_WriteRegister
       _EEAckPolling
         _IdleI2C
         _WriteI2C
           _IdleI2C
       _EEByteWrite
         _IdleI2C
         _WriteI2C
           _IdleI2C
   _Gyros_Init
   _Gyros_Update
     _Accel_Get
       _Accel_ReadRegisters
         _EESequentialRead
           _IdleI2C
           _WriteI2C
             _IdleI2C
           _getsI2C
             _ReadI2C
       ___awtofl
         ___flpack
       ___fldiv
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg (ARG)
         ___flpack (ARG)
       ___wmul
     ___fladd
       ___awtofl (ARG)
         ___flpack
       ___flneg (ARG)
       ___flpack (ARG)
       _frexp (ARG)
     ___fldiv
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flneg (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg (ARG)
       ___flpack (ARG)
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flneg (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg (ARG)
       ___flpack (ARG)
       _frexp (ARG)
     _acos
       ___fladd
         ___awtofl (ARG)
           ___flpack
         ___flneg (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg
       _asin
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___fldiv
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
         ___flge
           _fabs (ARG)
             ___flneg
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         _atan
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___fldiv
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
           ___flge
             _fabs (ARG)
               ___flneg
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
           _fabs
             ___flneg
         _fabs
           ___flneg
         _sqrt
           ___fldiv (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
           ___flge (ARG)
             _fabs (ARG)
               ___flneg
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flsub (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
           _pow (ARG)
             ___flge
               _fabs (ARG)
                 ___flneg
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg
             ___fltol
             ___lltofl
               ___flpack
             _exp
               ___awtofl
                 ___flpack
               ___fldiv
                 ___awtofl (ARG)
                   ___flpack
                 ___fladd (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fladd (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___flneg (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                 ___flpack (ARG)
               ___flge
                 _fabs (ARG)
                   ___flneg
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fladd (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg
               ___flsub
                 ___awtofl (ARG)
                   ___flpack
                 ___fladd (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
               ___fltol
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fladd (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___flneg (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
               _floor
                 ___altofl
                   ___flpack
                   ___fltol (ARG)
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flge
                   _fabs (ARG)
                     ___flneg
                 ___fltol
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flneg (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fladd (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___flneg (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flneg (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
               _log (ARG)
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fladd (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___flneg (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flneg (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fladd (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___flneg (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flneg (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fladd (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fladd (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___flneg (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
       _pow (ARG)
         ___flge
           _fabs (ARG)
             ___flneg
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___fltol
         ___lltofl
           ___flpack
         _exp
           ___awtofl
             ___flpack
           ___fldiv
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
           ___flge
             _fabs (ARG)
               ___flneg
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg
           ___flsub
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
           ___fltol
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
           _floor
             ___altofl
               ___flpack
               ___fltol (ARG)
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flge
               _fabs (ARG)
                 ___flneg
             ___fltol
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fladd (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
           _log (ARG)
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fladd (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     _atan
       ___fladd
         ___awtofl (ARG)
           ___flpack
         ___flneg (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___fldiv
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg (ARG)
         ___flpack (ARG)
       ___flge
         _fabs (ARG)
           ___flneg
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg
       _eval_poly
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
       _fabs
         ___flneg
     _pow
       ___flge
         _fabs (ARG)
           ___flneg
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg
       ___fltol
       ___lltofl
         ___flpack
       _exp
         ___awtofl
           ___flpack
         ___fldiv
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
         ___flge
           _fabs (ARG)
             ___flneg
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___flsub
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
         ___fltol
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
         _floor
           ___altofl
             ___flpack
             ___fltol (ARG)
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flge
             _fabs (ARG)
               ___flneg
           ___fltol
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
         _log (ARG)
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
       _log
         ___awtofl
           ___flpack
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
         _frexp
     _sqrt
       ___fldiv (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg (ARG)
         ___flpack (ARG)
       ___flge (ARG)
         _fabs (ARG)
           ___flneg
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg (ARG)
       ___flsub (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
       _pow (ARG)
         ___flge
           _fabs (ARG)
             ___flneg
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___fltol
         ___lltofl
           ___flpack
         _exp
           ___awtofl
             ___flpack
           ___fldiv
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
           ___flge
             _fabs (ARG)
               ___flneg
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg
           ___flsub
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
           ___fltol
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
           _floor
             ___altofl
               ___flpack
               ___fltol (ARG)
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flge
               _fabs (ARG)
                 ___flneg
             ___fltol
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fladd (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
           _log (ARG)
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fladd (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
   _System_Init
     _CloseI2C
     _OpenI2C
     _OpenUSART
     _baudUSART

 _System_LowPriorityInterrupt (ROOT)

 _System_HighPriorityInterrupt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     44      58       7       34.4%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     80      9A       5       96.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2C      40       1       67.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     132      15        0.0%
DATA                 0      0     132       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Dec 05 15:15:13 2018

                        ___altofl@sign 002A                           ___fldiv@cntr 008A  
                         ___fldiv@sign 008C                          _Accel_StandBy 2E2C  
                          _SSPSTATbits 000FC7                                     l89 1B06  
                                   bsr 000FE0                    ___wmul@multiplicand 0022  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                         ___flpack@arg 0020                           ___flpack@exp 0024  
                                  l201 2890                                    l301 2458  
                                  l205 28A0                                    l302 242C  
                                  l230 26E2                                    l222 2660  
                                  l303 2432                                    l231 268E  
                                  l312 244A                                    l208 28A8  
                                  l240 26C8                                    l232 2686  
                                  l160 2906                                    l321 246A  
                                  l225 2668                                    l153 28DE  
                                  l306 243A                                    l250 26DA  
                                  l242 26BE                                    l411 2A22  
                                  l235 26D6                                    l420 2A4A  
                                  l340 2AD6                                    l236 26AA  
                                  l325 2478                                    l317 245C  
                                  l309 2442                                    l181 2840  
                                  l253 26E6                                    l237 26A2  
                                  l157 28F8                                    l246 26CC  
                                  l158 28FA                                    l191 2898  
                                  l159 2904                                    l272 2398  
                                  l192 2868                                    l256 26EE  
                                  l281 23C6                                    l193 286C  
                                  l601 1370                                    l290 2466  
                                  l282 23BE                                    l186 289C  
                                  l178 2838                                    l291 23EA  
                                  l275 23A0                                    l196 2874  
                                  l188 285E                                    l700 2348  
                                  l349 2B02                                    l285 2474  
                                  l294 23F2                                    l286 23E2  
                                  l287 23DA                                    l720 108C  
                                  l712 2CA2                                    l297 240E  
                                  l386 2DE0                                    l298 2406  
                                  l387 2DE4                                    l724 10C6  
                                  l726 10F4                                    l735 11DC  
                                  l760 2604                                    l692 22F2  
                                  l699 2334                           __CFG_CPB$OFF 000000  
                         __CFG_CPD$OFF 000000                                    _exp 0DC4  
                                  _log 1B08                                    _pow 172E  
                         __CFG_BORV$18 000000                                    wreg 000FE8  
                         ___flmul@cntr 007C                  Accel_ReadRegister@reg 0062  
                         ___flmul@sign 007D                  Accel_ReadRegister@out 0063  
                         __CFG_LVP$OFF 000000                         gyros@Gyros_Vel 00EC  
                        ___flpack@sign 0025                           ___fltol@exp1 0029  
                                 l1031 177E                                   l1041 1556  
                                 l1042 1542                                   l1036 191C  
                                 l1062 0EBE                                   l1063 103E  
                                 l1073 215A                                   l3011 28C4  
                ??_Accel_WriteRegister 0026                                   l3031 28F0  
                                 l3023 28E2                                   l3015 28CE  
                                 l3019 28D6                                   l4021 19C4  
                                 l4031 1A86                                   l3313 2A0A  
                                 l3331 2A34                                   l3411 118A  
                                 l2611 24A6                                   l3405 115C  
                                 l4061 1840                                   l4053 17BA  
                                 l3327 2A30                                   l3351 2AC2  
                                 l3503 23A8                                   l3423 1204  
                                 l3407 116E                                   l2631 2514  
                                 l4047 1792                                   l3257 2E5A  
                                 l3345 2A5A                                   l3281 22DA  
                                 l3273 2290                                   l3417 11BA  
                                 l3409 117E                                   l2641 2546  
                                 l4065 1870                                   l3363 2AF6  
                                 l4083 2B6A                                   l3427 122C  
                                 l3419 11CC                                   l2627 2504  
                                 l3509 23AE                                   l3277 22A4  
                                 l3605 1ED8                                   l3437 1280  
                                 l3453 1CCE                                   l2645 255E  
                                 l2637 252E                                   l4149 2C4A  
                                 l3359 2AE2                                   l3367 2B0A  
                                 l4095 2B98                                   l3287 231A  
                                 l3279 22B2                                   l3391 10EA  
                                 l3447 1CA8                                   l3631 2260  
                                 l2639 253C                                   l3545 2460  
                                 l3289 2328                                   l3609 1EEC  
                                 l3385 10D8                                   l3481 1D96  
                                 l3465 1D1E                                   l3617 2A88  
                                 l3731 284E                                   l3299 237A  
                                 l3643 2650                                   l3379 109E  
                                 l3475 1D66                                   l3557 2482  
                                 l3637 25BC                                   l3477 1D6E  
                                 l3469 1D46                                   l3629 21BE  
                                 l3719 26FA                                   l3399 112C  
                                 l3487 1DB6                                   l3495 2D04  
                                 l3655 272E                                   l3831 20C0  
                                 l3823 208A                                   l3737 2880  
                                 l3809 2BCA                                   l3585 1E32  
                                 l3761 14C6                                   l3569 2B3A  
                                 l3683 2676                                   l3579 1E0C  
                                 l3907 0C3C                                   l3827 209E  
                                 l3851 1FAC                                   l3843 1F44  
                                 l3669 2D24                                   l3597 1E82  
                                 l3765 14DE                                   l3749 12FC  
                                 l3919 0D1E                                   l3863 1FE0  
                                 l3943 1B5E                                   l3881 2DF0  
                                 l3785 15D8                                   l3937 1B2C  
                                 l3867 1FF6                                   l3971 0E80  
                                 ?_exp 0096                                   l3893 0AFE  
                                 l3869 203A                                   l3965 0E36  
                                 ?_log 008E                                   l3799 16F6  
                                 l3959 0DEC                                   l3993 1006  
                                 ?_pow 00A1                                   _PIE1 000F9D  
                                 u5120 19C2                                   u5200 1822  
                                 u5070 0E8A                                   u5135 1A36  
                                 u5080 0E8C                                   u2690 24C4  
                                 u2695 24BA                                   u5247 2C6A  
                                 u4810 132C                                   u4490 2756  
                                 u4820 132E                                   u4910 20AE  
                                 u4498 2758                                   u4940 1F76  
                                 u4948 1F7A                                   _acos 2924  
                                 _fabs 2C78                                   _atan 12B0  
                                 _asin 0AA0                                   _main 2C38  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                                 fsr0l 000FE9                                   fsr2h 000FDA  
                                 fsr1l 000FE1                                   indf2 000FDF  
                                 fsr2l 000FD9                                   _sqrt 1506  
                  baudUSART@baudconfig 0020                                   exp@x 0096  
                                 log@x 008E                        _Gyros_LastAccel 002D  
                                 pclat 000FFA                                   pow@x 00A1  
                                 pow@y 00A5                                   prodh 000FF4  
                                 prodl 000FF3                                   start 00A2  
                        __CFG_IESO$OFF 000000                        __end_of_IdleI2C 2E6A  
                        __CFG_MCLRE$ON 000000                   __size_of_System_Init 0042  
                         ___param_bank 000010                        __end_of_ReadI2C 2DEE  
                       ?_Accel_StandBy 0001                        __end_of_OpenI2C 2E2C  
                                ??_exp 002C                                  ??_log 002C  
               Accel_ReadRegisters@reg 0060                                  ??_pow 002C  
               Accel_ReadRegisters@out 0028                                  ?_acos 00D3  
                                ?_fabs 0024                          ___fltol@sign1 0028  
                                ?_atan 008E                                  ?_asin 00CF  
                      __end_of___fladd 12B0                                  ?_main 0001  
                      __end_of___fldiv 1F1C                        __end_of___flneg 2D18  
                      __end_of___flmul 1DE6                        __end_of___flsub 2AC0  
                      __end_of___fltol 2572                                  ?_sqrt 00B6  
                                _RCSTA 000FAB                                  _SPBRG 000FAF  
                                _TXSTA 000FAC                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                   __end_of_EEAckPolling 28B2  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_getsI2C 2B18  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                        ___awtofl@sign 002A                         __CFG_EBTR3$OFF 000000  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                         __CFG_EBTRB$OFF 000000  
                                acos@x 00D3                                  fabs@d 0024  
                                _floor 204E                                  _ldexp 1F1C  
                                _frexp 2700                                  _errno 00F8  
                                atan@f 008E                                  atan@x 0096  
                                atan@y 0092                                  asin@x 00CF  
                                asin@y 0110                                  tablat 000FF5  
                                pow@yi 00B2                     __size_of_Accel_Get 01DA  
                                sqrt@i 00C6                                  sqrt@q 00C7  
                                sqrt@x 00CB                                  sqrt@y 00B6  
                                sqrt@z 00C2                                  status 000FD8  
                       __CFG_HFOFST$ON 000000                           Accel_Get@raw 0095  
                         Accel_Get@out 008D                         __CFG_PBADEN$ON 000000  
                          exp@exponent 009E                       __end_of_CloseI2C 2E76  
                          ldexp@newexp 0092                            ?_Accel_Init 0001  
                      __initialization 2CB4                            log@exponent 0092  
                         __end_of_acos 2996                           __end_of_fabs 2CB4  
                         __end_of_atan 1506                           __end_of_asin 0DC4  
                         __end_of_main 2C78                           __end_of_sqrt 172E  
                               ??_acos 002C                                 ??_fabs 0028  
                     gyros@Gyros_Angle 0150                                 ??_atan 002C  
                               ??_asin 002C                                 ??_main 00DF  
                    ?_EESequentialRead 0023                                 ??_sqrt 00BA  
                        __activetblptr 000001                     ??_EESequentialRead 0027  
                               ?_floor 006F                                 ?_ldexp 008E  
                               ?_frexp 0020                       __end_of___altofl 2B6A  
                     __end_of___flpack 238E                       __end_of_WriteI2C 2A60  
                     __end_of___awtofl 2BF6                       __end_of___lltofl 2D7A  
                          OpenI2C@slew 0020                         __CFG_WDTEN$OFF 000000  
                            ??_IdleI2C 0020                                 _SPBRGH 000FB0  
                               _SSPADD 000FC8                                 _SSPBUF 000FC9  
                            ??_ReadI2C 0020                             _Gyros_Init 279C  
                            ??_OpenI2C 0021                        ??_Accel_StandBy 002C  
                       __CFG_XINST$OFF 000000                     __size_of_OpenUSART 0072  
            Accel_ReadRegisters@length 002A                                 ___flge 2572  
                            ??___fladd 002B                                 ___wmul 2DA4  
                            ??___fldiv 002C                              ??___flneg 0024  
                       __CFG_STVREN$ON 000000                   __size_of_EEByteWrite 00AA  
                            ??___flmul 002C                              ??___flsub 002C  
                            ??___fltol 0024              Accel_ReadRegisters@status 0061  
                               clear_0 2CBA                                 clear_1 2CC6  
                               clear_2 2CD2                              ??_getsI2C 0023  
                    __end_of_Accel_Get 1B08                                 floor@i 0073  
                               floor@x 006F                           __mediumconst 0000  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8         ??_System_HighPriorityInterrupt 0012  
                  __size_of_Accel_Init 0048                                 sqrt@og 00BE  
                        Accel_Active@c 002C                             ___fladd@f1 0064  
                           ___fladd@f2 0068                             ___flge@ff1 0060  
                           ___flge@ff2 0064                    EEAckPolling@control 0022  
                     __end_ofexp@coeff 0629                       __end_oflog@coeff 064D  
                           ___altofl@c 0060                             ___fldiv@f1 007E  
                           ___fldiv@f2 0082                             ___fldiv@f3 0086  
                           __accesstop 0060                __end_of__initialization 2CD8  
                           ___flneg@f1 0020                             ___flmul@f1 006F  
                           ___flmul@f2 0073                           eval_poly@res 008A  
                        ___rparam_used 000001                             ___flsub@f1 006F  
                           ___flsub@f2 0073                             ___fltol@f1 0020  
                           ___awtofl@c 0060                          Accel_Init@fsr 0065  
                   __size_of_baudUSART 0008                         __pcstackCOMRAM 0001  
                           ___lltofl@c 0060                          __end_of_floor 216C  
                        __end_of_ldexp 204E                          __end_of_frexp 279C  
          __end_of_Accel_ReadRegisters 2D4A                  __size_of_EEAckPolling 0084  
                        ?_Gyros_Update 00DB                              ?_CloseI2C 0001  
                    __end_of_OpenUSART 2924                                ??_floor 002C  
                              ??_ldexp 0094                                ??_frexp 0026  
                           __pbssBANK0 00E0                             __pbssBANK1 0144  
                   __size_of_eval_poly 0112            __size_of_Accel_ReadRegister 002A  
                          ?_Gyros_Init 0001                          Gyros_Update@a 0138  
                         _EEAckPolling 282E                                ?___flge 0060  
                              ?___wmul 0020                              ?___altofl 0060  
                              _BAUDCON 000FB8                              ?___flpack 0020  
                            ?_WriteI2C 0001                              ?___awtofl 0060  
                            ?___lltofl 0060                         ??_Gyros_Update 002C  
          __end_of_Accel_WriteRegister 2E0E                      __end_of_baudUSART 2E72  
                           ??_CloseI2C 0020                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                          _Gyros_Angle 0039                 EESequentialRead@length 0026  
                              _IdleI2C 2E58                          ??_System_Init 0023  
                              _ReadI2C 2DCC                                _OpenI2C 2E0E  
                              __Hparam 0000                                __Lparam 0000  
                         ??_Accel_Init 002D                        __size_of___flge 00E4  
                              ___fladd 1050                                ___fldiv 1DE6  
                              ___flneg 2CE6                                ___flmul 1C82  
                              ___flsub 2A60                                ___fltol 2488  
                      __size_of___wmul 0028                           __psmallconst 0600  
                           ??___altofl 002A                             ??___flpack 0026  
                              __pcinit 2CB4                             ??_WriteI2C 0021  
                           ??___awtofl 002A                      __end_of_eval_poly 227E  
                              __ramtop 0600                             ??___lltofl 002A  
                              _getsI2C 2AC0                                __ptext0 2C38  
                              __ptext1 2BF6                                __ptext2 2E6A  
                              __ptext3 28B2                                __ptext4 2E0E  
                              __ptext5 2E72                                __ptext6 067A  
                              __ptext7 172E                                __ptext8 1B08  
                              __ptext9 0DC4                 Accel_WriteRegister@reg 0026  
                         __size_of_exp 028C                           __size_of_log 017A  
                    _Gyros_Update$2020 011C                      _Gyros_Update$2021 0120  
                    _Gyros_Update$2022 0124                      _Gyros_Update$2023 0128  
                    _Gyros_Update$2024 012C                      _Gyros_Update$2025 0130  
                    _Gyros_Update$2026 0134                      _Gyros_Update$2019 0118  
                  __size_of_Gyros_Init 0092                        atan@val_squared 009B  
                         __size_of_pow 0200                                atan@val 009F  
                              asin@sgn 0100                     __end_of_Accel_Init 2BB2  
                       __pintcode_body 2996                   end_of_initialization 2CD8  
                              exp@sign 00A0              __size_of_EESequentialRead 00FA  
                              int_func 2996                   gyros@Gyros_LastAccel 00E0  
                              pow@sign 00B1                              _RCSTAbits 000FAB  
         ?_System_LowPriorityInterrupt 0001                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                  __end_of_System_Init 2C38                         Accel_Get@f_out 009D  
                      EEByteWrite@data 0023                              _TRISCbits 000F94  
                            _Accel_Get 192E                            ___fldiv@exp 008B  
                          ___flmul@exp 0077                              _TXSTAbits 000FAC  
                        ?_Accel_Active 0001                         Accel_Init@name 0064  
                 __end_of_Gyros_Update 0AA0                          ??_EEByteWrite 0024  
                __end_of_Accel_StandBy 2E42                         __end_of___flge 2656  
                       __end_of___wmul 2DCC                             floor@expon 0077  
                  start_initialization 2CB4                             eval_poly@d 0082  
                           eval_poly@n 0084                             eval_poly@x 007E  
                           ?_Accel_Get 008D                             ldexp@value 008E  
                          __end_of_exp 1050                            __end_of_log 1C82  
                          __end_of_pow 192E                         Accel_StandBy@c 002C  
                     WriteI2C@data_out 0021                      __size_of_CloseI2C 0004  
                           frexp@value 0020                              _OpenUSART 28B2  
                       ??_Accel_Active 002C                           ??_Gyros_Init 0020  
                          _System_Init 2BF6                              _Gyros_Vel 0144  
                             ??___flge 0028   __end_of_System_HighPriorityInterrupt 29FC  
__size_of_System_HighPriorityInterrupt 29F4           _System_HighPriorityInterrupt 0008  
                             ??___wmul 0024                       __CFG_LPT1OSC$OFF 000000  
                  __end_of_EEByteWrite 2700                      __size_of___altofl 0052  
                    __size_of___flpack 0110                      __size_of_WriteI2C 0064  
                    __size_of___awtofl 0044                              _acos$2027 00D7  
                    __size_of___lltofl 0030           __size_of_Accel_ReadRegisters 0032  
                          __pbssCOMRAM 002D                     __end_of_Gyros_Init 282E  
                        __pcstackBANK0 0060                          __pcstackBANK1 0100  
 __size_of_System_LowPriorityInterrupt 008A             __end_of_Accel_ReadRegister 2DA4  
                            _baudUSART 2E6A                               ?_IdleI2C 0001  
                     _EESequentialRead 238E                             ?_OpenUSART 0020  
                            _asin$2030 010C                              _asin$2031 0108  
                            _asin$2028 0104                              _asin$2029 0114  
                       Gyros_Update@dt 00DB                               ?_ReadI2C 0001  
                             ?_OpenI2C 0020                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                               ?___fladd 0064  
                             ?___fldiv 007E                               ?___flneg 0020  
                             ?___flmul 006F                               ?___flsub 006F  
                             ?___fltol 0020          ?_System_HighPriorityInterrupt 0001  
                          __pintcodelo 0018                               ?_getsI2C 0020  
                EESequentialRead@rdptr 0024                            __smallconst 0600  
                            _eval_poly 216C                            ??_Accel_Get 008F  
             Accel_WriteRegister@value 0025                         __size_of_floor 011E  
                       __size_of_ldexp 0132                         __size_of_frexp 009C  
                           ?_baudUSART 0001           __size_of_Accel_WriteRegister 0020  
                __size_of_Gyros_Update 0426                         ___wmul@product 0024  
                             _LATCbits 000F8B                              atan@recip 009A  
                             _PIE1bits 000F9D                            _EEByteWrite 2656  
                             _PIR1bits 000F9E                               _PIR2bits 000FA1  
                     __CFG_WDTPS$32768 000000                EESequentialRead@address 0023  
              EESequentialRead@control 0027                      ___wmul@multiplier 0020  
                 __end_of_Accel_Active 2E58                             ?_eval_poly 007E  
                         _Gyros_Update 067A                    __end_ofatan@coeff_a 0665  
                  __end_ofatan@coeff_b 0679                               _CloseI2C 2E72  
                           Accel_Get@i 009F                       OpenI2C@sync_mode 0021  
                          ??_OpenUSART 0022                       __size_of_IdleI2C 0012  
                      OpenUSART@config 0022                              frexp@eptr 0024  
                     __size_of_ReadI2C 0022                               __Hrparam 0000  
                     __size_of_OpenI2C 001E                               __Lrparam 0000  
                         __Lsmallconst 0600                     __CFG_BOREN$SBORDIS 000000  
                     __size_of___fladd 0260                       __size_of___fldiv 0136  
                     __size_of___flneg 0032                       __size_of___flmul 0164  
                        getsI2C@length 0022                       __size_of___flsub 0060  
                     __size_of___fltol 00EA                               ___altofl 2B18  
                             ___flpack 227E                               _WriteI2C 29FC  
                             ___awtofl 2BB2                               ___lltofl 2D4A  
                     __size_of_getsI2C 0058                               _exp$2034 009A  
                             __ptext10 1F1C                               __ptext11 204E  
                             __ptext20 12B0                               __ptext12 2700  
                             __ptext21 2C78                               __ptext13 2488  
                             __ptext30 2BB2                               __ptext22 2CE6  
                             __ptext14 2B18                               __ptext31 227E  
                             __ptext23 216C                               __ptext15 2D4A  
                             __ptext40 2D18                               __ptext32 279C  
                             __ptext24 1C82                               __ptext16 2924  
                             __ptext41 238E                               __ptext33 2B6A  
                             __ptext25 1050                               __ptext17 0AA0  
                             __ptext42 2AC0                               __ptext34 2E2C  
                             __ptext26 2572                               __ptext18 1506  
                             __ptext43 2DCC                               __ptext35 2E42  
                             __ptext27 192E                               __ptext19 2A60  
                             __ptext44 29FC                               __ptext36 2DEE  
                             __ptext28 2DA4                               __ptext45 2E58  
                             __ptext37 2656                               __ptext29 1DE6  
                             __ptext38 282E                               __ptext39 2D7A  
                             _pow$2032 00A9                               _pow$2033 00AD  
                          ??_baudUSART 0020                          __size_of_acos 0072  
                        __size_of_fabs 003C                          __size_of_atan 0256  
                        __size_of_asin 0324                          __size_of_main 0040  
                        __size_of_sqrt 0228                           ?_System_Init 0001  
                  _Accel_ReadRegisters 2D18                          ?_EEAckPolling 0001  
             __end_of_EESequentialRead 2488                            atan@coeff_a 064D  
                          atan@coeff_b 0665                               exp@coeff 0601  
                ___flmul@f3_as_product 0078                               log@coeff 0629  
                 ?_Accel_ReadRegisters 0028                            ??_eval_poly 0086  
                       OpenUSART@spbrg 0020                           getsI2C@rdptr 0020  
               __size_of_Accel_StandBy 0016                               intlevel1 0000  
                             intlevel2 0000                         ??_EEAckPolling 0022  
                           _OSCCONbits 000FD3                     _Accel_ReadRegister 2D7A  
  __end_of_System_LowPriorityInterrupt 00A2            _System_LowPriorityInterrupt 0018  
                   EEByteWrite@address 0022                  __size_of_Accel_Active 0016  
                  _Accel_WriteRegister 2DEE                    ?_Accel_ReadRegister 0001  
                   EEByteWrite@control 0024          ??_System_LowPriorityInterrupt 0001  
                ??_Accel_ReadRegisters 002C                            _SSPCON1bits 000FC6  
                          _SSPCON2bits 000FC5                        Accel_Get@gCount 009B  
                 ?_Accel_WriteRegister 0025                   ??_Accel_ReadRegister 002C  
                         ___fladd@exp1 006E                           ___fladd@exp2 006D  
                         ___fladd@sign 006C                      __CFG_FOSC$INTIO67 000000  
                         _Accel_Active 2E42                           ?_EEByteWrite 0022  
                           _Accel_Init 2B6A              Accel_WriteRegister@status 0027  
