

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Dec 05 15:46:30 2018

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    63                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    64  0000                     
    65                           	psect	smallconst
    66  000600                     __psmallconst:
    67                           	opt stack 0
    68  000600  00                 	db	0
    69  000601                     exp@coeff:
    70                           	opt stack 0
    71  000601  0000               	dw	0
    72  000603  3F80               	dw	16256
    73  000605  7218               	dw	29208
    74  000607  3F31               	dw	16177
    75  000609  FDF0               	dw	65008
    76  00060B  3E75               	dw	15989
    77  00060D  5847               	dw	22599
    78  00060F  3D63               	dw	15715
    79  000611  9558               	dw	38232
    80  000613  3C1D               	dw	15389
    81  000615  C482               	dw	50306
    82  000617  3AAE               	dw	15022
    83  000619  78A8               	dw	30888
    84  00061B  3921               	dw	14625
    85  00061D  93EF               	dw	37871
    86  00061F  3780               	dw	14208
    87  000621  92A0               	dw	37536
    88  000623  35A7               	dw	13735
    89  000625  5646               	dw	22086
    90  000627  3415               	dw	13333
    91  000629                     __end_ofexp@coeff:
    92                           	opt stack 0
    93  000629                     log@coeff:
    94                           	opt stack 0
    95  000629  0000               	dw	0
    96  00062B  0000               	dw	0
    97  00062D  FFC4               	dw	65476
    98  00062F  3F7F               	dw	16255
    99  000631  EF80               	dw	61312
   100  000633  BEFF               	dw	48895
   101  000635  E190               	dw	57744
   102  000637  3EA9               	dw	16041
   103  000639  82EC               	dw	33516
   104  00063B  BE76               	dw	48758
   105  00063D  AD82               	dw	44418
   106  00063F  3E2B               	dw	15915
   107  000641  3C0E               	dw	15374
   108  000643  BDC3               	dw	48579
   109  000645  D187               	dw	53639
   110  000647  3D13               	dw	15635
   111  000649  7841               	dw	30785
   112  00064B  BBD3               	dw	48083
   113  00064D                     __end_oflog@coeff:
   114                           	opt stack 0
   115  00064D                     atan@coeff_a:
   116                           	opt stack 0
   117  00064D  3C06               	dw	15366
   118  00064F  4204               	dw	16900
   119  000651  9F7D               	dw	40829
   120  000653  426A               	dw	17002
   121  000655  905C               	dw	36956
   122  000657  4201               	dw	16897
   123  000659  4D60               	dw	19808
   124  00065B  40BB               	dw	16571
   125  00065D  EC51               	dw	60497
   126  00065F  3E47               	dw	15943
   127  000661  8DDE               	dw	36318
   128  000663  BB1F               	dw	47903
   129  000665                     __end_ofatan@coeff_a:
   130                           	opt stack 0
   131  000665                     atan@coeff_b:
   132                           	opt stack 0
   133  000665  3C06               	dw	15366
   134  000667  4204               	dw	16900
   135  000669  59C0               	dw	22976
   136  00066B  428B               	dw	17035
   137  00066D  0474               	dw	1140
   138  00066F  4244               	dw	16964
   139  000671  9BF9               	dw	39929
   140  000673  414F               	dw	16719
   141  000675  0000               	dw	0
   142  000677  3F80               	dw	16256
   143  000679                     __end_ofatan@coeff_b:
   144                           	opt stack 0
   145  0000                     _LATCbits	set	3979
   146  0000                     _TRISCbits	set	3988
   147  0000                     _BAUDCON	set	4024
   148  0000                     _OSCCONbits	set	4051
   149  0000                     _PIE1	set	3997
   150  0000                     _PIE1bits	set	3997
   151  0000                     _PIR1bits	set	3998
   152  0000                     _PIR2bits	set	4001
   153  0000                     _RCSTA	set	4011
   154  0000                     _RCSTAbits	set	4011
   155  0000                     _SPBRG	set	4015
   156  0000                     _SPBRGH	set	4016
   157  0000                     _SSPADD	set	4040
   158  0000                     _SSPBUF	set	4041
   159  0000                     _SSPCON1	set	4038
   160  0000                     _SSPCON1bits	set	4038
   161  0000                     _SSPCON2	set	4037
   162  0000                     _SSPCON2bits	set	4037
   163  0000                     _SSPSTAT	set	4039
   164  0000                     _SSPSTATbits	set	4039
   165  0000                     _TXSTA	set	4012
   166  0000                     _TXSTAbits	set	4012
   167                           
   168                           ; #config settings
   169  000679  00                 	db	0	; dummy byte at the end
   170  0000                     
   171                           	psect	cinit
   172  002D56                     __pcinit:
   173                           	opt stack 0
   174  002D56                     start_initialization:
   175                           	opt stack 0
   176  002D56                     __initialization:
   177                           	opt stack 0
   178                           
   179                           ; Clear objects allocated to BANK1 (20 bytes)
   180  002D56  EE01  F044         	lfsr	0,__pbssBANK1
   181  002D5A  0E14               	movlw	20
   182  002D5C                     clear_0:
   183  002D5C  6AEE               	clrf	postinc0,c
   184  002D5E  06E8               	decf	wreg,f,c
   185  002D60  E1FD               	bnz	clear_0
   186                           
   187                           ; Clear objects allocated to BANK0 (26 bytes)
   188  002D62  EE00  F0E0         	lfsr	0,__pbssBANK0
   189  002D66  0E1A               	movlw	26
   190  002D68                     clear_1:
   191  002D68  6AEE               	clrf	postinc0,c
   192  002D6A  06E8               	decf	wreg,f,c
   193  002D6C  E1FD               	bnz	clear_1
   194                           
   195                           ; Clear objects allocated to COMRAM (20 bytes)
   196  002D6E  EE00  F02D         	lfsr	0,__pbssCOMRAM
   197  002D72  0E14               	movlw	20
   198  002D74                     clear_2:
   199  002D74  6AEE               	clrf	postinc0,c
   200  002D76  06E8               	decf	wreg,f,c
   201  002D78  E1FD               	bnz	clear_2
   202  002D7A                     end_of_initialization:
   203                           	opt stack 0
   204  002D7A                     __end_of__initialization:
   205                           	opt stack 0
   206  002D7A  0E00               	movlw	low (__Lsmallconst shr (0+16))
   207  002D7C  6EF8               	movwf	tblptru,c
   208  002D7E  0E06               	movlw	high __Lsmallconst
   209  002D80  6EF7               	movwf	tblptrh,c
   210  002D82  0100               	movlb	0
   211  002D84  EF6D  F016         	goto	_main	;jump to C main() function
   212                           tblptru	equ	0xFF8
   213                           tblptrh	equ	0xFF7
   214                           postinc0	equ	0xFEE
   215                           wreg	equ	0xFE8
   216                           
   217                           	psect	bssCOMRAM
   218  00002D                     __pbssCOMRAM:
   219                           	opt stack 0
   220  00002D                     	ds	12
   221  000039                     	ds	8
   222                           tblptru	equ	0xFF8
   223                           tblptrh	equ	0xFF7
   224                           postinc0	equ	0xFEE
   225                           wreg	equ	0xFE8
   226                           
   227                           	psect	bssBANK0
   228  0000E0                     __pbssBANK0:
   229                           	opt stack 0
   230  0000E0                     gyros@Gyros_LastAccel:
   231                           	opt stack 0
   232  0000E0                     	ds	12
   233  0000EC                     gyros@Gyros_Vel:
   234                           	opt stack 0
   235  0000EC                     	ds	12
   236  0000F8                     _errno:
   237                           	opt stack 0
   238  0000F8                     	ds	2
   239                           tblptru	equ	0xFF8
   240                           tblptrh	equ	0xFF7
   241                           postinc0	equ	0xFEE
   242                           wreg	equ	0xFE8
   243                           
   244                           	psect	bssBANK1
   245  000144                     __pbssBANK1:
   246                           	opt stack 0
   247  000144                     	ds	12
   248  000150                     gyros@Gyros_Angle:
   249                           	opt stack 0
   250  000150                     	ds	8
   251                           tblptru	equ	0xFF8
   252                           tblptrh	equ	0xFF7
   253                           postinc0	equ	0xFEE
   254                           wreg	equ	0xFE8
   255                           
   256                           	psect	cstackBANK1
   257  000100                     __pcstackBANK1:
   258                           	opt stack 0
   259  000100                     asin@sgn:
   260                           	opt stack 0
   261                           
   262                           ; 4 bytes @ 0x0
   263  000100                     	ds	4
   264  000104                     _asin$2028:
   265                           	opt stack 0
   266                           
   267                           ; 4 bytes @ 0x4
   268  000104                     	ds	4
   269  000108                     _asin$2031:
   270                           	opt stack 0
   271                           
   272                           ; 4 bytes @ 0x8
   273  000108                     	ds	4
   274  00010C                     _asin$2030:
   275                           	opt stack 0
   276                           
   277                           ; 4 bytes @ 0xC
   278  00010C                     	ds	4
   279  000110                     asin@y:
   280                           	opt stack 0
   281                           
   282                           ; 4 bytes @ 0x10
   283  000110                     	ds	4
   284  000114                     _asin$2029:
   285                           	opt stack 0
   286                           
   287                           ; 4 bytes @ 0x14
   288  000114                     	ds	4
   289  000118                     _Gyros_Update$2019:
   290                           	opt stack 0
   291                           
   292                           ; 4 bytes @ 0x18
   293  000118                     	ds	4
   294  00011C                     _Gyros_Update$2020:
   295                           	opt stack 0
   296                           
   297                           ; 4 bytes @ 0x1C
   298  00011C                     	ds	4
   299  000120                     _Gyros_Update$2021:
   300                           	opt stack 0
   301                           
   302                           ; 4 bytes @ 0x20
   303  000120                     	ds	4
   304  000124                     _Gyros_Update$2022:
   305                           	opt stack 0
   306                           
   307                           ; 4 bytes @ 0x24
   308  000124                     	ds	4
   309  000128                     _Gyros_Update$2023:
   310                           	opt stack 0
   311                           
   312                           ; 4 bytes @ 0x28
   313  000128                     	ds	4
   314  00012C                     _Gyros_Update$2024:
   315                           	opt stack 0
   316                           
   317                           ; 4 bytes @ 0x2C
   318  00012C                     	ds	4
   319  000130                     _Gyros_Update$2025:
   320                           	opt stack 0
   321                           
   322                           ; 4 bytes @ 0x30
   323  000130                     	ds	4
   324  000134                     _Gyros_Update$2026:
   325                           	opt stack 0
   326                           
   327                           ; 4 bytes @ 0x34
   328  000134                     	ds	4
   329  000138                     Gyros_Update@a:
   330                           	opt stack 0
   331                           
   332                           ; 12 bytes @ 0x38
   333  000138                     	ds	12
   334                           tblptru	equ	0xFF8
   335                           tblptrh	equ	0xFF7
   336                           postinc0	equ	0xFEE
   337                           wreg	equ	0xFE8
   338                           
   339                           	psect	cstackBANK0
   340  000060                     __pcstackBANK0:
   341                           	opt stack 0
   342  000060                     ?___altofl:
   343                           	opt stack 0
   344  000060                     ?___awtofl:
   345                           	opt stack 0
   346  000060                     ?___lltofl:
   347                           	opt stack 0
   348  000060                     Accel_ReadRegisters@reg:
   349                           	opt stack 0
   350  000060                     ___awtofl@c:
   351                           	opt stack 0
   352  000060                     ___altofl@c:
   353                           	opt stack 0
   354  000060                     ___flge@ff1:
   355                           	opt stack 0
   356  000060                     ___lltofl@c:
   357                           	opt stack 0
   358                           
   359                           ; 4 bytes @ 0x0
   360  000060                     	ds	1
   361  000061                     Accel_ReadRegisters@status:
   362                           	opt stack 0
   363                           
   364                           ; 1 bytes @ 0x1
   365  000061                     	ds	1
   366  000062                     Accel_ReadRegister@reg:
   367                           	opt stack 0
   368                           
   369                           ; 1 bytes @ 0x2
   370  000062                     	ds	1
   371  000063                     Accel_ReadRegister@out:
   372                           	opt stack 0
   373                           
   374                           ; 1 bytes @ 0x3
   375  000063                     	ds	1
   376  000064                     ?___fladd:
   377                           	opt stack 0
   378  000064                     Accel_Init@name:
   379                           	opt stack 0
   380  000064                     ___fladd@f1:
   381                           	opt stack 0
   382  000064                     ___flge@ff2:
   383                           	opt stack 0
   384                           
   385                           ; 4 bytes @ 0x4
   386  000064                     	ds	1
   387  000065                     Accel_Init@fsr:
   388                           	opt stack 0
   389                           
   390                           ; 1 bytes @ 0x5
   391  000065                     	ds	3
   392  000068                     ___fladd@f2:
   393                           	opt stack 0
   394                           
   395                           ; 4 bytes @ 0x8
   396  000068                     	ds	4
   397  00006C                     ___fladd@sign:
   398                           	opt stack 0
   399                           
   400                           ; 1 bytes @ 0xC
   401  00006C                     	ds	1
   402  00006D                     ___fladd@exp2:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0xD
   406  00006D                     	ds	1
   407  00006E                     ___fladd@exp1:
   408                           	opt stack 0
   409                           
   410                           ; 1 bytes @ 0xE
   411  00006E                     	ds	1
   412  00006F                     ?___flmul:
   413                           	opt stack 0
   414  00006F                     ?___flsub:
   415                           	opt stack 0
   416  00006F                     ?_floor:
   417                           	opt stack 0
   418  00006F                     ___flmul@f1:
   419                           	opt stack 0
   420  00006F                     ___flsub@f1:
   421                           	opt stack 0
   422  00006F                     floor@x:
   423                           	opt stack 0
   424                           
   425                           ; 4 bytes @ 0xF
   426  00006F                     	ds	4
   427  000073                     ___flmul@f2:
   428                           	opt stack 0
   429  000073                     ___flsub@f2:
   430                           	opt stack 0
   431  000073                     floor@i:
   432                           	opt stack 0
   433                           
   434                           ; 4 bytes @ 0x13
   435  000073                     	ds	4
   436  000077                     ___flmul@exp:
   437                           	opt stack 0
   438  000077                     floor@expon:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0x17
   442  000077                     	ds	1
   443  000078                     ___flmul@f3_as_product:
   444                           	opt stack 0
   445                           
   446                           ; 4 bytes @ 0x18
   447  000078                     	ds	4
   448  00007C                     ___flmul@cntr:
   449                           	opt stack 0
   450                           
   451                           ; 1 bytes @ 0x1C
   452  00007C                     	ds	1
   453  00007D                     ___flmul@sign:
   454                           	opt stack 0
   455                           
   456                           ; 1 bytes @ 0x1D
   457  00007D                     	ds	1
   458  00007E                     ?___fldiv:
   459                           	opt stack 0
   460  00007E                     ?_eval_poly:
   461                           	opt stack 0
   462  00007E                     eval_poly@x:
   463                           	opt stack 0
   464  00007E                     ___fldiv@f1:
   465                           	opt stack 0
   466                           
   467                           ; 4 bytes @ 0x1E
   468  00007E                     	ds	4
   469  000082                     eval_poly@d:
   470                           	opt stack 0
   471  000082                     ___fldiv@f2:
   472                           	opt stack 0
   473                           
   474                           ; 4 bytes @ 0x22
   475  000082                     	ds	2
   476  000084                     eval_poly@n:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x24
   480  000084                     	ds	2
   481  000086                     ??_eval_poly:
   482  000086                     ___fldiv@f3:
   483                           	opt stack 0
   484                           
   485                           ; 4 bytes @ 0x26
   486  000086                     	ds	4
   487  00008A                     ___fldiv@cntr:
   488                           	opt stack 0
   489  00008A                     eval_poly@res:
   490                           	opt stack 0
   491                           
   492                           ; 4 bytes @ 0x2A
   493  00008A                     	ds	1
   494  00008B                     ___fldiv@exp:
   495                           	opt stack 0
   496                           
   497                           ; 1 bytes @ 0x2B
   498  00008B                     	ds	1
   499  00008C                     ___fldiv@sign:
   500                           	opt stack 0
   501                           
   502                           ; 1 bytes @ 0x2C
   503  00008C                     	ds	1
   504  00008D                     Accel_Get@out:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0x2D
   508  00008D                     	ds	1
   509  00008E                     ?_atan:
   510                           	opt stack 0
   511  00008E                     ?_log:
   512                           	opt stack 0
   513  00008E                     ?_ldexp:
   514                           	opt stack 0
   515  00008E                     atan@f:
   516                           	opt stack 0
   517  00008E                     ldexp@value:
   518                           	opt stack 0
   519  00008E                     log@x:
   520                           	opt stack 0
   521                           
   522                           ; 4 bytes @ 0x2E
   523  00008E                     	ds	1
   524  00008F                     ??_Accel_Get:
   525                           
   526                           ; 0 bytes @ 0x2F
   527  00008F                     	ds	3
   528  000092                     ldexp@newexp:
   529                           	opt stack 0
   530  000092                     log@exponent:
   531                           	opt stack 0
   532  000092                     atan@y:
   533                           	opt stack 0
   534                           
   535                           ; 4 bytes @ 0x32
   536  000092                     	ds	2
   537  000094                     ??_ldexp:
   538                           
   539                           ; 0 bytes @ 0x34
   540  000094                     	ds	1
   541  000095                     Accel_Get@raw:
   542                           	opt stack 0
   543                           
   544                           ; 6 bytes @ 0x35
   545  000095                     	ds	1
   546  000096                     ?_exp:
   547                           	opt stack 0
   548  000096                     atan@x:
   549                           	opt stack 0
   550  000096                     exp@x:
   551                           	opt stack 0
   552                           
   553                           ; 4 bytes @ 0x36
   554  000096                     	ds	4
   555  00009A                     atan@recip:
   556                           	opt stack 0
   557  00009A                     _exp$2034:
   558                           	opt stack 0
   559                           
   560                           ; 4 bytes @ 0x3A
   561  00009A                     	ds	1
   562  00009B                     Accel_Get@gCount:
   563                           	opt stack 0
   564  00009B                     atan@val_squared:
   565                           	opt stack 0
   566                           
   567                           ; 4 bytes @ 0x3B
   568  00009B                     	ds	2
   569  00009D                     Accel_Get@f_out:
   570                           	opt stack 0
   571                           
   572                           ; 2 bytes @ 0x3D
   573  00009D                     	ds	1
   574  00009E                     exp@exponent:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x3E
   578  00009E                     	ds	1
   579  00009F                     Accel_Get@i:
   580                           	opt stack 0
   581  00009F                     atan@val:
   582                           	opt stack 0
   583                           
   584                           ; 4 bytes @ 0x3F
   585  00009F                     	ds	1
   586  0000A0                     exp@sign:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0x40
   590  0000A0                     	ds	1
   591  0000A1                     ?_pow:
   592                           	opt stack 0
   593  0000A1                     pow@x:
   594                           	opt stack 0
   595                           
   596                           ; 4 bytes @ 0x41
   597  0000A1                     	ds	4
   598  0000A5                     pow@y:
   599                           	opt stack 0
   600                           
   601                           ; 4 bytes @ 0x45
   602  0000A5                     	ds	4
   603  0000A9                     _pow$2032:
   604                           	opt stack 0
   605                           
   606                           ; 4 bytes @ 0x49
   607  0000A9                     	ds	4
   608  0000AD                     _pow$2033:
   609                           	opt stack 0
   610                           
   611                           ; 4 bytes @ 0x4D
   612  0000AD                     	ds	4
   613  0000B1                     pow@sign:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0x51
   617  0000B1                     	ds	1
   618  0000B2                     pow@yi:
   619                           	opt stack 0
   620                           
   621                           ; 4 bytes @ 0x52
   622  0000B2                     	ds	4
   623  0000B6                     ?_sqrt:
   624                           	opt stack 0
   625  0000B6                     sqrt@y:
   626                           	opt stack 0
   627                           
   628                           ; 4 bytes @ 0x56
   629  0000B6                     	ds	4
   630  0000BA                     ??_sqrt:
   631                           
   632                           ; 0 bytes @ 0x5A
   633  0000BA                     	ds	4
   634  0000BE                     sqrt@og:
   635                           	opt stack 0
   636                           
   637                           ; 4 bytes @ 0x5E
   638  0000BE                     	ds	4
   639  0000C2                     sqrt@z:
   640                           	opt stack 0
   641                           
   642                           ; 4 bytes @ 0x62
   643  0000C2                     	ds	4
   644  0000C6                     sqrt@i:
   645                           	opt stack 0
   646                           
   647                           ; 1 bytes @ 0x66
   648  0000C6                     	ds	1
   649  0000C7                     sqrt@q:
   650                           	opt stack 0
   651                           
   652                           ; 4 bytes @ 0x67
   653  0000C7                     	ds	4
   654  0000CB                     sqrt@x:
   655                           	opt stack 0
   656                           
   657                           ; 4 bytes @ 0x6B
   658  0000CB                     	ds	4
   659  0000CF                     ?_asin:
   660                           	opt stack 0
   661  0000CF                     asin@x:
   662                           	opt stack 0
   663                           
   664                           ; 4 bytes @ 0x6F
   665  0000CF                     	ds	4
   666  0000D3                     ?_acos:
   667                           	opt stack 0
   668  0000D3                     acos@x:
   669                           	opt stack 0
   670                           
   671                           ; 4 bytes @ 0x73
   672  0000D3                     	ds	4
   673  0000D7                     _acos$2027:
   674                           	opt stack 0
   675                           
   676                           ; 4 bytes @ 0x77
   677  0000D7                     	ds	4
   678  0000DB                     Gyros_Update@dt:
   679                           	opt stack 0
   680                           
   681                           ; 4 bytes @ 0x7B
   682  0000DB                     	ds	4
   683  0000DF                     ??_main:
   684                           
   685                           ; 0 bytes @ 0x7F
   686  0000DF                     	ds	1
   687                           tblptru	equ	0xFF8
   688                           tblptrh	equ	0xFF7
   689                           postinc0	equ	0xFEE
   690                           wreg	equ	0xFE8
   691                           
   692                           	psect	cstackCOMRAM
   693  000001                     __pcstackCOMRAM:
   694                           	opt stack 0
   695  000001                     ??_System_LowPriorityInterrupt:
   696  000001                     
   697                           ; 1 bytes @ 0x0
   698  000001                     	ds	17
   699  000012                     ??_System_HighPriorityInterrupt:
   700                           
   701                           ; 0 bytes @ 0x11
   702  000012                     	ds	14
   703  000020                     ??_IdleI2C:
   704  000020                     ?___wmul:
   705                           	opt stack 0
   706  000020                     ?___flpack:
   707                           	opt stack 0
   708  000020                     ?_frexp:
   709                           	opt stack 0
   710  000020                     ?___flneg:
   711                           	opt stack 0
   712  000020                     ?___fltol:
   713                           	opt stack 0
   714  000020                     baudUSART@baudconfig:
   715                           	opt stack 0
   716  000020                     OpenI2C@slew:
   717                           	opt stack 0
   718  000020                     OpenUSART@spbrg:
   719                           	opt stack 0
   720  000020                     getsI2C@rdptr:
   721                           	opt stack 0
   722  000020                     ___wmul@multiplier:
   723                           	opt stack 0
   724  000020                     ___flpack@arg:
   725                           	opt stack 0
   726  000020                     ___flneg@f1:
   727                           	opt stack 0
   728  000020                     ___fltol@f1:
   729                           	opt stack 0
   730  000020                     frexp@value:
   731                           	opt stack 0
   732                           
   733                           ; 4 bytes @ 0x1F
   734  000020                     	ds	1
   735  000021                     OpenI2C@sync_mode:
   736                           	opt stack 0
   737  000021                     WriteI2C@data_out:
   738                           	opt stack 0
   739                           
   740                           ; 1 bytes @ 0x20
   741  000021                     	ds	1
   742  000022                     OpenUSART@config:
   743                           	opt stack 0
   744  000022                     EEAckPolling@control:
   745                           	opt stack 0
   746  000022                     EEByteWrite@address:
   747                           	opt stack 0
   748  000022                     getsI2C@length:
   749                           	opt stack 0
   750  000022                     ___wmul@multiplicand:
   751                           	opt stack 0
   752                           
   753                           ; 2 bytes @ 0x21
   754  000022                     	ds	1
   755  000023                     EEByteWrite@data:
   756                           	opt stack 0
   757  000023                     EESequentialRead@address:
   758                           	opt stack 0
   759                           
   760                           ; 1 bytes @ 0x22
   761  000023                     	ds	1
   762  000024                     ??___fltol:
   763  000024                     ?_fabs:
   764                           	opt stack 0
   765  000024                     EEByteWrite@control:
   766                           	opt stack 0
   767  000024                     ___flpack@exp:
   768                           	opt stack 0
   769  000024                     EESequentialRead@rdptr:
   770                           	opt stack 0
   771  000024                     ___wmul@product:
   772                           	opt stack 0
   773  000024                     frexp@eptr:
   774                           	opt stack 0
   775  000024                     fabs@d:
   776                           	opt stack 0
   777                           
   778                           ; 4 bytes @ 0x23
   779  000024                     	ds	1
   780  000025                     Accel_WriteRegister@value:
   781                           	opt stack 0
   782  000025                     ___flpack@sign:
   783                           	opt stack 0
   784                           
   785                           ; 1 bytes @ 0x24
   786  000025                     	ds	1
   787  000026                     ??___flpack:
   788  000026                     ??_frexp:
   789  000026                     Accel_WriteRegister@reg:
   790                           	opt stack 0
   791  000026                     EESequentialRead@length:
   792                           	opt stack 0
   793                           
   794                           ; 1 bytes @ 0x25
   795  000026                     	ds	1
   796  000027                     Accel_WriteRegister@status:
   797                           	opt stack 0
   798  000027                     EESequentialRead@control:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0x26
   802  000027                     	ds	1
   803  000028                     ??___flge:
   804  000028                     ___fltol@sign1:
   805                           	opt stack 0
   806  000028                     Accel_ReadRegisters@out:
   807                           	opt stack 0
   808                           
   809                           ; 2 bytes @ 0x27
   810  000028                     	ds	1
   811  000029                     ___fltol@exp1:
   812                           	opt stack 0
   813                           
   814                           ; 1 bytes @ 0x28
   815  000029                     	ds	1
   816  00002A                     ___altofl@sign:
   817                           	opt stack 0
   818  00002A                     ___awtofl@sign:
   819                           	opt stack 0
   820  00002A                     Accel_ReadRegisters@length:
   821                           	opt stack 0
   822                           
   823                           ; 2 bytes @ 0x29
   824  00002A                     	ds	1
   825  00002B                     ??___fladd:
   826                           
   827                           ; 0 bytes @ 0x2A
   828  00002B                     	ds	1
   829  00002C                     Accel_StandBy@c:
   830                           	opt stack 0
   831  00002C                     Accel_Active@c:
   832                           	opt stack 0
   833                           
   834                           ; 1 bytes @ 0x2B
   835  00002C                     	ds	1
   836  00002D                     tblptru	equ	0xFF8
   837                           tblptrh	equ	0xFF7
   838                           postinc0	equ	0xFEE
   839                           wreg	equ	0xFE8
   840                           
   841                           ; 0 bytes @ 0x2C
   842 ;;
   843 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   844 ;;
   845 ;; *************** function _main *****************
   846 ;; Defined at:
   847 ;;		line 67 in file "main.c"
   848 ;; Parameters:    Size  Location     Type
   849 ;;		None
   850 ;; Auto vars:     Size  Location     Type
   851 ;;		None
   852 ;; Return value:  Size  Location     Type
   853 ;;		None               void
   854 ;; Registers used:
   855 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   856 ;; Tracked objects:
   857 ;;		On entry : 0/0
   858 ;;		On exit  : 0/0
   859 ;;		Unchanged: 0/0
   860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   861 ;;      Params:         0       0       0       0       0       0       0
   862 ;;      Locals:         0       0       0       0       0       0       0
   863 ;;      Temps:          0       1       0       0       0       0       0
   864 ;;      Totals:         0       1       0       0       0       0       0
   865 ;;Total ram usage:        1 bytes
   866 ;; Hardware stack levels required when called:    9
   867 ;; This function calls:
   868 ;;		_Accel_Init
   869 ;;		_Gyros_Init
   870 ;;		_Gyros_Update
   871 ;;		_System_Init
   872 ;; This function is called by:
   873 ;;		Startup code after reset
   874 ;; This function uses a non-reentrant model
   875 ;;
   876                           
   877                           	psect	text0
   878  002CDA                     __ptext0:
   879                           	opt stack 0
   880  002CDA                     _main:
   881                           	opt stack 22
   882                           
   883                           ;main.c: 68: System_Init();
   884                           
   885                           ;incstack = 0
   886  002CDA  EC4C  F016         	call	_System_Init	;wreg free
   887                           
   888                           ;main.c: 70: LATCbits.LATC0 = 0;
   889  002CDE  908B               	bcf	3979,0,c	;volatile
   890                           
   891                           ;main.c: 71: Accel_Init();
   892  002CE0  EC06  F016         	call	_Accel_Init	;wreg free
   893                           
   894                           ;main.c: 72: Gyros_Init();
   895  002CE4  EC1F  F014         	call	_Gyros_Init	;wreg free
   896                           
   897                           ;main.c: 73: LATCbits.LATC0 = 1;
   898  002CE8  808B               	bsf	3979,0,c	;volatile
   899  002CEA  D000               	goto	l4167
   900  002CEC                     l4167:
   901                           
   902                           ;main.c: 76: LATCbits.LATC0 = ~LATCbits.LATC0;
   903  002CEC  708B               	btg	3979,0,c	;volatile
   904                           
   905                           ;main.c: 77: Gyros_Update(1.0f);
   906  002CEE  0E00               	movlw	0
   907  002CF0  0100               	movlb	0	; () banked
   908  002CF2  6FDB               	movwf	Gyros_Update@dt& (0+255),b
   909  002CF4  0E00               	movlw	0
   910  002CF6  6FDC               	movwf	(Gyros_Update@dt+1)& (0+255),b
   911  002CF8  0E80               	movlw	128
   912  002CFA  6FDD               	movwf	(Gyros_Update@dt+2)& (0+255),b
   913  002CFC  0E3F               	movlw	63
   914  002CFE  6FDE               	movwf	(Gyros_Update@dt+3)& (0+255),b
   915  002D00  EC3D  F003         	call	_Gyros_Update	;wreg free
   916                           
   917                           ;main.c: 78: _delay((unsigned long)((500)*(16000000/4000000.0)));
   918  002D04  0E03               	movlw	3
   919  002D06  0100               	movlb	0	; () banked
   920  002D08  6FDF               	movwf	??_main& (0+255),b
   921  002D0A  0E98               	movlw	152
   922  002D0C                     u5247:
   923  002D0C  2EE8               	decfsz	wreg,f,c
   924  002D0E  D7FE               	goto	u5247
   925  002D10  2FDF               	decfsz	??_main& (0+255),f,b
   926  002D12  D7FC               	goto	u5247
   927  002D14  D7EB               	goto	l4167
   928  002D16  EF51  F000         	goto	start
   929  002D1A                     __end_of_main:
   930                           	opt stack 0
   931                           tblptru	equ	0xFF8
   932                           tblptrh	equ	0xFF7
   933                           postinc0	equ	0xFEE
   934                           wreg	equ	0xFE8
   935                           
   936 ;; *************** function _System_Init *****************
   937 ;; Defined at:
   938 ;;		line 13 in file "system.c"
   939 ;; Parameters:    Size  Location     Type
   940 ;;		None
   941 ;; Auto vars:     Size  Location     Type
   942 ;;		None
   943 ;; Return value:  Size  Location     Type
   944 ;;		None               void
   945 ;; Registers used:
   946 ;;		wreg, status,2, status,0, cstack
   947 ;; Tracked objects:
   948 ;;		On entry : 0/0
   949 ;;		On exit  : 0/0
   950 ;;		Unchanged: 0/0
   951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   952 ;;      Params:         0       0       0       0       0       0       0
   953 ;;      Locals:         0       0       0       0       0       0       0
   954 ;;      Temps:          0       0       0       0       0       0       0
   955 ;;      Totals:         0       0       0       0       0       0       0
   956 ;;Total ram usage:        0 bytes
   957 ;; Hardware stack levels used:    1
   958 ;; Hardware stack levels required when called:    3
   959 ;; This function calls:
   960 ;;		_CloseI2C
   961 ;;		_OpenI2C
   962 ;;		_OpenUSART
   963 ;;		_baudUSART
   964 ;; This function is called by:
   965 ;;		_main
   966 ;; This function uses a non-reentrant model
   967 ;;
   968                           
   969                           	psect	text1
   970  002C98                     __ptext1:
   971                           	opt stack 0
   972  002C98                     _System_Init:
   973                           	opt stack 27
   974                           
   975                           ;system.c: 15: OSCCONbits.SCS = 0b11;
   976                           
   977                           ;incstack = 0
   978  002C98  0E03               	movlw	3
   979  002C9A  12D3               	iorwf	4051,f,c	;volatile
   980                           
   981                           ;system.c: 16: OSCCONbits.IRCF = 0b111;
   982  002C9C  88D3               	bsf	4051,4,c	;volatile
   983  002C9E  8AD3               	bsf	4051,5,c	;volatile
   984  002CA0  8CD3               	bsf	4051,6,c	;volatile
   985                           
   986                           ;system.c: 17: TRISCbits.RC0 = 0;
   987  002CA2  9094               	bcf	3988,0,c	;volatile
   988                           
   989                           ;system.c: 18: LATCbits.LATC0 = 0;
   990  002CA4  908B               	bcf	3979,0,c	;volatile
   991                           
   992                           ;system.c: 21: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
   993  002CA6  0E4F               	movlw	79
   994  002CA8  16AB               	andwf	4011,f,c	;volatile
   995  002CAA  9AAC               	bcf	4012,5,c	;volatile
   996  002CAC  0ECF               	movlw	207
   997  002CAE  169D               	andwf	3997,f,c	;volatile
   998                           
   999                           ;system.c: 22: OpenUSART(0b00000000 | 0b00000000 | 0b00000000
  1000                           ;system.c: 23: | 0b00000000 | 0b00001000 | 0b00000000, 51);
  1001  002CB0  0E00               	movlw	0
  1002  002CB2  6E21               	movwf	OpenUSART@spbrg+1,c
  1003  002CB4  0E33               	movlw	51
  1004  002CB6  6E20               	movwf	OpenUSART@spbrg,c
  1005  002CB8  0E08               	movlw	8
  1006  002CBA  ECAA  F014         	call	_OpenUSART
  1007                           
  1008                           ;system.c: 24: baudUSART (0b00000000 | 0b00000000);
  1009  002CBE  0E00               	movlw	0
  1010  002CC0  EC86  F017         	call	_baudUSART
  1011                           
  1012                           ;system.c: 27: CloseI2C();
  1013  002CC4  EC8A  F017         	call	_CloseI2C	;wreg free
  1014                           
  1015                           ;system.c: 28: OpenI2C(0b00001000, 0b10000000);
  1016  002CC8  0E80               	movlw	128
  1017  002CCA  6E20               	movwf	OpenI2C@slew,c
  1018  002CCC  0E08               	movlw	8
  1019  002CCE  EC58  F017         	call	_OpenI2C
  1020                           
  1021                           ;system.c: 31: SSPADD = 39;
  1022  002CD2  0E27               	movlw	39
  1023  002CD4  6EC8               	movwf	4040,c	;volatile
  1024                           
  1025                           ;system.c: 34: LATCbits.LATC0 = 1;
  1026  002CD6  808B               	bsf	3979,0,c	;volatile
  1027  002CD8  0012               	return		;funcret
  1028  002CDA                     __end_of_System_Init:
  1029                           	opt stack 0
  1030                           tblptru	equ	0xFF8
  1031                           tblptrh	equ	0xFF7
  1032                           postinc0	equ	0xFEE
  1033                           wreg	equ	0xFE8
  1034                           
  1035 ;; *************** function _baudUSART *****************
  1036 ;; Defined at:
  1037 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\ubaud.c"
  1038 ;; Parameters:    Size  Location     Type
  1039 ;;  baudconfig      1    wreg     unsigned char 
  1040 ;; Auto vars:     Size  Location     Type
  1041 ;;  baudconfig      1   31[COMRAM] unsigned char 
  1042 ;; Return value:  Size  Location     Type
  1043 ;;		None               void
  1044 ;; Registers used:
  1045 ;;		wreg
  1046 ;; Tracked objects:
  1047 ;;		On entry : 0/0
  1048 ;;		On exit  : 0/0
  1049 ;;		Unchanged: 0/0
  1050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1051 ;;      Params:         0       0       0       0       0       0       0
  1052 ;;      Locals:         1       0       0       0       0       0       0
  1053 ;;      Temps:          0       0       0       0       0       0       0
  1054 ;;      Totals:         1       0       0       0       0       0       0
  1055 ;;Total ram usage:        1 bytes
  1056 ;; Hardware stack levels used:    1
  1057 ;; Hardware stack levels required when called:    2
  1058 ;; This function calls:
  1059 ;;		Nothing
  1060 ;; This function is called by:
  1061 ;;		_System_Init
  1062 ;; This function uses a non-reentrant model
  1063 ;;
  1064                           
  1065                           	psect	text2
  1066  002F0C                     __ptext2:
  1067                           	opt stack 0
  1068  002F0C                     _baudUSART:
  1069                           	opt stack 27
  1070                           
  1071                           ;incstack = 0
  1072                           ;baudUSART@baudconfig stored from wreg
  1073  002F0C  6E20               	movwf	baudUSART@baudconfig,c
  1074  002F0E  C020  FFB8         	movff	baudUSART@baudconfig,4024	;volatile
  1075  002F12  0012               	return		;funcret
  1076  002F14                     __end_of_baudUSART:
  1077                           	opt stack 0
  1078                           tblptru	equ	0xFF8
  1079                           tblptrh	equ	0xFF7
  1080                           postinc0	equ	0xFEE
  1081                           wreg	equ	0xFE8
  1082                           
  1083 ;; *************** function _OpenUSART *****************
  1084 ;; Defined at:
  1085 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  1086 ;; Parameters:    Size  Location     Type
  1087 ;;  config          1    wreg     unsigned char 
  1088 ;;  spbrg           2   31[COMRAM] unsigned int 
  1089 ;; Auto vars:     Size  Location     Type
  1090 ;;  config          1   33[COMRAM] unsigned char 
  1091 ;; Return value:  Size  Location     Type
  1092 ;;		None               void
  1093 ;; Registers used:
  1094 ;;		wreg, status,2
  1095 ;; Tracked objects:
  1096 ;;		On entry : 0/0
  1097 ;;		On exit  : 0/0
  1098 ;;		Unchanged: 0/0
  1099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1100 ;;      Params:         2       0       0       0       0       0       0
  1101 ;;      Locals:         1       0       0       0       0       0       0
  1102 ;;      Temps:          0       0       0       0       0       0       0
  1103 ;;      Totals:         3       0       0       0       0       0       0
  1104 ;;Total ram usage:        3 bytes
  1105 ;; Hardware stack levels used:    1
  1106 ;; Hardware stack levels required when called:    2
  1107 ;; This function calls:
  1108 ;;		Nothing
  1109 ;; This function is called by:
  1110 ;;		_System_Init
  1111 ;; This function uses a non-reentrant model
  1112 ;;
  1113                           
  1114                           	psect	text3
  1115  002954                     __ptext3:
  1116                           	opt stack 0
  1117  002954                     _OpenUSART:
  1118                           	opt stack 27
  1119                           
  1120                           ;incstack = 0
  1121                           ;OpenUSART@config stored from wreg
  1122  002954  6E22               	movwf	OpenUSART@config,c
  1123  002956  0E00               	movlw	0
  1124  002958  6EAC               	movwf	4012,c	;volatile
  1125  00295A  0E00               	movlw	0
  1126  00295C  6EAB               	movwf	4011,c	;volatile
  1127  00295E  A022               	btfss	OpenUSART@config,0,c
  1128  002960  D002               	goto	l3017
  1129  002962  88AC               	bsf	4012,4,c	;volatile
  1130  002964  D000               	goto	l3017
  1131  002966                     l3017:
  1132  002966  A222               	btfss	OpenUSART@config,1,c
  1133  002968  D003               	goto	l3021
  1134  00296A  8CAC               	bsf	4012,6,c	;volatile
  1135  00296C  8CAB               	bsf	4011,6,c	;volatile
  1136  00296E  D000               	goto	l3021
  1137  002970                     l3021:
  1138  002970  A422               	btfss	OpenUSART@config,2,c
  1139  002972  D002               	goto	l3025
  1140  002974  8EAC               	bsf	4012,7,c	;volatile
  1141  002976  D000               	goto	l3025
  1142  002978                     l3025:
  1143  002978  A622               	btfss	OpenUSART@config,3,c
  1144  00297A  D002               	goto	l153
  1145  00297C  88AB               	bsf	4011,4,c	;volatile
  1146  00297E  D002               	goto	l3029
  1147  002980                     l153:
  1148  002980  8AAB               	bsf	4011,5,c	;volatile
  1149  002982  D000               	goto	l3029
  1150  002984                     l3029:
  1151  002984  B822               	btfsc	OpenUSART@config,4,c
  1152  002986  84AC               	bsf	4012,2,c	;volatile
  1153  002988  989E               	bcf	3998,4,c	;volatile
  1154  00298A  AA22               	btfss	OpenUSART@config,5,c
  1155  00298C  D002               	goto	l3037
  1156  00298E  86AB               	bsf	4011,3,c	;volatile
  1157  002990  D000               	goto	l3037
  1158  002992                     l3037:
  1159  002992  AC22               	btfss	OpenUSART@config,6,c
  1160  002994  D002               	goto	l157
  1161  002996  8A9D               	bsf	3997,5,c	;volatile
  1162  002998  D001               	goto	l158
  1163  00299A                     l157:
  1164  00299A  9A9D               	bcf	3997,5,c	;volatile
  1165  00299C                     l158:
  1166  00299C  9A9E               	bcf	3998,5,c	;volatile
  1167  00299E  AE22               	btfss	OpenUSART@config,7,c
  1168  0029A0  D002               	goto	l159
  1169  0029A2  889D               	bsf	3997,4,c	;volatile
  1170  0029A4  D001               	goto	l160
  1171  0029A6                     l159:
  1172  0029A6  989D               	bcf	3997,4,c	;volatile
  1173  0029A8                     l160:
  1174  0029A8  C020  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  1175  0029AC  5021               	movf	OpenUSART@spbrg+1,w,c
  1176  0029AE  6EB0               	movwf	4016,c	;volatile
  1177  0029B0  8AAC               	bsf	4012,5,c	;volatile
  1178  0029B2  8EAB               	bsf	4011,7,c	;volatile
  1179  0029B4  9C94               	bcf	3988,6,c	;volatile
  1180  0029B6  8E94               	bsf	3988,7,c	;volatile
  1181  0029B8  A8AC               	btfss	4012,4,c	;volatile
  1182  0029BA  0012               	return	
  1183  0029BC  BEAC               	btfsc	4012,7,c	;volatile
  1184  0029BE  0012               	return	
  1185  0029C0  8C94               	bsf	3988,6,c	;volatile
  1186  0029C2  0012               	return	
  1187  0029C4  0012               	return		;funcret
  1188  0029C6                     __end_of_OpenUSART:
  1189                           	opt stack 0
  1190                           tblptru	equ	0xFF8
  1191                           tblptrh	equ	0xFF7
  1192                           postinc0	equ	0xFEE
  1193                           wreg	equ	0xFE8
  1194                           
  1195 ;; *************** function _OpenI2C *****************
  1196 ;; Defined at:
  1197 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_open.c"
  1198 ;; Parameters:    Size  Location     Type
  1199 ;;  sync_mode       1    wreg     unsigned char 
  1200 ;;  slew            1   31[COMRAM] unsigned char 
  1201 ;; Auto vars:     Size  Location     Type
  1202 ;;  sync_mode       1   32[COMRAM] unsigned char 
  1203 ;; Return value:  Size  Location     Type
  1204 ;;		None               void
  1205 ;; Registers used:
  1206 ;;		wreg, status,2, status,0
  1207 ;; Tracked objects:
  1208 ;;		On entry : 0/0
  1209 ;;		On exit  : 0/0
  1210 ;;		Unchanged: 0/0
  1211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1212 ;;      Params:         1       0       0       0       0       0       0
  1213 ;;      Locals:         1       0       0       0       0       0       0
  1214 ;;      Temps:          0       0       0       0       0       0       0
  1215 ;;      Totals:         2       0       0       0       0       0       0
  1216 ;;Total ram usage:        2 bytes
  1217 ;; Hardware stack levels used:    1
  1218 ;; Hardware stack levels required when called:    2
  1219 ;; This function calls:
  1220 ;;		Nothing
  1221 ;; This function is called by:
  1222 ;;		_System_Init
  1223 ;; This function uses a non-reentrant model
  1224 ;;
  1225                           
  1226                           	psect	text4
  1227  002EB0                     __ptext4:
  1228                           	opt stack 0
  1229  002EB0                     _OpenI2C:
  1230                           	opt stack 27
  1231                           
  1232                           ;incstack = 0
  1233                           ;OpenI2C@sync_mode stored from wreg
  1234  002EB0  6E21               	movwf	OpenI2C@sync_mode,c
  1235  002EB2  0E3F               	movlw	63
  1236  002EB4  16C7               	andwf	4039,f,c	;volatile
  1237  002EB6  0E00               	movlw	0
  1238  002EB8  6EC6               	movwf	4038,c	;volatile
  1239  002EBA  0E00               	movlw	0
  1240  002EBC  6EC5               	movwf	4037,c	;volatile
  1241  002EBE  5021               	movf	OpenI2C@sync_mode,w,c
  1242  002EC0  12C6               	iorwf	4038,f,c	;volatile
  1243  002EC2  5020               	movf	OpenI2C@slew,w,c
  1244  002EC4  12C7               	iorwf	4039,f,c	;volatile
  1245  002EC6  8694               	bsf	3988,3,c	;volatile
  1246  002EC8  8894               	bsf	3988,4,c	;volatile
  1247  002ECA  8AC6               	bsf	4038,5,c	;volatile
  1248  002ECC  0012               	return		;funcret
  1249  002ECE                     __end_of_OpenI2C:
  1250                           	opt stack 0
  1251                           tblptru	equ	0xFF8
  1252                           tblptrh	equ	0xFF7
  1253                           postinc0	equ	0xFEE
  1254                           wreg	equ	0xFE8
  1255                           
  1256 ;; *************** function _CloseI2C *****************
  1257 ;; Defined at:
  1258 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_clos.c"
  1259 ;; Parameters:    Size  Location     Type
  1260 ;;		None
  1261 ;; Auto vars:     Size  Location     Type
  1262 ;;		None
  1263 ;; Return value:  Size  Location     Type
  1264 ;;		None               void
  1265 ;; Registers used:
  1266 ;;		status,2, status,0
  1267 ;; Tracked objects:
  1268 ;;		On entry : 0/0
  1269 ;;		On exit  : 0/0
  1270 ;;		Unchanged: 0/0
  1271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1272 ;;      Params:         0       0       0       0       0       0       0
  1273 ;;      Locals:         0       0       0       0       0       0       0
  1274 ;;      Temps:          0       0       0       0       0       0       0
  1275 ;;      Totals:         0       0       0       0       0       0       0
  1276 ;;Total ram usage:        0 bytes
  1277 ;; Hardware stack levels used:    1
  1278 ;; Hardware stack levels required when called:    2
  1279 ;; This function calls:
  1280 ;;		Nothing
  1281 ;; This function is called by:
  1282 ;;		_System_Init
  1283 ;; This function uses a non-reentrant model
  1284 ;;
  1285                           
  1286                           	psect	text5
  1287  002F14                     __ptext5:
  1288                           	opt stack 0
  1289  002F14                     _CloseI2C:
  1290                           	opt stack 27
  1291                           
  1292                           ;incstack = 0
  1293  002F14  9AC6               	bcf	4038,5,c	;volatile
  1294  002F16  0012               	return		;funcret
  1295  002F18                     __end_of_CloseI2C:
  1296                           	opt stack 0
  1297                           tblptru	equ	0xFF8
  1298                           tblptrh	equ	0xFF7
  1299                           postinc0	equ	0xFEE
  1300                           wreg	equ	0xFE8
  1301                           
  1302 ;; *************** function _Gyros_Update *****************
  1303 ;; Defined at:
  1304 ;;		line 17 in file "gyros.c"
  1305 ;; Parameters:    Size  Location     Type
  1306 ;;  dt              4  123[BANK0 ] float 
  1307 ;; Auto vars:     Size  Location     Type
  1308 ;;  a              12   56[BANK1 ] struct .
  1309 ;; Return value:  Size  Location     Type
  1310 ;;		None               void
  1311 ;; Registers used:
  1312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1313 ;; Tracked objects:
  1314 ;;		On entry : 0/0
  1315 ;;		On exit  : 0/0
  1316 ;;		Unchanged: 0/0
  1317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1318 ;;      Params:         0       4       0       0       0       0       0
  1319 ;;      Locals:         0       0      44       0       0       0       0
  1320 ;;      Temps:          0       0       0       0       0       0       0
  1321 ;;      Totals:         0       4      44       0       0       0       0
  1322 ;;Total ram usage:       48 bytes
  1323 ;; Hardware stack levels used:    1
  1324 ;; Hardware stack levels required when called:    8
  1325 ;; This function calls:
  1326 ;;		_Accel_Get
  1327 ;;		___fladd
  1328 ;;		___fldiv
  1329 ;;		___flmul
  1330 ;;		_acos
  1331 ;;		_atan
  1332 ;;		_pow
  1333 ;;		_sqrt
  1334 ;; This function is called by:
  1335 ;;		_main
  1336 ;; This function uses a non-reentrant model
  1337 ;;
  1338                           
  1339                           	psect	text6
  1340  00067A                     __ptext6:
  1341                           	opt stack 0
  1342  00067A                     _Gyros_Update:
  1343                           	opt stack 22
  1344                           
  1345                           ;gyros.c: 19: vec3f a;
  1346                           ;gyros.c: 20: Accel_Get(&a);
  1347                           
  1348                           ;incstack = 0
  1349  00067A  0E38               	movlw	low Gyros_Update@a
  1350  00067C  0100               	movlb	0	; () banked
  1351  00067E  6F8D               	movwf	Accel_Get@out& (0+255),b
  1352  000680  0E01               	movlw	high Gyros_Update@a
  1353  000682  0100               	movlb	0	; () banked
  1354  000684  6F8E               	movwf	(Accel_Get@out+1)& (0+255),b
  1355  000686  ECE8  F00C         	call	_Accel_Get	;wreg free
  1356                           
  1357                           ;gyros.c: 22: a.x *= 9.80665;
  1358  00068A  C138  F06F         	movff	Gyros_Update@a,___flmul@f1
  1359  00068E  C139  F070         	movff	Gyros_Update@a+1,___flmul@f1+1
  1360  000692  C13A  F071         	movff	Gyros_Update@a+2,___flmul@f1+2
  1361  000696  C13B  F072         	movff	Gyros_Update@a+3,___flmul@f1+3
  1362  00069A  0E0A               	movlw	10
  1363  00069C  0100               	movlb	0	; () banked
  1364  00069E  6F73               	movwf	___flmul@f2& (0+255),b
  1365  0006A0  0EE8               	movlw	232
  1366  0006A2  6F74               	movwf	(___flmul@f2+1)& (0+255),b
  1367  0006A4  0E1C               	movlw	28
  1368  0006A6  6F75               	movwf	(___flmul@f2+2)& (0+255),b
  1369  0006A8  0E41               	movlw	65
  1370  0006AA  6F76               	movwf	(___flmul@f2+3)& (0+255),b
  1371  0006AC  EC92  F00E         	call	___flmul	;wreg free
  1372  0006B0  C06F  F138         	movff	?___flmul,Gyros_Update@a
  1373  0006B4  C070  F139         	movff	?___flmul+1,Gyros_Update@a+1
  1374  0006B8  C071  F13A         	movff	?___flmul+2,Gyros_Update@a+2
  1375  0006BC  C072  F13B         	movff	?___flmul+3,Gyros_Update@a+3
  1376                           
  1377                           ;gyros.c: 23: a.y *= 9.80665;
  1378  0006C0  C13C  F06F         	movff	Gyros_Update@a+4,___flmul@f1
  1379  0006C4  C13D  F070         	movff	Gyros_Update@a+5,___flmul@f1+1
  1380  0006C8  C13E  F071         	movff	Gyros_Update@a+6,___flmul@f1+2
  1381  0006CC  C13F  F072         	movff	Gyros_Update@a+7,___flmul@f1+3
  1382  0006D0  0E0A               	movlw	10
  1383  0006D2  0100               	movlb	0	; () banked
  1384  0006D4  6F73               	movwf	___flmul@f2& (0+255),b
  1385  0006D6  0EE8               	movlw	232
  1386  0006D8  6F74               	movwf	(___flmul@f2+1)& (0+255),b
  1387  0006DA  0E1C               	movlw	28
  1388  0006DC  6F75               	movwf	(___flmul@f2+2)& (0+255),b
  1389  0006DE  0E41               	movlw	65
  1390  0006E0  6F76               	movwf	(___flmul@f2+3)& (0+255),b
  1391  0006E2  EC92  F00E         	call	___flmul	;wreg free
  1392  0006E6  C06F  F13C         	movff	?___flmul,Gyros_Update@a+4
  1393  0006EA  C070  F13D         	movff	?___flmul+1,Gyros_Update@a+5
  1394  0006EE  C071  F13E         	movff	?___flmul+2,Gyros_Update@a+6
  1395  0006F2  C072  F13F         	movff	?___flmul+3,Gyros_Update@a+7
  1396                           
  1397                           ;gyros.c: 24: a.z *= 9.80665;
  1398  0006F6  C140  F06F         	movff	Gyros_Update@a+8,___flmul@f1
  1399  0006FA  C141  F070         	movff	Gyros_Update@a+9,___flmul@f1+1
  1400  0006FE  C142  F071         	movff	Gyros_Update@a+10,___flmul@f1+2
  1401  000702  C143  F072         	movff	Gyros_Update@a+11,___flmul@f1+3
  1402  000706  0E0A               	movlw	10
  1403  000708  0100               	movlb	0	; () banked
  1404  00070A  6F73               	movwf	___flmul@f2& (0+255),b
  1405  00070C  0EE8               	movlw	232
  1406  00070E  6F74               	movwf	(___flmul@f2+1)& (0+255),b
  1407  000710  0E1C               	movlw	28
  1408  000712  6F75               	movwf	(___flmul@f2+2)& (0+255),b
  1409  000714  0E41               	movlw	65
  1410  000716  6F76               	movwf	(___flmul@f2+3)& (0+255),b
  1411  000718  EC92  F00E         	call	___flmul	;wreg free
  1412  00071C  C06F  F140         	movff	?___flmul,Gyros_Update@a+8
  1413  000720  C070  F141         	movff	?___flmul+1,Gyros_Update@a+9
  1414  000724  C071  F142         	movff	?___flmul+2,Gyros_Update@a+10
  1415  000728  C072  F143         	movff	?___flmul+3,Gyros_Update@a+11
  1416                           
  1417                           ;gyros.c: 26: Gyros_Angle.theta = atan(a.x / a.y);
  1418  00072C  C138  F07E         	movff	Gyros_Update@a,___fldiv@f1
  1419  000730  C139  F07F         	movff	Gyros_Update@a+1,___fldiv@f1+1
  1420  000734  C13A  F080         	movff	Gyros_Update@a+2,___fldiv@f1+2
  1421  000738  C13B  F081         	movff	Gyros_Update@a+3,___fldiv@f1+3
  1422  00073C  C13C  F082         	movff	Gyros_Update@a+4,___fldiv@f2
  1423  000740  C13D  F083         	movff	Gyros_Update@a+5,___fldiv@f2+1
  1424  000744  C13E  F084         	movff	Gyros_Update@a+6,___fldiv@f2+2
  1425  000748  C13F  F085         	movff	Gyros_Update@a+7,___fldiv@f2+3
  1426  00074C  EC44  F00F         	call	___fldiv	;wreg free
  1427  000750  C07E  F118         	movff	?___fldiv,_Gyros_Update$2019
  1428  000754  C07F  F119         	movff	?___fldiv+1,_Gyros_Update$2019+1
  1429  000758  C080  F11A         	movff	?___fldiv+2,_Gyros_Update$2019+2
  1430  00075C  C081  F11B         	movff	?___fldiv+3,_Gyros_Update$2019+3
  1431                           
  1432                           ;gyros.c: 26: Gyros_Angle.theta = atan(a.x / a.y);
  1433  000760  C118  F08E         	movff	_Gyros_Update$2019,atan@f
  1434  000764  C119  F08F         	movff	_Gyros_Update$2019+1,atan@f+1
  1435  000768  C11A  F090         	movff	_Gyros_Update$2019+2,atan@f+2
  1436  00076C  C11B  F091         	movff	_Gyros_Update$2019+3,atan@f+3
  1437  000770  ECA9  F009         	call	_atan	;wreg free
  1438  000774  C08E  F150         	movff	?_atan,gyros@Gyros_Angle
  1439  000778  C08F  F151         	movff	?_atan+1,gyros@Gyros_Angle+1
  1440  00077C  C090  F152         	movff	?_atan+2,gyros@Gyros_Angle+2
  1441  000780  C091  F153         	movff	?_atan+3,gyros@Gyros_Angle+3
  1442                           
  1443                           ;gyros.c: 27: Gyros_Angle.phi = acos(a.z / (sqrt(pow(a.x, 2.0) + pow(a.y, 2.0) + pow(a.z
      +                          , 2.0))));
  1444  000784  0E00               	movlw	0
  1445  000786  0100               	movlb	0	; () banked
  1446  000788  6FA5               	movwf	pow@y& (0+255),b
  1447  00078A  0E00               	movlw	0
  1448  00078C  6FA6               	movwf	(pow@y+1)& (0+255),b
  1449  00078E  0E00               	movlw	0
  1450  000790  6FA7               	movwf	(pow@y+2)& (0+255),b
  1451  000792  0E40               	movlw	64
  1452  000794  6FA8               	movwf	(pow@y+3)& (0+255),b
  1453  000796  C13C  F0A1         	movff	Gyros_Update@a+4,pow@x
  1454  00079A  C13D  F0A2         	movff	Gyros_Update@a+5,pow@x+1
  1455  00079E  C13E  F0A3         	movff	Gyros_Update@a+6,pow@x+2
  1456  0007A2  C13F  F0A4         	movff	Gyros_Update@a+7,pow@x+3
  1457  0007A6  ECE8  F00B         	call	_pow	;wreg free
  1458  0007AA  C0A1  F11C         	movff	?_pow,_Gyros_Update$2020
  1459  0007AE  C0A2  F11D         	movff	?_pow+1,_Gyros_Update$2020+1
  1460  0007B2  C0A3  F11E         	movff	?_pow+2,_Gyros_Update$2020+2
  1461  0007B6  C0A4  F11F         	movff	?_pow+3,_Gyros_Update$2020+3
  1462                           
  1463                           ;gyros.c: 27: Gyros_Angle.phi = acos(a.z / (sqrt(pow(a.x, 2.0) + pow(a.y, 2.0) + pow(a.z
      +                          , 2.0))));
  1464  0007BA  0E00               	movlw	0
  1465  0007BC  0100               	movlb	0	; () banked
  1466  0007BE  6FA5               	movwf	pow@y& (0+255),b
  1467  0007C0  0E00               	movlw	0
  1468  0007C2  6FA6               	movwf	(pow@y+1)& (0+255),b
  1469  0007C4  0E00               	movlw	0
  1470  0007C6  6FA7               	movwf	(pow@y+2)& (0+255),b
  1471  0007C8  0E40               	movlw	64
  1472  0007CA  6FA8               	movwf	(pow@y+3)& (0+255),b
  1473  0007CC  C138  F0A1         	movff	Gyros_Update@a,pow@x
  1474  0007D0  C139  F0A2         	movff	Gyros_Update@a+1,pow@x+1
  1475  0007D4  C13A  F0A3         	movff	Gyros_Update@a+2,pow@x+2
  1476  0007D8  C13B  F0A4         	movff	Gyros_Update@a+3,pow@x+3
  1477  0007DC  ECE8  F00B         	call	_pow	;wreg free
  1478  0007E0  C0A1  F120         	movff	?_pow,_Gyros_Update$2021
  1479  0007E4  C0A2  F121         	movff	?_pow+1,_Gyros_Update$2021+1
  1480  0007E8  C0A3  F122         	movff	?_pow+2,_Gyros_Update$2021+2
  1481  0007EC  C0A4  F123         	movff	?_pow+3,_Gyros_Update$2021+3
  1482                           
  1483                           ;gyros.c: 27: Gyros_Angle.phi = acos(a.z / (sqrt(pow(a.x, 2.0) + pow(a.y, 2.0) + pow(a.z
      +                          , 2.0))));
  1484  0007F0  0E00               	movlw	0
  1485  0007F2  0100               	movlb	0	; () banked
  1486  0007F4  6FA5               	movwf	pow@y& (0+255),b
  1487  0007F6  0E00               	movlw	0
  1488  0007F8  6FA6               	movwf	(pow@y+1)& (0+255),b
  1489  0007FA  0E00               	movlw	0
  1490  0007FC  6FA7               	movwf	(pow@y+2)& (0+255),b
  1491  0007FE  0E40               	movlw	64
  1492  000800  6FA8               	movwf	(pow@y+3)& (0+255),b
  1493  000802  C140  F0A1         	movff	Gyros_Update@a+8,pow@x
  1494  000806  C141  F0A2         	movff	Gyros_Update@a+9,pow@x+1
  1495  00080A  C142  F0A3         	movff	Gyros_Update@a+10,pow@x+2
  1496  00080E  C143  F0A4         	movff	Gyros_Update@a+11,pow@x+3
  1497  000812  ECE8  F00B         	call	_pow	;wreg free
  1498  000816  C0A1  F124         	movff	?_pow,_Gyros_Update$2022
  1499  00081A  C0A2  F125         	movff	?_pow+1,_Gyros_Update$2022+1
  1500  00081E  C0A3  F126         	movff	?_pow+2,_Gyros_Update$2022+2
  1501  000822  C0A4  F127         	movff	?_pow+3,_Gyros_Update$2022+3
  1502                           
  1503                           ;gyros.c: 27: Gyros_Angle.phi = acos(a.z / (sqrt(pow(a.x, 2.0) + pow(a.y, 2.0) + pow(a.z
      +                          , 2.0))));
  1504  000826  C11C  F068         	movff	_Gyros_Update$2020,___fladd@f2
  1505  00082A  C11D  F069         	movff	_Gyros_Update$2020+1,___fladd@f2+1
  1506  00082E  C11E  F06A         	movff	_Gyros_Update$2020+2,___fladd@f2+2
  1507  000832  C11F  F06B         	movff	_Gyros_Update$2020+3,___fladd@f2+3
  1508  000836  C120  F064         	movff	_Gyros_Update$2021,___fladd@f1
  1509  00083A  C121  F065         	movff	_Gyros_Update$2021+1,___fladd@f1+1
  1510  00083E  C122  F066         	movff	_Gyros_Update$2021+2,___fladd@f1+2
  1511  000842  C123  F067         	movff	_Gyros_Update$2021+3,___fladd@f1+3
  1512  000846  EC79  F008         	call	___fladd	;wreg free
  1513  00084A  C064  F128         	movff	?___fladd,_Gyros_Update$2023
  1514  00084E  C065  F129         	movff	?___fladd+1,_Gyros_Update$2023+1
  1515  000852  C066  F12A         	movff	?___fladd+2,_Gyros_Update$2023+2
  1516  000856  C067  F12B         	movff	?___fladd+3,_Gyros_Update$2023+3
  1517                           
  1518                           ;gyros.c: 27: Gyros_Angle.phi = acos(a.z / (sqrt(pow(a.x, 2.0) + pow(a.y, 2.0) + pow(a.z
      +                          , 2.0))));
  1519  00085A  C124  F068         	movff	_Gyros_Update$2022,___fladd@f2
  1520  00085E  C125  F069         	movff	_Gyros_Update$2022+1,___fladd@f2+1
  1521  000862  C126  F06A         	movff	_Gyros_Update$2022+2,___fladd@f2+2
  1522  000866  C127  F06B         	movff	_Gyros_Update$2022+3,___fladd@f2+3
  1523  00086A  C128  F064         	movff	_Gyros_Update$2023,___fladd@f1
  1524  00086E  C129  F065         	movff	_Gyros_Update$2023+1,___fladd@f1+1
  1525  000872  C12A  F066         	movff	_Gyros_Update$2023+2,___fladd@f1+2
  1526  000876  C12B  F067         	movff	_Gyros_Update$2023+3,___fladd@f1+3
  1527  00087A  EC79  F008         	call	___fladd	;wreg free
  1528  00087E  C064  F12C         	movff	?___fladd,_Gyros_Update$2024
  1529  000882  C065  F12D         	movff	?___fladd+1,_Gyros_Update$2024+1
  1530  000886  C066  F12E         	movff	?___fladd+2,_Gyros_Update$2024+2
  1531  00088A  C067  F12F         	movff	?___fladd+3,_Gyros_Update$2024+3
  1532                           
  1533                           ;gyros.c: 27: Gyros_Angle.phi = acos(a.z / (sqrt(pow(a.x, 2.0) + pow(a.y, 2.0) + pow(a.z
      +                          , 2.0))));
  1534  00088E  C140  F07E         	movff	Gyros_Update@a+8,___fldiv@f1
  1535  000892  C141  F07F         	movff	Gyros_Update@a+9,___fldiv@f1+1
  1536  000896  C142  F080         	movff	Gyros_Update@a+10,___fldiv@f1+2
  1537  00089A  C143  F081         	movff	Gyros_Update@a+11,___fldiv@f1+3
  1538  00089E  C12C  F0B6         	movff	_Gyros_Update$2024,sqrt@y
  1539  0008A2  C12D  F0B7         	movff	_Gyros_Update$2024+1,sqrt@y+1
  1540  0008A6  C12E  F0B8         	movff	_Gyros_Update$2024+2,sqrt@y+2
  1541  0008AA  C12F  F0B9         	movff	_Gyros_Update$2024+3,sqrt@y+3
  1542  0008AE  ECD4  F00A         	call	_sqrt	;wreg free
  1543  0008B2  C0B6  F082         	movff	?_sqrt,___fldiv@f2
  1544  0008B6  C0B7  F083         	movff	?_sqrt+1,___fldiv@f2+1
  1545  0008BA  C0B8  F084         	movff	?_sqrt+2,___fldiv@f2+2
  1546  0008BE  C0B9  F085         	movff	?_sqrt+3,___fldiv@f2+3
  1547  0008C2  EC44  F00F         	call	___fldiv	;wreg free
  1548  0008C6  C07E  F130         	movff	?___fldiv,_Gyros_Update$2025
  1549  0008CA  C07F  F131         	movff	?___fldiv+1,_Gyros_Update$2025+1
  1550  0008CE  C080  F132         	movff	?___fldiv+2,_Gyros_Update$2025+2
  1551  0008D2  C081  F133         	movff	?___fldiv+3,_Gyros_Update$2025+3
  1552                           
  1553                           ;gyros.c: 27: Gyros_Angle.phi = acos(a.z / (sqrt(pow(a.x, 2.0) + pow(a.y, 2.0) + pow(a.z
      +                          , 2.0))));
  1554  0008D6  C130  F0D3         	movff	_Gyros_Update$2025,acos@x
  1555  0008DA  C131  F0D4         	movff	_Gyros_Update$2025+1,acos@x+1
  1556  0008DE  C132  F0D5         	movff	_Gyros_Update$2025+2,acos@x+2
  1557  0008E2  C133  F0D6         	movff	_Gyros_Update$2025+3,acos@x+3
  1558  0008E6  ECE3  F014         	call	_acos	;wreg free
  1559  0008EA  C0D3  F154         	movff	?_acos,gyros@Gyros_Angle+4
  1560  0008EE  C0D4  F155         	movff	?_acos+1,gyros@Gyros_Angle+5
  1561  0008F2  C0D5  F156         	movff	?_acos+2,gyros@Gyros_Angle+6
  1562  0008F6  C0D6  F157         	movff	?_acos+3,gyros@Gyros_Angle+7
  1563                           
  1564                           ;gyros.c: 29: Gyros_Vel.x += (a.x + Gyros_LastAccel.x) * dt / 2.0;
  1565  0008FA  0E00               	movlw	0
  1566  0008FC  0100               	movlb	0	; () banked
  1567  0008FE  6F82               	movwf	___fldiv@f2& (0+255),b
  1568  000900  0E00               	movlw	0
  1569  000902  6F83               	movwf	(___fldiv@f2+1)& (0+255),b
  1570  000904  0E00               	movlw	0
  1571  000906  6F84               	movwf	(___fldiv@f2+2)& (0+255),b
  1572  000908  0E40               	movlw	64
  1573  00090A  6F85               	movwf	(___fldiv@f2+3)& (0+255),b
  1574  00090C  C0DB  F073         	movff	Gyros_Update@dt,___flmul@f2
  1575  000910  C0DC  F074         	movff	Gyros_Update@dt+1,___flmul@f2+1
  1576  000914  C0DD  F075         	movff	Gyros_Update@dt+2,___flmul@f2+2
  1577  000918  C0DE  F076         	movff	Gyros_Update@dt+3,___flmul@f2+3
  1578  00091C  C0E0  F068         	movff	gyros@Gyros_LastAccel,___fladd@f2
  1579  000920  C0E1  F069         	movff	gyros@Gyros_LastAccel+1,___fladd@f2+1
  1580  000924  C0E2  F06A         	movff	gyros@Gyros_LastAccel+2,___fladd@f2+2
  1581  000928  C0E3  F06B         	movff	gyros@Gyros_LastAccel+3,___fladd@f2+3
  1582  00092C  C138  F064         	movff	Gyros_Update@a,___fladd@f1
  1583  000930  C139  F065         	movff	Gyros_Update@a+1,___fladd@f1+1
  1584  000934  C13A  F066         	movff	Gyros_Update@a+2,___fladd@f1+2
  1585  000938  C13B  F067         	movff	Gyros_Update@a+3,___fladd@f1+3
  1586  00093C  EC79  F008         	call	___fladd	;wreg free
  1587  000940  C064  F06F         	movff	?___fladd,___flmul@f1
  1588  000944  C065  F070         	movff	?___fladd+1,___flmul@f1+1
  1589  000948  C066  F071         	movff	?___fladd+2,___flmul@f1+2
  1590  00094C  C067  F072         	movff	?___fladd+3,___flmul@f1+3
  1591  000950  EC92  F00E         	call	___flmul	;wreg free
  1592  000954  C06F  F07E         	movff	?___flmul,___fldiv@f1
  1593  000958  C070  F07F         	movff	?___flmul+1,___fldiv@f1+1
  1594  00095C  C071  F080         	movff	?___flmul+2,___fldiv@f1+2
  1595  000960  C072  F081         	movff	?___flmul+3,___fldiv@f1+3
  1596  000964  EC44  F00F         	call	___fldiv	;wreg free
  1597  000968  C07E  F134         	movff	?___fldiv,_Gyros_Update$2026
  1598  00096C  C07F  F135         	movff	?___fldiv+1,_Gyros_Update$2026+1
  1599  000970  C080  F136         	movff	?___fldiv+2,_Gyros_Update$2026+2
  1600  000974  C081  F137         	movff	?___fldiv+3,_Gyros_Update$2026+3
  1601                           
  1602                           ;gyros.c: 29: Gyros_Vel.x += (a.x + Gyros_LastAccel.x) * dt / 2.0;
  1603  000978  C0EC  F064         	movff	gyros@Gyros_Vel,___fladd@f1
  1604  00097C  C0ED  F065         	movff	gyros@Gyros_Vel+1,___fladd@f1+1
  1605  000980  C0EE  F066         	movff	gyros@Gyros_Vel+2,___fladd@f1+2
  1606  000984  C0EF  F067         	movff	gyros@Gyros_Vel+3,___fladd@f1+3
  1607  000988  C134  F068         	movff	_Gyros_Update$2026,___fladd@f2
  1608  00098C  C135  F069         	movff	_Gyros_Update$2026+1,___fladd@f2+1
  1609  000990  C136  F06A         	movff	_Gyros_Update$2026+2,___fladd@f2+2
  1610  000994  C137  F06B         	movff	_Gyros_Update$2026+3,___fladd@f2+3
  1611  000998  EC79  F008         	call	___fladd	;wreg free
  1612  00099C  C064  F0EC         	movff	?___fladd,gyros@Gyros_Vel
  1613  0009A0  C065  F0ED         	movff	?___fladd+1,gyros@Gyros_Vel+1
  1614  0009A4  C066  F0EE         	movff	?___fladd+2,gyros@Gyros_Vel+2
  1615  0009A8  C067  F0EF         	movff	?___fladd+3,gyros@Gyros_Vel+3
  1616                           
  1617                           ;gyros.c: 30: Gyros_Vel.y += (a.y + Gyros_LastAccel.y) * dt / 2.0;
  1618  0009AC  0E00               	movlw	0
  1619  0009AE  0100               	movlb	0	; () banked
  1620  0009B0  6F82               	movwf	___fldiv@f2& (0+255),b
  1621  0009B2  0E00               	movlw	0
  1622  0009B4  6F83               	movwf	(___fldiv@f2+1)& (0+255),b
  1623  0009B6  0E00               	movlw	0
  1624  0009B8  6F84               	movwf	(___fldiv@f2+2)& (0+255),b
  1625  0009BA  0E40               	movlw	64
  1626  0009BC  6F85               	movwf	(___fldiv@f2+3)& (0+255),b
  1627  0009BE  C0DB  F073         	movff	Gyros_Update@dt,___flmul@f2
  1628  0009C2  C0DC  F074         	movff	Gyros_Update@dt+1,___flmul@f2+1
  1629  0009C6  C0DD  F075         	movff	Gyros_Update@dt+2,___flmul@f2+2
  1630  0009CA  C0DE  F076         	movff	Gyros_Update@dt+3,___flmul@f2+3
  1631  0009CE  C0E4  F068         	movff	gyros@Gyros_LastAccel+4,___fladd@f2
  1632  0009D2  C0E5  F069         	movff	gyros@Gyros_LastAccel+5,___fladd@f2+1
  1633  0009D6  C0E6  F06A         	movff	gyros@Gyros_LastAccel+6,___fladd@f2+2
  1634  0009DA  C0E7  F06B         	movff	gyros@Gyros_LastAccel+7,___fladd@f2+3
  1635  0009DE  C13C  F064         	movff	Gyros_Update@a+4,___fladd@f1
  1636  0009E2  C13D  F065         	movff	Gyros_Update@a+5,___fladd@f1+1
  1637  0009E6  C13E  F066         	movff	Gyros_Update@a+6,___fladd@f1+2
  1638  0009EA  C13F  F067         	movff	Gyros_Update@a+7,___fladd@f1+3
  1639  0009EE  EC79  F008         	call	___fladd	;wreg free
  1640  0009F2  C064  F06F         	movff	?___fladd,___flmul@f1
  1641  0009F6  C065  F070         	movff	?___fladd+1,___flmul@f1+1
  1642  0009FA  C066  F071         	movff	?___fladd+2,___flmul@f1+2
  1643  0009FE  C067  F072         	movff	?___fladd+3,___flmul@f1+3
  1644  000A02  EC92  F00E         	call	___flmul	;wreg free
  1645  000A06  C06F  F07E         	movff	?___flmul,___fldiv@f1
  1646  000A0A  C070  F07F         	movff	?___flmul+1,___fldiv@f1+1
  1647  000A0E  C071  F080         	movff	?___flmul+2,___fldiv@f1+2
  1648  000A12  C072  F081         	movff	?___flmul+3,___fldiv@f1+3
  1649  000A16  EC44  F00F         	call	___fldiv	;wreg free
  1650  000A1A  C07E  F134         	movff	?___fldiv,_Gyros_Update$2026
  1651  000A1E  C07F  F135         	movff	?___fldiv+1,_Gyros_Update$2026+1
  1652  000A22  C080  F136         	movff	?___fldiv+2,_Gyros_Update$2026+2
  1653  000A26  C081  F137         	movff	?___fldiv+3,_Gyros_Update$2026+3
  1654                           
  1655                           ;gyros.c: 30: Gyros_Vel.y += (a.y + Gyros_LastAccel.y) * dt / 2.0;
  1656  000A2A  C0F0  F064         	movff	gyros@Gyros_Vel+4,___fladd@f1
  1657  000A2E  C0F1  F065         	movff	gyros@Gyros_Vel+5,___fladd@f1+1
  1658  000A32  C0F2  F066         	movff	gyros@Gyros_Vel+6,___fladd@f1+2
  1659  000A36  C0F3  F067         	movff	gyros@Gyros_Vel+7,___fladd@f1+3
  1660  000A3A  C134  F068         	movff	_Gyros_Update$2026,___fladd@f2
  1661  000A3E  C135  F069         	movff	_Gyros_Update$2026+1,___fladd@f2+1
  1662  000A42  C136  F06A         	movff	_Gyros_Update$2026+2,___fladd@f2+2
  1663  000A46  C137  F06B         	movff	_Gyros_Update$2026+3,___fladd@f2+3
  1664  000A4A  EC79  F008         	call	___fladd	;wreg free
  1665  000A4E  C064  F0F0         	movff	?___fladd,gyros@Gyros_Vel+4
  1666  000A52  C065  F0F1         	movff	?___fladd+1,gyros@Gyros_Vel+5
  1667  000A56  C066  F0F2         	movff	?___fladd+2,gyros@Gyros_Vel+6
  1668  000A5A  C067  F0F3         	movff	?___fladd+3,gyros@Gyros_Vel+7
  1669                           
  1670                           ;gyros.c: 31: Gyros_Vel.z += (a.z + Gyros_LastAccel.z) * dt / 2.0;
  1671  000A5E  0E00               	movlw	0
  1672  000A60  0100               	movlb	0	; () banked
  1673  000A62  6F82               	movwf	___fldiv@f2& (0+255),b
  1674  000A64  0E00               	movlw	0
  1675  000A66  6F83               	movwf	(___fldiv@f2+1)& (0+255),b
  1676  000A68  0E00               	movlw	0
  1677  000A6A  6F84               	movwf	(___fldiv@f2+2)& (0+255),b
  1678  000A6C  0E40               	movlw	64
  1679  000A6E  6F85               	movwf	(___fldiv@f2+3)& (0+255),b
  1680  000A70  C0DB  F073         	movff	Gyros_Update@dt,___flmul@f2
  1681  000A74  C0DC  F074         	movff	Gyros_Update@dt+1,___flmul@f2+1
  1682  000A78  C0DD  F075         	movff	Gyros_Update@dt+2,___flmul@f2+2
  1683  000A7C  C0DE  F076         	movff	Gyros_Update@dt+3,___flmul@f2+3
  1684  000A80  C0E8  F068         	movff	gyros@Gyros_LastAccel+8,___fladd@f2
  1685  000A84  C0E9  F069         	movff	gyros@Gyros_LastAccel+9,___fladd@f2+1
  1686  000A88  C0EA  F06A         	movff	gyros@Gyros_LastAccel+10,___fladd@f2+2
  1687  000A8C  C0EB  F06B         	movff	gyros@Gyros_LastAccel+11,___fladd@f2+3
  1688  000A90  C140  F064         	movff	Gyros_Update@a+8,___fladd@f1
  1689  000A94  C141  F065         	movff	Gyros_Update@a+9,___fladd@f1+1
  1690  000A98  C142  F066         	movff	Gyros_Update@a+10,___fladd@f1+2
  1691  000A9C  C143  F067         	movff	Gyros_Update@a+11,___fladd@f1+3
  1692  000AA0  EC79  F008         	call	___fladd	;wreg free
  1693  000AA4  C064  F06F         	movff	?___fladd,___flmul@f1
  1694  000AA8  C065  F070         	movff	?___fladd+1,___flmul@f1+1
  1695  000AAC  C066  F071         	movff	?___fladd+2,___flmul@f1+2
  1696  000AB0  C067  F072         	movff	?___fladd+3,___flmul@f1+3
  1697  000AB4  EC92  F00E         	call	___flmul	;wreg free
  1698  000AB8  C06F  F07E         	movff	?___flmul,___fldiv@f1
  1699  000ABC  C070  F07F         	movff	?___flmul+1,___fldiv@f1+1
  1700  000AC0  C071  F080         	movff	?___flmul+2,___fldiv@f1+2
  1701  000AC4  C072  F081         	movff	?___flmul+3,___fldiv@f1+3
  1702  000AC8  EC44  F00F         	call	___fldiv	;wreg free
  1703  000ACC  C07E  F134         	movff	?___fldiv,_Gyros_Update$2026
  1704  000AD0  C07F  F135         	movff	?___fldiv+1,_Gyros_Update$2026+1
  1705  000AD4  C080  F136         	movff	?___fldiv+2,_Gyros_Update$2026+2
  1706  000AD8  C081  F137         	movff	?___fldiv+3,_Gyros_Update$2026+3
  1707                           
  1708                           ;gyros.c: 31: Gyros_Vel.z += (a.z + Gyros_LastAccel.z) * dt / 2.0;
  1709  000ADC  C0F4  F064         	movff	gyros@Gyros_Vel+8,___fladd@f1
  1710  000AE0  C0F5  F065         	movff	gyros@Gyros_Vel+9,___fladd@f1+1
  1711  000AE4  C0F6  F066         	movff	gyros@Gyros_Vel+10,___fladd@f1+2
  1712  000AE8  C0F7  F067         	movff	gyros@Gyros_Vel+11,___fladd@f1+3
  1713  000AEC  C134  F068         	movff	_Gyros_Update$2026,___fladd@f2
  1714  000AF0  C135  F069         	movff	_Gyros_Update$2026+1,___fladd@f2+1
  1715  000AF4  C136  F06A         	movff	_Gyros_Update$2026+2,___fladd@f2+2
  1716  000AF8  C137  F06B         	movff	_Gyros_Update$2026+3,___fladd@f2+3
  1717  000AFC  EC79  F008         	call	___fladd	;wreg free
  1718  000B00  C064  F0F4         	movff	?___fladd,gyros@Gyros_Vel+8
  1719  000B04  C065  F0F5         	movff	?___fladd+1,gyros@Gyros_Vel+9
  1720  000B08  C066  F0F6         	movff	?___fladd+2,gyros@Gyros_Vel+10
  1721  000B0C  C067  F0F7         	movff	?___fladd+3,gyros@Gyros_Vel+11
  1722                           
  1723                           ;gyros.c: 33: Gyros_LastAccel.x = a.x;
  1724  000B10  C138  F0E0         	movff	Gyros_Update@a,gyros@Gyros_LastAccel
  1725  000B14  C139  F0E1         	movff	Gyros_Update@a+1,gyros@Gyros_LastAccel+1
  1726  000B18  C13A  F0E2         	movff	Gyros_Update@a+2,gyros@Gyros_LastAccel+2
  1727  000B1C  C13B  F0E3         	movff	Gyros_Update@a+3,gyros@Gyros_LastAccel+3
  1728                           
  1729                           ;gyros.c: 34: Gyros_LastAccel.y = a.y;
  1730  000B20  C13C  F0E4         	movff	Gyros_Update@a+4,gyros@Gyros_LastAccel+4
  1731  000B24  C13D  F0E5         	movff	Gyros_Update@a+5,gyros@Gyros_LastAccel+5
  1732  000B28  C13E  F0E6         	movff	Gyros_Update@a+6,gyros@Gyros_LastAccel+6
  1733  000B2C  C13F  F0E7         	movff	Gyros_Update@a+7,gyros@Gyros_LastAccel+7
  1734                           
  1735                           ;gyros.c: 35: Gyros_LastAccel.z = a.z;
  1736  000B30  C140  F0E8         	movff	Gyros_Update@a+8,gyros@Gyros_LastAccel+8
  1737  000B34  C141  F0E9         	movff	Gyros_Update@a+9,gyros@Gyros_LastAccel+9
  1738  000B38  C142  F0EA         	movff	Gyros_Update@a+10,gyros@Gyros_LastAccel+10
  1739  000B3C  C143  F0EB         	movff	Gyros_Update@a+11,gyros@Gyros_LastAccel+11
  1740  000B40  0012               	return		;funcret
  1741  000B42                     __end_of_Gyros_Update:
  1742                           	opt stack 0
  1743                           tblptru	equ	0xFF8
  1744                           tblptrh	equ	0xFF7
  1745                           postinc0	equ	0xFEE
  1746                           wreg	equ	0xFE8
  1747                           
  1748 ;; *************** function _pow *****************
  1749 ;; Defined at:
  1750 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\pow.c"
  1751 ;; Parameters:    Size  Location     Type
  1752 ;;  x               4   65[BANK0 ] struct .
  1753 ;;  y               4   69[BANK0 ] struct .
  1754 ;; Auto vars:     Size  Location     Type
  1755 ;;  yi              4   82[BANK0 ] unsigned long 
  1756 ;;  sign            1   81[BANK0 ] unsigned char 
  1757 ;; Return value:  Size  Location     Type
  1758 ;;                  4   65[BANK0 ] unsigned char 
  1759 ;; Registers used:
  1760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1761 ;; Tracked objects:
  1762 ;;		On entry : 0/0
  1763 ;;		On exit  : 0/0
  1764 ;;		Unchanged: 0/0
  1765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1766 ;;      Params:         0       8       0       0       0       0       0
  1767 ;;      Locals:         0      13       0       0       0       0       0
  1768 ;;      Temps:          0       0       0       0       0       0       0
  1769 ;;      Totals:         0      21       0       0       0       0       0
  1770 ;;Total ram usage:       21 bytes
  1771 ;; Hardware stack levels used:    1
  1772 ;; Hardware stack levels required when called:    6
  1773 ;; This function calls:
  1774 ;;		___flge
  1775 ;;		___flmul
  1776 ;;		___flneg
  1777 ;;		___fltol
  1778 ;;		___lltofl
  1779 ;;		_exp
  1780 ;;		_log
  1781 ;; This function is called by:
  1782 ;;		_Gyros_Update
  1783 ;; This function uses a non-reentrant model
  1784 ;;
  1785                           
  1786                           	psect	text7
  1787  0017D0                     __ptext7:
  1788                           	opt stack 0
  1789  0017D0                     _pow:
  1790                           	opt stack 23
  1791                           
  1792                           ;incstack = 0
  1793  0017D0  0E00               	movlw	0
  1794  0017D2  0100               	movlb	0	; () banked
  1795  0017D4  6FB1               	movwf	pow@sign& (0+255),b
  1796                           
  1797                           ; BSR set to: 0
  1798  0017D6  0100               	movlb	0	; () banked
  1799  0017D8  51A1               	movf	pow@x& (0+255),w,b
  1800  0017DA  0100               	movlb	0	; () banked
  1801  0017DC  11A2               	iorwf	(pow@x+1)& (0+255),w,b
  1802  0017DE  0100               	movlb	0	; () banked
  1803  0017E0  11A3               	iorwf	(pow@x+2)& (0+255),w,b
  1804  0017E2  0100               	movlb	0	; () banked
  1805  0017E4  11A4               	iorwf	(pow@x+3)& (0+255),w,b
  1806  0017E6  A4D8               	btfss	status,2,c
  1807  0017E8  D025               	goto	l4059
  1808                           
  1809                           ; BSR set to: 0
  1810  0017EA  0E00               	movlw	0
  1811  0017EC  0100               	movlb	0	; () banked
  1812  0017EE  6F60               	movwf	___flge@ff1& (0+255),b
  1813  0017F0  0E00               	movlw	0
  1814  0017F2  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  1815  0017F4  0E00               	movlw	0
  1816  0017F6  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  1817  0017F8  0E00               	movlw	0
  1818  0017FA  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  1819  0017FC  C0A5  F064         	movff	pow@y,___flge@ff2
  1820  001800  C0A6  F065         	movff	pow@y+1,___flge@ff2+1
  1821  001804  C0A7  F066         	movff	pow@y+2,___flge@ff2+2
  1822  001808  C0A8  F067         	movff	pow@y+3,___flge@ff2+3
  1823  00180C  EC0A  F013         	call	___flge	;wreg free
  1824  001810  0100               	movlb	0	; () banked
  1825  001812  A0D8               	btfss	status,0,c
  1826  001814  D005               	goto	l1031
  1827                           
  1828                           ; BSR set to: 0
  1829  001816  0E00               	movlw	0
  1830  001818  0100               	movlb	0	; () banked
  1831  00181A  6FF9               	movwf	(_errno+1)& (0+255),b
  1832  00181C  0E21               	movlw	33
  1833  00181E  6FF8               	movwf	_errno& (0+255),b
  1834  001820                     l1031:
  1835                           
  1836                           ; BSR set to: 0
  1837  001820  0E00               	movlw	0
  1838  001822  0100               	movlb	0	; () banked
  1839  001824  6FA1               	movwf	?_pow& (0+255),b
  1840  001826  0E00               	movlw	0
  1841  001828  6FA2               	movwf	(?_pow+1)& (0+255),b
  1842  00182A  0E00               	movlw	0
  1843  00182C  6FA3               	movwf	(?_pow+2)& (0+255),b
  1844  00182E  0E00               	movlw	0
  1845  001830  6FA4               	movwf	(?_pow+3)& (0+255),b
  1846                           
  1847                           ; BSR set to: 0
  1848  001832  0012               	return	
  1849  001834                     l4059:
  1850                           
  1851                           ; BSR set to: 0
  1852  001834  0100               	movlb	0	; () banked
  1853  001836  51A5               	movf	pow@y& (0+255),w,b
  1854  001838  0100               	movlb	0	; () banked
  1855  00183A  11A6               	iorwf	(pow@y+1)& (0+255),w,b
  1856  00183C  0100               	movlb	0	; () banked
  1857  00183E  11A7               	iorwf	(pow@y+2)& (0+255),w,b
  1858  001840  0100               	movlb	0	; () banked
  1859  001842  11A8               	iorwf	(pow@y+3)& (0+255),w,b
  1860  001844  A4D8               	btfss	status,2,c
  1861  001846  D00A               	goto	l4065
  1862                           
  1863                           ; BSR set to: 0
  1864  001848  0E00               	movlw	0
  1865  00184A  0100               	movlb	0	; () banked
  1866  00184C  6FA1               	movwf	?_pow& (0+255),b
  1867  00184E  0E00               	movlw	0
  1868  001850  6FA2               	movwf	(?_pow+1)& (0+255),b
  1869  001852  0E80               	movlw	128
  1870  001854  6FA3               	movwf	(?_pow+2)& (0+255),b
  1871  001856  0E3F               	movlw	63
  1872  001858  6FA4               	movwf	(?_pow+3)& (0+255),b
  1873                           
  1874                           ; BSR set to: 0
  1875  00185A  0012               	return	
  1876  00185C                     l4065:
  1877                           
  1878                           ; BSR set to: 0
  1879  00185C  0100               	movlb	0	; () banked
  1880  00185E  AFA4               	btfss	(pow@x+3)& (0+255),7,b
  1881  001860  D058               	goto	l4077
  1882                           
  1883                           ; BSR set to: 0
  1884  001862  C0A5  F020         	movff	pow@y,___fltol@f1
  1885  001866  C0A6  F021         	movff	pow@y+1,___fltol@f1+1
  1886  00186A  C0A7  F022         	movff	pow@y+2,___fltol@f1+2
  1887  00186E  C0A8  F023         	movff	pow@y+3,___fltol@f1+3
  1888  001872  EC95  F012         	call	___fltol	;wreg free
  1889  001876  C020  F0B2         	movff	?___fltol,pow@yi
  1890  00187A  C021  F0B3         	movff	?___fltol+1,pow@yi+1
  1891  00187E  C022  F0B4         	movff	?___fltol+2,pow@yi+2
  1892  001882  C023  F0B5         	movff	?___fltol+3,pow@yi+3
  1893  001886  C0B2  F060         	movff	pow@yi,___lltofl@c
  1894  00188A  C0B3  F061         	movff	pow@yi+1,___lltofl@c+1
  1895  00188E  C0B4  F062         	movff	pow@yi+2,___lltofl@c+2
  1896  001892  C0B5  F063         	movff	pow@yi+3,___lltofl@c+3
  1897  001896  ECF6  F016         	call	___lltofl	;wreg free
  1898  00189A  0100               	movlb	0	; () banked
  1899  00189C  51A5               	movf	pow@y& (0+255),w,b
  1900  00189E  0100               	movlb	0	; () banked
  1901  0018A0  1960               	xorwf	?___lltofl& (0+255),w,b
  1902  0018A2  E110               	bnz	u5200
  1903  0018A4  0100               	movlb	0	; () banked
  1904  0018A6  51A6               	movf	(pow@y+1)& (0+255),w,b
  1905  0018A8  0100               	movlb	0	; () banked
  1906  0018AA  1961               	xorwf	(?___lltofl+1)& (0+255),w,b
  1907  0018AC  E10B               	bnz	u5200
  1908  0018AE  0100               	movlb	0	; () banked
  1909  0018B0  51A7               	movf	(pow@y+2)& (0+255),w,b
  1910  0018B2  0100               	movlb	0	; () banked
  1911  0018B4  1962               	xorwf	(?___lltofl+2)& (0+255),w,b
  1912  0018B6  E106               	bnz	u5200
  1913  0018B8  0100               	movlb	0	; () banked
  1914  0018BA  51A8               	movf	(pow@y+3)& (0+255),w,b
  1915  0018BC  0100               	movlb	0	; () banked
  1916  0018BE  1963               	xorwf	(?___lltofl+3)& (0+255),w,b
  1917  0018C0  B4D8               	btfsc	status,2,c
  1918  0018C2  D00F               	goto	l4073
  1919  0018C4                     u5200:
  1920                           
  1921                           ; BSR set to: 0
  1922  0018C4  0E00               	movlw	0
  1923  0018C6  0100               	movlb	0	; () banked
  1924  0018C8  6FF9               	movwf	(_errno+1)& (0+255),b
  1925  0018CA  0E21               	movlw	33
  1926  0018CC  6FF8               	movwf	_errno& (0+255),b
  1927  0018CE  0E00               	movlw	0
  1928  0018D0  0100               	movlb	0	; () banked
  1929  0018D2  6FA1               	movwf	?_pow& (0+255),b
  1930  0018D4  0E00               	movlw	0
  1931  0018D6  6FA2               	movwf	(?_pow+1)& (0+255),b
  1932  0018D8  0E00               	movlw	0
  1933  0018DA  6FA3               	movwf	(?_pow+2)& (0+255),b
  1934  0018DC  0E00               	movlw	0
  1935  0018DE  6FA4               	movwf	(?_pow+3)& (0+255),b
  1936                           
  1937                           ; BSR set to: 0
  1938  0018E0  0012               	return	
  1939  0018E2                     l4073:
  1940                           
  1941                           ; BSR set to: 0
  1942  0018E2  0100               	movlb	0	; () banked
  1943  0018E4  51B2               	movf	pow@yi& (0+255),w,b
  1944  0018E6  0B01               	andlw	1
  1945  0018E8  0100               	movlb	0	; () banked
  1946  0018EA  6FB1               	movwf	pow@sign& (0+255),b
  1947                           
  1948                           ; BSR set to: 0
  1949  0018EC  C0A1  F020         	movff	pow@x,___flneg@f1
  1950  0018F0  C0A2  F021         	movff	pow@x+1,___flneg@f1+1
  1951  0018F4  C0A3  F022         	movff	pow@x+2,___flneg@f1+2
  1952  0018F8  C0A4  F023         	movff	pow@x+3,___flneg@f1+3
  1953  0018FC  ECC4  F016         	call	___flneg	;wreg free
  1954  001900  C020  F0A1         	movff	?___flneg,pow@x
  1955  001904  C021  F0A2         	movff	?___flneg+1,pow@x+1
  1956  001908  C022  F0A3         	movff	?___flneg+2,pow@x+2
  1957  00190C  C023  F0A4         	movff	?___flneg+3,pow@x+3
  1958  001910  D000               	goto	l4077
  1959  001912                     l4077:
  1960  001912  C0A1  F08E         	movff	pow@x,log@x
  1961  001916  C0A2  F08F         	movff	pow@x+1,log@x+1
  1962  00191A  C0A3  F090         	movff	pow@x+2,log@x+2
  1963  00191E  C0A4  F091         	movff	pow@x+3,log@x+3
  1964  001922  ECD5  F00D         	call	_log	;wreg free
  1965  001926  C08E  F0A9         	movff	?_log,_pow$2032
  1966  00192A  C08F  F0AA         	movff	?_log+1,_pow$2032+1
  1967  00192E  C090  F0AB         	movff	?_log+2,_pow$2032+2
  1968  001932  C091  F0AC         	movff	?_log+3,_pow$2032+3
  1969  001936  C0A9  F06F         	movff	_pow$2032,___flmul@f1
  1970  00193A  C0AA  F070         	movff	_pow$2032+1,___flmul@f1+1
  1971  00193E  C0AB  F071         	movff	_pow$2032+2,___flmul@f1+2
  1972  001942  C0AC  F072         	movff	_pow$2032+3,___flmul@f1+3
  1973  001946  C0A5  F073         	movff	pow@y,___flmul@f2
  1974  00194A  C0A6  F074         	movff	pow@y+1,___flmul@f2+1
  1975  00194E  C0A7  F075         	movff	pow@y+2,___flmul@f2+2
  1976  001952  C0A8  F076         	movff	pow@y+3,___flmul@f2+3
  1977  001956  EC92  F00E         	call	___flmul	;wreg free
  1978  00195A  C06F  F0AD         	movff	?___flmul,_pow$2033
  1979  00195E  C070  F0AE         	movff	?___flmul+1,_pow$2033+1
  1980  001962  C071  F0AF         	movff	?___flmul+2,_pow$2033+2
  1981  001966  C072  F0B0         	movff	?___flmul+3,_pow$2033+3
  1982  00196A  C0AD  F096         	movff	_pow$2033,exp@x
  1983  00196E  C0AE  F097         	movff	_pow$2033+1,exp@x+1
  1984  001972  C0AF  F098         	movff	_pow$2033+2,exp@x+2
  1985  001976  C0B0  F099         	movff	_pow$2033+3,exp@x+3
  1986  00197A  EC33  F007         	call	_exp	;wreg free
  1987  00197E  C096  F0A1         	movff	?_exp,pow@x
  1988  001982  C097  F0A2         	movff	?_exp+1,pow@x+1
  1989  001986  C098  F0A3         	movff	?_exp+2,pow@x+2
  1990  00198A  C099  F0A4         	movff	?_exp+3,pow@x+3
  1991  00198E  0100               	movlb	0	; () banked
  1992  001990  51B1               	movf	pow@sign& (0+255),w,b
  1993  001992  0100               	movlb	0	; () banked
  1994  001994  B4D8               	btfsc	status,2,c
  1995  001996  D013               	goto	l1036
  1996                           
  1997                           ; BSR set to: 0
  1998  001998  C0A1  F020         	movff	pow@x,___flneg@f1
  1999  00199C  C0A2  F021         	movff	pow@x+1,___flneg@f1+1
  2000  0019A0  C0A3  F022         	movff	pow@x+2,___flneg@f1+2
  2001  0019A4  C0A4  F023         	movff	pow@x+3,___flneg@f1+3
  2002  0019A8  ECC4  F016         	call	___flneg	;wreg free
  2003  0019AC  C020  F0A1         	movff	?___flneg,?_pow
  2004  0019B0  C021  F0A2         	movff	?___flneg+1,?_pow+1
  2005  0019B4  C022  F0A3         	movff	?___flneg+2,?_pow+2
  2006  0019B8  C023  F0A4         	movff	?___flneg+3,?_pow+3
  2007  0019BC  0012               	return	
  2008  0019BE                     l1036:
  2009                           
  2010                           ; BSR set to: 0
  2011  0019BE  C0A1  F0A1         	movff	pow@x,?_pow
  2012  0019C2  C0A2  F0A2         	movff	pow@x+1,?_pow+1
  2013  0019C6  C0A3  F0A3         	movff	pow@x+2,?_pow+2
  2014  0019CA  C0A4  F0A4         	movff	pow@x+3,?_pow+3
  2015  0019CE  0012               	return		;funcret
  2016  0019D0                     __end_of_pow:
  2017                           	opt stack 0
  2018                           tblptru	equ	0xFF8
  2019                           tblptrh	equ	0xFF7
  2020                           postinc0	equ	0xFEE
  2021                           wreg	equ	0xFE8
  2022                           status	equ	0xFD8
  2023                           
  2024 ;; *************** function _log *****************
  2025 ;; Defined at:
  2026 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  2027 ;; Parameters:    Size  Location     Type
  2028 ;;  x               4   46[BANK0 ] unsigned char 
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;  exponent        2   50[BANK0 ] int 
  2031 ;; Return value:  Size  Location     Type
  2032 ;;                  4   46[BANK0 ] int 
  2033 ;; Registers used:
  2034 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2035 ;; Tracked objects:
  2036 ;;		On entry : 0/0
  2037 ;;		On exit  : 0/0
  2038 ;;		Unchanged: 0/0
  2039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2040 ;;      Params:         0       4       0       0       0       0       0
  2041 ;;      Locals:         0       2       0       0       0       0       0
  2042 ;;      Temps:          0       0       0       0       0       0       0
  2043 ;;      Totals:         0       6       0       0       0       0       0
  2044 ;;Total ram usage:        6 bytes
  2045 ;; Hardware stack levels used:    1
  2046 ;; Hardware stack levels required when called:    5
  2047 ;; This function calls:
  2048 ;;		___awtofl
  2049 ;;		___fladd
  2050 ;;		___flmul
  2051 ;;		_eval_poly
  2052 ;;		_frexp
  2053 ;; This function is called by:
  2054 ;;		_pow
  2055 ;; This function uses a non-reentrant model
  2056 ;;
  2057                           
  2058                           	psect	text8
  2059  001BAA                     __ptext8:
  2060                           	opt stack 0
  2061  001BAA                     _log:
  2062                           	opt stack 23
  2063                           
  2064                           ;incstack = 0
  2065  001BAA  0100               	movlb	0	; () banked
  2066  001BAC  AF91               	btfss	(log@x+3)& (0+255),7,b
  2067  001BAE  D00F               	goto	l3949
  2068                           
  2069                           ; BSR set to: 0
  2070  001BB0  0E00               	movlw	0
  2071  001BB2  0100               	movlb	0	; () banked
  2072  001BB4  6FF9               	movwf	(_errno+1)& (0+255),b
  2073  001BB6  0E21               	movlw	33
  2074  001BB8  6FF8               	movwf	_errno& (0+255),b
  2075  001BBA  0E00               	movlw	0
  2076  001BBC  0100               	movlb	0	; () banked
  2077  001BBE  6F8E               	movwf	?_log& (0+255),b
  2078  001BC0  0E00               	movlw	0
  2079  001BC2  6F8F               	movwf	(?_log+1)& (0+255),b
  2080  001BC4  0E00               	movlw	0
  2081  001BC6  6F90               	movwf	(?_log+2)& (0+255),b
  2082  001BC8  0E00               	movlw	0
  2083  001BCA  6F91               	movwf	(?_log+3)& (0+255),b
  2084                           
  2085                           ; BSR set to: 0
  2086  001BCC  0012               	return	
  2087  001BCE                     l3949:
  2088                           
  2089                           ; BSR set to: 0
  2090  001BCE  0100               	movlb	0	; () banked
  2091  001BD0  518E               	movf	log@x& (0+255),w,b
  2092  001BD2  0100               	movlb	0	; () banked
  2093  001BD4  118F               	iorwf	(log@x+1)& (0+255),w,b
  2094  001BD6  0100               	movlb	0	; () banked
  2095  001BD8  1190               	iorwf	(log@x+2)& (0+255),w,b
  2096  001BDA  0100               	movlb	0	; () banked
  2097  001BDC  1191               	iorwf	(log@x+3)& (0+255),w,b
  2098  001BDE  A4D8               	btfss	status,2,c
  2099  001BE0  D00F               	goto	l3955
  2100                           
  2101                           ; BSR set to: 0
  2102  001BE2  0E00               	movlw	0
  2103  001BE4  0100               	movlb	0	; () banked
  2104  001BE6  6FF9               	movwf	(_errno+1)& (0+255),b
  2105  001BE8  0E22               	movlw	34
  2106  001BEA  6FF8               	movwf	_errno& (0+255),b
  2107  001BEC  0E00               	movlw	0
  2108  001BEE  0100               	movlb	0	; () banked
  2109  001BF0  6F8E               	movwf	?_log& (0+255),b
  2110  001BF2  0E00               	movlw	0
  2111  001BF4  6F8F               	movwf	(?_log+1)& (0+255),b
  2112  001BF6  0E00               	movlw	0
  2113  001BF8  6F90               	movwf	(?_log+2)& (0+255),b
  2114  001BFA  0E00               	movlw	0
  2115  001BFC  6F91               	movwf	(?_log+3)& (0+255),b
  2116                           
  2117                           ; BSR set to: 0
  2118  001BFE  0012               	return	
  2119  001C00                     l3955:
  2120                           
  2121                           ; BSR set to: 0
  2122  001C00  0E00               	movlw	0
  2123  001C02  0100               	movlb	0	; () banked
  2124  001C04  6F73               	movwf	___flmul@f2& (0+255),b
  2125  001C06  0E00               	movlw	0
  2126  001C08  6F74               	movwf	(___flmul@f2+1)& (0+255),b
  2127  001C0A  0E00               	movlw	0
  2128  001C0C  6F75               	movwf	(___flmul@f2+2)& (0+255),b
  2129  001C0E  0E40               	movlw	64
  2130  001C10  6F76               	movwf	(___flmul@f2+3)& (0+255),b
  2131  001C12  0E92               	movlw	low log@exponent
  2132  001C14  6E24               	movwf	frexp@eptr,c
  2133  001C16  0E00               	movlw	high log@exponent
  2134  001C18  6E25               	movwf	frexp@eptr+1,c
  2135  001C1A  C08E  F020         	movff	log@x,frexp@value
  2136  001C1E  C08F  F021         	movff	log@x+1,frexp@value+1
  2137  001C22  C090  F022         	movff	log@x+2,frexp@value+2
  2138  001C26  C091  F023         	movff	log@x+3,frexp@value+3
  2139  001C2A  ECD1  F013         	call	_frexp	;wreg free
  2140  001C2E  C020  F06F         	movff	?_frexp,___flmul@f1
  2141  001C32  C021  F070         	movff	?_frexp+1,___flmul@f1+1
  2142  001C36  C022  F071         	movff	?_frexp+2,___flmul@f1+2
  2143  001C3A  C023  F072         	movff	?_frexp+3,___flmul@f1+3
  2144  001C3E  EC92  F00E         	call	___flmul	;wreg free
  2145  001C42  C06F  F064         	movff	?___flmul,___fladd@f1
  2146  001C46  C070  F065         	movff	?___flmul+1,___fladd@f1+1
  2147  001C4A  C071  F066         	movff	?___flmul+2,___fladd@f1+2
  2148  001C4E  C072  F067         	movff	?___flmul+3,___fladd@f1+3
  2149  001C52  0E00               	movlw	0
  2150  001C54  0100               	movlb	0	; () banked
  2151  001C56  6F68               	movwf	___fladd@f2& (0+255),b
  2152  001C58  0E00               	movlw	0
  2153  001C5A  6F69               	movwf	(___fladd@f2+1)& (0+255),b
  2154  001C5C  0E80               	movlw	128
  2155  001C5E  6F6A               	movwf	(___fladd@f2+2)& (0+255),b
  2156  001C60  0EBF               	movlw	191
  2157  001C62  6F6B               	movwf	(___fladd@f2+3)& (0+255),b
  2158  001C64  EC79  F008         	call	___fladd	;wreg free
  2159  001C68  C064  F08E         	movff	?___fladd,log@x
  2160  001C6C  C065  F08F         	movff	?___fladd+1,log@x+1
  2161  001C70  C066  F090         	movff	?___fladd+2,log@x+2
  2162  001C74  C067  F091         	movff	?___fladd+3,log@x+3
  2163  001C78  0100               	movlb	0	; () banked
  2164  001C7A  0792               	decf	log@exponent& (0+255),f,b
  2165  001C7C  A0D8               	btfss	status,0,c
  2166  001C7E  0793               	decf	(log@exponent+1)& (0+255),f,b
  2167                           
  2168                           ; BSR set to: 0
  2169  001C80  C08E  F07E         	movff	log@x,eval_poly@x
  2170  001C84  C08F  F07F         	movff	log@x+1,eval_poly@x+1
  2171  001C88  C090  F080         	movff	log@x+2,eval_poly@x+2
  2172  001C8C  C091  F081         	movff	log@x+3,eval_poly@x+3
  2173  001C90  0E29               	movlw	low log@coeff
  2174  001C92  0100               	movlb	0	; () banked
  2175  001C94  6F82               	movwf	eval_poly@d& (0+255),b
  2176  001C96  0E06               	movlw	high log@coeff
  2177  001C98  0100               	movlb	0	; () banked
  2178  001C9A  6F83               	movwf	(eval_poly@d+1)& (0+255),b
  2179  001C9C  0E00               	movlw	0
  2180  001C9E  0100               	movlb	0	; () banked
  2181  001CA0  6F85               	movwf	(eval_poly@n+1)& (0+255),b
  2182  001CA2  0E08               	movlw	8
  2183  001CA4  6F84               	movwf	eval_poly@n& (0+255),b
  2184  001CA6  EC07  F011         	call	_eval_poly	;wreg free
  2185  001CAA  C07E  F08E         	movff	?_eval_poly,log@x
  2186  001CAE  C07F  F08F         	movff	?_eval_poly+1,log@x+1
  2187  001CB2  C080  F090         	movff	?_eval_poly+2,log@x+2
  2188  001CB6  C081  F091         	movff	?_eval_poly+3,log@x+3
  2189  001CBA  0E18               	movlw	24
  2190  001CBC  0100               	movlb	0	; () banked
  2191  001CBE  6F73               	movwf	___flmul@f2& (0+255),b
  2192  001CC0  0E72               	movlw	114
  2193  001CC2  6F74               	movwf	(___flmul@f2+1)& (0+255),b
  2194  001CC4  0E31               	movlw	49
  2195  001CC6  6F75               	movwf	(___flmul@f2+2)& (0+255),b
  2196  001CC8  0E3F               	movlw	63
  2197  001CCA  6F76               	movwf	(___flmul@f2+3)& (0+255),b
  2198  001CCC  C092  F060         	movff	log@exponent,___awtofl@c
  2199  001CD0  C093  F061         	movff	log@exponent+1,___awtofl@c+1
  2200  001CD4  EC2A  F016         	call	___awtofl	;wreg free
  2201  001CD8  C060  F06F         	movff	?___awtofl,___flmul@f1
  2202  001CDC  C061  F070         	movff	?___awtofl+1,___flmul@f1+1
  2203  001CE0  C062  F071         	movff	?___awtofl+2,___flmul@f1+2
  2204  001CE4  C063  F072         	movff	?___awtofl+3,___flmul@f1+3
  2205  001CE8  EC92  F00E         	call	___flmul	;wreg free
  2206  001CEC  C06F  F064         	movff	?___flmul,___fladd@f1
  2207  001CF0  C070  F065         	movff	?___flmul+1,___fladd@f1+1
  2208  001CF4  C071  F066         	movff	?___flmul+2,___fladd@f1+2
  2209  001CF8  C072  F067         	movff	?___flmul+3,___fladd@f1+3
  2210  001CFC  C08E  F068         	movff	log@x,___fladd@f2
  2211  001D00  C08F  F069         	movff	log@x+1,___fladd@f2+1
  2212  001D04  C090  F06A         	movff	log@x+2,___fladd@f2+2
  2213  001D08  C091  F06B         	movff	log@x+3,___fladd@f2+3
  2214  001D0C  EC79  F008         	call	___fladd	;wreg free
  2215  001D10  C064  F08E         	movff	?___fladd,?_log
  2216  001D14  C065  F08F         	movff	?___fladd+1,?_log+1
  2217  001D18  C066  F090         	movff	?___fladd+2,?_log+2
  2218  001D1C  C067  F091         	movff	?___fladd+3,?_log+3
  2219  001D20  0012               	return	
  2220  001D22  0012               	return		;funcret
  2221  001D24                     __end_of_log:
  2222                           	opt stack 0
  2223                           tblptru	equ	0xFF8
  2224                           tblptrh	equ	0xFF7
  2225                           postinc0	equ	0xFEE
  2226                           wreg	equ	0xFE8
  2227                           status	equ	0xFD8
  2228                           
  2229 ;; *************** function _exp *****************
  2230 ;; Defined at:
  2231 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\exp.c"
  2232 ;; Parameters:    Size  Location     Type
  2233 ;;  x               4   54[BANK0 ] int 
  2234 ;; Auto vars:     Size  Location     Type
  2235 ;;  exponent        2   62[BANK0 ] int 
  2236 ;;  sign            1   64[BANK0 ] unsigned char 
  2237 ;; Return value:  Size  Location     Type
  2238 ;;                  4   54[BANK0 ] unsigned char 
  2239 ;; Registers used:
  2240 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2241 ;; Tracked objects:
  2242 ;;		On entry : 0/0
  2243 ;;		On exit  : 0/0
  2244 ;;		Unchanged: 0/0
  2245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2246 ;;      Params:         0       4       0       0       0       0       0
  2247 ;;      Locals:         0       7       0       0       0       0       0
  2248 ;;      Temps:          0       0       0       0       0       0       0
  2249 ;;      Totals:         0      11       0       0       0       0       0
  2250 ;;Total ram usage:       11 bytes
  2251 ;; Hardware stack levels used:    1
  2252 ;; Hardware stack levels required when called:    5
  2253 ;; This function calls:
  2254 ;;		___awtofl
  2255 ;;		___fldiv
  2256 ;;		___flge
  2257 ;;		___flmul
  2258 ;;		___flneg
  2259 ;;		___flsub
  2260 ;;		___fltol
  2261 ;;		_eval_poly
  2262 ;;		_floor
  2263 ;;		_ldexp
  2264 ;; This function is called by:
  2265 ;;		_pow
  2266 ;; This function uses a non-reentrant model
  2267 ;;
  2268                           
  2269                           	psect	text9
  2270  000E66                     __ptext9:
  2271                           	opt stack 0
  2272  000E66                     _exp:
  2273                           	opt stack 23
  2274                           
  2275                           ;incstack = 0
  2276  000E66  0100               	movlb	0	; () banked
  2277  000E68  5196               	movf	exp@x& (0+255),w,b
  2278  000E6A  0100               	movlb	0	; () banked
  2279  000E6C  1197               	iorwf	(exp@x+1)& (0+255),w,b
  2280  000E6E  0100               	movlb	0	; () banked
  2281  000E70  1198               	iorwf	(exp@x+2)& (0+255),w,b
  2282  000E72  0100               	movlb	0	; () banked
  2283  000E74  1199               	iorwf	(exp@x+3)& (0+255),w,b
  2284  000E76  A4D8               	btfss	status,2,c
  2285  000E78  D00A               	goto	l3971
  2286                           
  2287                           ; BSR set to: 0
  2288  000E7A  0E00               	movlw	0
  2289  000E7C  0100               	movlb	0	; () banked
  2290  000E7E  6F96               	movwf	?_exp& (0+255),b
  2291  000E80  0E00               	movlw	0
  2292  000E82  6F97               	movwf	(?_exp+1)& (0+255),b
  2293  000E84  0E80               	movlw	128
  2294  000E86  6F98               	movwf	(?_exp+2)& (0+255),b
  2295  000E88  0E3F               	movlw	63
  2296  000E8A  6F99               	movwf	(?_exp+3)& (0+255),b
  2297                           
  2298                           ; BSR set to: 0
  2299  000E8C  0012               	return	
  2300  000E8E                     l3971:
  2301                           
  2302                           ; BSR set to: 0
  2303  000E8E  0E18               	movlw	24
  2304  000E90  0100               	movlb	0	; () banked
  2305  000E92  6F60               	movwf	___flge@ff1& (0+255),b
  2306  000E94  0E72               	movlw	114
  2307  000E96  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  2308  000E98  0E31               	movlw	49
  2309  000E9A  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  2310  000E9C  0E44               	movlw	68
  2311  000E9E  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  2312  000EA0  C096  F064         	movff	exp@x,___flge@ff2
  2313  000EA4  C097  F065         	movff	exp@x+1,___flge@ff2+1
  2314  000EA8  C098  F066         	movff	exp@x+2,___flge@ff2+2
  2315  000EAC  C099  F067         	movff	exp@x+3,___flge@ff2+3
  2316  000EB0  EC0A  F013         	call	___flge	;wreg free
  2317  000EB4  0100               	movlb	0	; () banked
  2318  000EB6  B0D8               	btfsc	status,0,c
  2319  000EB8  D00F               	goto	l3977
  2320                           
  2321                           ; BSR set to: 0
  2322  000EBA  0E00               	movlw	0
  2323  000EBC  0100               	movlb	0	; () banked
  2324  000EBE  6FF9               	movwf	(_errno+1)& (0+255),b
  2325  000EC0  0E22               	movlw	34
  2326  000EC2  6FF8               	movwf	_errno& (0+255),b
  2327  000EC4  0EFF               	movlw	255
  2328  000EC6  0100               	movlb	0	; () banked
  2329  000EC8  6F96               	movwf	?_exp& (0+255),b
  2330  000ECA  0EFF               	movlw	255
  2331  000ECC  6F97               	movwf	(?_exp+1)& (0+255),b
  2332  000ECE  0E7F               	movlw	127
  2333  000ED0  6F98               	movwf	(?_exp+2)& (0+255),b
  2334  000ED2  0E7F               	movlw	127
  2335  000ED4  6F99               	movwf	(?_exp+3)& (0+255),b
  2336                           
  2337                           ; BSR set to: 0
  2338  000ED6  0012               	return	
  2339  000ED8                     l3977:
  2340                           
  2341                           ; BSR set to: 0
  2342  000ED8  C096  F060         	movff	exp@x,___flge@ff1
  2343  000EDC  C097  F061         	movff	exp@x+1,___flge@ff1+1
  2344  000EE0  C098  F062         	movff	exp@x+2,___flge@ff1+2
  2345  000EE4  C099  F063         	movff	exp@x+3,___flge@ff1+3
  2346  000EE8  0E87               	movlw	135
  2347  000EEA  0100               	movlb	0	; () banked
  2348  000EEC  6F64               	movwf	___flge@ff2& (0+255),b
  2349  000EEE  0E48               	movlw	72
  2350  000EF0  6F65               	movwf	(___flge@ff2+1)& (0+255),b
  2351  000EF2  0E3A               	movlw	58
  2352  000EF4  6F66               	movwf	(___flge@ff2+2)& (0+255),b
  2353  000EF6  0EC4               	movlw	196
  2354  000EF8  6F67               	movwf	(___flge@ff2+3)& (0+255),b
  2355  000EFA  EC0A  F013         	call	___flge	;wreg free
  2356  000EFE  0100               	movlb	0	; () banked
  2357  000F00  B0D8               	btfsc	status,0,c
  2358  000F02  D00F               	goto	l3983
  2359                           
  2360                           ; BSR set to: 0
  2361  000F04  0E00               	movlw	0
  2362  000F06  0100               	movlb	0	; () banked
  2363  000F08  6FF9               	movwf	(_errno+1)& (0+255),b
  2364  000F0A  0E22               	movlw	34
  2365  000F0C  6FF8               	movwf	_errno& (0+255),b
  2366  000F0E  0E00               	movlw	0
  2367  000F10  0100               	movlb	0	; () banked
  2368  000F12  6F96               	movwf	?_exp& (0+255),b
  2369  000F14  0E00               	movlw	0
  2370  000F16  6F97               	movwf	(?_exp+1)& (0+255),b
  2371  000F18  0E00               	movlw	0
  2372  000F1A  6F98               	movwf	(?_exp+2)& (0+255),b
  2373  000F1C  0E00               	movlw	0
  2374  000F1E  6F99               	movwf	(?_exp+3)& (0+255),b
  2375                           
  2376                           ; BSR set to: 0
  2377  000F20  0012               	return	
  2378  000F22                     l3983:
  2379                           
  2380                           ; BSR set to: 0
  2381  000F22  0100               	movlb	0	; () banked
  2382  000F24  AF99               	btfss	(exp@x+3)& (0+255),7,b
  2383  000F26  D002               	goto	u5070
  2384  000F28  0E01               	movlw	1
  2385  000F2A  D001               	goto	u5080
  2386  000F2C                     u5070:
  2387  000F2C  0E00               	movlw	0
  2388  000F2E                     u5080:
  2389  000F2E  0100               	movlb	0	; () banked
  2390  000F30  6FA0               	movwf	exp@sign& (0+255),b
  2391                           
  2392                           ; BSR set to: 0
  2393  000F32  0100               	movlb	0	; () banked
  2394  000F34  51A0               	movf	exp@sign& (0+255),w,b
  2395  000F36  0100               	movlb	0	; () banked
  2396  000F38  B4D8               	btfsc	status,2,c
  2397  000F3A  D012               	goto	l1062
  2398                           
  2399                           ; BSR set to: 0
  2400  000F3C  C096  F020         	movff	exp@x,___flneg@f1
  2401  000F40  C097  F021         	movff	exp@x+1,___flneg@f1+1
  2402  000F44  C098  F022         	movff	exp@x+2,___flneg@f1+2
  2403  000F48  C099  F023         	movff	exp@x+3,___flneg@f1+3
  2404  000F4C  ECC4  F016         	call	___flneg	;wreg free
  2405  000F50  C020  F096         	movff	?___flneg,exp@x
  2406  000F54  C021  F097         	movff	?___flneg+1,exp@x+1
  2407  000F58  C022  F098         	movff	?___flneg+2,exp@x+2
  2408  000F5C  C023  F099         	movff	?___flneg+3,exp@x+3
  2409  000F60                     l1062:
  2410  000F60  C096  F06F         	movff	exp@x,___flmul@f1
  2411  000F64  C097  F070         	movff	exp@x+1,___flmul@f1+1
  2412  000F68  C098  F071         	movff	exp@x+2,___flmul@f1+2
  2413  000F6C  C099  F072         	movff	exp@x+3,___flmul@f1+3
  2414  000F70  0E3B               	movlw	59
  2415  000F72  0100               	movlb	0	; () banked
  2416  000F74  6F73               	movwf	___flmul@f2& (0+255),b
  2417  000F76  0EAA               	movlw	170
  2418  000F78  6F74               	movwf	(___flmul@f2+1)& (0+255),b
  2419  000F7A  0EB8               	movlw	184
  2420  000F7C  6F75               	movwf	(___flmul@f2+2)& (0+255),b
  2421  000F7E  0E3F               	movlw	63
  2422  000F80  6F76               	movwf	(___flmul@f2+3)& (0+255),b
  2423  000F82  EC92  F00E         	call	___flmul	;wreg free
  2424  000F86  C06F  F096         	movff	?___flmul,exp@x
  2425  000F8A  C070  F097         	movff	?___flmul+1,exp@x+1
  2426  000F8E  C071  F098         	movff	?___flmul+2,exp@x+2
  2427  000F92  C072  F099         	movff	?___flmul+3,exp@x+3
  2428  000F96  C096  F06F         	movff	exp@x,floor@x
  2429  000F9A  C097  F070         	movff	exp@x+1,floor@x+1
  2430  000F9E  C098  F071         	movff	exp@x+2,floor@x+2
  2431  000FA2  C099  F072         	movff	exp@x+3,floor@x+3
  2432  000FA6  EC78  F010         	call	_floor	;wreg free
  2433  000FAA  C06F  F09A         	movff	?_floor,_exp$2034
  2434  000FAE  C070  F09B         	movff	?_floor+1,_exp$2034+1
  2435  000FB2  C071  F09C         	movff	?_floor+2,_exp$2034+2
  2436  000FB6  C072  F09D         	movff	?_floor+3,_exp$2034+3
  2437  000FBA  C09A  F020         	movff	_exp$2034,___fltol@f1
  2438  000FBE  C09B  F021         	movff	_exp$2034+1,___fltol@f1+1
  2439  000FC2  C09C  F022         	movff	_exp$2034+2,___fltol@f1+2
  2440  000FC6  C09D  F023         	movff	_exp$2034+3,___fltol@f1+3
  2441  000FCA  EC95  F012         	call	___fltol	;wreg free
  2442  000FCE  C020  F09E         	movff	?___fltol,exp@exponent
  2443  000FD2  C021  F09F         	movff	?___fltol+1,exp@exponent+1
  2444  000FD6  C096  F06F         	movff	exp@x,___flsub@f1
  2445  000FDA  C097  F070         	movff	exp@x+1,___flsub@f1+1
  2446  000FDE  C098  F071         	movff	exp@x+2,___flsub@f1+2
  2447  000FE2  C099  F072         	movff	exp@x+3,___flsub@f1+3
  2448  000FE6  C09E  F060         	movff	exp@exponent,___awtofl@c
  2449  000FEA  C09F  F061         	movff	exp@exponent+1,___awtofl@c+1
  2450  000FEE  EC2A  F016         	call	___awtofl	;wreg free
  2451  000FF2  C060  F073         	movff	?___awtofl,___flsub@f2
  2452  000FF6  C061  F074         	movff	?___awtofl+1,___flsub@f2+1
  2453  000FFA  C062  F075         	movff	?___awtofl+2,___flsub@f2+2
  2454  000FFE  C063  F076         	movff	?___awtofl+3,___flsub@f2+3
  2455  001002  EC81  F015         	call	___flsub	;wreg free
  2456  001006  C06F  F096         	movff	?___flsub,exp@x
  2457  00100A  C070  F097         	movff	?___flsub+1,exp@x+1
  2458  00100E  C071  F098         	movff	?___flsub+2,exp@x+2
  2459  001012  C072  F099         	movff	?___flsub+3,exp@x+3
  2460  001016  C096  F07E         	movff	exp@x,eval_poly@x
  2461  00101A  C097  F07F         	movff	exp@x+1,eval_poly@x+1
  2462  00101E  C098  F080         	movff	exp@x+2,eval_poly@x+2
  2463  001022  C099  F081         	movff	exp@x+3,eval_poly@x+3
  2464  001026  0E01               	movlw	low exp@coeff
  2465  001028  0100               	movlb	0	; () banked
  2466  00102A  6F82               	movwf	eval_poly@d& (0+255),b
  2467  00102C  0E06               	movlw	high exp@coeff
  2468  00102E  0100               	movlb	0	; () banked
  2469  001030  6F83               	movwf	(eval_poly@d+1)& (0+255),b
  2470  001032  0E00               	movlw	0
  2471  001034  0100               	movlb	0	; () banked
  2472  001036  6F85               	movwf	(eval_poly@n+1)& (0+255),b
  2473  001038  0E09               	movlw	9
  2474  00103A  6F84               	movwf	eval_poly@n& (0+255),b
  2475  00103C  EC07  F011         	call	_eval_poly	;wreg free
  2476  001040  C07E  F08E         	movff	?_eval_poly,ldexp@value
  2477  001044  C07F  F08F         	movff	?_eval_poly+1,ldexp@value+1
  2478  001048  C080  F090         	movff	?_eval_poly+2,ldexp@value+2
  2479  00104C  C081  F091         	movff	?_eval_poly+3,ldexp@value+3
  2480  001050  C09E  F092         	movff	exp@exponent,ldexp@newexp
  2481  001054  C09F  F093         	movff	exp@exponent+1,ldexp@newexp+1
  2482  001058  ECDF  F00F         	call	_ldexp	;wreg free
  2483  00105C  C08E  F096         	movff	?_ldexp,exp@x
  2484  001060  C08F  F097         	movff	?_ldexp+1,exp@x+1
  2485  001064  C090  F098         	movff	?_ldexp+2,exp@x+2
  2486  001068  C091  F099         	movff	?_ldexp+3,exp@x+3
  2487  00106C  0100               	movlb	0	; () banked
  2488  00106E  51A0               	movf	exp@sign& (0+255),w,b
  2489  001070  0100               	movlb	0	; () banked
  2490  001072  B4D8               	btfsc	status,2,c
  2491  001074  D035               	goto	l1063
  2492                           
  2493                           ; BSR set to: 0
  2494  001076  0100               	movlb	0	; () banked
  2495  001078  2996               	incf	exp@x& (0+255),w,b
  2496  00107A  E116               	bnz	l4005
  2497  00107C  0100               	movlb	0	; () banked
  2498  00107E  2997               	incf	(exp@x+1)& (0+255),w,b
  2499  001080  E113               	bnz	l4005
  2500  001082  0E7F               	movlw	127
  2501  001084  0100               	movlb	0	; () banked
  2502  001086  1998               	xorwf	(exp@x+2)& (0+255),w,b
  2503  001088  E10F               	bnz	l4005
  2504  00108A  0E7F               	movlw	127
  2505  00108C  0100               	movlb	0	; () banked
  2506  00108E  1999               	xorwf	(exp@x+3)& (0+255),w,b
  2507  001090  A4D8               	btfss	status,2,c
  2508  001092  D00A               	goto	l4005
  2509                           
  2510                           ; BSR set to: 0
  2511  001094  0E00               	movlw	0
  2512  001096  0100               	movlb	0	; () banked
  2513  001098  6F96               	movwf	?_exp& (0+255),b
  2514  00109A  0E00               	movlw	0
  2515  00109C  6F97               	movwf	(?_exp+1)& (0+255),b
  2516  00109E  0E00               	movlw	0
  2517  0010A0  6F98               	movwf	(?_exp+2)& (0+255),b
  2518  0010A2  0E00               	movlw	0
  2519  0010A4  6F99               	movwf	(?_exp+3)& (0+255),b
  2520                           
  2521                           ; BSR set to: 0
  2522  0010A6  0012               	return	
  2523  0010A8                     l4005:
  2524                           
  2525                           ; BSR set to: 0
  2526  0010A8  0E00               	movlw	0
  2527  0010AA  0100               	movlb	0	; () banked
  2528  0010AC  6F7E               	movwf	___fldiv@f1& (0+255),b
  2529  0010AE  0E00               	movlw	0
  2530  0010B0  6F7F               	movwf	(___fldiv@f1+1)& (0+255),b
  2531  0010B2  0E80               	movlw	128
  2532  0010B4  6F80               	movwf	(___fldiv@f1+2)& (0+255),b
  2533  0010B6  0E3F               	movlw	63
  2534  0010B8  6F81               	movwf	(___fldiv@f1+3)& (0+255),b
  2535  0010BA  C096  F082         	movff	exp@x,___fldiv@f2
  2536  0010BE  C097  F083         	movff	exp@x+1,___fldiv@f2+1
  2537  0010C2  C098  F084         	movff	exp@x+2,___fldiv@f2+2
  2538  0010C6  C099  F085         	movff	exp@x+3,___fldiv@f2+3
  2539  0010CA  EC44  F00F         	call	___fldiv	;wreg free
  2540  0010CE  C07E  F096         	movff	?___fldiv,?_exp
  2541  0010D2  C07F  F097         	movff	?___fldiv+1,?_exp+1
  2542  0010D6  C080  F098         	movff	?___fldiv+2,?_exp+2
  2543  0010DA  C081  F099         	movff	?___fldiv+3,?_exp+3
  2544  0010DE  0012               	return	
  2545  0010E0                     l1063:
  2546                           
  2547                           ; BSR set to: 0
  2548  0010E0  C096  F096         	movff	exp@x,?_exp
  2549  0010E4  C097  F097         	movff	exp@x+1,?_exp+1
  2550  0010E8  C098  F098         	movff	exp@x+2,?_exp+2
  2551  0010EC  C099  F099         	movff	exp@x+3,?_exp+3
  2552  0010F0  0012               	return		;funcret
  2553  0010F2                     __end_of_exp:
  2554                           	opt stack 0
  2555                           tblptru	equ	0xFF8
  2556                           tblptrh	equ	0xFF7
  2557                           postinc0	equ	0xFEE
  2558                           wreg	equ	0xFE8
  2559                           status	equ	0xFD8
  2560                           
  2561 ;; *************** function _ldexp *****************
  2562 ;; Defined at:
  2563 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  2564 ;; Parameters:    Size  Location     Type
  2565 ;;  value           4   46[BANK0 ] unsigned char 
  2566 ;;  newexp          2   50[BANK0 ] int 
  2567 ;; Auto vars:     Size  Location     Type
  2568 ;;		None
  2569 ;; Return value:  Size  Location     Type
  2570 ;;                  4   46[BANK0 ] int 
  2571 ;; Registers used:
  2572 ;;		wreg, status,2, status,0
  2573 ;; Tracked objects:
  2574 ;;		On entry : 0/0
  2575 ;;		On exit  : 0/0
  2576 ;;		Unchanged: 0/0
  2577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2578 ;;      Params:         0       6       0       0       0       0       0
  2579 ;;      Locals:         0       0       0       0       0       0       0
  2580 ;;      Temps:          0       2       0       0       0       0       0
  2581 ;;      Totals:         0       8       0       0       0       0       0
  2582 ;;Total ram usage:        8 bytes
  2583 ;; Hardware stack levels used:    1
  2584 ;; Hardware stack levels required when called:    2
  2585 ;; This function calls:
  2586 ;;		Nothing
  2587 ;; This function is called by:
  2588 ;;		_exp
  2589 ;; This function uses a non-reentrant model
  2590 ;;
  2591                           
  2592                           	psect	text10
  2593  001FBE                     __ptext10:
  2594                           	opt stack 0
  2595  001FBE                     _ldexp:
  2596                           	opt stack 25
  2597                           
  2598                           ;incstack = 0
  2599  001FBE  0100               	movlb	0	; () banked
  2600  001FC0  518E               	movf	ldexp@value& (0+255),w,b
  2601  001FC2  0100               	movlb	0	; () banked
  2602  001FC4  118F               	iorwf	(ldexp@value+1)& (0+255),w,b
  2603  001FC6  0100               	movlb	0	; () banked
  2604  001FC8  1190               	iorwf	(ldexp@value+2)& (0+255),w,b
  2605  001FCA  0100               	movlb	0	; () banked
  2606  001FCC  1191               	iorwf	(ldexp@value+3)& (0+255),w,b
  2607  001FCE  A4D8               	btfss	status,2,c
  2608  001FD0  D00A               	goto	l3855
  2609                           
  2610                           ; BSR set to: 0
  2611  001FD2  0E00               	movlw	0
  2612  001FD4  0100               	movlb	0	; () banked
  2613  001FD6  6F8E               	movwf	?_ldexp& (0+255),b
  2614  001FD8  0E00               	movlw	0
  2615  001FDA  6F8F               	movwf	(?_ldexp+1)& (0+255),b
  2616  001FDC  0E00               	movlw	0
  2617  001FDE  6F90               	movwf	(?_ldexp+2)& (0+255),b
  2618  001FE0  0E00               	movlw	0
  2619  001FE2  6F91               	movwf	(?_ldexp+3)& (0+255),b
  2620                           
  2621                           ; BSR set to: 0
  2622  001FE4  0012               	return	
  2623  001FE6                     l3855:
  2624                           
  2625                           ; BSR set to: 0
  2626  001FE6  0100               	movlb	0	; () banked
  2627  001FE8  5191               	movf	(ldexp@value+3)& (0+255),w,b
  2628  001FEA  0B7F               	andlw	127
  2629  001FEC  0100               	movlb	0	; () banked
  2630  001FEE  6F94               	movwf	??_ldexp& (0+255),b
  2631  001FF0  6B95               	clrf	(??_ldexp+1)& (0+255),b
  2632  001FF2  90D8               	bcf	status,0,c
  2633  001FF4  0100               	movlb	0	; () banked
  2634  001FF6  3794               	rlcf	??_ldexp& (0+255),f,b
  2635  001FF8  3795               	rlcf	(??_ldexp+1)& (0+255),f,b
  2636  001FFA  0100               	movlb	0	; () banked
  2637  001FFC  5194               	movf	??_ldexp& (0+255),w,b
  2638  001FFE  0100               	movlb	0	; () banked
  2639  002000  2792               	addwf	ldexp@newexp& (0+255),f,b
  2640  002002  0100               	movlb	0	; () banked
  2641  002004  5195               	movf	(??_ldexp+1)& (0+255),w,b
  2642  002006  0100               	movlb	0	; () banked
  2643  002008  2393               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  2644  00200A  0100               	movlb	0	; () banked
  2645  00200C  AF90               	btfss	(ldexp@value+2)& (0+255),7,b
  2646  00200E  D004               	goto	u4940
  2647  002010  0100               	movlb	0	; () banked
  2648  002012  6B94               	clrf	??_ldexp& (0+255),b
  2649  002014  2B94               	incf	??_ldexp& (0+255),f,b
  2650  002016  D002               	goto	u4948
  2651  002018                     u4940:
  2652  002018  0100               	movlb	0	; () banked
  2653  00201A  6B94               	clrf	??_ldexp& (0+255),b
  2654  00201C                     u4948:
  2655  00201C  0100               	movlb	0	; () banked
  2656  00201E  5194               	movf	??_ldexp& (0+255),w,b
  2657  002020  0100               	movlb	0	; () banked
  2658  002022  2792               	addwf	ldexp@newexp& (0+255),f,b
  2659  002024  0E00               	movlw	0
  2660  002026  2393               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  2661  002028  0100               	movlb	0	; () banked
  2662  00202A  AF93               	btfss	(ldexp@newexp+1)& (0+255),7,b
  2663  00202C  D010               	goto	l3863
  2664                           
  2665                           ; BSR set to: 0
  2666  00202E  0E00               	movlw	0
  2667  002030  0100               	movlb	0	; () banked
  2668  002032  6FF9               	movwf	(_errno+1)& (0+255),b
  2669  002034  0E22               	movlw	34
  2670  002036  6FF8               	movwf	_errno& (0+255),b
  2671  002038  0E00               	movlw	0
  2672  00203A  0100               	movlb	0	; () banked
  2673  00203C  6F8E               	movwf	?_ldexp& (0+255),b
  2674  00203E  0E00               	movlw	0
  2675  002040  6F8F               	movwf	(?_ldexp+1)& (0+255),b
  2676  002042  0E00               	movlw	0
  2677  002044  6F90               	movwf	(?_ldexp+2)& (0+255),b
  2678  002046  0E00               	movlw	0
  2679  002048                     L1:
  2680  002048  6F91               	movwf	(?_ldexp+3)& (0+255),b
  2681                           
  2682                           ; BSR set to: 0
  2683  00204A  0012               	return	
  2684                           
  2685                           ; BSR set to: 0
  2686  00204C  D047               	goto	l3881
  2687  00204E                     l3863:
  2688                           
  2689                           ; BSR set to: 0
  2690  00204E  0100               	movlb	0	; () banked
  2691  002050  BF93               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  2692  002052  D022               	goto	l3879
  2693  002054  0100               	movlb	0	; () banked
  2694  002056  0593               	decf	(ldexp@newexp+1)& (0+255),w,b
  2695  002058  A0D8               	btfss	status,0,c
  2696  00205A  D01E               	goto	l3879
  2697                           
  2698                           ; BSR set to: 0
  2699  00205C  0E00               	movlw	0
  2700  00205E  0100               	movlb	0	; () banked
  2701  002060  6FF9               	movwf	(_errno+1)& (0+255),b
  2702  002062  0E22               	movlw	34
  2703  002064  6FF8               	movwf	_errno& (0+255),b
  2704                           
  2705                           ; BSR set to: 0
  2706  002066  0100               	movlb	0	; () banked
  2707  002068  AF91               	btfss	(ldexp@value+3)& (0+255),7,b
  2708  00206A  D00B               	goto	l3875
  2709                           
  2710                           ; BSR set to: 0
  2711  00206C  0EFF               	movlw	255
  2712  00206E  0100               	movlb	0	; () banked
  2713  002070  6F8E               	movwf	?_ldexp& (0+255),b
  2714  002072  0EFF               	movlw	255
  2715  002074  6F8F               	movwf	(?_ldexp+1)& (0+255),b
  2716  002076  0E7F               	movlw	127
  2717  002078  6F90               	movwf	(?_ldexp+2)& (0+255),b
  2718  00207A  0EFF               	movlw	255
  2719  00207C  D7E5               	goto	L1
  2720                           
  2721                           ; BSR set to: 0
  2722  00207E  0012               	return	
  2723                           
  2724                           ; BSR set to: 0
  2725  002080  D02D               	goto	l3881
  2726  002082                     l3875:
  2727                           
  2728                           ; BSR set to: 0
  2729  002082  0EFF               	movlw	255
  2730  002084  0100               	movlb	0	; () banked
  2731  002086  6F8E               	movwf	?_ldexp& (0+255),b
  2732  002088  0EFF               	movlw	255
  2733  00208A  6F8F               	movwf	(?_ldexp+1)& (0+255),b
  2734  00208C  0E7F               	movlw	127
  2735  00208E  6F90               	movwf	(?_ldexp+2)& (0+255),b
  2736  002090  0E7F               	movlw	127
  2737  002092  D7DA               	goto	L1
  2738                           
  2739                           ; BSR set to: 0
  2740  002094  0012               	return	
  2741                           
  2742                           ; BSR set to: 0
  2743  002096  D022               	goto	l3881
  2744  002098                     l3879:
  2745                           
  2746                           ; BSR set to: 0
  2747  002098  0100               	movlb	0	; () banked
  2748  00209A  3593               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  2749  00209C  3193               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  2750  00209E  0100               	movlb	0	; () banked
  2751  0020A0  6F95               	movwf	(??_ldexp+1)& (0+255),b
  2752  0020A2  0100               	movlb	0	; () banked
  2753  0020A4  3192               	rrcf	ldexp@newexp& (0+255),w,b
  2754  0020A6  0100               	movlb	0	; () banked
  2755  0020A8  6F94               	movwf	??_ldexp& (0+255),b
  2756  0020AA  0100               	movlb	0	; () banked
  2757  0020AC  5191               	movf	(ldexp@value+3)& (0+255),w,b
  2758  0020AE  0100               	movlb	0	; () banked
  2759  0020B0  1994               	xorwf	??_ldexp& (0+255),w,b
  2760  0020B2  0B80               	andlw	-128
  2761  0020B4  1994               	xorwf	??_ldexp& (0+255),w,b
  2762  0020B6  0100               	movlb	0	; () banked
  2763  0020B8  6F91               	movwf	(ldexp@value+3)& (0+255),b
  2764  0020BA  C092  F094         	movff	ldexp@newexp,??_ldexp
  2765  0020BE  0E01               	movlw	1
  2766  0020C0  0100               	movlb	0	; () banked
  2767  0020C2  1794               	andwf	??_ldexp& (0+255),f,b
  2768  0020C4  0100               	movlb	0	; () banked
  2769  0020C6  3394               	rrcf	??_ldexp& (0+255),f,b
  2770  0020C8  3394               	rrcf	??_ldexp& (0+255),f,b
  2771  0020CA  0100               	movlb	0	; () banked
  2772  0020CC  5190               	movf	(ldexp@value+2)& (0+255),w,b
  2773  0020CE  0100               	movlb	0	; () banked
  2774  0020D0  1994               	xorwf	??_ldexp& (0+255),w,b
  2775  0020D2  0B7F               	andlw	-129
  2776  0020D4  1994               	xorwf	??_ldexp& (0+255),w,b
  2777  0020D6  0100               	movlb	0	; () banked
  2778  0020D8  6F90               	movwf	(ldexp@value+2)& (0+255),b
  2779                           
  2780                           ; BSR set to: 0
  2781  0020DA  D000               	goto	l3881
  2782  0020DC                     l3881:
  2783                           
  2784                           ; BSR set to: 0
  2785  0020DC  C08E  F08E         	movff	ldexp@value,?_ldexp
  2786  0020E0  C08F  F08F         	movff	ldexp@value+1,?_ldexp+1
  2787  0020E4  C090  F090         	movff	ldexp@value+2,?_ldexp+2
  2788  0020E8  C091  F091         	movff	ldexp@value+3,?_ldexp+3
  2789  0020EC  0012               	return	
  2790                           
  2791                           ; BSR set to: 0
  2792                           
  2793                           ; BSR set to: 0
  2794  0020EE  0012               	return		;funcret
  2795  0020F0                     __end_of_ldexp:
  2796                           	opt stack 0
  2797                           tblptru	equ	0xFF8
  2798                           tblptrh	equ	0xFF7
  2799                           postinc0	equ	0xFEE
  2800                           wreg	equ	0xFE8
  2801                           status	equ	0xFD8
  2802                           
  2803 ;; *************** function _floor *****************
  2804 ;; Defined at:
  2805 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\floor.c"
  2806 ;; Parameters:    Size  Location     Type
  2807 ;;  x               4   15[BANK0 ] int 
  2808 ;; Auto vars:     Size  Location     Type
  2809 ;;  i               4   19[BANK0 ] int 
  2810 ;;  expon           2   23[BANK0 ] int 
  2811 ;; Return value:  Size  Location     Type
  2812 ;;                  4   15[BANK0 ] int 
  2813 ;; Registers used:
  2814 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2815 ;; Tracked objects:
  2816 ;;		On entry : 0/0
  2817 ;;		On exit  : 0/0
  2818 ;;		Unchanged: 0/0
  2819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2820 ;;      Params:         0       4       0       0       0       0       0
  2821 ;;      Locals:         0       6       0       0       0       0       0
  2822 ;;      Temps:          0       0       0       0       0       0       0
  2823 ;;      Totals:         0      10       0       0       0       0       0
  2824 ;;Total ram usage:       10 bytes
  2825 ;; Hardware stack levels used:    1
  2826 ;; Hardware stack levels required when called:    4
  2827 ;; This function calls:
  2828 ;;		___altofl
  2829 ;;		___fladd
  2830 ;;		___flge
  2831 ;;		___fltol
  2832 ;;		_frexp
  2833 ;; This function is called by:
  2834 ;;		_exp
  2835 ;; This function uses a non-reentrant model
  2836 ;;
  2837                           
  2838                           	psect	text11
  2839  0020F0                     __ptext11:
  2840                           	opt stack 0
  2841  0020F0                     _floor:
  2842                           	opt stack 23
  2843                           
  2844                           ; BSR set to: 0
  2845                           ;incstack = 0
  2846  0020F0  C06F  F020         	movff	floor@x,frexp@value
  2847  0020F4  C070  F021         	movff	floor@x+1,frexp@value+1
  2848  0020F8  C071  F022         	movff	floor@x+2,frexp@value+2
  2849  0020FC  C072  F023         	movff	floor@x+3,frexp@value+3
  2850  002100  0E77               	movlw	low floor@expon
  2851  002102  6E24               	movwf	frexp@eptr,c
  2852  002104  0E00               	movlw	high floor@expon
  2853  002106  6E25               	movwf	frexp@eptr+1,c
  2854  002108  ECD1  F013         	call	_frexp	;wreg free
  2855  00210C  0100               	movlb	0	; () banked
  2856  00210E  AF78               	btfss	(floor@expon+1)& (0+255),7,b
  2857  002110  D017               	goto	l3839
  2858                           
  2859                           ; BSR set to: 0
  2860  002112  0100               	movlb	0	; () banked
  2861  002114  AF72               	btfss	(floor@x+3)& (0+255),7,b
  2862  002116  D00A               	goto	l3835
  2863                           
  2864                           ; BSR set to: 0
  2865  002118  0E00               	movlw	0
  2866  00211A  0100               	movlb	0	; () banked
  2867  00211C  6F6F               	movwf	?_floor& (0+255),b
  2868  00211E  0E00               	movlw	0
  2869  002120  6F70               	movwf	(?_floor+1)& (0+255),b
  2870  002122  0E80               	movlw	128
  2871  002124  6F71               	movwf	(?_floor+2)& (0+255),b
  2872  002126  0EBF               	movlw	191
  2873  002128  6F72               	movwf	(?_floor+3)& (0+255),b
  2874                           
  2875                           ; BSR set to: 0
  2876  00212A  0012               	return	
  2877  00212C                     l3835:
  2878                           
  2879                           ; BSR set to: 0
  2880  00212C  0E00               	movlw	0
  2881  00212E  0100               	movlb	0	; () banked
  2882  002130  6F6F               	movwf	?_floor& (0+255),b
  2883  002132  0E00               	movlw	0
  2884  002134  6F70               	movwf	(?_floor+1)& (0+255),b
  2885  002136  0E00               	movlw	0
  2886  002138  6F71               	movwf	(?_floor+2)& (0+255),b
  2887  00213A  0E00               	movlw	0
  2888  00213C  6F72               	movwf	(?_floor+3)& (0+255),b
  2889                           
  2890                           ; BSR set to: 0
  2891  00213E  0012               	return	
  2892  002140                     l3839:
  2893                           
  2894                           ; BSR set to: 0
  2895  002140  0100               	movlb	0	; () banked
  2896  002142  5178               	movf	(floor@expon+1)& (0+255),w,b
  2897  002144  E105               	bnz	u4910
  2898  002146  0E1D               	movlw	29
  2899  002148  0100               	movlb	0	; () banked
  2900  00214A  5D77               	subwf	floor@expon& (0+255),w,b
  2901  00214C  A0D8               	btfss	status,0,c
  2902  00214E  D009               	goto	l3843
  2903  002150                     u4910:
  2904                           
  2905                           ; BSR set to: 0
  2906  002150  C06F  F06F         	movff	floor@x,?_floor
  2907  002154  C070  F070         	movff	floor@x+1,?_floor+1
  2908  002158  C071  F071         	movff	floor@x+2,?_floor+2
  2909  00215C  C072  F072         	movff	floor@x+3,?_floor+3
  2910  002160  0012               	return	
  2911  002162                     l3843:
  2912                           
  2913                           ; BSR set to: 0
  2914  002162  C06F  F020         	movff	floor@x,___fltol@f1
  2915  002166  C070  F021         	movff	floor@x+1,___fltol@f1+1
  2916  00216A  C071  F022         	movff	floor@x+2,___fltol@f1+2
  2917  00216E  C072  F023         	movff	floor@x+3,___fltol@f1+3
  2918  002172  EC95  F012         	call	___fltol	;wreg free
  2919  002176  C020  F060         	movff	?___fltol,___altofl@c
  2920  00217A  C021  F061         	movff	?___fltol+1,___altofl@c+1
  2921  00217E  C022  F062         	movff	?___fltol+2,___altofl@c+2
  2922  002182  C023  F063         	movff	?___fltol+3,___altofl@c+3
  2923  002186  ECDD  F015         	call	___altofl	;wreg free
  2924  00218A  C060  F073         	movff	?___altofl,floor@i
  2925  00218E  C061  F074         	movff	?___altofl+1,floor@i+1
  2926  002192  C062  F075         	movff	?___altofl+2,floor@i+2
  2927  002196  C063  F076         	movff	?___altofl+3,floor@i+3
  2928  00219A  C06F  F060         	movff	floor@x,___flge@ff1
  2929  00219E  C070  F061         	movff	floor@x+1,___flge@ff1+1
  2930  0021A2  C071  F062         	movff	floor@x+2,___flge@ff1+2
  2931  0021A6  C072  F063         	movff	floor@x+3,___flge@ff1+3
  2932  0021AA  C073  F064         	movff	floor@i,___flge@ff2
  2933  0021AE  C074  F065         	movff	floor@i+1,___flge@ff2+1
  2934  0021B2  C075  F066         	movff	floor@i+2,___flge@ff2+2
  2935  0021B6  C076  F067         	movff	floor@i+3,___flge@ff2+3
  2936  0021BA  EC0A  F013         	call	___flge	;wreg free
  2937  0021BE  0100               	movlb	0	; () banked
  2938  0021C0  B0D8               	btfsc	status,0,c
  2939  0021C2  D01C               	goto	l1073
  2940                           
  2941                           ; BSR set to: 0
  2942  0021C4  C073  F064         	movff	floor@i,___fladd@f1
  2943  0021C8  C074  F065         	movff	floor@i+1,___fladd@f1+1
  2944  0021CC  C075  F066         	movff	floor@i+2,___fladd@f1+2
  2945  0021D0  C076  F067         	movff	floor@i+3,___fladd@f1+3
  2946  0021D4  0E00               	movlw	0
  2947  0021D6  0100               	movlb	0	; () banked
  2948  0021D8  6F68               	movwf	___fladd@f2& (0+255),b
  2949  0021DA  0E00               	movlw	0
  2950  0021DC  6F69               	movwf	(___fladd@f2+1)& (0+255),b
  2951  0021DE  0E80               	movlw	128
  2952  0021E0  6F6A               	movwf	(___fladd@f2+2)& (0+255),b
  2953  0021E2  0EBF               	movlw	191
  2954  0021E4  6F6B               	movwf	(___fladd@f2+3)& (0+255),b
  2955  0021E6  EC79  F008         	call	___fladd	;wreg free
  2956  0021EA  C064  F06F         	movff	?___fladd,?_floor
  2957  0021EE  C065  F070         	movff	?___fladd+1,?_floor+1
  2958  0021F2  C066  F071         	movff	?___fladd+2,?_floor+2
  2959  0021F6  C067  F072         	movff	?___fladd+3,?_floor+3
  2960  0021FA  0012               	return	
  2961  0021FC                     l1073:
  2962                           
  2963                           ; BSR set to: 0
  2964  0021FC  C073  F06F         	movff	floor@i,?_floor
  2965  002200  C074  F070         	movff	floor@i+1,?_floor+1
  2966  002204  C075  F071         	movff	floor@i+2,?_floor+2
  2967  002208  C076  F072         	movff	floor@i+3,?_floor+3
  2968  00220C  0012               	return		;funcret
  2969  00220E                     __end_of_floor:
  2970                           	opt stack 0
  2971                           tblptru	equ	0xFF8
  2972                           tblptrh	equ	0xFF7
  2973                           postinc0	equ	0xFEE
  2974                           wreg	equ	0xFE8
  2975                           status	equ	0xFD8
  2976                           
  2977 ;; *************** function _frexp *****************
  2978 ;; Defined at:
  2979 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  2980 ;; Parameters:    Size  Location     Type
  2981 ;;  value           4   31[COMRAM] int 
  2982 ;;  eptr            2   35[COMRAM] PTR int 
  2983 ;;		 -> log@exponent(2), floor@expon(2), 
  2984 ;; Auto vars:     Size  Location     Type
  2985 ;;		None
  2986 ;; Return value:  Size  Location     Type
  2987 ;;                  4   31[COMRAM] PTR int 
  2988 ;; Registers used:
  2989 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2990 ;; Tracked objects:
  2991 ;;		On entry : 0/0
  2992 ;;		On exit  : 0/0
  2993 ;;		Unchanged: 0/0
  2994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2995 ;;      Params:         6       0       0       0       0       0       0
  2996 ;;      Locals:         0       0       0       0       0       0       0
  2997 ;;      Temps:          2       0       0       0       0       0       0
  2998 ;;      Totals:         8       0       0       0       0       0       0
  2999 ;;Total ram usage:        8 bytes
  3000 ;; Hardware stack levels used:    1
  3001 ;; Hardware stack levels required when called:    2
  3002 ;; This function calls:
  3003 ;;		Nothing
  3004 ;; This function is called by:
  3005 ;;		_floor
  3006 ;;		_log
  3007 ;; This function uses a non-reentrant model
  3008 ;;
  3009                           
  3010                           	psect	text12
  3011  0027A2                     __ptext12:
  3012                           	opt stack 0
  3013  0027A2                     _frexp:
  3014                           	opt stack 25
  3015                           
  3016                           ;incstack = 0
  3017  0027A2  5020               	movf	frexp@value,w,c
  3018  0027A4  1021               	iorwf	frexp@value+1,w,c
  3019  0027A6  1022               	iorwf	frexp@value+2,w,c
  3020  0027A8  1023               	iorwf	frexp@value+3,w,c
  3021  0027AA  A4D8               	btfss	status,2,c
  3022  0027AC  D011               	goto	l3667
  3023  0027AE  C024  FFD9         	movff	frexp@eptr,fsr2l
  3024  0027B2  C025  FFDA         	movff	frexp@eptr+1,fsr2h
  3025  0027B6  0E00               	movlw	0
  3026  0027B8  6EDE               	movwf	postinc2,c
  3027  0027BA  0E00               	movlw	0
  3028  0027BC  6EDD               	movwf	postdec2,c
  3029  0027BE  0E00               	movlw	0
  3030  0027C0  6E20               	movwf	?_frexp,c
  3031  0027C2  0E00               	movlw	0
  3032  0027C4  6E21               	movwf	?_frexp+1,c
  3033  0027C6  0E00               	movlw	0
  3034  0027C8  6E22               	movwf	?_frexp+2,c
  3035  0027CA  0E00               	movlw	0
  3036  0027CC  6E23               	movwf	?_frexp+3,c
  3037  0027CE  0012               	return	
  3038  0027D0                     l3667:
  3039  0027D0  5023               	movf	frexp@value+3,w,c
  3040  0027D2  0B7F               	andlw	127
  3041  0027D4  6E26               	movwf	??_frexp& (0+255),c
  3042  0027D6  6A27               	clrf	(??_frexp+1)& (0+255),c
  3043  0027D8  90D8               	bcf	status,0,c
  3044  0027DA  3626               	rlcf	??_frexp,f,c
  3045  0027DC  3627               	rlcf	??_frexp+1,f,c
  3046  0027DE  C024  FFD9         	movff	frexp@eptr,fsr2l
  3047  0027E2  C025  FFDA         	movff	frexp@eptr+1,fsr2h
  3048  0027E6  C026  FFDE         	movff	??_frexp,postinc2
  3049  0027EA  C027  FFDD         	movff	??_frexp+1,postdec2
  3050  0027EE  AE22               	btfss	frexp@value+2,7,c
  3051  0027F0  D003               	goto	u4490
  3052  0027F2  6A26               	clrf	??_frexp& (0+255),c
  3053  0027F4  2A26               	incf	??_frexp& (0+255),f,c
  3054  0027F6  D001               	goto	u4498
  3055  0027F8                     u4490:
  3056  0027F8  6A26               	clrf	??_frexp& (0+255),c
  3057  0027FA                     u4498:
  3058  0027FA  5026               	movf	??_frexp,w,c
  3059  0027FC  C024  FFD9         	movff	frexp@eptr,fsr2l
  3060  002800  C025  FFDA         	movff	frexp@eptr+1,fsr2h
  3061  002804  12DE               	iorwf	postinc2,f,c
  3062  002806  0E00               	movlw	0
  3063  002808  12DD               	iorwf	postdec2,f,c
  3064  00280A  C024  FFD9         	movff	frexp@eptr,fsr2l
  3065  00280E  C025  FFDA         	movff	frexp@eptr+1,fsr2h
  3066  002812  0E82               	movlw	130
  3067  002814  26DE               	addwf	postinc2,f,c
  3068  002816  0EFF               	movlw	255
  3069  002818  22DD               	addwfc	postdec2,f,c
  3070  00281A  8023               	bsf	frexp@value+3,0,c
  3071  00281C  8223               	bsf	frexp@value+3,1,c
  3072  00281E  8423               	bsf	frexp@value+3,2,c
  3073  002820  8623               	bsf	frexp@value+3,3,c
  3074  002822  8823               	bsf	frexp@value+3,4,c
  3075  002824  8A23               	bsf	frexp@value+3,5,c
  3076  002826  9C23               	bcf	frexp@value+3,6,c
  3077  002828  9E22               	bcf	frexp@value+2,7,c
  3078  00282A  C020  F020         	movff	frexp@value,?_frexp
  3079  00282E  C021  F021         	movff	frexp@value+1,?_frexp+1
  3080  002832  C022  F022         	movff	frexp@value+2,?_frexp+2
  3081  002836  C023  F023         	movff	frexp@value+3,?_frexp+3
  3082  00283A  0012               	return	
  3083  00283C  0012               	return		;funcret
  3084  00283E                     __end_of_frexp:
  3085                           	opt stack 0
  3086                           tblptru	equ	0xFF8
  3087                           tblptrh	equ	0xFF7
  3088                           postinc0	equ	0xFEE
  3089                           wreg	equ	0xFE8
  3090                           postinc2	equ	0xFDE
  3091                           postdec2	equ	0xFDD
  3092                           fsr2h	equ	0xFDA
  3093                           fsr2l	equ	0xFD9
  3094                           status	equ	0xFD8
  3095                           
  3096 ;; *************** function ___fltol *****************
  3097 ;; Defined at:
  3098 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fltol.c"
  3099 ;; Parameters:    Size  Location     Type
  3100 ;;  f1              4   31[COMRAM] PTR int 
  3101 ;; Auto vars:     Size  Location     Type
  3102 ;;  exp1            1   40[COMRAM] unsigned char 
  3103 ;;  sign1           1   39[COMRAM] unsigned char 
  3104 ;; Return value:  Size  Location     Type
  3105 ;;                  4   31[COMRAM] long 
  3106 ;; Registers used:
  3107 ;;		wreg, status,2, status,0
  3108 ;; Tracked objects:
  3109 ;;		On entry : 0/0
  3110 ;;		On exit  : 0/0
  3111 ;;		Unchanged: 0/0
  3112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3113 ;;      Params:         4       0       0       0       0       0       0
  3114 ;;      Locals:         2       0       0       0       0       0       0
  3115 ;;      Temps:          4       0       0       0       0       0       0
  3116 ;;      Totals:        10       0       0       0       0       0       0
  3117 ;;Total ram usage:       10 bytes
  3118 ;; Hardware stack levels used:    1
  3119 ;; Hardware stack levels required when called:    2
  3120 ;; This function calls:
  3121 ;;		Nothing
  3122 ;; This function is called by:
  3123 ;;		_pow
  3124 ;;		_exp
  3125 ;;		_floor
  3126 ;; This function uses a non-reentrant model
  3127 ;;
  3128                           
  3129                           	psect	text13
  3130  00252A                     __ptext13:
  3131                           	opt stack 0
  3132  00252A                     ___fltol:
  3133                           	opt stack 24
  3134                           
  3135                           ;incstack = 0
  3136  00252A  3422               	rlcf	___fltol@f1+2,w,c
  3137  00252C  3423               	rlcf	___fltol@f1+3,w,c
  3138  00252E  6E29               	movwf	___fltol@exp1,c
  3139  002530  5029               	movf	___fltol@exp1,w,c
  3140  002532  A4D8               	btfss	status,2,c
  3141  002534  D009               	goto	l2617
  3142  002536  0E00               	movlw	0
  3143  002538  6E20               	movwf	?___fltol,c
  3144  00253A  0E00               	movlw	0
  3145  00253C  6E21               	movwf	?___fltol+1,c
  3146  00253E  0E00               	movlw	0
  3147  002540  6E22               	movwf	?___fltol+2,c
  3148  002542  0E00               	movlw	0
  3149  002544  6E23               	movwf	?___fltol+3,c
  3150  002546  0012               	return	
  3151  002548                     l2617:
  3152  002548  C020  F024         	movff	___fltol@f1,??___fltol
  3153  00254C  C021  F025         	movff	___fltol@f1+1,??___fltol+1
  3154  002550  C022  F026         	movff	___fltol@f1+2,??___fltol+2
  3155  002554  C023  F027         	movff	___fltol@f1+3,??___fltol+3
  3156  002558  0E20               	movlw	32
  3157  00255A  D005               	goto	u2690
  3158  00255C                     u2695:
  3159  00255C  90D8               	bcf	status,0,c
  3160  00255E  3227               	rrcf	??___fltol+3,f,c
  3161  002560  3226               	rrcf	??___fltol+2,f,c
  3162  002562  3225               	rrcf	??___fltol+1,f,c
  3163  002564  3224               	rrcf	??___fltol,f,c
  3164  002566                     u2690:
  3165  002566  2EE8               	decfsz	wreg,f,c
  3166  002568  D7F9               	goto	u2695
  3167  00256A  5024               	movf	??___fltol,w,c
  3168  00256C  6E28               	movwf	___fltol@sign1,c
  3169  00256E  8E22               	bsf	___fltol@f1+2,7,c
  3170  002570  0EFF               	movlw	255
  3171  002572  1620               	andwf	___fltol@f1,f,c
  3172  002574  0EFF               	movlw	255
  3173  002576  1621               	andwf	___fltol@f1+1,f,c
  3174  002578  0EFF               	movlw	255
  3175  00257A  1622               	andwf	___fltol@f1+2,f,c
  3176  00257C  0E00               	movlw	0
  3177  00257E  1623               	andwf	___fltol@f1+3,f,c
  3178  002580  0E96               	movlw	150
  3179  002582  5E29               	subwf	___fltol@exp1,f,c
  3180  002584  AE29               	btfss	___fltol@exp1,7,c
  3181  002586  D017               	goto	l2637
  3182  002588  5029               	movf	___fltol@exp1,w,c
  3183  00258A  0A80               	xorlw	128
  3184  00258C  0F97               	addlw	151
  3185  00258E  B0D8               	btfsc	status,0,c
  3186  002590  D00A               	goto	l2633
  3187  002592  0E00               	movlw	0
  3188  002594  6E20               	movwf	?___fltol,c
  3189  002596  0E00               	movlw	0
  3190  002598  6E21               	movwf	?___fltol+1,c
  3191  00259A  0E00               	movlw	0
  3192  00259C  6E22               	movwf	?___fltol+2,c
  3193  00259E  0E00               	movlw	0
  3194  0025A0  6E23               	movwf	?___fltol+3,c
  3195  0025A2  0012               	return	
  3196  0025A4  D000               	goto	l2633
  3197  0025A6                     l2633:
  3198  0025A6  90D8               	bcf	status,0,c
  3199  0025A8  3223               	rrcf	___fltol@f1+3,f,c
  3200  0025AA  3222               	rrcf	___fltol@f1+2,f,c
  3201  0025AC  3221               	rrcf	___fltol@f1+1,f,c
  3202  0025AE  3220               	rrcf	___fltol@f1,f,c
  3203  0025B0  3E29               	incfsz	___fltol@exp1,f,c
  3204  0025B2  D7F9               	goto	l2633
  3205  0025B4  D019               	goto	l2647
  3206  0025B6                     l2637:
  3207  0025B6  0E1F               	movlw	31
  3208  0025B8  6429               	cpfsgt	___fltol@exp1,c
  3209  0025BA  D011               	goto	l2645
  3210  0025BC  0E00               	movlw	0
  3211  0025BE  6E20               	movwf	?___fltol,c
  3212  0025C0  0E00               	movlw	0
  3213  0025C2  6E21               	movwf	?___fltol+1,c
  3214  0025C4  0E00               	movlw	0
  3215  0025C6  6E22               	movwf	?___fltol+2,c
  3216  0025C8  0E00               	movlw	0
  3217  0025CA  6E23               	movwf	?___fltol+3,c
  3218  0025CC  0012               	return	
  3219  0025CE  D007               	goto	l2645
  3220  0025D0                     l2643:
  3221  0025D0  90D8               	bcf	status,0,c
  3222  0025D2  3620               	rlcf	___fltol@f1,f,c
  3223  0025D4  3621               	rlcf	___fltol@f1+1,f,c
  3224  0025D6  3622               	rlcf	___fltol@f1+2,f,c
  3225  0025D8  3623               	rlcf	___fltol@f1+3,f,c
  3226  0025DA  0629               	decf	___fltol@exp1,f,c
  3227  0025DC  D000               	goto	l2645
  3228  0025DE                     l2645:
  3229  0025DE  5029               	movf	___fltol@exp1,w,c
  3230  0025E0  B4D8               	btfsc	status,2,c
  3231  0025E2  D002               	goto	l2647
  3232  0025E4  D7F5               	goto	l2643
  3233  0025E6  D000               	goto	l2647
  3234  0025E8                     l2647:
  3235  0025E8  5028               	movf	___fltol@sign1,w,c
  3236  0025EA  B4D8               	btfsc	status,2,c
  3237  0025EC  D009               	goto	l2651
  3238  0025EE  1E23               	comf	___fltol@f1+3,f,c
  3239  0025F0  1E22               	comf	___fltol@f1+2,f,c
  3240  0025F2  1E21               	comf	___fltol@f1+1,f,c
  3241  0025F4  6C20               	negf	___fltol@f1,c
  3242  0025F6  0E00               	movlw	0
  3243  0025F8  2221               	addwfc	___fltol@f1+1,f,c
  3244  0025FA  2222               	addwfc	___fltol@f1+2,f,c
  3245  0025FC  2223               	addwfc	___fltol@f1+3,f,c
  3246  0025FE  D000               	goto	l2651
  3247  002600                     l2651:
  3248  002600  C020  F020         	movff	___fltol@f1,?___fltol
  3249  002604  C021  F021         	movff	___fltol@f1+1,?___fltol+1
  3250  002608  C022  F022         	movff	___fltol@f1+2,?___fltol+2
  3251  00260C  C023  F023         	movff	___fltol@f1+3,?___fltol+3
  3252  002610  0012               	return	
  3253  002612  0012               	return		;funcret
  3254  002614                     __end_of___fltol:
  3255                           	opt stack 0
  3256                           tblptru	equ	0xFF8
  3257                           tblptrh	equ	0xFF7
  3258                           postinc0	equ	0xFEE
  3259                           wreg	equ	0xFE8
  3260                           postinc2	equ	0xFDE
  3261                           postdec2	equ	0xFDD
  3262                           fsr2h	equ	0xFDA
  3263                           fsr2l	equ	0xFD9
  3264                           status	equ	0xFD8
  3265                           
  3266 ;; *************** function ___altofl *****************
  3267 ;; Defined at:
  3268 ;;		line 36 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\altofl.c"
  3269 ;; Parameters:    Size  Location     Type
  3270 ;;  c               4    0[BANK0 ] long 
  3271 ;; Auto vars:     Size  Location     Type
  3272 ;;  sign            1   41[COMRAM] unsigned char 
  3273 ;; Return value:  Size  Location     Type
  3274 ;;                  4    0[BANK0 ] unsigned char 
  3275 ;; Registers used:
  3276 ;;		wreg, status,2, status,0, cstack
  3277 ;; Tracked objects:
  3278 ;;		On entry : 0/0
  3279 ;;		On exit  : 0/0
  3280 ;;		Unchanged: 0/0
  3281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3282 ;;      Params:         0       4       0       0       0       0       0
  3283 ;;      Locals:         1       0       0       0       0       0       0
  3284 ;;      Temps:          0       0       0       0       0       0       0
  3285 ;;      Totals:         1       4       0       0       0       0       0
  3286 ;;Total ram usage:        5 bytes
  3287 ;; Hardware stack levels used:    1
  3288 ;; Hardware stack levels required when called:    3
  3289 ;; This function calls:
  3290 ;;		___flpack
  3291 ;; This function is called by:
  3292 ;;		_floor
  3293 ;; This function uses a non-reentrant model
  3294 ;;
  3295                           
  3296                           	psect	text14
  3297  002BBA                     __ptext14:
  3298                           	opt stack 0
  3299  002BBA                     ___altofl:
  3300                           	opt stack 23
  3301                           
  3302                           ;incstack = 0
  3303  002BBA  0E00               	movlw	0
  3304  002BBC  6E2A               	movwf	___altofl@sign,c
  3305  002BBE  0100               	movlb	0	; () banked
  3306  002BC0  AF63               	btfss	(___altofl@c+3)& (0+255),7,b
  3307  002BC2  D00C               	goto	l3581
  3308                           
  3309                           ; BSR set to: 0
  3310  002BC4  0100               	movlb	0	; () banked
  3311  002BC6  1F63               	comf	(___altofl@c+3)& (0+255),f,b
  3312  002BC8  1F62               	comf	(___altofl@c+2)& (0+255),f,b
  3313  002BCA  1F61               	comf	(___altofl@c+1)& (0+255),f,b
  3314  002BCC  6D60               	negf	___altofl@c& (0+255),b
  3315  002BCE  0E00               	movlw	0
  3316  002BD0  2361               	addwfc	(___altofl@c+1)& (0+255),f,b
  3317  002BD2  2362               	addwfc	(___altofl@c+2)& (0+255),f,b
  3318  002BD4  2363               	addwfc	(___altofl@c+3)& (0+255),f,b
  3319                           
  3320                           ; BSR set to: 0
  3321  002BD6  0E01               	movlw	1
  3322  002BD8  6E2A               	movwf	___altofl@sign,c
  3323  002BDA  D000               	goto	l3581
  3324  002BDC                     l3581:
  3325                           
  3326                           ; BSR set to: 0
  3327  002BDC  C060  F020         	movff	___altofl@c,___flpack@arg
  3328  002BE0  C061  F021         	movff	___altofl@c+1,___flpack@arg+1
  3329  002BE4  C062  F022         	movff	___altofl@c+2,___flpack@arg+2
  3330  002BE8  C063  F023         	movff	___altofl@c+3,___flpack@arg+3
  3331  002BEC  0E96               	movlw	150
  3332  002BEE  6E24               	movwf	___flpack@exp,c
  3333  002BF0  C02A  F025         	movff	___altofl@sign,___flpack@sign
  3334  002BF4  EC90  F011         	call	___flpack	;wreg free
  3335  002BF8  C020  F060         	movff	?___flpack,?___altofl
  3336  002BFC  C021  F061         	movff	?___flpack+1,?___altofl+1
  3337  002C00  C022  F062         	movff	?___flpack+2,?___altofl+2
  3338  002C04  C023  F063         	movff	?___flpack+3,?___altofl+3
  3339  002C08  0012               	return	
  3340  002C0A  0012               	return		;funcret
  3341  002C0C                     __end_of___altofl:
  3342                           	opt stack 0
  3343                           tblptru	equ	0xFF8
  3344                           tblptrh	equ	0xFF7
  3345                           postinc0	equ	0xFEE
  3346                           wreg	equ	0xFE8
  3347                           postinc2	equ	0xFDE
  3348                           postdec2	equ	0xFDD
  3349                           fsr2h	equ	0xFDA
  3350                           fsr2l	equ	0xFD9
  3351                           status	equ	0xFD8
  3352                           
  3353 ;; *************** function ___lltofl *****************
  3354 ;; Defined at:
  3355 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltofl.c"
  3356 ;; Parameters:    Size  Location     Type
  3357 ;;  c               4    0[BANK0 ] unsigned long 
  3358 ;; Auto vars:     Size  Location     Type
  3359 ;;		None
  3360 ;; Return value:  Size  Location     Type
  3361 ;;                  4    0[BANK0 ] unsigned long 
  3362 ;; Registers used:
  3363 ;;		wreg, status,2, status,0, cstack
  3364 ;; Tracked objects:
  3365 ;;		On entry : 0/0
  3366 ;;		On exit  : 0/0
  3367 ;;		Unchanged: 0/0
  3368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3369 ;;      Params:         0       4       0       0       0       0       0
  3370 ;;      Locals:         0       0       0       0       0       0       0
  3371 ;;      Temps:          0       0       0       0       0       0       0
  3372 ;;      Totals:         0       4       0       0       0       0       0
  3373 ;;Total ram usage:        4 bytes
  3374 ;; Hardware stack levels used:    1
  3375 ;; Hardware stack levels required when called:    3
  3376 ;; This function calls:
  3377 ;;		___flpack
  3378 ;; This function is called by:
  3379 ;;		_pow
  3380 ;; This function uses a non-reentrant model
  3381 ;;
  3382                           
  3383                           	psect	text15
  3384  002DEC                     __ptext15:
  3385                           	opt stack 0
  3386  002DEC                     ___lltofl:
  3387                           	opt stack 25
  3388                           
  3389                           ;incstack = 0
  3390  002DEC  C060  F020         	movff	___lltofl@c,___flpack@arg
  3391  002DF0  C061  F021         	movff	___lltofl@c+1,___flpack@arg+1
  3392  002DF4  C062  F022         	movff	___lltofl@c+2,___flpack@arg+2
  3393  002DF8  C063  F023         	movff	___lltofl@c+3,___flpack@arg+3
  3394  002DFC  0E96               	movlw	150
  3395  002DFE  6E24               	movwf	___flpack@exp,c
  3396  002E00  0E00               	movlw	0
  3397  002E02  6E25               	movwf	___flpack@sign,c
  3398  002E04  EC90  F011         	call	___flpack	;wreg free
  3399  002E08  C020  F060         	movff	?___flpack,?___lltofl
  3400  002E0C  C021  F061         	movff	?___flpack+1,?___lltofl+1
  3401  002E10  C022  F062         	movff	?___flpack+2,?___lltofl+2
  3402  002E14  C023  F063         	movff	?___flpack+3,?___lltofl+3
  3403  002E18  0012               	return	
  3404  002E1A  0012               	return		;funcret
  3405  002E1C                     __end_of___lltofl:
  3406                           	opt stack 0
  3407                           tblptru	equ	0xFF8
  3408                           tblptrh	equ	0xFF7
  3409                           postinc0	equ	0xFEE
  3410                           wreg	equ	0xFE8
  3411                           postinc2	equ	0xFDE
  3412                           postdec2	equ	0xFDD
  3413                           fsr2h	equ	0xFDA
  3414                           fsr2l	equ	0xFD9
  3415                           status	equ	0xFD8
  3416                           
  3417 ;; *************** function _acos *****************
  3418 ;; Defined at:
  3419 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\acos.c"
  3420 ;; Parameters:    Size  Location     Type
  3421 ;;  x               4  115[BANK0 ] unsigned long 
  3422 ;; Auto vars:     Size  Location     Type
  3423 ;;		None
  3424 ;; Return value:  Size  Location     Type
  3425 ;;                  4  115[BANK0 ] unsigned long 
  3426 ;; Registers used:
  3427 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3428 ;; Tracked objects:
  3429 ;;		On entry : 0/0
  3430 ;;		On exit  : 0/0
  3431 ;;		Unchanged: 0/0
  3432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3433 ;;      Params:         0       4       0       0       0       0       0
  3434 ;;      Locals:         0       4       0       0       0       0       0
  3435 ;;      Temps:          0       0       0       0       0       0       0
  3436 ;;      Totals:         0       8       0       0       0       0       0
  3437 ;;Total ram usage:        8 bytes
  3438 ;; Hardware stack levels used:    1
  3439 ;; Hardware stack levels required when called:    7
  3440 ;; This function calls:
  3441 ;;		___fladd
  3442 ;;		___flneg
  3443 ;;		_asin
  3444 ;; This function is called by:
  3445 ;;		_Gyros_Update
  3446 ;; This function uses a non-reentrant model
  3447 ;;
  3448                           
  3449                           	psect	text16
  3450  0029C6                     __ptext16:
  3451                           	opt stack 0
  3452  0029C6                     _acos:
  3453                           	opt stack 22
  3454                           
  3455                           ;incstack = 0
  3456  0029C6  C0D3  F0CF         	movff	acos@x,asin@x
  3457  0029CA  C0D4  F0D0         	movff	acos@x+1,asin@x+1
  3458  0029CE  C0D5  F0D1         	movff	acos@x+2,asin@x+2
  3459  0029D2  C0D6  F0D2         	movff	acos@x+3,asin@x+3
  3460  0029D6  ECA1  F005         	call	_asin	;wreg free
  3461  0029DA  C0CF  F0D7         	movff	?_asin,_acos$2027
  3462  0029DE  C0D0  F0D8         	movff	?_asin+1,_acos$2027+1
  3463  0029E2  C0D1  F0D9         	movff	?_asin+2,_acos$2027+2
  3464  0029E6  C0D2  F0DA         	movff	?_asin+3,_acos$2027+3
  3465  0029EA  C0D7  F020         	movff	_acos$2027,___flneg@f1
  3466  0029EE  C0D8  F021         	movff	_acos$2027+1,___flneg@f1+1
  3467  0029F2  C0D9  F022         	movff	_acos$2027+2,___flneg@f1+2
  3468  0029F6  C0DA  F023         	movff	_acos$2027+3,___flneg@f1+3
  3469  0029FA  ECC4  F016         	call	___flneg	;wreg free
  3470  0029FE  C020  F064         	movff	?___flneg,___fladd@f1
  3471  002A02  C021  F065         	movff	?___flneg+1,___fladd@f1+1
  3472  002A06  C022  F066         	movff	?___flneg+2,___fladd@f1+2
  3473  002A0A  C023  F067         	movff	?___flneg+3,___fladd@f1+3
  3474  002A0E  0EDB               	movlw	219
  3475  002A10  0100               	movlb	0	; () banked
  3476  002A12  6F68               	movwf	___fladd@f2& (0+255),b
  3477  002A14  0E0F               	movlw	15
  3478  002A16  6F69               	movwf	(___fladd@f2+1)& (0+255),b
  3479  002A18  0EC9               	movlw	201
  3480  002A1A  6F6A               	movwf	(___fladd@f2+2)& (0+255),b
  3481  002A1C  0E3F               	movlw	63
  3482  002A1E  6F6B               	movwf	(___fladd@f2+3)& (0+255),b
  3483  002A20  EC79  F008         	call	___fladd	;wreg free
  3484  002A24  C064  F0D3         	movff	?___fladd,?_acos
  3485  002A28  C065  F0D4         	movff	?___fladd+1,?_acos+1
  3486  002A2C  C066  F0D5         	movff	?___fladd+2,?_acos+2
  3487  002A30  C067  F0D6         	movff	?___fladd+3,?_acos+3
  3488  002A34  0012               	return	
  3489  002A36  0012               	return		;funcret
  3490  002A38                     __end_of_acos:
  3491                           	opt stack 0
  3492                           tblptru	equ	0xFF8
  3493                           tblptrh	equ	0xFF7
  3494                           postinc0	equ	0xFEE
  3495                           wreg	equ	0xFE8
  3496                           postinc2	equ	0xFDE
  3497                           postdec2	equ	0xFDD
  3498                           fsr2h	equ	0xFDA
  3499                           fsr2l	equ	0xFD9
  3500                           status	equ	0xFD8
  3501                           
  3502 ;; *************** function _asin *****************
  3503 ;; Defined at:
  3504 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\asin.c"
  3505 ;; Parameters:    Size  Location     Type
  3506 ;;  x               4  111[BANK0 ] unsigned long 
  3507 ;; Auto vars:     Size  Location     Type
  3508 ;;  y               4   16[BANK1 ] unsigned long 
  3509 ;;  sgn             4    0[BANK1 ] unsigned long 
  3510 ;; Return value:  Size  Location     Type
  3511 ;;                  4  111[BANK0 ] unsigned long 
  3512 ;; Registers used:
  3513 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3514 ;; Tracked objects:
  3515 ;;		On entry : 0/0
  3516 ;;		On exit  : 0/0
  3517 ;;		Unchanged: 0/0
  3518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3519 ;;      Params:         0       4       0       0       0       0       0
  3520 ;;      Locals:         0       0      24       0       0       0       0
  3521 ;;      Temps:          0       0       0       0       0       0       0
  3522 ;;      Totals:         0       4      24       0       0       0       0
  3523 ;;Total ram usage:       28 bytes
  3524 ;; Hardware stack levels used:    1
  3525 ;; Hardware stack levels required when called:    6
  3526 ;; This function calls:
  3527 ;;		___fladd
  3528 ;;		___fldiv
  3529 ;;		___flge
  3530 ;;		___flmul
  3531 ;;		___flneg
  3532 ;;		_atan
  3533 ;;		_fabs
  3534 ;;		_sqrt
  3535 ;; This function is called by:
  3536 ;;		_acos
  3537 ;; This function uses a non-reentrant model
  3538 ;;
  3539                           
  3540                           	psect	text17
  3541  000B42                     __ptext17:
  3542                           	opt stack 0
  3543  000B42                     _asin:
  3544                           	opt stack 22
  3545                           
  3546                           ;incstack = 0
  3547  000B42  0E00               	movlw	0
  3548  000B44  0100               	movlb	0	; () banked
  3549  000B46  6F60               	movwf	___flge@ff1& (0+255),b
  3550  000B48  0E00               	movlw	0
  3551  000B4A  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  3552  000B4C  0E80               	movlw	128
  3553  000B4E  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  3554  000B50  0E3F               	movlw	63
  3555  000B52  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  3556  000B54  C0CF  F024         	movff	asin@x,fabs@d
  3557  000B58  C0D0  F025         	movff	asin@x+1,fabs@d+1
  3558  000B5C  C0D1  F026         	movff	asin@x+2,fabs@d+2
  3559  000B60  C0D2  F027         	movff	asin@x+3,fabs@d+3
  3560  000B64  EC8D  F016         	call	_fabs	;wreg free
  3561  000B68  C024  F064         	movff	?_fabs,___flge@ff2
  3562  000B6C  C025  F065         	movff	?_fabs+1,___flge@ff2+1
  3563  000B70  C026  F066         	movff	?_fabs+2,___flge@ff2+2
  3564  000B74  C027  F067         	movff	?_fabs+3,___flge@ff2+3
  3565  000B78  EC0A  F013         	call	___flge	;wreg free
  3566  000B7C  0100               	movlb	0	; () banked
  3567  000B7E  B0D8               	btfsc	status,0,c
  3568  000B80  D00F               	goto	l3905
  3569                           
  3570                           ; BSR set to: 0
  3571  000B82  0E00               	movlw	0
  3572  000B84  0100               	movlb	0	; () banked
  3573  000B86  6FF9               	movwf	(_errno+1)& (0+255),b
  3574  000B88  0E21               	movlw	33
  3575  000B8A  6FF8               	movwf	_errno& (0+255),b
  3576  000B8C  0E00               	movlw	0
  3577  000B8E  0100               	movlb	0	; () banked
  3578  000B90  6FCF               	movwf	?_asin& (0+255),b
  3579  000B92  0E00               	movlw	0
  3580  000B94  6FD0               	movwf	(?_asin+1)& (0+255),b
  3581  000B96  0E00               	movlw	0
  3582  000B98  6FD1               	movwf	(?_asin+2)& (0+255),b
  3583  000B9A  0E00               	movlw	0
  3584  000B9C  6FD2               	movwf	(?_asin+3)& (0+255),b
  3585                           
  3586                           ; BSR set to: 0
  3587  000B9E  0012               	return	
  3588  000BA0                     l3905:
  3589                           
  3590                           ; BSR set to: 0
  3591  000BA0  0E00               	movlw	0
  3592  000BA2  0101               	movlb	1	; () banked
  3593  000BA4  6F00               	movwf	asin@sgn& (0+255),b
  3594  000BA6  0E00               	movlw	0
  3595  000BA8  6F01               	movwf	(asin@sgn+1)& (0+255),b
  3596  000BAA  0E80               	movlw	128
  3597  000BAC  6F02               	movwf	(asin@sgn+2)& (0+255),b
  3598  000BAE  0E3F               	movlw	63
  3599  000BB0  6F03               	movwf	(asin@sgn+3)& (0+255),b
  3600                           
  3601                           ; BSR set to: 1
  3602  000BB2  C0CF  F073         	movff	asin@x,___flmul@f2
  3603  000BB6  C0D0  F074         	movff	asin@x+1,___flmul@f2+1
  3604  000BBA  C0D1  F075         	movff	asin@x+2,___flmul@f2+2
  3605  000BBE  C0D2  F076         	movff	asin@x+3,___flmul@f2+3
  3606  000BC2  C0CF  F06F         	movff	asin@x,___flmul@f1
  3607  000BC6  C0D0  F070         	movff	asin@x+1,___flmul@f1+1
  3608  000BCA  C0D1  F071         	movff	asin@x+2,___flmul@f1+2
  3609  000BCE  C0D2  F072         	movff	asin@x+3,___flmul@f1+3
  3610  000BD2  EC92  F00E         	call	___flmul	;wreg free
  3611  000BD6  C06F  F020         	movff	?___flmul,___flneg@f1
  3612  000BDA  C070  F021         	movff	?___flmul+1,___flneg@f1+1
  3613  000BDE  C071  F022         	movff	?___flmul+2,___flneg@f1+2
  3614  000BE2  C072  F023         	movff	?___flmul+3,___flneg@f1+3
  3615  000BE6  ECC4  F016         	call	___flneg	;wreg free
  3616  000BEA  C020  F064         	movff	?___flneg,___fladd@f1
  3617  000BEE  C021  F065         	movff	?___flneg+1,___fladd@f1+1
  3618  000BF2  C022  F066         	movff	?___flneg+2,___fladd@f1+2
  3619  000BF6  C023  F067         	movff	?___flneg+3,___fladd@f1+3
  3620  000BFA  0E00               	movlw	0
  3621  000BFC  0100               	movlb	0	; () banked
  3622  000BFE  6F68               	movwf	___fladd@f2& (0+255),b
  3623  000C00  0E00               	movlw	0
  3624  000C02  6F69               	movwf	(___fladd@f2+1)& (0+255),b
  3625  000C04  0E80               	movlw	128
  3626  000C06  6F6A               	movwf	(___fladd@f2+2)& (0+255),b
  3627  000C08  0E3F               	movlw	63
  3628  000C0A  6F6B               	movwf	(___fladd@f2+3)& (0+255),b
  3629  000C0C  EC79  F008         	call	___fladd	;wreg free
  3630  000C10  C064  F104         	movff	?___fladd,_asin$2028
  3631  000C14  C065  F105         	movff	?___fladd+1,_asin$2028+1
  3632  000C18  C066  F106         	movff	?___fladd+2,_asin$2028+2
  3633  000C1C  C067  F107         	movff	?___fladd+3,_asin$2028+3
  3634  000C20  C104  F0B6         	movff	_asin$2028,sqrt@y
  3635  000C24  C105  F0B7         	movff	_asin$2028+1,sqrt@y+1
  3636  000C28  C106  F0B8         	movff	_asin$2028+2,sqrt@y+2
  3637  000C2C  C107  F0B9         	movff	_asin$2028+3,sqrt@y+3
  3638  000C30  ECD4  F00A         	call	_sqrt	;wreg free
  3639  000C34  C0B6  F110         	movff	?_sqrt,asin@y
  3640  000C38  C0B7  F111         	movff	?_sqrt+1,asin@y+1
  3641  000C3C  C0B8  F112         	movff	?_sqrt+2,asin@y+2
  3642  000C40  C0B9  F113         	movff	?_sqrt+3,asin@y+3
  3643  000C44  C0CF  F024         	movff	asin@x,fabs@d
  3644  000C48  C0D0  F025         	movff	asin@x+1,fabs@d+1
  3645  000C4C  C0D1  F026         	movff	asin@x+2,fabs@d+2
  3646  000C50  C0D2  F027         	movff	asin@x+3,fabs@d+3
  3647  000C54  EC8D  F016         	call	_fabs	;wreg free
  3648  000C58  C024  F060         	movff	?_fabs,___flge@ff1
  3649  000C5C  C025  F061         	movff	?_fabs+1,___flge@ff1+1
  3650  000C60  C026  F062         	movff	?_fabs+2,___flge@ff1+2
  3651  000C64  C027  F063         	movff	?_fabs+3,___flge@ff1+3
  3652  000C68  0E8F               	movlw	143
  3653  000C6A  0100               	movlb	0	; () banked
  3654  000C6C  6F64               	movwf	___flge@ff2& (0+255),b
  3655  000C6E  0EC2               	movlw	194
  3656  000C70  6F65               	movwf	(___flge@ff2+1)& (0+255),b
  3657  000C72  0E35               	movlw	53
  3658  000C74  6F66               	movwf	(___flge@ff2+2)& (0+255),b
  3659  000C76  0E3F               	movlw	63
  3660  000C78  6F67               	movwf	(___flge@ff2+3)& (0+255),b
  3661  000C7A  EC0A  F013         	call	___flge	;wreg free
  3662  000C7E  0100               	movlb	0	; () banked
  3663  000C80  B0D8               	btfsc	status,0,c
  3664  000C82  D02D               	goto	l3919
  3665                           
  3666                           ; BSR set to: 0
  3667  000C84  C0CF  F07E         	movff	asin@x,___fldiv@f1
  3668  000C88  C0D0  F07F         	movff	asin@x+1,___fldiv@f1+1
  3669  000C8C  C0D1  F080         	movff	asin@x+2,___fldiv@f1+2
  3670  000C90  C0D2  F081         	movff	asin@x+3,___fldiv@f1+3
  3671  000C94  C110  F082         	movff	asin@y,___fldiv@f2
  3672  000C98  C111  F083         	movff	asin@y+1,___fldiv@f2+1
  3673  000C9C  C112  F084         	movff	asin@y+2,___fldiv@f2+2
  3674  000CA0  C113  F085         	movff	asin@y+3,___fldiv@f2+3
  3675  000CA4  EC44  F00F         	call	___fldiv	;wreg free
  3676  000CA8  C07E  F114         	movff	?___fldiv,_asin$2029
  3677  000CAC  C07F  F115         	movff	?___fldiv+1,_asin$2029+1
  3678  000CB0  C080  F116         	movff	?___fldiv+2,_asin$2029+2
  3679  000CB4  C081  F117         	movff	?___fldiv+3,_asin$2029+3
  3680  000CB8  C114  F08E         	movff	_asin$2029,atan@f
  3681  000CBC  C115  F08F         	movff	_asin$2029+1,atan@f+1
  3682  000CC0  C116  F090         	movff	_asin$2029+2,atan@f+2
  3683  000CC4  C117  F091         	movff	_asin$2029+3,atan@f+3
  3684  000CC8  ECA9  F009         	call	_atan	;wreg free
  3685  000CCC  C08E  F0CF         	movff	?_atan,?_asin
  3686  000CD0  C08F  F0D0         	movff	?_atan+1,?_asin+1
  3687  000CD4  C090  F0D1         	movff	?_atan+2,?_asin+2
  3688  000CD8  C091  F0D2         	movff	?_atan+3,?_asin+3
  3689  000CDC  0012               	return	
  3690  000CDE                     l3919:
  3691  000CDE  0100               	movlb	0	; () banked
  3692  000CE0  AFD2               	btfss	(asin@x+3)& (0+255),7,b
  3693  000CE2  D06E               	goto	l3931
  3694                           
  3695                           ; BSR set to: 0
  3696  000CE4  C0CF  F082         	movff	asin@x,___fldiv@f2
  3697  000CE8  C0D0  F083         	movff	asin@x+1,___fldiv@f2+1
  3698  000CEC  C0D1  F084         	movff	asin@x+2,___fldiv@f2+2
  3699  000CF0  C0D2  F085         	movff	asin@x+3,___fldiv@f2+3
  3700  000CF4  C110  F020         	movff	asin@y,___flneg@f1
  3701  000CF8  C111  F021         	movff	asin@y+1,___flneg@f1+1
  3702  000CFC  C112  F022         	movff	asin@y+2,___flneg@f1+2
  3703  000D00  C113  F023         	movff	asin@y+3,___flneg@f1+3
  3704  000D04  ECC4  F016         	call	___flneg	;wreg free
  3705  000D08  C020  F07E         	movff	?___flneg,___fldiv@f1
  3706  000D0C  C021  F07F         	movff	?___flneg+1,___fldiv@f1+1
  3707  000D10  C022  F080         	movff	?___flneg+2,___fldiv@f1+2
  3708  000D14  C023  F081         	movff	?___flneg+3,___fldiv@f1+3
  3709  000D18  EC44  F00F         	call	___fldiv	;wreg free
  3710  000D1C  C07E  F114         	movff	?___fldiv,_asin$2029
  3711  000D20  C07F  F115         	movff	?___fldiv+1,_asin$2029+1
  3712  000D24  C080  F116         	movff	?___fldiv+2,_asin$2029+2
  3713  000D28  C081  F117         	movff	?___fldiv+3,_asin$2029+3
  3714  000D2C  C114  F08E         	movff	_asin$2029,atan@f
  3715  000D30  C115  F08F         	movff	_asin$2029+1,atan@f+1
  3716  000D34  C116  F090         	movff	_asin$2029+2,atan@f+2
  3717  000D38  C117  F091         	movff	_asin$2029+3,atan@f+3
  3718  000D3C  ECA9  F009         	call	_atan	;wreg free
  3719  000D40  C08E  F10C         	movff	?_atan,_asin$2030
  3720  000D44  C08F  F10D         	movff	?_atan+1,_asin$2030+1
  3721  000D48  C090  F10E         	movff	?_atan+2,_asin$2030+2
  3722  000D4C  C091  F10F         	movff	?_atan+3,_asin$2030+3
  3723  000D50  0EDB               	movlw	219
  3724  000D52  0100               	movlb	0	; () banked
  3725  000D54  6F68               	movwf	___fladd@f2& (0+255),b
  3726  000D56  0E0F               	movlw	15
  3727  000D58  6F69               	movwf	(___fladd@f2+1)& (0+255),b
  3728  000D5A  0EC9               	movlw	201
  3729  000D5C  6F6A               	movwf	(___fladd@f2+2)& (0+255),b
  3730  000D5E  0E3F               	movlw	63
  3731  000D60  6F6B               	movwf	(___fladd@f2+3)& (0+255),b
  3732  000D62  C10C  F020         	movff	_asin$2030,___flneg@f1
  3733  000D66  C10D  F021         	movff	_asin$2030+1,___flneg@f1+1
  3734  000D6A  C10E  F022         	movff	_asin$2030+2,___flneg@f1+2
  3735  000D6E  C10F  F023         	movff	_asin$2030+3,___flneg@f1+3
  3736  000D72  ECC4  F016         	call	___flneg	;wreg free
  3737  000D76  C020  F064         	movff	?___flneg,___fladd@f1
  3738  000D7A  C021  F065         	movff	?___flneg+1,___fladd@f1+1
  3739  000D7E  C022  F066         	movff	?___flneg+2,___fladd@f1+2
  3740  000D82  C023  F067         	movff	?___flneg+3,___fladd@f1+3
  3741  000D86  EC79  F008         	call	___fladd	;wreg free
  3742  000D8A  C064  F108         	movff	?___fladd,_asin$2031
  3743  000D8E  C065  F109         	movff	?___fladd+1,_asin$2031+1
  3744  000D92  C066  F10A         	movff	?___fladd+2,_asin$2031+2
  3745  000D96  C067  F10B         	movff	?___fladd+3,_asin$2031+3
  3746  000D9A  C108  F020         	movff	_asin$2031,___flneg@f1
  3747  000D9E  C109  F021         	movff	_asin$2031+1,___flneg@f1+1
  3748  000DA2  C10A  F022         	movff	_asin$2031+2,___flneg@f1+2
  3749  000DA6  C10B  F023         	movff	_asin$2031+3,___flneg@f1+3
  3750  000DAA  ECC4  F016         	call	___flneg	;wreg free
  3751  000DAE  C020  F0CF         	movff	?___flneg,?_asin
  3752  000DB2  C021  F0D0         	movff	?___flneg+1,?_asin+1
  3753  000DB6  C022  F0D1         	movff	?___flneg+2,?_asin+2
  3754  000DBA  C023  F0D2         	movff	?___flneg+3,?_asin+3
  3755  000DBE  0012               	return	
  3756  000DC0                     l3931:
  3757  000DC0  C0CF  F082         	movff	asin@x,___fldiv@f2
  3758  000DC4  C0D0  F083         	movff	asin@x+1,___fldiv@f2+1
  3759  000DC8  C0D1  F084         	movff	asin@x+2,___fldiv@f2+2
  3760  000DCC  C0D2  F085         	movff	asin@x+3,___fldiv@f2+3
  3761  000DD0  C110  F07E         	movff	asin@y,___fldiv@f1
  3762  000DD4  C111  F07F         	movff	asin@y+1,___fldiv@f1+1
  3763  000DD8  C112  F080         	movff	asin@y+2,___fldiv@f1+2
  3764  000DDC  C113  F081         	movff	asin@y+3,___fldiv@f1+3
  3765  000DE0  EC44  F00F         	call	___fldiv	;wreg free
  3766  000DE4  C07E  F114         	movff	?___fldiv,_asin$2029
  3767  000DE8  C07F  F115         	movff	?___fldiv+1,_asin$2029+1
  3768  000DEC  C080  F116         	movff	?___fldiv+2,_asin$2029+2
  3769  000DF0  C081  F117         	movff	?___fldiv+3,_asin$2029+3
  3770  000DF4  C114  F08E         	movff	_asin$2029,atan@f
  3771  000DF8  C115  F08F         	movff	_asin$2029+1,atan@f+1
  3772  000DFC  C116  F090         	movff	_asin$2029+2,atan@f+2
  3773  000E00  C117  F091         	movff	_asin$2029+3,atan@f+3
  3774  000E04  ECA9  F009         	call	_atan	;wreg free
  3775  000E08  C08E  F10C         	movff	?_atan,_asin$2030
  3776  000E0C  C08F  F10D         	movff	?_atan+1,_asin$2030+1
  3777  000E10  C090  F10E         	movff	?_atan+2,_asin$2030+2
  3778  000E14  C091  F10F         	movff	?_atan+3,_asin$2030+3
  3779  000E18  C10C  F020         	movff	_asin$2030,___flneg@f1
  3780  000E1C  C10D  F021         	movff	_asin$2030+1,___flneg@f1+1
  3781  000E20  C10E  F022         	movff	_asin$2030+2,___flneg@f1+2
  3782  000E24  C10F  F023         	movff	_asin$2030+3,___flneg@f1+3
  3783  000E28  ECC4  F016         	call	___flneg	;wreg free
  3784  000E2C  C020  F064         	movff	?___flneg,___fladd@f1
  3785  000E30  C021  F065         	movff	?___flneg+1,___fladd@f1+1
  3786  000E34  C022  F066         	movff	?___flneg+2,___fladd@f1+2
  3787  000E38  C023  F067         	movff	?___flneg+3,___fladd@f1+3
  3788  000E3C  0EDB               	movlw	219
  3789  000E3E  0100               	movlb	0	; () banked
  3790  000E40  6F68               	movwf	___fladd@f2& (0+255),b
  3791  000E42  0E0F               	movlw	15
  3792  000E44  6F69               	movwf	(___fladd@f2+1)& (0+255),b
  3793  000E46  0EC9               	movlw	201
  3794  000E48  6F6A               	movwf	(___fladd@f2+2)& (0+255),b
  3795  000E4A  0E3F               	movlw	63
  3796  000E4C  6F6B               	movwf	(___fladd@f2+3)& (0+255),b
  3797  000E4E  EC79  F008         	call	___fladd	;wreg free
  3798  000E52  C064  F0CF         	movff	?___fladd,?_asin
  3799  000E56  C065  F0D0         	movff	?___fladd+1,?_asin+1
  3800  000E5A  C066  F0D1         	movff	?___fladd+2,?_asin+2
  3801  000E5E  C067  F0D2         	movff	?___fladd+3,?_asin+3
  3802  000E62  0012               	return	
  3803  000E64  0012               	return		;funcret
  3804  000E66                     __end_of_asin:
  3805                           	opt stack 0
  3806                           tblptru	equ	0xFF8
  3807                           tblptrh	equ	0xFF7
  3808                           postinc0	equ	0xFEE
  3809                           wreg	equ	0xFE8
  3810                           postinc2	equ	0xFDE
  3811                           postdec2	equ	0xFDD
  3812                           fsr2h	equ	0xFDA
  3813                           fsr2l	equ	0xFD9
  3814                           status	equ	0xFD8
  3815                           
  3816 ;; *************** function _sqrt *****************
  3817 ;; Defined at:
  3818 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\sqrt.c"
  3819 ;; Parameters:    Size  Location     Type
  3820 ;;  y               4   86[BANK0 ] unsigned long 
  3821 ;; Auto vars:     Size  Location     Type
  3822 ;;  x               4  107[BANK0 ] unsigned long 
  3823 ;;  q               4  103[BANK0 ] unsigned long 
  3824 ;;  z               4   98[BANK0 ] unsigned long 
  3825 ;;  og              4   94[BANK0 ] unsigned long 
  3826 ;;  i               1  102[BANK0 ] unsigned char 
  3827 ;; Return value:  Size  Location     Type
  3828 ;;                  4   86[BANK0 ] unsigned char 
  3829 ;; Registers used:
  3830 ;;		wreg, status,2, status,0, cstack
  3831 ;; Tracked objects:
  3832 ;;		On entry : 0/0
  3833 ;;		On exit  : 0/0
  3834 ;;		Unchanged: 0/0
  3835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3836 ;;      Params:         0       4       0       0       0       0       0
  3837 ;;      Locals:         0      17       0       0       0       0       0
  3838 ;;      Temps:          0       4       0       0       0       0       0
  3839 ;;      Totals:         0      25       0       0       0       0       0
  3840 ;;Total ram usage:       25 bytes
  3841 ;; Hardware stack levels used:    1
  3842 ;; Hardware stack levels required when called:    5
  3843 ;; This function calls:
  3844 ;;		___flge
  3845 ;;		___flmul
  3846 ;;		___flsub
  3847 ;; This function is called by:
  3848 ;;		_Gyros_Update
  3849 ;;		_asin
  3850 ;; This function uses a non-reentrant model
  3851 ;;
  3852                           
  3853                           	psect	text18
  3854  0015A8                     __ptext18:
  3855                           	opt stack 0
  3856  0015A8                     _sqrt:
  3857                           	opt stack 24
  3858                           
  3859                           ;incstack = 0
  3860  0015A8  0E00               	movlw	0
  3861  0015AA  0100               	movlb	0	; () banked
  3862  0015AC  6F60               	movwf	___flge@ff1& (0+255),b
  3863  0015AE  0E00               	movlw	0
  3864  0015B0  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  3865  0015B2  0E00               	movlw	0
  3866  0015B4  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  3867  0015B6  0E00               	movlw	0
  3868  0015B8  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  3869  0015BA  C0B6  F064         	movff	sqrt@y,___flge@ff2
  3870  0015BE  C0B7  F065         	movff	sqrt@y+1,___flge@ff2+1
  3871  0015C2  C0B8  F066         	movff	sqrt@y+2,___flge@ff2+2
  3872  0015C6  C0B9  F067         	movff	sqrt@y+3,___flge@ff2+3
  3873  0015CA  EC0A  F013         	call	___flge	;wreg free
  3874  0015CE  0100               	movlb	0	; () banked
  3875  0015D0  A0D8               	btfss	status,0,c
  3876  0015D2  D012               	goto	l1041
  3877                           
  3878                           ; BSR set to: 0
  3879  0015D4  0100               	movlb	0	; () banked
  3880  0015D6  AFB9               	btfss	(sqrt@y+3)& (0+255),7,b
  3881  0015D8  D005               	goto	l1042
  3882                           
  3883                           ; BSR set to: 0
  3884  0015DA  0E00               	movlw	0
  3885  0015DC  0100               	movlb	0	; () banked
  3886  0015DE  6FF9               	movwf	(_errno+1)& (0+255),b
  3887  0015E0  0E21               	movlw	33
  3888  0015E2  6FF8               	movwf	_errno& (0+255),b
  3889  0015E4                     l1042:
  3890                           
  3891                           ; BSR set to: 0
  3892  0015E4  0E00               	movlw	0
  3893  0015E6  0100               	movlb	0	; () banked
  3894  0015E8  6FB6               	movwf	?_sqrt& (0+255),b
  3895  0015EA  0E00               	movlw	0
  3896  0015EC  6FB7               	movwf	(?_sqrt+1)& (0+255),b
  3897  0015EE  0E00               	movlw	0
  3898  0015F0  6FB8               	movwf	(?_sqrt+2)& (0+255),b
  3899  0015F2  0E00               	movlw	0
  3900  0015F4  6FB9               	movwf	(?_sqrt+3)& (0+255),b
  3901                           
  3902                           ; BSR set to: 0
  3903  0015F6  0012               	return	
  3904  0015F8                     l1041:
  3905                           
  3906                           ; BSR set to: 0
  3907  0015F8  C0B6  F0C2         	movff	sqrt@y,sqrt@z
  3908  0015FC  C0B7  F0C3         	movff	sqrt@y+1,sqrt@z+1
  3909  001600  C0B8  F0C4         	movff	sqrt@y+2,sqrt@z+2
  3910  001604  C0B9  F0C5         	movff	sqrt@y+3,sqrt@z+3
  3911                           
  3912                           ; BSR set to: 0
  3913  001608  C0B6  F0BA         	movff	sqrt@y,??_sqrt
  3914  00160C  C0B7  F0BB         	movff	sqrt@y+1,??_sqrt+1
  3915  001610  C0B8  F0BC         	movff	sqrt@y+2,??_sqrt+2
  3916  001614  C0B9  F0BD         	movff	sqrt@y+3,??_sqrt+3
  3917  001618  0100               	movlb	0	; () banked
  3918  00161A  1FBA               	comf	??_sqrt& (0+255),f,b
  3919  00161C  1FBB               	comf	(??_sqrt+1)& (0+255),f,b
  3920  00161E  1FBC               	comf	(??_sqrt+2)& (0+255),f,b
  3921  001620  1FBD               	comf	(??_sqrt+3)& (0+255),f,b
  3922  001622  2BBA               	incf	??_sqrt& (0+255),f,b
  3923  001624  0E00               	movlw	0
  3924  001626  23BB               	addwfc	(??_sqrt+1)& (0+255),f,b
  3925  001628  23BC               	addwfc	(??_sqrt+2)& (0+255),f,b
  3926  00162A  23BD               	addwfc	(??_sqrt+3)& (0+255),f,b
  3927  00162C  0E5E               	movlw	94
  3928  00162E  0100               	movlb	0	; () banked
  3929  001630  25BA               	addwf	??_sqrt& (0+255),w,b
  3930  001632  0100               	movlb	0	; () banked
  3931  001634  6FCB               	movwf	sqrt@x& (0+255),b
  3932  001636  0EC8               	movlw	200
  3933  001638  0100               	movlb	0	; () banked
  3934  00163A  21BB               	addwfc	(??_sqrt+1)& (0+255),w,b
  3935  00163C  0100               	movlb	0	; () banked
  3936  00163E  6FCC               	movwf	(sqrt@x+1)& (0+255),b
  3937  001640  0E6E               	movlw	110
  3938  001642  0100               	movlb	0	; () banked
  3939  001644  21BC               	addwfc	(??_sqrt+2)& (0+255),w,b
  3940  001646  0100               	movlb	0	; () banked
  3941  001648  6FCD               	movwf	(sqrt@x+2)& (0+255),b
  3942  00164A  0EBE               	movlw	190
  3943  00164C  0100               	movlb	0	; () banked
  3944  00164E  21BD               	addwfc	(??_sqrt+3)& (0+255),w,b
  3945  001650  0100               	movlb	0	; () banked
  3946  001652  6FCE               	movwf	(sqrt@x+3)& (0+255),b
  3947                           
  3948                           ; BSR set to: 0
  3949  001654  0100               	movlb	0	; () banked
  3950  001656  90D8               	bcf	status,0,c
  3951  001658  33CE               	rrcf	(sqrt@x+3)& (0+255),f,b
  3952  00165A  33CD               	rrcf	(sqrt@x+2)& (0+255),f,b
  3953  00165C  33CC               	rrcf	(sqrt@x+1)& (0+255),f,b
  3954  00165E  33CB               	rrcf	sqrt@x& (0+255),f,b
  3955                           
  3956                           ; BSR set to: 0
  3957  001660  0E00               	movlw	0
  3958  001662  0100               	movlb	0	; () banked
  3959  001664  5FC2               	subwf	sqrt@z& (0+255),f,b
  3960  001666  0E00               	movlw	0
  3961  001668  5BC3               	subwfb	(sqrt@z+1)& (0+255),f,b
  3962  00166A  0E80               	movlw	128
  3963  00166C  5BC4               	subwfb	(sqrt@z+2)& (0+255),f,b
  3964  00166E  0E00               	movlw	0
  3965  001670  5BC5               	subwfb	(sqrt@z+3)& (0+255),f,b
  3966                           
  3967                           ; BSR set to: 0
  3968  001672  0E04               	movlw	4
  3969  001674  0100               	movlb	0	; () banked
  3970  001676  6FC6               	movwf	sqrt@i& (0+255),b
  3971  001678  D000               	goto	l3797
  3972  00167A                     l3797:
  3973                           
  3974                           ; BSR set to: 0
  3975  00167A  C0CB  F0BE         	movff	sqrt@x,sqrt@og
  3976  00167E  C0CC  F0BF         	movff	sqrt@x+1,sqrt@og+1
  3977  001682  C0CD  F0C0         	movff	sqrt@x+2,sqrt@og+2
  3978  001686  C0CE  F0C1         	movff	sqrt@x+3,sqrt@og+3
  3979                           
  3980                           ; BSR set to: 0
  3981  00168A  C0CB  F06F         	movff	sqrt@x,___flmul@f1
  3982  00168E  C0CC  F070         	movff	sqrt@x+1,___flmul@f1+1
  3983  001692  C0CD  F071         	movff	sqrt@x+2,___flmul@f1+2
  3984  001696  C0CE  F072         	movff	sqrt@x+3,___flmul@f1+3
  3985  00169A  C0C2  F073         	movff	sqrt@z,___flmul@f2
  3986  00169E  C0C3  F074         	movff	sqrt@z+1,___flmul@f2+1
  3987  0016A2  C0C4  F075         	movff	sqrt@z+2,___flmul@f2+2
  3988  0016A6  C0C5  F076         	movff	sqrt@z+3,___flmul@f2+3
  3989  0016AA  EC92  F00E         	call	___flmul	;wreg free
  3990  0016AE  C06F  F0C7         	movff	?___flmul,sqrt@q
  3991  0016B2  C070  F0C8         	movff	?___flmul+1,sqrt@q+1
  3992  0016B6  C071  F0C9         	movff	?___flmul+2,sqrt@q+2
  3993  0016BA  C072  F0CA         	movff	?___flmul+3,sqrt@q+3
  3994  0016BE  C0C7  F06F         	movff	sqrt@q,___flmul@f1
  3995  0016C2  C0C8  F070         	movff	sqrt@q+1,___flmul@f1+1
  3996  0016C6  C0C9  F071         	movff	sqrt@q+2,___flmul@f1+2
  3997  0016CA  C0CA  F072         	movff	sqrt@q+3,___flmul@f1+3
  3998  0016CE  C0CB  F073         	movff	sqrt@x,___flmul@f2
  3999  0016D2  C0CC  F074         	movff	sqrt@x+1,___flmul@f2+1
  4000  0016D6  C0CD  F075         	movff	sqrt@x+2,___flmul@f2+2
  4001  0016DA  C0CE  F076         	movff	sqrt@x+3,___flmul@f2+3
  4002  0016DE  EC92  F00E         	call	___flmul	;wreg free
  4003  0016E2  C06F  F0C7         	movff	?___flmul,sqrt@q
  4004  0016E6  C070  F0C8         	movff	?___flmul+1,sqrt@q+1
  4005  0016EA  C071  F0C9         	movff	?___flmul+2,sqrt@q+2
  4006  0016EE  C072  F0CA         	movff	?___flmul+3,sqrt@q+3
  4007  0016F2  C0C7  F06F         	movff	sqrt@q,___flmul@f1
  4008  0016F6  C0C8  F070         	movff	sqrt@q+1,___flmul@f1+1
  4009  0016FA  C0C9  F071         	movff	sqrt@q+2,___flmul@f1+2
  4010  0016FE  C0CA  F072         	movff	sqrt@q+3,___flmul@f1+3
  4011  001702  C0CB  F073         	movff	sqrt@x,___flmul@f2
  4012  001706  C0CC  F074         	movff	sqrt@x+1,___flmul@f2+1
  4013  00170A  C0CD  F075         	movff	sqrt@x+2,___flmul@f2+2
  4014  00170E  C0CE  F076         	movff	sqrt@x+3,___flmul@f2+3
  4015  001712  EC92  F00E         	call	___flmul	;wreg free
  4016  001716  C06F  F0C7         	movff	?___flmul,sqrt@q
  4017  00171A  C070  F0C8         	movff	?___flmul+1,sqrt@q+1
  4018  00171E  C071  F0C9         	movff	?___flmul+2,sqrt@q+2
  4019  001722  C072  F0CA         	movff	?___flmul+3,sqrt@q+3
  4020  001726  C0CB  F06F         	movff	sqrt@x,___flmul@f1
  4021  00172A  C0CC  F070         	movff	sqrt@x+1,___flmul@f1+1
  4022  00172E  C0CD  F071         	movff	sqrt@x+2,___flmul@f1+2
  4023  001732  C0CE  F072         	movff	sqrt@x+3,___flmul@f1+3
  4024  001736  0E00               	movlw	0
  4025  001738  0100               	movlb	0	; () banked
  4026  00173A  6F73               	movwf	___flmul@f2& (0+255),b
  4027  00173C  0E00               	movlw	0
  4028  00173E  6F74               	movwf	(___flmul@f2+1)& (0+255),b
  4029  001740  0EC0               	movlw	192
  4030  001742  6F75               	movwf	(___flmul@f2+2)& (0+255),b
  4031  001744  0E3F               	movlw	63
  4032  001746  6F76               	movwf	(___flmul@f2+3)& (0+255),b
  4033  001748  EC92  F00E         	call	___flmul	;wreg free
  4034  00174C  C06F  F0CB         	movff	?___flmul,sqrt@x
  4035  001750  C070  F0CC         	movff	?___flmul+1,sqrt@x+1
  4036  001754  C071  F0CD         	movff	?___flmul+2,sqrt@x+2
  4037  001758  C072  F0CE         	movff	?___flmul+3,sqrt@x+3
  4038  00175C  C0CB  F06F         	movff	sqrt@x,___flsub@f1
  4039  001760  C0CC  F070         	movff	sqrt@x+1,___flsub@f1+1
  4040  001764  C0CD  F071         	movff	sqrt@x+2,___flsub@f1+2
  4041  001768  C0CE  F072         	movff	sqrt@x+3,___flsub@f1+3
  4042  00176C  C0C7  F073         	movff	sqrt@q,___flsub@f2
  4043  001770  C0C8  F074         	movff	sqrt@q+1,___flsub@f2+1
  4044  001774  C0C9  F075         	movff	sqrt@q+2,___flsub@f2+2
  4045  001778  C0CA  F076         	movff	sqrt@q+3,___flsub@f2+3
  4046  00177C  EC81  F015         	call	___flsub	;wreg free
  4047  001780  C06F  F0CB         	movff	?___flsub,sqrt@x
  4048  001784  C070  F0CC         	movff	?___flsub+1,sqrt@x+1
  4049  001788  C071  F0CD         	movff	?___flsub+2,sqrt@x+2
  4050  00178C  C072  F0CE         	movff	?___flsub+3,sqrt@x+3
  4051  001790  0100               	movlb	0	; () banked
  4052  001792  2FC6               	decfsz	sqrt@i& (0+255),f,b
  4053  001794  D772               	goto	l3797
  4054  001796  D000               	goto	l3811
  4055  001798                     l3811:
  4056                           
  4057                           ; BSR set to: 0
  4058  001798  C0CB  F06F         	movff	sqrt@x,___flmul@f1
  4059  00179C  C0CC  F070         	movff	sqrt@x+1,___flmul@f1+1
  4060  0017A0  C0CD  F071         	movff	sqrt@x+2,___flmul@f1+2
  4061  0017A4  C0CE  F072         	movff	sqrt@x+3,___flmul@f1+3
  4062  0017A8  C0B6  F073         	movff	sqrt@y,___flmul@f2
  4063  0017AC  C0B7  F074         	movff	sqrt@y+1,___flmul@f2+1
  4064  0017B0  C0B8  F075         	movff	sqrt@y+2,___flmul@f2+2
  4065  0017B4  C0B9  F076         	movff	sqrt@y+3,___flmul@f2+3
  4066  0017B8  EC92  F00E         	call	___flmul	;wreg free
  4067  0017BC  C06F  F0B6         	movff	?___flmul,?_sqrt
  4068  0017C0  C070  F0B7         	movff	?___flmul+1,?_sqrt+1
  4069  0017C4  C071  F0B8         	movff	?___flmul+2,?_sqrt+2
  4070  0017C8  C072  F0B9         	movff	?___flmul+3,?_sqrt+3
  4071  0017CC  0012               	return	
  4072  0017CE  0012               	return		;funcret
  4073  0017D0                     __end_of_sqrt:
  4074                           	opt stack 0
  4075                           tblptru	equ	0xFF8
  4076                           tblptrh	equ	0xFF7
  4077                           postinc0	equ	0xFEE
  4078                           wreg	equ	0xFE8
  4079                           postinc2	equ	0xFDE
  4080                           postdec2	equ	0xFDD
  4081                           fsr2h	equ	0xFDA
  4082                           fsr2l	equ	0xFD9
  4083                           status	equ	0xFD8
  4084                           
  4085 ;; *************** function ___flsub *****************
  4086 ;; Defined at:
  4087 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flsub.c"
  4088 ;; Parameters:    Size  Location     Type
  4089 ;;  f1              4   15[BANK0 ] unsigned char 
  4090 ;;  f2              4   19[BANK0 ] unsigned char 
  4091 ;; Auto vars:     Size  Location     Type
  4092 ;;		None
  4093 ;; Return value:  Size  Location     Type
  4094 ;;                  4   15[BANK0 ] unsigned char 
  4095 ;; Registers used:
  4096 ;;		wreg, status,2, status,0, cstack
  4097 ;; Tracked objects:
  4098 ;;		On entry : 0/0
  4099 ;;		On exit  : 0/0
  4100 ;;		Unchanged: 0/0
  4101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4102 ;;      Params:         0       8       0       0       0       0       0
  4103 ;;      Locals:         0       0       0       0       0       0       0
  4104 ;;      Temps:          0       0       0       0       0       0       0
  4105 ;;      Totals:         0       8       0       0       0       0       0
  4106 ;;Total ram usage:        8 bytes
  4107 ;; Hardware stack levels used:    1
  4108 ;; Hardware stack levels required when called:    4
  4109 ;; This function calls:
  4110 ;;		___fladd
  4111 ;; This function is called by:
  4112 ;;		_sqrt
  4113 ;;		_exp
  4114 ;; This function uses a non-reentrant model
  4115 ;;
  4116                           
  4117                           	psect	text19
  4118  002B02                     __ptext19:
  4119                           	opt stack 0
  4120  002B02                     ___flsub:
  4121                           	opt stack 24
  4122                           
  4123                           ;incstack = 0
  4124  002B02  0100               	movlb	0	; () banked
  4125  002B04  5173               	movf	___flsub@f2& (0+255),w,b
  4126  002B06  0100               	movlb	0	; () banked
  4127  002B08  1174               	iorwf	(___flsub@f2+1)& (0+255),w,b
  4128  002B0A  0100               	movlb	0	; () banked
  4129  002B0C  1175               	iorwf	(___flsub@f2+2)& (0+255),w,b
  4130  002B0E  0100               	movlb	0	; () banked
  4131  002B10  1176               	iorwf	(___flsub@f2+3)& (0+255),w,b
  4132  002B12  B4D8               	btfsc	status,2,c
  4133  002B14  D00A               	goto	l3629
  4134                           
  4135                           ; BSR set to: 0
  4136  002B16  0E00               	movlw	0
  4137  002B18  0100               	movlb	0	; () banked
  4138  002B1A  1B73               	xorwf	___flsub@f2& (0+255),f,b
  4139  002B1C  0E00               	movlw	0
  4140  002B1E  1B74               	xorwf	(___flsub@f2+1)& (0+255),f,b
  4141  002B20  0E00               	movlw	0
  4142  002B22  1B75               	xorwf	(___flsub@f2+2)& (0+255),f,b
  4143  002B24  0E80               	movlw	128
  4144  002B26  1B76               	xorwf	(___flsub@f2+3)& (0+255),f,b
  4145  002B28  D000               	goto	l3629
  4146  002B2A                     l3629:
  4147                           
  4148                           ; BSR set to: 0
  4149  002B2A  C06F  F064         	movff	___flsub@f1,___fladd@f1
  4150  002B2E  C070  F065         	movff	___flsub@f1+1,___fladd@f1+1
  4151  002B32  C071  F066         	movff	___flsub@f1+2,___fladd@f1+2
  4152  002B36  C072  F067         	movff	___flsub@f1+3,___fladd@f1+3
  4153  002B3A  C073  F068         	movff	___flsub@f2,___fladd@f2
  4154  002B3E  C074  F069         	movff	___flsub@f2+1,___fladd@f2+1
  4155  002B42  C075  F06A         	movff	___flsub@f2+2,___fladd@f2+2
  4156  002B46  C076  F06B         	movff	___flsub@f2+3,___fladd@f2+3
  4157  002B4A  EC79  F008         	call	___fladd	;wreg free
  4158  002B4E  C064  F06F         	movff	?___fladd,?___flsub
  4159  002B52  C065  F070         	movff	?___fladd+1,?___flsub+1
  4160  002B56  C066  F071         	movff	?___fladd+2,?___flsub+2
  4161  002B5A  C067  F072         	movff	?___fladd+3,?___flsub+3
  4162  002B5E  0012               	return	
  4163  002B60  0012               	return		;funcret
  4164  002B62                     __end_of___flsub:
  4165                           	opt stack 0
  4166                           tblptru	equ	0xFF8
  4167                           tblptrh	equ	0xFF7
  4168                           postinc0	equ	0xFEE
  4169                           wreg	equ	0xFE8
  4170                           postinc2	equ	0xFDE
  4171                           postdec2	equ	0xFDD
  4172                           fsr2h	equ	0xFDA
  4173                           fsr2l	equ	0xFD9
  4174                           status	equ	0xFD8
  4175                           
  4176 ;; *************** function _atan *****************
  4177 ;; Defined at:
  4178 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\atan.c"
  4179 ;; Parameters:    Size  Location     Type
  4180 ;;  f               4   46[BANK0 ] unsigned char 
  4181 ;; Auto vars:     Size  Location     Type
  4182 ;;  val             4   63[BANK0 ] unsigned char 
  4183 ;;  val_squared     4   59[BANK0 ] unsigned char 
  4184 ;;  x               4   54[BANK0 ] unsigned char 
  4185 ;;  y               4   50[BANK0 ] unsigned char 
  4186 ;;  recip           1   58[BANK0 ] unsigned char 
  4187 ;; Return value:  Size  Location     Type
  4188 ;;                  4   46[BANK0 ] unsigned char 
  4189 ;; Registers used:
  4190 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4191 ;; Tracked objects:
  4192 ;;		On entry : 0/0
  4193 ;;		On exit  : 0/0
  4194 ;;		Unchanged: 0/0
  4195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4196 ;;      Params:         0       4       0       0       0       0       0
  4197 ;;      Locals:         0      17       0       0       0       0       0
  4198 ;;      Temps:          0       0       0       0       0       0       0
  4199 ;;      Totals:         0      21       0       0       0       0       0
  4200 ;;Total ram usage:       21 bytes
  4201 ;; Hardware stack levels used:    1
  4202 ;; Hardware stack levels required when called:    5
  4203 ;; This function calls:
  4204 ;;		___fladd
  4205 ;;		___fldiv
  4206 ;;		___flge
  4207 ;;		___flmul
  4208 ;;		___flneg
  4209 ;;		_eval_poly
  4210 ;;		_fabs
  4211 ;; This function is called by:
  4212 ;;		_Gyros_Update
  4213 ;;		_asin
  4214 ;; This function uses a non-reentrant model
  4215 ;;
  4216                           
  4217                           	psect	text20
  4218  001352                     __ptext20:
  4219                           	opt stack 0
  4220  001352                     _atan:
  4221                           	opt stack 24
  4222                           
  4223                           ;incstack = 0
  4224  001352  C08E  F024         	movff	atan@f,fabs@d
  4225  001356  C08F  F025         	movff	atan@f+1,fabs@d+1
  4226  00135A  C090  F026         	movff	atan@f+2,fabs@d+2
  4227  00135E  C091  F027         	movff	atan@f+3,fabs@d+3
  4228  001362  EC8D  F016         	call	_fabs	;wreg free
  4229  001366  C024  F09F         	movff	?_fabs,atan@val
  4230  00136A  C025  F0A0         	movff	?_fabs+1,atan@val+1
  4231  00136E  C026  F0A1         	movff	?_fabs+2,atan@val+2
  4232  001372  C027  F0A2         	movff	?_fabs+3,atan@val+3
  4233  001376  0100               	movlb	0	; () banked
  4234  001378  519F               	movf	atan@val& (0+255),w,b
  4235  00137A  0100               	movlb	0	; () banked
  4236  00137C  11A0               	iorwf	(atan@val+1)& (0+255),w,b
  4237  00137E  0100               	movlb	0	; () banked
  4238  001380  11A1               	iorwf	(atan@val+2)& (0+255),w,b
  4239  001382  0100               	movlb	0	; () banked
  4240  001384  11A2               	iorwf	(atan@val+3)& (0+255),w,b
  4241  001386  A4D8               	btfss	status,2,c
  4242  001388  D00A               	goto	l3761
  4243                           
  4244                           ; BSR set to: 0
  4245  00138A  0E00               	movlw	0
  4246  00138C  0100               	movlb	0	; () banked
  4247  00138E  6F8E               	movwf	?_atan& (0+255),b
  4248  001390  0E00               	movlw	0
  4249  001392  6F8F               	movwf	(?_atan+1)& (0+255),b
  4250  001394  0E00               	movlw	0
  4251  001396  6F90               	movwf	(?_atan+2)& (0+255),b
  4252  001398  0E00               	movlw	0
  4253  00139A  6F91               	movwf	(?_atan+3)& (0+255),b
  4254                           
  4255                           ; BSR set to: 0
  4256  00139C  0012               	return	
  4257  00139E                     l3761:
  4258                           
  4259                           ; BSR set to: 0
  4260  00139E  0E00               	movlw	0
  4261  0013A0  0100               	movlb	0	; () banked
  4262  0013A2  6F60               	movwf	___flge@ff1& (0+255),b
  4263  0013A4  0E00               	movlw	0
  4264  0013A6  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  4265  0013A8  0E80               	movlw	128
  4266  0013AA  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  4267  0013AC  0E3F               	movlw	63
  4268  0013AE  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  4269  0013B0  C09F  F064         	movff	atan@val,___flge@ff2
  4270  0013B4  C0A0  F065         	movff	atan@val+1,___flge@ff2+1
  4271  0013B8  C0A1  F066         	movff	atan@val+2,___flge@ff2+2
  4272  0013BC  C0A2  F067         	movff	atan@val+3,___flge@ff2+3
  4273  0013C0  EC0A  F013         	call	___flge	;wreg free
  4274  0013C4  0100               	movlb	0	; () banked
  4275  0013C6  B0D8               	btfsc	status,0,c
  4276  0013C8  D002               	goto	u4810
  4277  0013CA  0E01               	movlw	1
  4278  0013CC  D001               	goto	u4820
  4279  0013CE                     u4810:
  4280  0013CE  0E00               	movlw	0
  4281  0013D0                     u4820:
  4282  0013D0  0100               	movlb	0	; () banked
  4283  0013D2  6F9A               	movwf	atan@recip& (0+255),b
  4284  0013D4  0100               	movlb	0	; () banked
  4285  0013D6  519A               	movf	atan@recip& (0+255),w,b
  4286  0013D8  B4D8               	btfsc	status,2,c
  4287  0013DA  D01B               	goto	l601
  4288                           
  4289                           ; BSR set to: 0
  4290  0013DC  0E00               	movlw	0
  4291  0013DE  0100               	movlb	0	; () banked
  4292  0013E0  6F7E               	movwf	___fldiv@f1& (0+255),b
  4293  0013E2  0E00               	movlw	0
  4294  0013E4  6F7F               	movwf	(___fldiv@f1+1)& (0+255),b
  4295  0013E6  0E80               	movlw	128
  4296  0013E8  6F80               	movwf	(___fldiv@f1+2)& (0+255),b
  4297  0013EA  0E3F               	movlw	63
  4298  0013EC  6F81               	movwf	(___fldiv@f1+3)& (0+255),b
  4299  0013EE  C09F  F082         	movff	atan@val,___fldiv@f2
  4300  0013F2  C0A0  F083         	movff	atan@val+1,___fldiv@f2+1
  4301  0013F6  C0A1  F084         	movff	atan@val+2,___fldiv@f2+2
  4302  0013FA  C0A2  F085         	movff	atan@val+3,___fldiv@f2+3
  4303  0013FE  EC44  F00F         	call	___fldiv	;wreg free
  4304  001402  C07E  F09F         	movff	?___fldiv,atan@val
  4305  001406  C07F  F0A0         	movff	?___fldiv+1,atan@val+1
  4306  00140A  C080  F0A1         	movff	?___fldiv+2,atan@val+2
  4307  00140E  C081  F0A2         	movff	?___fldiv+3,atan@val+3
  4308  001412                     l601:
  4309  001412  C09F  F06F         	movff	atan@val,___flmul@f1
  4310  001416  C0A0  F070         	movff	atan@val+1,___flmul@f1+1
  4311  00141A  C0A1  F071         	movff	atan@val+2,___flmul@f1+2
  4312  00141E  C0A2  F072         	movff	atan@val+3,___flmul@f1+3
  4313  001422  C09F  F073         	movff	atan@val,___flmul@f2
  4314  001426  C0A0  F074         	movff	atan@val+1,___flmul@f2+1
  4315  00142A  C0A1  F075         	movff	atan@val+2,___flmul@f2+2
  4316  00142E  C0A2  F076         	movff	atan@val+3,___flmul@f2+3
  4317  001432  EC92  F00E         	call	___flmul	;wreg free
  4318  001436  C06F  F09B         	movff	?___flmul,atan@val_squared
  4319  00143A  C070  F09C         	movff	?___flmul+1,atan@val_squared+1
  4320  00143E  C071  F09D         	movff	?___flmul+2,atan@val_squared+2
  4321  001442  C072  F09E         	movff	?___flmul+3,atan@val_squared+3
  4322  001446  C09B  F07E         	movff	atan@val_squared,eval_poly@x
  4323  00144A  C09C  F07F         	movff	atan@val_squared+1,eval_poly@x+1
  4324  00144E  C09D  F080         	movff	atan@val_squared+2,eval_poly@x+2
  4325  001452  C09E  F081         	movff	atan@val_squared+3,eval_poly@x+3
  4326  001456  0E65               	movlw	low atan@coeff_b
  4327  001458  0100               	movlb	0	; () banked
  4328  00145A  6F82               	movwf	eval_poly@d& (0+255),b
  4329  00145C  0E06               	movlw	high atan@coeff_b
  4330  00145E  0100               	movlb	0	; () banked
  4331  001460  6F83               	movwf	(eval_poly@d+1)& (0+255),b
  4332  001462  0E00               	movlw	0
  4333  001464  0100               	movlb	0	; () banked
  4334  001466  6F85               	movwf	(eval_poly@n+1)& (0+255),b
  4335  001468  0E04               	movlw	4
  4336  00146A  6F84               	movwf	eval_poly@n& (0+255),b
  4337  00146C  EC07  F011         	call	_eval_poly	;wreg free
  4338  001470  C07E  F092         	movff	?_eval_poly,atan@y
  4339  001474  C07F  F093         	movff	?_eval_poly+1,atan@y+1
  4340  001478  C080  F094         	movff	?_eval_poly+2,atan@y+2
  4341  00147C  C081  F095         	movff	?_eval_poly+3,atan@y+3
  4342  001480  C09B  F07E         	movff	atan@val_squared,eval_poly@x
  4343  001484  C09C  F07F         	movff	atan@val_squared+1,eval_poly@x+1
  4344  001488  C09D  F080         	movff	atan@val_squared+2,eval_poly@x+2
  4345  00148C  C09E  F081         	movff	atan@val_squared+3,eval_poly@x+3
  4346  001490  0E4D               	movlw	low atan@coeff_a
  4347  001492  0100               	movlb	0	; () banked
  4348  001494  6F82               	movwf	eval_poly@d& (0+255),b
  4349  001496  0E06               	movlw	high atan@coeff_a
  4350  001498  0100               	movlb	0	; () banked
  4351  00149A  6F83               	movwf	(eval_poly@d+1)& (0+255),b
  4352  00149C  0E00               	movlw	0
  4353  00149E  0100               	movlb	0	; () banked
  4354  0014A0  6F85               	movwf	(eval_poly@n+1)& (0+255),b
  4355  0014A2  0E05               	movlw	5
  4356  0014A4  6F84               	movwf	eval_poly@n& (0+255),b
  4357  0014A6  EC07  F011         	call	_eval_poly	;wreg free
  4358  0014AA  C07E  F096         	movff	?_eval_poly,atan@x
  4359  0014AE  C07F  F097         	movff	?_eval_poly+1,atan@x+1
  4360  0014B2  C080  F098         	movff	?_eval_poly+2,atan@x+2
  4361  0014B6  C081  F099         	movff	?_eval_poly+3,atan@x+3
  4362  0014BA  C09F  F06F         	movff	atan@val,___flmul@f1
  4363  0014BE  C0A0  F070         	movff	atan@val+1,___flmul@f1+1
  4364  0014C2  C0A1  F071         	movff	atan@val+2,___flmul@f1+2
  4365  0014C6  C0A2  F072         	movff	atan@val+3,___flmul@f1+3
  4366  0014CA  C092  F082         	movff	atan@y,___fldiv@f2
  4367  0014CE  C093  F083         	movff	atan@y+1,___fldiv@f2+1
  4368  0014D2  C094  F084         	movff	atan@y+2,___fldiv@f2+2
  4369  0014D6  C095  F085         	movff	atan@y+3,___fldiv@f2+3
  4370  0014DA  C096  F07E         	movff	atan@x,___fldiv@f1
  4371  0014DE  C097  F07F         	movff	atan@x+1,___fldiv@f1+1
  4372  0014E2  C098  F080         	movff	atan@x+2,___fldiv@f1+2
  4373  0014E6  C099  F081         	movff	atan@x+3,___fldiv@f1+3
  4374  0014EA  EC44  F00F         	call	___fldiv	;wreg free
  4375  0014EE  C07E  F073         	movff	?___fldiv,___flmul@f2
  4376  0014F2  C07F  F074         	movff	?___fldiv+1,___flmul@f2+1
  4377  0014F6  C080  F075         	movff	?___fldiv+2,___flmul@f2+2
  4378  0014FA  C081  F076         	movff	?___fldiv+3,___flmul@f2+3
  4379  0014FE  EC92  F00E         	call	___flmul	;wreg free
  4380  001502  C06F  F09F         	movff	?___flmul,atan@val
  4381  001506  C070  F0A0         	movff	?___flmul+1,atan@val+1
  4382  00150A  C071  F0A1         	movff	?___flmul+2,atan@val+2
  4383  00150E  C072  F0A2         	movff	?___flmul+3,atan@val+3
  4384  001512  0100               	movlb	0	; () banked
  4385  001514  519A               	movf	atan@recip& (0+255),w,b
  4386  001516  0100               	movlb	0	; () banked
  4387  001518  B4D8               	btfsc	status,2,c
  4388  00151A  D026               	goto	l3773
  4389                           
  4390                           ; BSR set to: 0
  4391  00151C  C09F  F020         	movff	atan@val,___flneg@f1
  4392  001520  C0A0  F021         	movff	atan@val+1,___flneg@f1+1
  4393  001524  C0A1  F022         	movff	atan@val+2,___flneg@f1+2
  4394  001528  C0A2  F023         	movff	atan@val+3,___flneg@f1+3
  4395  00152C  ECC4  F016         	call	___flneg	;wreg free
  4396  001530  C020  F064         	movff	?___flneg,___fladd@f1
  4397  001534  C021  F065         	movff	?___flneg+1,___fladd@f1+1
  4398  001538  C022  F066         	movff	?___flneg+2,___fladd@f1+2
  4399  00153C  C023  F067         	movff	?___flneg+3,___fladd@f1+3
  4400  001540  0EDB               	movlw	219
  4401  001542  0100               	movlb	0	; () banked
  4402  001544  6F68               	movwf	___fladd@f2& (0+255),b
  4403  001546  0E0F               	movlw	15
  4404  001548  6F69               	movwf	(___fladd@f2+1)& (0+255),b
  4405  00154A  0EC9               	movlw	201
  4406  00154C  6F6A               	movwf	(___fladd@f2+2)& (0+255),b
  4407  00154E  0E3F               	movlw	63
  4408  001550  6F6B               	movwf	(___fladd@f2+3)& (0+255),b
  4409  001552  EC79  F008         	call	___fladd	;wreg free
  4410  001556  C064  F09F         	movff	?___fladd,atan@val
  4411  00155A  C065  F0A0         	movff	?___fladd+1,atan@val+1
  4412  00155E  C066  F0A1         	movff	?___fladd+2,atan@val+2
  4413  001562  C067  F0A2         	movff	?___fladd+3,atan@val+3
  4414  001566  D000               	goto	l3773
  4415  001568                     l3773:
  4416  001568  0100               	movlb	0	; () banked
  4417  00156A  BF91               	btfsc	(atan@f+3)& (0+255),7,b
  4418  00156C  D009               	goto	l3777
  4419                           
  4420                           ; BSR set to: 0
  4421  00156E  C09F  F08E         	movff	atan@val,?_atan
  4422  001572  C0A0  F08F         	movff	atan@val+1,?_atan+1
  4423  001576  C0A1  F090         	movff	atan@val+2,?_atan+2
  4424  00157A  C0A2  F091         	movff	atan@val+3,?_atan+3
  4425  00157E  0012               	return	
  4426  001580                     l3777:
  4427                           
  4428                           ; BSR set to: 0
  4429  001580  C09F  F020         	movff	atan@val,___flneg@f1
  4430  001584  C0A0  F021         	movff	atan@val+1,___flneg@f1+1
  4431  001588  C0A1  F022         	movff	atan@val+2,___flneg@f1+2
  4432  00158C  C0A2  F023         	movff	atan@val+3,___flneg@f1+3
  4433  001590  ECC4  F016         	call	___flneg	;wreg free
  4434  001594  C020  F08E         	movff	?___flneg,?_atan
  4435  001598  C021  F08F         	movff	?___flneg+1,?_atan+1
  4436  00159C  C022  F090         	movff	?___flneg+2,?_atan+2
  4437  0015A0  C023  F091         	movff	?___flneg+3,?_atan+3
  4438  0015A4  0012               	return	
  4439  0015A6  0012               	return		;funcret
  4440  0015A8                     __end_of_atan:
  4441                           	opt stack 0
  4442                           tblptru	equ	0xFF8
  4443                           tblptrh	equ	0xFF7
  4444                           postinc0	equ	0xFEE
  4445                           wreg	equ	0xFE8
  4446                           postinc2	equ	0xFDE
  4447                           postdec2	equ	0xFDD
  4448                           fsr2h	equ	0xFDA
  4449                           fsr2l	equ	0xFD9
  4450                           status	equ	0xFD8
  4451                           
  4452 ;; *************** function _fabs *****************
  4453 ;; Defined at:
  4454 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fabs.c"
  4455 ;; Parameters:    Size  Location     Type
  4456 ;;  d               4   35[COMRAM] unsigned char 
  4457 ;; Auto vars:     Size  Location     Type
  4458 ;;		None
  4459 ;; Return value:  Size  Location     Type
  4460 ;;                  4   35[COMRAM] unsigned char 
  4461 ;; Registers used:
  4462 ;;		wreg, status,2, status,0, cstack
  4463 ;; Tracked objects:
  4464 ;;		On entry : 0/0
  4465 ;;		On exit  : 0/0
  4466 ;;		Unchanged: 0/0
  4467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4468 ;;      Params:         4       0       0       0       0       0       0
  4469 ;;      Locals:         0       0       0       0       0       0       0
  4470 ;;      Temps:          0       0       0       0       0       0       0
  4471 ;;      Totals:         4       0       0       0       0       0       0
  4472 ;;Total ram usage:        4 bytes
  4473 ;; Hardware stack levels used:    1
  4474 ;; Hardware stack levels required when called:    3
  4475 ;; This function calls:
  4476 ;;		___flneg
  4477 ;; This function is called by:
  4478 ;;		_asin
  4479 ;;		_atan
  4480 ;; This function uses a non-reentrant model
  4481 ;;
  4482                           
  4483                           	psect	text21
  4484  002D1A                     __ptext21:
  4485                           	opt stack 0
  4486  002D1A                     _fabs:
  4487                           	opt stack 25
  4488                           
  4489                           ;incstack = 0
  4490  002D1A  AE27               	btfss	fabs@d+3,7,c
  4491  002D1C  D013               	goto	l712
  4492  002D1E  C024  F020         	movff	fabs@d,___flneg@f1
  4493  002D22  C025  F021         	movff	fabs@d+1,___flneg@f1+1
  4494  002D26  C026  F022         	movff	fabs@d+2,___flneg@f1+2
  4495  002D2A  C027  F023         	movff	fabs@d+3,___flneg@f1+3
  4496  002D2E  ECC4  F016         	call	___flneg	;wreg free
  4497  002D32  C020  F024         	movff	?___flneg,?_fabs
  4498  002D36  C021  F025         	movff	?___flneg+1,?_fabs+1
  4499  002D3A  C022  F026         	movff	?___flneg+2,?_fabs+2
  4500  002D3E  C023  F027         	movff	?___flneg+3,?_fabs+3
  4501  002D42  0012               	return	
  4502  002D44                     l712:
  4503  002D44  C024  F024         	movff	fabs@d,?_fabs
  4504  002D48  C025  F025         	movff	fabs@d+1,?_fabs+1
  4505  002D4C  C026  F026         	movff	fabs@d+2,?_fabs+2
  4506  002D50  C027  F027         	movff	fabs@d+3,?_fabs+3
  4507  002D54  0012               	return		;funcret
  4508  002D56                     __end_of_fabs:
  4509                           	opt stack 0
  4510                           tblptru	equ	0xFF8
  4511                           tblptrh	equ	0xFF7
  4512                           postinc0	equ	0xFEE
  4513                           wreg	equ	0xFE8
  4514                           postinc2	equ	0xFDE
  4515                           postdec2	equ	0xFDD
  4516                           fsr2h	equ	0xFDA
  4517                           fsr2l	equ	0xFD9
  4518                           status	equ	0xFD8
  4519                           
  4520 ;; *************** function ___flneg *****************
  4521 ;; Defined at:
  4522 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flneg.c"
  4523 ;; Parameters:    Size  Location     Type
  4524 ;;  f1              4   31[COMRAM] unsigned char 
  4525 ;; Auto vars:     Size  Location     Type
  4526 ;;		None
  4527 ;; Return value:  Size  Location     Type
  4528 ;;                  4   31[COMRAM] unsigned char 
  4529 ;; Registers used:
  4530 ;;		wreg, status,2, status,0
  4531 ;; Tracked objects:
  4532 ;;		On entry : 0/0
  4533 ;;		On exit  : 0/0
  4534 ;;		Unchanged: 0/0
  4535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4536 ;;      Params:         4       0       0       0       0       0       0
  4537 ;;      Locals:         0       0       0       0       0       0       0
  4538 ;;      Temps:          0       0       0       0       0       0       0
  4539 ;;      Totals:         4       0       0       0       0       0       0
  4540 ;;Total ram usage:        4 bytes
  4541 ;; Hardware stack levels used:    1
  4542 ;; Hardware stack levels required when called:    2
  4543 ;; This function calls:
  4544 ;;		Nothing
  4545 ;; This function is called by:
  4546 ;;		_acos
  4547 ;;		_asin
  4548 ;;		_atan
  4549 ;;		_fabs
  4550 ;;		_pow
  4551 ;;		_exp
  4552 ;; This function uses a non-reentrant model
  4553 ;;
  4554                           
  4555                           	psect	text22
  4556  002D88                     __ptext22:
  4557                           	opt stack 0
  4558  002D88                     ___flneg:
  4559                           	opt stack 25
  4560                           
  4561                           ;incstack = 0
  4562  002D88  5020               	movf	___flneg@f1,w,c
  4563  002D8A  1021               	iorwf	___flneg@f1+1,w,c
  4564  002D8C  1022               	iorwf	___flneg@f1+2,w,c
  4565  002D8E  1023               	iorwf	___flneg@f1+3,w,c
  4566  002D90  B4D8               	btfsc	status,2,c
  4567  002D92  D009               	goto	l3507
  4568  002D94  0E00               	movlw	0
  4569  002D96  1A20               	xorwf	___flneg@f1,f,c
  4570  002D98  0E00               	movlw	0
  4571  002D9A  1A21               	xorwf	___flneg@f1+1,f,c
  4572  002D9C  0E00               	movlw	0
  4573  002D9E  1A22               	xorwf	___flneg@f1+2,f,c
  4574  002DA0  0E80               	movlw	128
  4575  002DA2  1A23               	xorwf	___flneg@f1+3,f,c
  4576  002DA4  D000               	goto	l3507
  4577  002DA6                     l3507:
  4578  002DA6  C020  F020         	movff	___flneg@f1,?___flneg
  4579  002DAA  C021  F021         	movff	___flneg@f1+1,?___flneg+1
  4580  002DAE  C022  F022         	movff	___flneg@f1+2,?___flneg+2
  4581  002DB2  C023  F023         	movff	___flneg@f1+3,?___flneg+3
  4582  002DB6  0012               	return	
  4583  002DB8  0012               	return		;funcret
  4584  002DBA                     __end_of___flneg:
  4585                           	opt stack 0
  4586                           tblptru	equ	0xFF8
  4587                           tblptrh	equ	0xFF7
  4588                           postinc0	equ	0xFEE
  4589                           wreg	equ	0xFE8
  4590                           postinc2	equ	0xFDE
  4591                           postdec2	equ	0xFDD
  4592                           fsr2h	equ	0xFDA
  4593                           fsr2l	equ	0xFD9
  4594                           status	equ	0xFD8
  4595                           
  4596 ;; *************** function _eval_poly *****************
  4597 ;; Defined at:
  4598 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  4599 ;; Parameters:    Size  Location     Type
  4600 ;;  x               4   30[BANK0 ] unsigned char 
  4601 ;;  d               2   34[BANK0 ] PTR const 
  4602 ;;		 -> log@coeff(36), exp@coeff(40), atan@coeff_a(24), atan@coeff_b(20), 
  4603 ;;  n               2   36[BANK0 ] int 
  4604 ;; Auto vars:     Size  Location     Type
  4605 ;;  res             4   42[BANK0 ] int 
  4606 ;; Return value:  Size  Location     Type
  4607 ;;                  4   30[BANK0 ] int 
  4608 ;; Registers used:
  4609 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4610 ;; Tracked objects:
  4611 ;;		On entry : 0/0
  4612 ;;		On exit  : 0/0
  4613 ;;		Unchanged: 0/0
  4614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4615 ;;      Params:         0       8       0       0       0       0       0
  4616 ;;      Locals:         0       4       0       0       0       0       0
  4617 ;;      Temps:          0       4       0       0       0       0       0
  4618 ;;      Totals:         0      16       0       0       0       0       0
  4619 ;;Total ram usage:       16 bytes
  4620 ;; Hardware stack levels used:    1
  4621 ;; Hardware stack levels required when called:    4
  4622 ;; This function calls:
  4623 ;;		___fladd
  4624 ;;		___flmul
  4625 ;; This function is called by:
  4626 ;;		_atan
  4627 ;;		_exp
  4628 ;;		_log
  4629 ;; This function uses a non-reentrant model
  4630 ;;
  4631                           
  4632                           	psect	text23
  4633  00220E                     __ptext23:
  4634                           	opt stack 0
  4635  00220E                     _eval_poly:
  4636                           	opt stack 23
  4637                           
  4638                           ;incstack = 0
  4639  00220E  C084  F086         	movff	eval_poly@n,??_eval_poly
  4640  002212  C085  F087         	movff	eval_poly@n+1,??_eval_poly+1
  4641  002216  0100               	movlb	0	; () banked
  4642  002218  90D8               	bcf	status,0,c
  4643  00221A  3786               	rlcf	??_eval_poly& (0+255),f,b
  4644  00221C  3787               	rlcf	(??_eval_poly+1)& (0+255),f,b
  4645  00221E  0100               	movlb	0	; () banked
  4646  002220  90D8               	bcf	status,0,c
  4647  002222  3786               	rlcf	??_eval_poly& (0+255),f,b
  4648  002224  3787               	rlcf	(??_eval_poly+1)& (0+255),f,b
  4649  002226  C082  F088         	movff	eval_poly@d,??_eval_poly+2
  4650  00222A  C083  F089         	movff	eval_poly@d+1,??_eval_poly+3
  4651  00222E  0100               	movlb	0	; () banked
  4652  002230  5186               	movf	??_eval_poly& (0+255),w,b
  4653  002232  0100               	movlb	0	; () banked
  4654  002234  2788               	addwf	(??_eval_poly+2)& (0+255),f,b
  4655  002236  0100               	movlb	0	; () banked
  4656  002238  5187               	movf	(??_eval_poly+1)& (0+255),w,b
  4657  00223A  0100               	movlb	0	; () banked
  4658  00223C  2389               	addwfc	(??_eval_poly+3)& (0+255),f,b
  4659  00223E  C088  FFF6         	movff	??_eval_poly+2,tblptrl
  4660  002242  C089  FFF7         	movff	??_eval_poly+3,tblptrh
  4661  002246                     	if	0	;tblptru may be non-zero
  4662  002246                     	endif
  4663  002246                     	if	0	;tblptru may be non-zero
  4664  002246                     	endif
  4665  002246  0009               	tblrd		*+
  4666  002248  CFF5 F08A          	movff	tablat,eval_poly@res
  4667  00224C  0009               	tblrd		*+
  4668  00224E  CFF5 F08B          	movff	tablat,eval_poly@res+1
  4669  002252  0009               	tblrd		*+
  4670  002254  CFF5 F08C          	movff	tablat,eval_poly@res+2
  4671  002258  000A               	tblrd		*-
  4672  00225A  CFF5 F08D          	movff	tablat,eval_poly@res+3
  4673  00225E  D051               	goto	l3643
  4674  002260                     l3641:
  4675                           
  4676                           ; BSR set to: 0
  4677  002260  C08A  F073         	movff	eval_poly@res,___flmul@f2
  4678  002264  C08B  F074         	movff	eval_poly@res+1,___flmul@f2+1
  4679  002268  C08C  F075         	movff	eval_poly@res+2,___flmul@f2+2
  4680  00226C  C08D  F076         	movff	eval_poly@res+3,___flmul@f2+3
  4681  002270  C07E  F06F         	movff	eval_poly@x,___flmul@f1
  4682  002274  C07F  F070         	movff	eval_poly@x+1,___flmul@f1+1
  4683  002278  C080  F071         	movff	eval_poly@x+2,___flmul@f1+2
  4684  00227C  C081  F072         	movff	eval_poly@x+3,___flmul@f1+3
  4685  002280  EC92  F00E         	call	___flmul	;wreg free
  4686  002284  C06F  F064         	movff	?___flmul,___fladd@f1
  4687  002288  C070  F065         	movff	?___flmul+1,___fladd@f1+1
  4688  00228C  C071  F066         	movff	?___flmul+2,___fladd@f1+2
  4689  002290  C072  F067         	movff	?___flmul+3,___fladd@f1+3
  4690  002294  0100               	movlb	0	; () banked
  4691  002296  0784               	decf	eval_poly@n& (0+255),f,b
  4692  002298  A0D8               	btfss	status,0,c
  4693  00229A  0785               	decf	(eval_poly@n+1)& (0+255),f,b
  4694  00229C  C084  F086         	movff	eval_poly@n,??_eval_poly
  4695  0022A0  C085  F087         	movff	eval_poly@n+1,??_eval_poly+1
  4696  0022A4  0100               	movlb	0	; () banked
  4697  0022A6  90D8               	bcf	status,0,c
  4698  0022A8  3786               	rlcf	??_eval_poly& (0+255),f,b
  4699  0022AA  3787               	rlcf	(??_eval_poly+1)& (0+255),f,b
  4700  0022AC  0100               	movlb	0	; () banked
  4701  0022AE  90D8               	bcf	status,0,c
  4702  0022B0  3786               	rlcf	??_eval_poly& (0+255),f,b
  4703  0022B2  3787               	rlcf	(??_eval_poly+1)& (0+255),f,b
  4704  0022B4  C082  F088         	movff	eval_poly@d,??_eval_poly+2
  4705  0022B8  C083  F089         	movff	eval_poly@d+1,??_eval_poly+3
  4706  0022BC  0100               	movlb	0	; () banked
  4707  0022BE  5186               	movf	??_eval_poly& (0+255),w,b
  4708  0022C0  0100               	movlb	0	; () banked
  4709  0022C2  2788               	addwf	(??_eval_poly+2)& (0+255),f,b
  4710  0022C4  0100               	movlb	0	; () banked
  4711  0022C6  5187               	movf	(??_eval_poly+1)& (0+255),w,b
  4712  0022C8  0100               	movlb	0	; () banked
  4713  0022CA  2389               	addwfc	(??_eval_poly+3)& (0+255),f,b
  4714  0022CC  C088  FFF6         	movff	??_eval_poly+2,tblptrl
  4715  0022D0  C089  FFF7         	movff	??_eval_poly+3,tblptrh
  4716  0022D4                     	if	0	;tblptru may be non-zero
  4717  0022D4                     	endif
  4718  0022D4                     	if	0	;tblptru may be non-zero
  4719  0022D4                     	endif
  4720  0022D4  0009               	tblrd		*+
  4721  0022D6  CFF5 F068          	movff	tablat,___fladd@f2
  4722  0022DA  0009               	tblrd		*+
  4723  0022DC  CFF5 F069          	movff	tablat,___fladd@f2+1
  4724  0022E0  0009               	tblrd		*+
  4725  0022E2  CFF5 F06A          	movff	tablat,___fladd@f2+2
  4726  0022E6  000A               	tblrd		*-
  4727  0022E8  CFF5 F06B          	movff	tablat,___fladd@f2+3
  4728  0022EC  EC79  F008         	call	___fladd	;wreg free
  4729  0022F0  C064  F08A         	movff	?___fladd,eval_poly@res
  4730  0022F4  C065  F08B         	movff	?___fladd+1,eval_poly@res+1
  4731  0022F8  C066  F08C         	movff	?___fladd+2,eval_poly@res+2
  4732  0022FC  C067  F08D         	movff	?___fladd+3,eval_poly@res+3
  4733  002300  D000               	goto	l3643
  4734  002302                     l3643:
  4735  002302  0100               	movlb	0	; () banked
  4736  002304  5184               	movf	eval_poly@n& (0+255),w,b
  4737  002306  0100               	movlb	0	; () banked
  4738  002308  1185               	iorwf	(eval_poly@n+1)& (0+255),w,b
  4739  00230A  A4D8               	btfss	status,2,c
  4740  00230C  D7A9               	goto	l3641
  4741                           
  4742                           ; BSR set to: 0
  4743  00230E  C08A  F07E         	movff	eval_poly@res,?_eval_poly
  4744  002312  C08B  F07F         	movff	eval_poly@res+1,?_eval_poly+1
  4745  002316  C08C  F080         	movff	eval_poly@res+2,?_eval_poly+2
  4746  00231A  C08D  F081         	movff	eval_poly@res+3,?_eval_poly+3
  4747                           
  4748                           ; BSR set to: 0
  4749  00231E  0012               	return		;funcret
  4750  002320                     __end_of_eval_poly:
  4751                           	opt stack 0
  4752                           tblptru	equ	0xFF8
  4753                           tblptrh	equ	0xFF7
  4754                           tblptrl	equ	0xFF6
  4755                           tablat	equ	0xFF5
  4756                           postinc0	equ	0xFEE
  4757                           wreg	equ	0xFE8
  4758                           postinc2	equ	0xFDE
  4759                           postdec2	equ	0xFDD
  4760                           fsr2h	equ	0xFDA
  4761                           fsr2l	equ	0xFD9
  4762                           status	equ	0xFD8
  4763                           
  4764 ;; *************** function ___flmul *****************
  4765 ;; Defined at:
  4766 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flmul.c"
  4767 ;; Parameters:    Size  Location     Type
  4768 ;;  f1              4   15[BANK0 ] int 
  4769 ;;  f2              4   19[BANK0 ] int 
  4770 ;; Auto vars:     Size  Location     Type
  4771 ;;  f3_as_produc    4   24[BANK0 ] unsigned long 
  4772 ;;  sign            1   29[BANK0 ] unsigned char 
  4773 ;;  cntr            1   28[BANK0 ] unsigned char 
  4774 ;;  exp             1   23[BANK0 ] unsigned char 
  4775 ;; Return value:  Size  Location     Type
  4776 ;;                  4   15[BANK0 ] unsigned char 
  4777 ;; Registers used:
  4778 ;;		wreg, status,2, status,0, cstack
  4779 ;; Tracked objects:
  4780 ;;		On entry : 0/0
  4781 ;;		On exit  : 0/0
  4782 ;;		Unchanged: 0/0
  4783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4784 ;;      Params:         0       8       0       0       0       0       0
  4785 ;;      Locals:         0       7       0       0       0       0       0
  4786 ;;      Temps:          0       0       0       0       0       0       0
  4787 ;;      Totals:         0      15       0       0       0       0       0
  4788 ;;Total ram usage:       15 bytes
  4789 ;; Hardware stack levels used:    1
  4790 ;; Hardware stack levels required when called:    3
  4791 ;; This function calls:
  4792 ;;		___flpack
  4793 ;; This function is called by:
  4794 ;;		_Gyros_Update
  4795 ;;		_asin
  4796 ;;		_atan
  4797 ;;		_eval_poly
  4798 ;;		_pow
  4799 ;;		_sqrt
  4800 ;;		_exp
  4801 ;;		_log
  4802 ;; This function uses a non-reentrant model
  4803 ;;
  4804                           
  4805                           	psect	text24
  4806  001D24                     __ptext24:
  4807                           	opt stack 0
  4808  001D24                     ___flmul:
  4809                           	opt stack 25
  4810                           
  4811                           ; BSR set to: 0
  4812                           ;incstack = 0
  4813  001D24  0100               	movlb	0	; () banked
  4814  001D26  3571               	rlcf	(___flmul@f1+2)& (0+255),w,b
  4815  001D28  3572               	rlcf	(___flmul@f1+3)& (0+255),w,b
  4816  001D2A  0100               	movlb	0	; () banked
  4817  001D2C  6F77               	movwf	___flmul@exp& (0+255),b
  4818  001D2E  0100               	movlb	0	; () banked
  4819  001D30  5177               	movf	___flmul@exp& (0+255),w,b
  4820  001D32  A4D8               	btfss	status,2,c
  4821  001D34  D00A               	goto	l3459
  4822                           
  4823                           ; BSR set to: 0
  4824  001D36  0E00               	movlw	0
  4825  001D38  0100               	movlb	0	; () banked
  4826  001D3A  6F6F               	movwf	?___flmul& (0+255),b
  4827  001D3C  0E00               	movlw	0
  4828  001D3E  6F70               	movwf	(?___flmul+1)& (0+255),b
  4829  001D40  0E00               	movlw	0
  4830  001D42  6F71               	movwf	(?___flmul+2)& (0+255),b
  4831  001D44  0E00               	movlw	0
  4832  001D46  6F72               	movwf	(?___flmul+3)& (0+255),b
  4833                           
  4834                           ; BSR set to: 0
  4835  001D48  0012               	return	
  4836  001D4A                     l3459:
  4837                           
  4838                           ; BSR set to: 0
  4839  001D4A  0100               	movlb	0	; () banked
  4840  001D4C  3575               	rlcf	(___flmul@f2+2)& (0+255),w,b
  4841  001D4E  3576               	rlcf	(___flmul@f2+3)& (0+255),w,b
  4842  001D50  0100               	movlb	0	; () banked
  4843  001D52  6F7D               	movwf	___flmul@sign& (0+255),b
  4844  001D54  0100               	movlb	0	; () banked
  4845  001D56  517D               	movf	___flmul@sign& (0+255),w,b
  4846  001D58  A4D8               	btfss	status,2,c
  4847  001D5A  D00A               	goto	l3465
  4848                           
  4849                           ; BSR set to: 0
  4850  001D5C  0E00               	movlw	0
  4851  001D5E  0100               	movlb	0	; () banked
  4852  001D60  6F6F               	movwf	?___flmul& (0+255),b
  4853  001D62  0E00               	movlw	0
  4854  001D64  6F70               	movwf	(?___flmul+1)& (0+255),b
  4855  001D66  0E00               	movlw	0
  4856  001D68  6F71               	movwf	(?___flmul+2)& (0+255),b
  4857  001D6A  0E00               	movlw	0
  4858  001D6C  6F72               	movwf	(?___flmul+3)& (0+255),b
  4859                           
  4860                           ; BSR set to: 0
  4861  001D6E  0012               	return	
  4862  001D70                     l3465:
  4863                           
  4864                           ; BSR set to: 0
  4865  001D70  0100               	movlb	0	; () banked
  4866  001D72  517D               	movf	___flmul@sign& (0+255),w,b
  4867  001D74  0F7B               	addlw	123
  4868  001D76  0100               	movlb	0	; () banked
  4869  001D78  2777               	addwf	___flmul@exp& (0+255),f,b
  4870                           
  4871                           ; BSR set to: 0
  4872  001D7A  C072  F07D         	movff	___flmul@f1+3,___flmul@sign
  4873  001D7E  0100               	movlb	0	; () banked
  4874  001D80  5176               	movf	(___flmul@f2+3)& (0+255),w,b
  4875  001D82  0100               	movlb	0	; () banked
  4876  001D84  1B7D               	xorwf	___flmul@sign& (0+255),f,b
  4877  001D86  0E80               	movlw	128
  4878  001D88  0100               	movlb	0	; () banked
  4879  001D8A  177D               	andwf	___flmul@sign& (0+255),f,b
  4880                           
  4881                           ; BSR set to: 0
  4882  001D8C  0100               	movlb	0	; () banked
  4883  001D8E  8F71               	bsf	(___flmul@f1+2)& (0+255),7,b
  4884                           
  4885                           ; BSR set to: 0
  4886  001D90  0100               	movlb	0	; () banked
  4887  001D92  8F75               	bsf	(___flmul@f2+2)& (0+255),7,b
  4888  001D94  0EFF               	movlw	255
  4889  001D96  0100               	movlb	0	; () banked
  4890  001D98  1773               	andwf	___flmul@f2& (0+255),f,b
  4891  001D9A  0EFF               	movlw	255
  4892  001D9C  1774               	andwf	(___flmul@f2+1)& (0+255),f,b
  4893  001D9E  0EFF               	movlw	255
  4894  001DA0  1775               	andwf	(___flmul@f2+2)& (0+255),f,b
  4895  001DA2  0E00               	movlw	0
  4896  001DA4  1776               	andwf	(___flmul@f2+3)& (0+255),f,b
  4897                           
  4898                           ; BSR set to: 0
  4899  001DA6  0E00               	movlw	0
  4900  001DA8  0100               	movlb	0	; () banked
  4901  001DAA  6F78               	movwf	___flmul@f3_as_product& (0+255),b
  4902  001DAC  0E00               	movlw	0
  4903  001DAE  6F79               	movwf	(___flmul@f3_as_product+1)& (0+255),b
  4904  001DB0  0E00               	movlw	0
  4905  001DB2  6F7A               	movwf	(___flmul@f3_as_product+2)& (0+255),b
  4906  001DB4  0E00               	movlw	0
  4907  001DB6  6F7B               	movwf	(___flmul@f3_as_product+3)& (0+255),b
  4908                           
  4909                           ; BSR set to: 0
  4910  001DB8  0E07               	movlw	7
  4911  001DBA  0100               	movlb	0	; () banked
  4912  001DBC  6F7C               	movwf	___flmul@cntr& (0+255),b
  4913  001DBE  D000               	goto	l3477
  4914  001DC0                     l3477:
  4915                           
  4916                           ; BSR set to: 0
  4917  001DC0  0100               	movlb	0	; () banked
  4918  001DC2  A16F               	btfss	___flmul@f1& (0+255),0,b
  4919  001DC4  D011               	goto	l3481
  4920                           
  4921                           ; BSR set to: 0
  4922  001DC6  0100               	movlb	0	; () banked
  4923  001DC8  5173               	movf	___flmul@f2& (0+255),w,b
  4924  001DCA  0100               	movlb	0	; () banked
  4925  001DCC  2778               	addwf	___flmul@f3_as_product& (0+255),f,b
  4926  001DCE  0100               	movlb	0	; () banked
  4927  001DD0  5174               	movf	(___flmul@f2+1)& (0+255),w,b
  4928  001DD2  0100               	movlb	0	; () banked
  4929  001DD4  2379               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
  4930  001DD6  0100               	movlb	0	; () banked
  4931  001DD8  5175               	movf	(___flmul@f2+2)& (0+255),w,b
  4932  001DDA  0100               	movlb	0	; () banked
  4933  001DDC  237A               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
  4934  001DDE  0100               	movlb	0	; () banked
  4935  001DE0  5176               	movf	(___flmul@f2+3)& (0+255),w,b
  4936  001DE2  0100               	movlb	0	; () banked
  4937  001DE4  237B               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
  4938  001DE6  D000               	goto	l3481
  4939  001DE8                     l3481:
  4940                           
  4941                           ; BSR set to: 0
  4942  001DE8  0100               	movlb	0	; () banked
  4943  001DEA  90D8               	bcf	status,0,c
  4944  001DEC  3372               	rrcf	(___flmul@f1+3)& (0+255),f,b
  4945  001DEE  3371               	rrcf	(___flmul@f1+2)& (0+255),f,b
  4946  001DF0  3370               	rrcf	(___flmul@f1+1)& (0+255),f,b
  4947  001DF2  336F               	rrcf	___flmul@f1& (0+255),f,b
  4948                           
  4949                           ; BSR set to: 0
  4950  001DF4  0100               	movlb	0	; () banked
  4951  001DF6  90D8               	bcf	status,0,c
  4952  001DF8  3773               	rlcf	___flmul@f2& (0+255),f,b
  4953  001DFA  3774               	rlcf	(___flmul@f2+1)& (0+255),f,b
  4954  001DFC  3775               	rlcf	(___flmul@f2+2)& (0+255),f,b
  4955  001DFE  3776               	rlcf	(___flmul@f2+3)& (0+255),f,b
  4956                           
  4957                           ; BSR set to: 0
  4958  001E00  0100               	movlb	0	; () banked
  4959  001E02  2F7C               	decfsz	___flmul@cntr& (0+255),f,b
  4960  001E04  D7DD               	goto	l3477
  4961  001E06  D000               	goto	l3487
  4962  001E08                     l3487:
  4963                           
  4964                           ; BSR set to: 0
  4965  001E08  0E11               	movlw	17
  4966  001E0A  0100               	movlb	0	; () banked
  4967  001E0C  6F7C               	movwf	___flmul@cntr& (0+255),b
  4968  001E0E  D000               	goto	l3489
  4969  001E10                     l3489:
  4970                           
  4971                           ; BSR set to: 0
  4972  001E10  0100               	movlb	0	; () banked
  4973  001E12  A16F               	btfss	___flmul@f1& (0+255),0,b
  4974  001E14  D011               	goto	l3493
  4975                           
  4976                           ; BSR set to: 0
  4977  001E16  0100               	movlb	0	; () banked
  4978  001E18  5173               	movf	___flmul@f2& (0+255),w,b
  4979  001E1A  0100               	movlb	0	; () banked
  4980  001E1C  2778               	addwf	___flmul@f3_as_product& (0+255),f,b
  4981  001E1E  0100               	movlb	0	; () banked
  4982  001E20  5174               	movf	(___flmul@f2+1)& (0+255),w,b
  4983  001E22  0100               	movlb	0	; () banked
  4984  001E24  2379               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
  4985  001E26  0100               	movlb	0	; () banked
  4986  001E28  5175               	movf	(___flmul@f2+2)& (0+255),w,b
  4987  001E2A  0100               	movlb	0	; () banked
  4988  001E2C  237A               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
  4989  001E2E  0100               	movlb	0	; () banked
  4990  001E30  5176               	movf	(___flmul@f2+3)& (0+255),w,b
  4991  001E32  0100               	movlb	0	; () banked
  4992  001E34  237B               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
  4993  001E36  D000               	goto	l3493
  4994  001E38                     l3493:
  4995                           
  4996                           ; BSR set to: 0
  4997  001E38  0100               	movlb	0	; () banked
  4998  001E3A  90D8               	bcf	status,0,c
  4999  001E3C  3372               	rrcf	(___flmul@f1+3)& (0+255),f,b
  5000  001E3E  3371               	rrcf	(___flmul@f1+2)& (0+255),f,b
  5001  001E40  3370               	rrcf	(___flmul@f1+1)& (0+255),f,b
  5002  001E42  336F               	rrcf	___flmul@f1& (0+255),f,b
  5003                           
  5004                           ; BSR set to: 0
  5005  001E44  0100               	movlb	0	; () banked
  5006  001E46  90D8               	bcf	status,0,c
  5007  001E48  337B               	rrcf	(___flmul@f3_as_product+3)& (0+255),f,b
  5008  001E4A  337A               	rrcf	(___flmul@f3_as_product+2)& (0+255),f,b
  5009  001E4C  3379               	rrcf	(___flmul@f3_as_product+1)& (0+255),f,b
  5010  001E4E  3378               	rrcf	___flmul@f3_as_product& (0+255),f,b
  5011                           
  5012                           ; BSR set to: 0
  5013  001E50  0100               	movlb	0	; () banked
  5014  001E52  2F7C               	decfsz	___flmul@cntr& (0+255),f,b
  5015  001E54  D7DD               	goto	l3489
  5016  001E56  D000               	goto	l3499
  5017  001E58                     l3499:
  5018                           
  5019                           ; BSR set to: 0
  5020  001E58  C078  F020         	movff	___flmul@f3_as_product,___flpack@arg
  5021  001E5C  C079  F021         	movff	___flmul@f3_as_product+1,___flpack@arg+1
  5022  001E60  C07A  F022         	movff	___flmul@f3_as_product+2,___flpack@arg+2
  5023  001E64  C07B  F023         	movff	___flmul@f3_as_product+3,___flpack@arg+3
  5024  001E68  C077  F024         	movff	___flmul@exp,___flpack@exp
  5025  001E6C  C07D  F025         	movff	___flmul@sign,___flpack@sign
  5026  001E70  EC90  F011         	call	___flpack	;wreg free
  5027  001E74  C020  F06F         	movff	?___flpack,?___flmul
  5028  001E78  C021  F070         	movff	?___flpack+1,?___flmul+1
  5029  001E7C  C022  F071         	movff	?___flpack+2,?___flmul+2
  5030  001E80  C023  F072         	movff	?___flpack+3,?___flmul+3
  5031  001E84  0012               	return	
  5032  001E86  0012               	return		;funcret
  5033  001E88                     __end_of___flmul:
  5034                           	opt stack 0
  5035                           tblptru	equ	0xFF8
  5036                           tblptrh	equ	0xFF7
  5037                           tblptrl	equ	0xFF6
  5038                           tablat	equ	0xFF5
  5039                           postinc0	equ	0xFEE
  5040                           wreg	equ	0xFE8
  5041                           postinc2	equ	0xFDE
  5042                           postdec2	equ	0xFDD
  5043                           fsr2h	equ	0xFDA
  5044                           fsr2l	equ	0xFD9
  5045                           status	equ	0xFD8
  5046                           
  5047 ;; *************** function ___fladd *****************
  5048 ;; Defined at:
  5049 ;;		line 88 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fladd.c"
  5050 ;; Parameters:    Size  Location     Type
  5051 ;;  f1              4    4[BANK0 ] unsigned char 
  5052 ;;  f2              4    8[BANK0 ] unsigned char 
  5053 ;; Auto vars:     Size  Location     Type
  5054 ;;  exp1            1   14[BANK0 ] unsigned char 
  5055 ;;  exp2            1   13[BANK0 ] unsigned char 
  5056 ;;  sign            1   12[BANK0 ] unsigned char 
  5057 ;; Return value:  Size  Location     Type
  5058 ;;                  4    4[BANK0 ] unsigned char 
  5059 ;; Registers used:
  5060 ;;		wreg, status,2, status,0, cstack
  5061 ;; Tracked objects:
  5062 ;;		On entry : 0/0
  5063 ;;		On exit  : 0/0
  5064 ;;		Unchanged: 0/0
  5065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5066 ;;      Params:         0       8       0       0       0       0       0
  5067 ;;      Locals:         0       3       0       0       0       0       0
  5068 ;;      Temps:          1       0       0       0       0       0       0
  5069 ;;      Totals:         1      11       0       0       0       0       0
  5070 ;;Total ram usage:       12 bytes
  5071 ;; Hardware stack levels used:    1
  5072 ;; Hardware stack levels required when called:    3
  5073 ;; This function calls:
  5074 ;;		___flpack
  5075 ;; This function is called by:
  5076 ;;		_Gyros_Update
  5077 ;;		_acos
  5078 ;;		_asin
  5079 ;;		_atan
  5080 ;;		_eval_poly
  5081 ;;		___flsub
  5082 ;;		_floor
  5083 ;;		_log
  5084 ;; This function uses a non-reentrant model
  5085 ;;
  5086                           
  5087                           	psect	text25
  5088  0010F2                     __ptext25:
  5089                           	opt stack 0
  5090  0010F2                     ___fladd:
  5091                           	opt stack 24
  5092                           
  5093                           ;incstack = 0
  5094  0010F2  0100               	movlb	0	; () banked
  5095  0010F4  3566               	rlcf	(___fladd@f1+2)& (0+255),w,b
  5096  0010F6  3567               	rlcf	(___fladd@f1+3)& (0+255),w,b
  5097  0010F8  0100               	movlb	0	; () banked
  5098  0010FA  6F6E               	movwf	___fladd@exp1& (0+255),b
  5099  0010FC  0100               	movlb	0	; () banked
  5100  0010FE  356A               	rlcf	(___fladd@f2+2)& (0+255),w,b
  5101  001100  356B               	rlcf	(___fladd@f2+3)& (0+255),w,b
  5102  001102  0100               	movlb	0	; () banked
  5103  001104  6F6D               	movwf	___fladd@exp2& (0+255),b
  5104  001106  0100               	movlb	0	; () banked
  5105  001108  516E               	movf	___fladd@exp1& (0+255),w,b
  5106  00110A  0100               	movlb	0	; () banked
  5107  00110C  B4D8               	btfsc	status,2,c
  5108  00110E  D00F               	goto	l720
  5109                           
  5110                           ; BSR set to: 0
  5111  001110  0100               	movlb	0	; () banked
  5112  001112  516D               	movf	___fladd@exp2& (0+255),w,b
  5113  001114  0100               	movlb	0	; () banked
  5114  001116  5D6E               	subwf	___fladd@exp1& (0+255),w,b
  5115  001118  B0D8               	btfsc	status,0,c
  5116  00111A  D012               	goto	l3391
  5117                           
  5118                           ; BSR set to: 0
  5119  00111C  0100               	movlb	0	; () banked
  5120  00111E  516E               	movf	___fladd@exp1& (0+255),w,b
  5121  001120  0800               	sublw	0
  5122  001122  0100               	movlb	0	; () banked
  5123  001124  256D               	addwf	___fladd@exp2& (0+255),w,b
  5124  001126  6E2B               	movwf	??___fladd& (0+255),c
  5125  001128  0E20               	movlw	32
  5126  00112A  642B               	cpfsgt	??___fladd,c
  5127  00112C  D009               	goto	l3391
  5128  00112E                     l720:
  5129                           
  5130                           ; BSR set to: 0
  5131  00112E  C068  F064         	movff	___fladd@f2,?___fladd
  5132  001132  C069  F065         	movff	___fladd@f2+1,?___fladd+1
  5133  001136  C06A  F066         	movff	___fladd@f2+2,?___fladd+2
  5134  00113A  C06B  F067         	movff	___fladd@f2+3,?___fladd+3
  5135  00113E  0012               	return	
  5136  001140                     l3391:
  5137                           
  5138                           ; BSR set to: 0
  5139  001140  0100               	movlb	0	; () banked
  5140  001142  516D               	movf	___fladd@exp2& (0+255),w,b
  5141  001144  0100               	movlb	0	; () banked
  5142  001146  B4D8               	btfsc	status,2,c
  5143  001148  D00F               	goto	l724
  5144                           
  5145                           ; BSR set to: 0
  5146  00114A  0100               	movlb	0	; () banked
  5147  00114C  516E               	movf	___fladd@exp1& (0+255),w,b
  5148  00114E  0100               	movlb	0	; () banked
  5149  001150  5D6D               	subwf	___fladd@exp2& (0+255),w,b
  5150  001152  B0D8               	btfsc	status,0,c
  5151  001154  D012               	goto	l3397
  5152                           
  5153                           ; BSR set to: 0
  5154  001156  0100               	movlb	0	; () banked
  5155  001158  516D               	movf	___fladd@exp2& (0+255),w,b
  5156  00115A  0800               	sublw	0
  5157  00115C  0100               	movlb	0	; () banked
  5158  00115E  256E               	addwf	___fladd@exp1& (0+255),w,b
  5159  001160  6E2B               	movwf	??___fladd& (0+255),c
  5160  001162  0E20               	movlw	32
  5161  001164  642B               	cpfsgt	??___fladd,c
  5162  001166  D009               	goto	l3397
  5163  001168                     l724:
  5164                           
  5165                           ; BSR set to: 0
  5166  001168  C064  F064         	movff	___fladd@f1,?___fladd
  5167  00116C  C065  F065         	movff	___fladd@f1+1,?___fladd+1
  5168  001170  C066  F066         	movff	___fladd@f1+2,?___fladd+2
  5169  001174  C067  F067         	movff	___fladd@f1+3,?___fladd+3
  5170  001178  0012               	return	
  5171  00117A                     l3397:
  5172                           
  5173                           ; BSR set to: 0
  5174  00117A  0E06               	movlw	6
  5175  00117C  0100               	movlb	0	; () banked
  5176  00117E  6F6C               	movwf	___fladd@sign& (0+255),b
  5177                           
  5178                           ; BSR set to: 0
  5179  001180  0100               	movlb	0	; () banked
  5180  001182  AF67               	btfss	(___fladd@f1+3)& (0+255),7,b
  5181  001184  D003               	goto	l3403
  5182                           
  5183                           ; BSR set to: 0
  5184  001186  0100               	movlb	0	; () banked
  5185  001188  8F6C               	bsf	___fladd@sign& (0+255),7,b
  5186  00118A  D000               	goto	l3403
  5187  00118C                     l3403:
  5188                           
  5189                           ; BSR set to: 0
  5190  00118C  0100               	movlb	0	; () banked
  5191  00118E  AF6B               	btfss	(___fladd@f2+3)& (0+255),7,b
  5192  001190  D002               	goto	l726
  5193                           
  5194                           ; BSR set to: 0
  5195  001192  0100               	movlb	0	; () banked
  5196  001194  8D6C               	bsf	___fladd@sign& (0+255),6,b
  5197  001196                     l726:
  5198                           
  5199                           ; BSR set to: 0
  5200  001196  0100               	movlb	0	; () banked
  5201  001198  8F66               	bsf	(___fladd@f1+2)& (0+255),7,b
  5202                           
  5203                           ; BSR set to: 0
  5204  00119A  0EFF               	movlw	255
  5205  00119C  0100               	movlb	0	; () banked
  5206  00119E  1764               	andwf	___fladd@f1& (0+255),f,b
  5207  0011A0  0EFF               	movlw	255
  5208  0011A2  1765               	andwf	(___fladd@f1+1)& (0+255),f,b
  5209  0011A4  0EFF               	movlw	255
  5210  0011A6  1766               	andwf	(___fladd@f1+2)& (0+255),f,b
  5211  0011A8  0E00               	movlw	0
  5212  0011AA  1767               	andwf	(___fladd@f1+3)& (0+255),f,b
  5213                           
  5214                           ; BSR set to: 0
  5215  0011AC  0100               	movlb	0	; () banked
  5216  0011AE  8F6A               	bsf	(___fladd@f2+2)& (0+255),7,b
  5217  0011B0  0EFF               	movlw	255
  5218  0011B2  0100               	movlb	0	; () banked
  5219  0011B4  1768               	andwf	___fladd@f2& (0+255),f,b
  5220  0011B6  0EFF               	movlw	255
  5221  0011B8  1769               	andwf	(___fladd@f2+1)& (0+255),f,b
  5222  0011BA  0EFF               	movlw	255
  5223  0011BC  176A               	andwf	(___fladd@f2+2)& (0+255),f,b
  5224  0011BE  0E00               	movlw	0
  5225  0011C0  176B               	andwf	(___fladd@f2+3)& (0+255),f,b
  5226  0011C2  0100               	movlb	0	; () banked
  5227  0011C4  516D               	movf	___fladd@exp2& (0+255),w,b
  5228  0011C6  0100               	movlb	0	; () banked
  5229  0011C8  5D6E               	subwf	___fladd@exp1& (0+255),w,b
  5230  0011CA  B0D8               	btfsc	status,0,c
  5231  0011CC  D029               	goto	l3421
  5232  0011CE                     l3411:
  5233                           
  5234                           ; BSR set to: 0
  5235  0011CE  0100               	movlb	0	; () banked
  5236  0011D0  90D8               	bcf	status,0,c
  5237  0011D2  3768               	rlcf	___fladd@f2& (0+255),f,b
  5238  0011D4  3769               	rlcf	(___fladd@f2+1)& (0+255),f,b
  5239  0011D6  376A               	rlcf	(___fladd@f2+2)& (0+255),f,b
  5240  0011D8  376B               	rlcf	(___fladd@f2+3)& (0+255),f,b
  5241  0011DA  0100               	movlb	0	; () banked
  5242  0011DC  076D               	decf	___fladd@exp2& (0+255),f,b
  5243                           
  5244                           ; BSR set to: 0
  5245  0011DE  0100               	movlb	0	; () banked
  5246  0011E0  516E               	movf	___fladd@exp1& (0+255),w,b
  5247  0011E2  0100               	movlb	0	; () banked
  5248  0011E4  196D               	xorwf	___fladd@exp2& (0+255),w,b
  5249  0011E6  B4D8               	btfsc	status,2,c
  5250  0011E8  D013               	goto	l3419
  5251                           
  5252                           ; BSR set to: 0
  5253  0011EA  0100               	movlb	0	; () banked
  5254  0011EC  076C               	decf	___fladd@sign& (0+255),f,b
  5255  0011EE  C06C  F02B         	movff	___fladd@sign,??___fladd
  5256  0011F2  0E07               	movlw	7
  5257  0011F4  162B               	andwf	??___fladd,f,c
  5258  0011F6  B4D8               	btfsc	status,2,c
  5259  0011F8  D00B               	goto	l3419
  5260  0011FA  D7E9               	goto	l3411
  5261                           
  5262                           ; BSR set to: 0
  5263                           
  5264                           ; BSR set to: 0
  5265  0011FC  D009               	goto	l3419
  5266  0011FE                     l3417:
  5267                           
  5268                           ; BSR set to: 0
  5269  0011FE  0100               	movlb	0	; () banked
  5270  001200  90D8               	bcf	status,0,c
  5271  001202  3367               	rrcf	(___fladd@f1+3)& (0+255),f,b
  5272  001204  3366               	rrcf	(___fladd@f1+2)& (0+255),f,b
  5273  001206  3365               	rrcf	(___fladd@f1+1)& (0+255),f,b
  5274  001208  3364               	rrcf	___fladd@f1& (0+255),f,b
  5275  00120A  0100               	movlb	0	; () banked
  5276  00120C  2B6E               	incf	___fladd@exp1& (0+255),f,b
  5277  00120E  D000               	goto	l3419
  5278  001210                     l3419:
  5279                           
  5280                           ; BSR set to: 0
  5281  001210  0100               	movlb	0	; () banked
  5282  001212  516D               	movf	___fladd@exp2& (0+255),w,b
  5283  001214  0100               	movlb	0	; () banked
  5284  001216  196E               	xorwf	___fladd@exp1& (0+255),w,b
  5285  001218  B4D8               	btfsc	status,2,c
  5286  00121A  D031               	goto	l735
  5287  00121C  D7F0               	goto	l3417
  5288                           
  5289                           ; BSR set to: 0
  5290  00121E  D02F               	goto	l735
  5291  001220                     l3421:
  5292                           
  5293                           ; BSR set to: 0
  5294  001220  0100               	movlb	0	; () banked
  5295  001222  516E               	movf	___fladd@exp1& (0+255),w,b
  5296  001224  0100               	movlb	0	; () banked
  5297  001226  5D6D               	subwf	___fladd@exp2& (0+255),w,b
  5298  001228  B0D8               	btfsc	status,0,c
  5299  00122A  D029               	goto	l735
  5300  00122C                     l3423:
  5301                           
  5302                           ; BSR set to: 0
  5303  00122C  0100               	movlb	0	; () banked
  5304  00122E  90D8               	bcf	status,0,c
  5305  001230  3764               	rlcf	___fladd@f1& (0+255),f,b
  5306  001232  3765               	rlcf	(___fladd@f1+1)& (0+255),f,b
  5307  001234  3766               	rlcf	(___fladd@f1+2)& (0+255),f,b
  5308  001236  3767               	rlcf	(___fladd@f1+3)& (0+255),f,b
  5309  001238  0100               	movlb	0	; () banked
  5310  00123A  076E               	decf	___fladd@exp1& (0+255),f,b
  5311                           
  5312                           ; BSR set to: 0
  5313  00123C  0100               	movlb	0	; () banked
  5314  00123E  516E               	movf	___fladd@exp1& (0+255),w,b
  5315  001240  0100               	movlb	0	; () banked
  5316  001242  196D               	xorwf	___fladd@exp2& (0+255),w,b
  5317  001244  B4D8               	btfsc	status,2,c
  5318  001246  D013               	goto	l3431
  5319                           
  5320                           ; BSR set to: 0
  5321  001248  0100               	movlb	0	; () banked
  5322  00124A  076C               	decf	___fladd@sign& (0+255),f,b
  5323  00124C  C06C  F02B         	movff	___fladd@sign,??___fladd
  5324  001250  0E07               	movlw	7
  5325  001252  162B               	andwf	??___fladd,f,c
  5326  001254  B4D8               	btfsc	status,2,c
  5327  001256  D00B               	goto	l3431
  5328  001258  D7E9               	goto	l3423
  5329                           
  5330                           ; BSR set to: 0
  5331                           
  5332                           ; BSR set to: 0
  5333  00125A  D009               	goto	l3431
  5334  00125C                     l3429:
  5335                           
  5336                           ; BSR set to: 0
  5337  00125C  0100               	movlb	0	; () banked
  5338  00125E  90D8               	bcf	status,0,c
  5339  001260  336B               	rrcf	(___fladd@f2+3)& (0+255),f,b
  5340  001262  336A               	rrcf	(___fladd@f2+2)& (0+255),f,b
  5341  001264  3369               	rrcf	(___fladd@f2+1)& (0+255),f,b
  5342  001266  3368               	rrcf	___fladd@f2& (0+255),f,b
  5343  001268  0100               	movlb	0	; () banked
  5344  00126A  2B6D               	incf	___fladd@exp2& (0+255),f,b
  5345  00126C  D000               	goto	l3431
  5346  00126E                     l3431:
  5347                           
  5348                           ; BSR set to: 0
  5349  00126E  0100               	movlb	0	; () banked
  5350  001270  516D               	movf	___fladd@exp2& (0+255),w,b
  5351  001272  0100               	movlb	0	; () banked
  5352  001274  196E               	xorwf	___fladd@exp1& (0+255),w,b
  5353  001276  B4D8               	btfsc	status,2,c
  5354  001278  D002               	goto	l735
  5355  00127A  D7F0               	goto	l3429
  5356                           
  5357                           ; BSR set to: 0
  5358  00127C  D000               	goto	l735
  5359  00127E                     l735:
  5360                           
  5361                           ; BSR set to: 0
  5362  00127E  0100               	movlb	0	; () banked
  5363  001280  AF6C               	btfss	___fladd@sign& (0+255),7,b
  5364  001282  D011               	goto	l3435
  5365                           
  5366                           ; BSR set to: 0
  5367  001284  0EFF               	movlw	255
  5368  001286  0100               	movlb	0	; () banked
  5369  001288  1B64               	xorwf	___fladd@f1& (0+255),f,b
  5370  00128A  0EFF               	movlw	255
  5371  00128C  1B65               	xorwf	(___fladd@f1+1)& (0+255),f,b
  5372  00128E  0EFF               	movlw	255
  5373  001290  1B66               	xorwf	(___fladd@f1+2)& (0+255),f,b
  5374  001292  0EFF               	movlw	255
  5375  001294  1B67               	xorwf	(___fladd@f1+3)& (0+255),f,b
  5376  001296  0E01               	movlw	1
  5377  001298  0100               	movlb	0	; () banked
  5378  00129A  2764               	addwf	___fladd@f1& (0+255),f,b
  5379  00129C  0E00               	movlw	0
  5380  00129E  2365               	addwfc	(___fladd@f1+1)& (0+255),f,b
  5381  0012A0  2366               	addwfc	(___fladd@f1+2)& (0+255),f,b
  5382  0012A2  2367               	addwfc	(___fladd@f1+3)& (0+255),f,b
  5383  0012A4  D000               	goto	l3435
  5384  0012A6                     l3435:
  5385                           
  5386                           ; BSR set to: 0
  5387  0012A6  0100               	movlb	0	; () banked
  5388  0012A8  AD6C               	btfss	___fladd@sign& (0+255),6,b
  5389  0012AA  D011               	goto	l3439
  5390                           
  5391                           ; BSR set to: 0
  5392  0012AC  0EFF               	movlw	255
  5393  0012AE  0100               	movlb	0	; () banked
  5394  0012B0  1B68               	xorwf	___fladd@f2& (0+255),f,b
  5395  0012B2  0EFF               	movlw	255
  5396  0012B4  1B69               	xorwf	(___fladd@f2+1)& (0+255),f,b
  5397  0012B6  0EFF               	movlw	255
  5398  0012B8  1B6A               	xorwf	(___fladd@f2+2)& (0+255),f,b
  5399  0012BA  0EFF               	movlw	255
  5400  0012BC  1B6B               	xorwf	(___fladd@f2+3)& (0+255),f,b
  5401  0012BE  0E01               	movlw	1
  5402  0012C0  0100               	movlb	0	; () banked
  5403  0012C2  2768               	addwf	___fladd@f2& (0+255),f,b
  5404  0012C4  0E00               	movlw	0
  5405  0012C6  2369               	addwfc	(___fladd@f2+1)& (0+255),f,b
  5406  0012C8  236A               	addwfc	(___fladd@f2+2)& (0+255),f,b
  5407  0012CA  236B               	addwfc	(___fladd@f2+3)& (0+255),f,b
  5408  0012CC  D000               	goto	l3439
  5409  0012CE                     l3439:
  5410                           
  5411                           ; BSR set to: 0
  5412  0012CE  0E00               	movlw	0
  5413  0012D0  0100               	movlb	0	; () banked
  5414  0012D2  6F6C               	movwf	___fladd@sign& (0+255),b
  5415                           
  5416                           ; BSR set to: 0
  5417  0012D4  0100               	movlb	0	; () banked
  5418  0012D6  5164               	movf	___fladd@f1& (0+255),w,b
  5419  0012D8  0100               	movlb	0	; () banked
  5420  0012DA  2768               	addwf	___fladd@f2& (0+255),f,b
  5421  0012DC  0100               	movlb	0	; () banked
  5422  0012DE  5165               	movf	(___fladd@f1+1)& (0+255),w,b
  5423  0012E0  0100               	movlb	0	; () banked
  5424  0012E2  2369               	addwfc	(___fladd@f2+1)& (0+255),f,b
  5425  0012E4  0100               	movlb	0	; () banked
  5426  0012E6  5166               	movf	(___fladd@f1+2)& (0+255),w,b
  5427  0012E8  0100               	movlb	0	; () banked
  5428  0012EA  236A               	addwfc	(___fladd@f2+2)& (0+255),f,b
  5429  0012EC  0100               	movlb	0	; () banked
  5430  0012EE  5167               	movf	(___fladd@f1+3)& (0+255),w,b
  5431  0012F0  0100               	movlb	0	; () banked
  5432  0012F2  236B               	addwfc	(___fladd@f2+3)& (0+255),f,b
  5433                           
  5434                           ; BSR set to: 0
  5435  0012F4  0100               	movlb	0	; () banked
  5436  0012F6  AF6B               	btfss	(___fladd@f2+3)& (0+255),7,b
  5437  0012F8  D014               	goto	l3449
  5438                           
  5439                           ; BSR set to: 0
  5440  0012FA  0EFF               	movlw	255
  5441  0012FC  0100               	movlb	0	; () banked
  5442  0012FE  1B68               	xorwf	___fladd@f2& (0+255),f,b
  5443  001300  0EFF               	movlw	255
  5444  001302  1B69               	xorwf	(___fladd@f2+1)& (0+255),f,b
  5445  001304  0EFF               	movlw	255
  5446  001306  1B6A               	xorwf	(___fladd@f2+2)& (0+255),f,b
  5447  001308  0EFF               	movlw	255
  5448  00130A  1B6B               	xorwf	(___fladd@f2+3)& (0+255),f,b
  5449  00130C  0E01               	movlw	1
  5450  00130E  0100               	movlb	0	; () banked
  5451  001310  2768               	addwf	___fladd@f2& (0+255),f,b
  5452  001312  0E00               	movlw	0
  5453  001314  2369               	addwfc	(___fladd@f2+1)& (0+255),f,b
  5454  001316  236A               	addwfc	(___fladd@f2+2)& (0+255),f,b
  5455  001318  236B               	addwfc	(___fladd@f2+3)& (0+255),f,b
  5456                           
  5457                           ; BSR set to: 0
  5458  00131A  0E01               	movlw	1
  5459  00131C  0100               	movlb	0	; () banked
  5460  00131E  6F6C               	movwf	___fladd@sign& (0+255),b
  5461  001320  D000               	goto	l3449
  5462  001322                     l3449:
  5463                           
  5464                           ; BSR set to: 0
  5465  001322  C068  F020         	movff	___fladd@f2,___flpack@arg
  5466  001326  C069  F021         	movff	___fladd@f2+1,___flpack@arg+1
  5467  00132A  C06A  F022         	movff	___fladd@f2+2,___flpack@arg+2
  5468  00132E  C06B  F023         	movff	___fladd@f2+3,___flpack@arg+3
  5469  001332  C06E  F024         	movff	___fladd@exp1,___flpack@exp
  5470  001336  C06C  F025         	movff	___fladd@sign,___flpack@sign
  5471  00133A  EC90  F011         	call	___flpack	;wreg free
  5472  00133E  C020  F064         	movff	?___flpack,?___fladd
  5473  001342  C021  F065         	movff	?___flpack+1,?___fladd+1
  5474  001346  C022  F066         	movff	?___flpack+2,?___fladd+2
  5475  00134A  C023  F067         	movff	?___flpack+3,?___fladd+3
  5476  00134E  0012               	return	
  5477  001350  0012               	return		;funcret
  5478  001352                     __end_of___fladd:
  5479                           	opt stack 0
  5480                           tblptru	equ	0xFF8
  5481                           tblptrh	equ	0xFF7
  5482                           tblptrl	equ	0xFF6
  5483                           tablat	equ	0xFF5
  5484                           postinc0	equ	0xFEE
  5485                           wreg	equ	0xFE8
  5486                           postinc2	equ	0xFDE
  5487                           postdec2	equ	0xFDD
  5488                           fsr2h	equ	0xFDA
  5489                           fsr2l	equ	0xFD9
  5490                           status	equ	0xFD8
  5491                           
  5492 ;; *************** function ___flge *****************
  5493 ;; Defined at:
  5494 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flge.c"
  5495 ;; Parameters:    Size  Location     Type
  5496 ;;  ff1             4    0[BANK0 ] unsigned char 
  5497 ;;  ff2             4    4[BANK0 ] unsigned char 
  5498 ;; Auto vars:     Size  Location     Type
  5499 ;;		None
  5500 ;; Return value:  Size  Location     Type
  5501 ;;		None               void
  5502 ;; Registers used:
  5503 ;;		wreg, status,2, status,0
  5504 ;; Tracked objects:
  5505 ;;		On entry : 0/0
  5506 ;;		On exit  : 0/0
  5507 ;;		Unchanged: 0/0
  5508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5509 ;;      Params:         0       8       0       0       0       0       0
  5510 ;;      Locals:         0       0       0       0       0       0       0
  5511 ;;      Temps:          4       0       0       0       0       0       0
  5512 ;;      Totals:         4       8       0       0       0       0       0
  5513 ;;Total ram usage:       12 bytes
  5514 ;; Hardware stack levels used:    1
  5515 ;; Hardware stack levels required when called:    2
  5516 ;; This function calls:
  5517 ;;		Nothing
  5518 ;; This function is called by:
  5519 ;;		_asin
  5520 ;;		_atan
  5521 ;;		_pow
  5522 ;;		_sqrt
  5523 ;;		_exp
  5524 ;;		_floor
  5525 ;; This function uses a non-reentrant model
  5526 ;;
  5527                           
  5528                           	psect	text26
  5529  002614                     __ptext26:
  5530                           	opt stack 0
  5531  002614                     ___flge:
  5532                           	opt stack 26
  5533                           
  5534                           ;incstack = 0
  5535  002614  0100               	movlb	0	; () banked
  5536  002616  AF63               	btfss	(___flge@ff1+3)& (0+255),7,b
  5537  002618  D022               	goto	l3649
  5538                           
  5539                           ; BSR set to: 0
  5540  00261A  C060  F028         	movff	___flge@ff1,??___flge
  5541  00261E  C061  F029         	movff	___flge@ff1+1,??___flge+1
  5542  002622  C062  F02A         	movff	___flge@ff1+2,??___flge+2
  5543  002626  C063  F02B         	movff	___flge@ff1+3,??___flge+3
  5544  00262A  1E28               	comf	??___flge,f,c
  5545  00262C  1E29               	comf	??___flge+1,f,c
  5546  00262E  1E2A               	comf	??___flge+2,f,c
  5547  002630  1E2B               	comf	??___flge+3,f,c
  5548  002632  2A28               	incf	??___flge,f,c
  5549  002634  0E00               	movlw	0
  5550  002636  2229               	addwfc	??___flge+1,f,c
  5551  002638  222A               	addwfc	??___flge+2,f,c
  5552  00263A  222B               	addwfc	??___flge+3,f,c
  5553  00263C  0E00               	movlw	0
  5554  00263E  2428               	addwf	??___flge,w,c
  5555  002640  0100               	movlb	0	; () banked
  5556  002642  6F60               	movwf	___flge@ff1& (0+255),b
  5557  002644  0E00               	movlw	0
  5558  002646  2029               	addwfc	??___flge+1,w,c
  5559  002648  0100               	movlb	0	; () banked
  5560  00264A  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  5561  00264C  0E00               	movlw	0
  5562  00264E  202A               	addwfc	??___flge+2,w,c
  5563  002650  0100               	movlb	0	; () banked
  5564  002652  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  5565  002654  0E80               	movlw	128
  5566  002656  202B               	addwfc	??___flge+3,w,c
  5567  002658  0100               	movlb	0	; () banked
  5568  00265A  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  5569  00265C  D000               	goto	l3649
  5570  00265E                     l3649:
  5571                           
  5572                           ; BSR set to: 0
  5573  00265E  0100               	movlb	0	; () banked
  5574  002660  AF67               	btfss	(___flge@ff2+3)& (0+255),7,b
  5575  002662  D021               	goto	l760
  5576                           
  5577                           ; BSR set to: 0
  5578  002664  C064  F028         	movff	___flge@ff2,??___flge
  5579  002668  C065  F029         	movff	___flge@ff2+1,??___flge+1
  5580  00266C  C066  F02A         	movff	___flge@ff2+2,??___flge+2
  5581  002670  C067  F02B         	movff	___flge@ff2+3,??___flge+3
  5582  002674  1E28               	comf	??___flge,f,c
  5583  002676  1E29               	comf	??___flge+1,f,c
  5584  002678  1E2A               	comf	??___flge+2,f,c
  5585  00267A  1E2B               	comf	??___flge+3,f,c
  5586  00267C  2A28               	incf	??___flge,f,c
  5587  00267E  0E00               	movlw	0
  5588  002680  2229               	addwfc	??___flge+1,f,c
  5589  002682  222A               	addwfc	??___flge+2,f,c
  5590  002684  222B               	addwfc	??___flge+3,f,c
  5591  002686  0E00               	movlw	0
  5592  002688  2428               	addwf	??___flge,w,c
  5593  00268A  0100               	movlb	0	; () banked
  5594  00268C  6F64               	movwf	___flge@ff2& (0+255),b
  5595  00268E  0E00               	movlw	0
  5596  002690  2029               	addwfc	??___flge+1,w,c
  5597  002692  0100               	movlb	0	; () banked
  5598  002694  6F65               	movwf	(___flge@ff2+1)& (0+255),b
  5599  002696  0E00               	movlw	0
  5600  002698  202A               	addwfc	??___flge+2,w,c
  5601  00269A  0100               	movlb	0	; () banked
  5602  00269C  6F66               	movwf	(___flge@ff2+2)& (0+255),b
  5603  00269E  0E80               	movlw	128
  5604  0026A0  202B               	addwfc	??___flge+3,w,c
  5605  0026A2  0100               	movlb	0	; () banked
  5606  0026A4  6F67               	movwf	(___flge@ff2+3)& (0+255),b
  5607  0026A6                     l760:
  5608                           
  5609                           ; BSR set to: 0
  5610  0026A6  0E00               	movlw	0
  5611  0026A8  0100               	movlb	0	; () banked
  5612  0026AA  1B60               	xorwf	___flge@ff1& (0+255),f,b
  5613  0026AC  0E00               	movlw	0
  5614  0026AE  1B61               	xorwf	(___flge@ff1+1)& (0+255),f,b
  5615  0026B0  0E00               	movlw	0
  5616  0026B2  1B62               	xorwf	(___flge@ff1+2)& (0+255),f,b
  5617  0026B4  0E80               	movlw	128
  5618  0026B6  1B63               	xorwf	(___flge@ff1+3)& (0+255),f,b
  5619  0026B8  0E00               	movlw	0
  5620  0026BA  0100               	movlb	0	; () banked
  5621  0026BC  1B64               	xorwf	___flge@ff2& (0+255),f,b
  5622  0026BE  0E00               	movlw	0
  5623  0026C0  1B65               	xorwf	(___flge@ff2+1)& (0+255),f,b
  5624  0026C2  0E00               	movlw	0
  5625  0026C4  1B66               	xorwf	(___flge@ff2+2)& (0+255),f,b
  5626  0026C6  0E80               	movlw	128
  5627  0026C8  1B67               	xorwf	(___flge@ff2+3)& (0+255),f,b
  5628  0026CA  0100               	movlb	0	; () banked
  5629  0026CC  5164               	movf	___flge@ff2& (0+255),w,b
  5630  0026CE  0100               	movlb	0	; () banked
  5631  0026D0  5D60               	subwf	___flge@ff1& (0+255),w,b
  5632  0026D2  0100               	movlb	0	; () banked
  5633  0026D4  5165               	movf	(___flge@ff2+1)& (0+255),w,b
  5634  0026D6  0100               	movlb	0	; () banked
  5635  0026D8  5961               	subwfb	(___flge@ff1+1)& (0+255),w,b
  5636  0026DA  0100               	movlb	0	; () banked
  5637  0026DC  5166               	movf	(___flge@ff2+2)& (0+255),w,b
  5638  0026DE  0100               	movlb	0	; () banked
  5639  0026E0  5962               	subwfb	(___flge@ff1+2)& (0+255),w,b
  5640  0026E2  0100               	movlb	0	; () banked
  5641  0026E4  5167               	movf	(___flge@ff2+3)& (0+255),w,b
  5642  0026E6  0100               	movlb	0	; () banked
  5643  0026E8  5963               	subwfb	(___flge@ff1+3)& (0+255),w,b
  5644  0026EA  B0D8               	btfsc	status,0,c
  5645  0026EC  D002               	goto	l3655
  5646                           
  5647                           ; BSR set to: 0
  5648  0026EE  90D8               	bcf	status,0,c
  5649  0026F0  0012               	return	
  5650  0026F2                     l3655:
  5651                           
  5652                           ; BSR set to: 0
  5653  0026F2  80D8               	bsf	status,0,c
  5654                           
  5655                           ; BSR set to: 0
  5656  0026F4  0012               	return	
  5657                           
  5658                           ; BSR set to: 0
  5659                           
  5660                           ; BSR set to: 0
  5661  0026F6  0012               	return		;funcret
  5662  0026F8                     __end_of___flge:
  5663                           	opt stack 0
  5664                           tblptru	equ	0xFF8
  5665                           tblptrh	equ	0xFF7
  5666                           tblptrl	equ	0xFF6
  5667                           tablat	equ	0xFF5
  5668                           postinc0	equ	0xFEE
  5669                           wreg	equ	0xFE8
  5670                           postinc2	equ	0xFDE
  5671                           postdec2	equ	0xFDD
  5672                           fsr2h	equ	0xFDA
  5673                           fsr2l	equ	0xFD9
  5674                           status	equ	0xFD8
  5675                           
  5676 ;; *************** function _Accel_Get *****************
  5677 ;; Defined at:
  5678 ;;		line 33 in file "accel.c"
  5679 ;; Parameters:    Size  Location     Type
  5680 ;;  out             2   45[BANK0 ] PTR struct .
  5681 ;;		 -> Gyros_Update@a(12), 
  5682 ;; Auto vars:     Size  Location     Type
  5683 ;;  gCount          2   59[BANK0 ] int 
  5684 ;;  i               2   63[BANK0 ] int 
  5685 ;;  raw             6   53[BANK0 ] unsigned char [6]
  5686 ;;  f_out           2   61[BANK0 ] PTR float 
  5687 ;;		 -> Gyros_Update@a(12), 
  5688 ;; Return value:  Size  Location     Type
  5689 ;;		None               void
  5690 ;; Registers used:
  5691 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5692 ;; Tracked objects:
  5693 ;;		On entry : 0/0
  5694 ;;		On exit  : 0/0
  5695 ;;		Unchanged: 0/0
  5696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5697 ;;      Params:         0       2       0       0       0       0       0
  5698 ;;      Locals:         0      12       0       0       0       0       0
  5699 ;;      Temps:          0       6       0       0       0       0       0
  5700 ;;      Totals:         0      20       0       0       0       0       0
  5701 ;;Total ram usage:       20 bytes
  5702 ;; Hardware stack levels used:    1
  5703 ;; Hardware stack levels required when called:    6
  5704 ;; This function calls:
  5705 ;;		_Accel_ReadRegisters
  5706 ;;		___awtofl
  5707 ;;		___fldiv
  5708 ;;		___wmul
  5709 ;; This function is called by:
  5710 ;;		_Gyros_Update
  5711 ;; This function uses a non-reentrant model
  5712 ;;
  5713                           
  5714                           	psect	text27
  5715  0019D0                     __ptext27:
  5716                           	opt stack 0
  5717  0019D0                     _Accel_Get:
  5718                           	opt stack 23
  5719                           
  5720                           ;accel.c: 35: char raw[6];
  5721                           ;accel.c: 36: float* f_out = (float*) out;
  5722                           
  5723                           ; BSR set to: 0
  5724                           ;incstack = 0
  5725  0019D0  C08D  F09D         	movff	Accel_Get@out,Accel_Get@f_out
  5726  0019D4  C08E  F09E         	movff	Accel_Get@out+1,Accel_Get@f_out+1
  5727                           
  5728                           ;accel.c: 37: f_out[0] = 0;
  5729  0019D8  C09D  FFD9         	movff	Accel_Get@f_out,fsr2l
  5730  0019DC  C09E  FFDA         	movff	Accel_Get@f_out+1,fsr2h
  5731  0019E0  0E00               	movlw	0
  5732  0019E2  6EDE               	movwf	postinc2,c
  5733  0019E4  0E00               	movlw	0
  5734  0019E6  6EDE               	movwf	postinc2,c
  5735  0019E8  0E00               	movlw	0
  5736  0019EA  6EDE               	movwf	postinc2,c
  5737  0019EC  0E00               	movlw	0
  5738  0019EE  6EDD               	movwf	postdec2,c
  5739                           
  5740                           ;accel.c: 38: f_out[1] = 0;
  5741  0019F0  0100               	movlb	0	; () banked
  5742  0019F2  EE20 F004          	lfsr	2,4
  5743  0019F6  519D               	movf	Accel_Get@f_out& (0+255),w,b
  5744  0019F8  26D9               	addwf	fsr2l,f,c
  5745  0019FA  519E               	movf	(Accel_Get@f_out+1)& (0+255),w,b
  5746  0019FC  22DA               	addwfc	fsr2h,f,c
  5747  0019FE  0E00               	movlw	0
  5748  001A00  6EDE               	movwf	postinc2,c
  5749  001A02  0E00               	movlw	0
  5750  001A04  6EDE               	movwf	postinc2,c
  5751  001A06  0E00               	movlw	0
  5752  001A08  6EDE               	movwf	postinc2,c
  5753  001A0A  0E00               	movlw	0
  5754  001A0C  6EDD               	movwf	postdec2,c
  5755                           
  5756                           ; BSR set to: 0
  5757                           ;accel.c: 39: f_out[2] = 0;
  5758  001A0E  0100               	movlb	0	; () banked
  5759  001A10  EE20 F008          	lfsr	2,8
  5760  001A14  519D               	movf	Accel_Get@f_out& (0+255),w,b
  5761  001A16  26D9               	addwf	fsr2l,f,c
  5762  001A18  519E               	movf	(Accel_Get@f_out+1)& (0+255),w,b
  5763  001A1A  22DA               	addwfc	fsr2h,f,c
  5764  001A1C  0E00               	movlw	0
  5765  001A1E  6EDE               	movwf	postinc2,c
  5766  001A20  0E00               	movlw	0
  5767  001A22  6EDE               	movwf	postinc2,c
  5768  001A24  0E00               	movlw	0
  5769  001A26  6EDE               	movwf	postinc2,c
  5770  001A28  0E00               	movlw	0
  5771  001A2A  6EDD               	movwf	postdec2,c
  5772                           
  5773                           ; BSR set to: 0
  5774                           ;accel.c: 41: Accel_ReadRegisters(0x01, raw, 6);
  5775  001A2C  0E95               	movlw	low Accel_Get@raw
  5776  001A2E  6E28               	movwf	Accel_ReadRegisters@out,c
  5777  001A30  0E00               	movlw	high Accel_Get@raw
  5778  001A32  6E29               	movwf	Accel_ReadRegisters@out+1,c
  5779  001A34  0E00               	movlw	0
  5780  001A36  6E2B               	movwf	Accel_ReadRegisters@length+1,c
  5781  001A38  0E06               	movlw	6
  5782  001A3A  6E2A               	movwf	Accel_ReadRegisters@length,c
  5783  001A3C  0E01               	movlw	1
  5784  001A3E  ECDD  F016         	call	_Accel_ReadRegisters
  5785                           
  5786                           ;accel.c: 43: for(int i = 0; i < 3 ; i++)
  5787  001A42  0E00               	movlw	0
  5788  001A44  0100               	movlb	0	; () banked
  5789  001A46  6FA0               	movwf	(Accel_Get@i+1)& (0+255),b
  5790  001A48  0E00               	movlw	0
  5791  001A4A  6F9F               	movwf	Accel_Get@i& (0+255),b
  5792                           
  5793                           ; BSR set to: 0
  5794  001A4C  0100               	movlb	0	; () banked
  5795  001A4E  BFA0               	btfsc	(Accel_Get@i+1)& (0+255),7,b
  5796  001A50  D00A               	goto	l4033
  5797  001A52  0100               	movlb	0	; () banked
  5798  001A54  51A0               	movf	(Accel_Get@i+1)& (0+255),w,b
  5799  001A56  E106               	bnz	u5120
  5800  001A58  0E03               	movlw	3
  5801  001A5A  0100               	movlb	0	; () banked
  5802  001A5C  5D9F               	subwf	Accel_Get@i& (0+255),w,b
  5803  001A5E  B0D8               	btfsc	status,0,c
  5804  001A60  0012               	return	
  5805  001A62  D001               	goto	l4033
  5806  001A64                     u5120:
  5807                           
  5808                           ; BSR set to: 0
  5809  001A64  0012               	return	
  5810  001A66                     l4033:
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;accel.c: 44: {
  5814                           ;accel.c: 45: int gCount = (raw[i*2] << 8) | raw[(i*2)+1];
  5815  001A66  90D8               	bcf	status,0,c
  5816  001A68  0100               	movlb	0	; () banked
  5817  001A6A  359F               	rlcf	Accel_Get@i& (0+255),w,b
  5818  001A6C  6ED9               	movwf	fsr2l,c
  5819  001A6E  0100               	movlb	0	; () banked
  5820  001A70  35A0               	rlcf	(Accel_Get@i+1)& (0+255),w,b
  5821  001A72  6EDA               	movwf	fsr2h,c
  5822  001A74  0E95               	movlw	low Accel_Get@raw
  5823  001A76  26D9               	addwf	fsr2l,f,c
  5824  001A78  0E00               	movlw	high Accel_Get@raw
  5825  001A7A  22DA               	addwfc	fsr2h,f,c
  5826  001A7C  50DF               	movf	indf2,w,c
  5827  001A7E  0100               	movlb	0	; () banked
  5828  001A80  6F8F               	movwf	??_Accel_Get& (0+255),b
  5829  001A82  0100               	movlb	0	; () banked
  5830  001A84  518F               	movf	??_Accel_Get& (0+255),w,b
  5831  001A86  0100               	movlb	0	; () banked
  5832  001A88  6F91               	movwf	(??_Accel_Get+2)& (0+255),b
  5833  001A8A  6B90               	clrf	(??_Accel_Get+1)& (0+255),b
  5834  001A8C  C09F  F092         	movff	Accel_Get@i,??_Accel_Get+3
  5835  001A90  C0A0  F093         	movff	Accel_Get@i+1,??_Accel_Get+4
  5836  001A94  90D8               	bcf	status,0,c
  5837  001A96  0100               	movlb	0	; () banked
  5838  001A98  3792               	rlcf	(??_Accel_Get+3)& (0+255),f,b
  5839  001A9A  3793               	rlcf	(??_Accel_Get+4)& (0+255),f,b
  5840  001A9C  0E01               	movlw	1
  5841  001A9E  0100               	movlb	0	; () banked
  5842  001AA0  2792               	addwf	(??_Accel_Get+3)& (0+255),f,b
  5843  001AA2  0E00               	movlw	0
  5844  001AA4  2393               	addwfc	(??_Accel_Get+4)& (0+255),f,b
  5845  001AA6  0E95               	movlw	low Accel_Get@raw
  5846  001AA8  0100               	movlb	0	; () banked
  5847  001AAA  2592               	addwf	(??_Accel_Get+3)& (0+255),w,b
  5848  001AAC  6ED9               	movwf	fsr2l,c
  5849  001AAE  0E00               	movlw	high Accel_Get@raw
  5850  001AB0  0100               	movlb	0	; () banked
  5851  001AB2  2193               	addwfc	(??_Accel_Get+4)& (0+255),w,b
  5852  001AB4  6EDA               	movwf	fsr2h,c
  5853  001AB6  50DF               	movf	indf2,w,c
  5854  001AB8  0100               	movlb	0	; () banked
  5855  001ABA  6F94               	movwf	(??_Accel_Get+5)& (0+255),b
  5856  001ABC  0100               	movlb	0	; () banked
  5857  001ABE  5194               	movf	(??_Accel_Get+5)& (0+255),w,b
  5858  001AC0  0100               	movlb	0	; () banked
  5859  001AC2  1190               	iorwf	(??_Accel_Get+1)& (0+255),w,b
  5860  001AC4  0100               	movlb	0	; () banked
  5861  001AC6  6F9B               	movwf	Accel_Get@gCount& (0+255),b
  5862  001AC8  0100               	movlb	0	; () banked
  5863  001ACA  5191               	movf	(??_Accel_Get+2)& (0+255),w,b
  5864  001ACC  0100               	movlb	0	; () banked
  5865  001ACE  6F9C               	movwf	(Accel_Get@gCount+1)& (0+255),b
  5866                           
  5867                           ; BSR set to: 0
  5868                           ;accel.c: 46: gCount >>= 4;
  5869  001AD0  0100               	movlb	0	; () banked
  5870  001AD2  0E04               	movlw	4
  5871  001AD4  0100               	movlb	0	; () banked
  5872  001AD6  6F8F               	movwf	??_Accel_Get& (0+255),b
  5873  001AD8                     u5135:
  5874  001AD8  0100               	movlb	0	; () banked
  5875  001ADA  359C               	rlcf	(Accel_Get@gCount+1)& (0+255),w,b
  5876  001ADC  339C               	rrcf	(Accel_Get@gCount+1)& (0+255),f,b
  5877  001ADE  339B               	rrcf	Accel_Get@gCount& (0+255),f,b
  5878  001AE0  0100               	movlb	0	; () banked
  5879  001AE2  2F8F               	decfsz	??_Accel_Get& (0+255),f,b
  5880  001AE4  D7F9               	goto	u5135
  5881                           
  5882                           ; BSR set to: 0
  5883                           ;accel.c: 49: if (raw[i*2] > 0x7F)
  5884  001AE6  90D8               	bcf	status,0,c
  5885  001AE8  0100               	movlb	0	; () banked
  5886  001AEA  359F               	rlcf	Accel_Get@i& (0+255),w,b
  5887  001AEC  6ED9               	movwf	fsr2l,c
  5888  001AEE  0100               	movlb	0	; () banked
  5889  001AF0  35A0               	rlcf	(Accel_Get@i+1)& (0+255),w,b
  5890  001AF2  6EDA               	movwf	fsr2h,c
  5891  001AF4  0E95               	movlw	low Accel_Get@raw
  5892  001AF6  26D9               	addwf	fsr2l,f,c
  5893  001AF8  0E00               	movlw	high Accel_Get@raw
  5894  001AFA  22DA               	addwfc	fsr2h,f,c
  5895  001AFC  0E7F               	movlw	127
  5896  001AFE  64DF               	cpfsgt	indf2,c
  5897  001B00  D013               	goto	l4043
  5898                           
  5899                           ; BSR set to: 0
  5900                           ;accel.c: 50: {
  5901                           ;accel.c: 51: gCount = ~gCount + 1;
  5902  001B02  0100               	movlb	0	; () banked
  5903  001B04  6D9B               	negf	Accel_Get@gCount& (0+255),b
  5904  001B06  1F9C               	comf	(Accel_Get@gCount+1)& (0+255),f,b
  5905  001B08  B0D8               	btfsc	status,0,c
  5906  001B0A  2B9C               	incf	(Accel_Get@gCount+1)& (0+255),f,b
  5907                           
  5908                           ; BSR set to: 0
  5909                           ;accel.c: 52: gCount *= -1;
  5910  001B0C  C09B  F020         	movff	Accel_Get@gCount,___wmul@multiplier
  5911  001B10  C09C  F021         	movff	Accel_Get@gCount+1,___wmul@multiplier+1
  5912  001B14  0EFF               	movlw	255
  5913  001B16  6E23               	movwf	___wmul@multiplicand+1,c
  5914  001B18  6822               	setf	___wmul@multiplicand,c
  5915  001B1A  EC23  F017         	call	___wmul	;wreg free
  5916  001B1E  C020  F09B         	movff	?___wmul,Accel_Get@gCount
  5917  001B22  C021  F09C         	movff	?___wmul+1,Accel_Get@gCount+1
  5918  001B26  D000               	goto	l4043
  5919  001B28                     l4043:
  5920                           
  5921                           ;accel.c: 53: }
  5922                           ;accel.c: 55: f_out[i] = (float) gCount / ((1<<12)/(2*2));
  5923  001B28  C09B  F060         	movff	Accel_Get@gCount,___awtofl@c
  5924  001B2C  C09C  F061         	movff	Accel_Get@gCount+1,___awtofl@c+1
  5925  001B30  EC2A  F016         	call	___awtofl	;wreg free
  5926  001B34  C060  F07E         	movff	?___awtofl,___fldiv@f1
  5927  001B38  C061  F07F         	movff	?___awtofl+1,___fldiv@f1+1
  5928  001B3C  C062  F080         	movff	?___awtofl+2,___fldiv@f1+2
  5929  001B40  C063  F081         	movff	?___awtofl+3,___fldiv@f1+3
  5930  001B44  0E00               	movlw	0
  5931  001B46  0100               	movlb	0	; () banked
  5932  001B48  6F82               	movwf	___fldiv@f2& (0+255),b
  5933  001B4A  0E00               	movlw	0
  5934  001B4C  6F83               	movwf	(___fldiv@f2+1)& (0+255),b
  5935  001B4E  0E80               	movlw	128
  5936  001B50  6F84               	movwf	(___fldiv@f2+2)& (0+255),b
  5937  001B52  0E44               	movlw	68
  5938  001B54  6F85               	movwf	(___fldiv@f2+3)& (0+255),b
  5939  001B56  EC44  F00F         	call	___fldiv	;wreg free
  5940  001B5A  90D8               	bcf	status,0,c
  5941  001B5C  0100               	movlb	0	; () banked
  5942  001B5E  359F               	rlcf	Accel_Get@i& (0+255),w,b
  5943  001B60  6ED9               	movwf	fsr2l,c
  5944  001B62  0100               	movlb	0	; () banked
  5945  001B64  35A0               	rlcf	(Accel_Get@i+1)& (0+255),w,b
  5946  001B66  6EDA               	movwf	fsr2h,c
  5947  001B68  90D8               	bcf	status,0,c
  5948  001B6A  36D9               	rlcf	fsr2l,f,c
  5949  001B6C  36DA               	rlcf	fsr2h,f,c
  5950  001B6E  0100               	movlb	0	; () banked
  5951  001B70  519D               	movf	Accel_Get@f_out& (0+255),w,b
  5952  001B72  26D9               	addwf	fsr2l,f,c
  5953  001B74  0100               	movlb	0	; () banked
  5954  001B76  519E               	movf	(Accel_Get@f_out+1)& (0+255),w,b
  5955  001B78  22DA               	addwfc	fsr2h,f,c
  5956  001B7A  0100               	movlb	0	; () banked
  5957  001B7C  C07E  FFDE         	movff	?___fldiv,postinc2
  5958  001B80  0100               	movlb	0	; () banked
  5959  001B82  C07F  FFDE         	movff	?___fldiv+1,postinc2
  5960  001B86  0100               	movlb	0	; () banked
  5961  001B88  C080  FFDE         	movff	?___fldiv+2,postinc2
  5962  001B8C  0100               	movlb	0	; () banked
  5963  001B8E  C081  FFDE         	movff	?___fldiv+3,postinc2
  5964                           
  5965                           ; BSR set to: 0
  5966  001B92  0100               	movlb	0	; () banked
  5967  001B94  4B9F               	infsnz	Accel_Get@i& (0+255),f,b
  5968  001B96  2BA0               	incf	(Accel_Get@i+1)& (0+255),f,b
  5969                           
  5970                           ; BSR set to: 0
  5971  001B98  0100               	movlb	0	; () banked
  5972  001B9A  BFA0               	btfsc	(Accel_Get@i+1)& (0+255),7,b
  5973  001B9C  D764               	goto	l4033
  5974  001B9E  0100               	movlb	0	; () banked
  5975  001BA0  51A0               	movf	(Accel_Get@i+1)& (0+255),w,b
  5976  001BA2  E102               	bnz	l89
  5977  001BA4  D759               	goto	L2
  5978  001BA6  0012               	return	
  5979  001BA8                     l89:
  5980                           
  5981                           ; BSR set to: 0
  5982  001BA8  0012               	return		;funcret
  5983  001BAA                     __end_of_Accel_Get:
  5984                           	opt stack 0
  5985                           tblptru	equ	0xFF8
  5986                           tblptrh	equ	0xFF7
  5987                           tblptrl	equ	0xFF6
  5988                           tablat	equ	0xFF5
  5989                           postinc0	equ	0xFEE
  5990                           wreg	equ	0xFE8
  5991                           indf2	equ	0xFDF
  5992                           postinc2	equ	0xFDE
  5993                           postdec2	equ	0xFDD
  5994                           fsr2h	equ	0xFDA
  5995                           fsr2l	equ	0xFD9
  5996                           status	equ	0xFD8
  5997                           
  5998 ;; *************** function ___wmul *****************
  5999 ;; Defined at:
  6000 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  6001 ;; Parameters:    Size  Location     Type
  6002 ;;  multiplier      2   31[COMRAM] unsigned int 
  6003 ;;  multiplicand    2   33[COMRAM] unsigned int 
  6004 ;; Auto vars:     Size  Location     Type
  6005 ;;  product         2   35[COMRAM] unsigned int 
  6006 ;; Return value:  Size  Location     Type
  6007 ;;                  2   31[COMRAM] unsigned int 
  6008 ;; Registers used:
  6009 ;;		wreg, status,2, status,0, prodl, prodh
  6010 ;; Tracked objects:
  6011 ;;		On entry : 0/0
  6012 ;;		On exit  : 0/0
  6013 ;;		Unchanged: 0/0
  6014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6015 ;;      Params:         4       0       0       0       0       0       0
  6016 ;;      Locals:         2       0       0       0       0       0       0
  6017 ;;      Temps:          0       0       0       0       0       0       0
  6018 ;;      Totals:         6       0       0       0       0       0       0
  6019 ;;Total ram usage:        6 bytes
  6020 ;; Hardware stack levels used:    1
  6021 ;; Hardware stack levels required when called:    2
  6022 ;; This function calls:
  6023 ;;		Nothing
  6024 ;; This function is called by:
  6025 ;;		_Accel_Get
  6026 ;; This function uses a non-reentrant model
  6027 ;;
  6028                           
  6029                           	psect	text28
  6030  002E46                     __ptext28:
  6031                           	opt stack 0
  6032  002E46                     ___wmul:
  6033                           	opt stack 26
  6034                           
  6035                           ; BSR set to: 0
  6036                           ;incstack = 0
  6037  002E46  5020               	movf	___wmul@multiplier,w,c
  6038  002E48  0222               	mulwf	___wmul@multiplicand,c
  6039  002E4A  CFF3 F024          	movff	prodl,___wmul@product
  6040  002E4E  CFF4 F025          	movff	prodh,___wmul@product+1
  6041  002E52  5020               	movf	___wmul@multiplier,w,c
  6042  002E54  0223               	mulwf	___wmul@multiplicand+1,c
  6043  002E56  50F3               	movf	prodl,w,c
  6044  002E58  2625               	addwf	___wmul@product+1,f,c
  6045  002E5A  5021               	movf	___wmul@multiplier+1,w,c
  6046  002E5C  0222               	mulwf	___wmul@multiplicand,c
  6047  002E5E  50F3               	movf	prodl,w,c
  6048  002E60  2625               	addwf	___wmul@product+1,f,c
  6049  002E62  C024  F020         	movff	___wmul@product,?___wmul
  6050  002E66  C025  F021         	movff	___wmul@product+1,?___wmul+1
  6051  002E6A  0012               	return	
  6052  002E6C  0012               	return		;funcret
  6053  002E6E                     __end_of___wmul:
  6054                           	opt stack 0
  6055                           tblptru	equ	0xFF8
  6056                           tblptrh	equ	0xFF7
  6057                           tblptrl	equ	0xFF6
  6058                           tablat	equ	0xFF5
  6059                           prodh	equ	0xFF4
  6060                           prodl	equ	0xFF3
  6061                           postinc0	equ	0xFEE
  6062                           wreg	equ	0xFE8
  6063                           indf2	equ	0xFDF
  6064                           postinc2	equ	0xFDE
  6065                           postdec2	equ	0xFDD
  6066                           fsr2h	equ	0xFDA
  6067                           fsr2l	equ	0xFD9
  6068                           status	equ	0xFD8
  6069                           
  6070 ;; *************** function ___fldiv *****************
  6071 ;; Defined at:
  6072 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldiv.c"
  6073 ;; Parameters:    Size  Location     Type
  6074 ;;  f1              4   30[BANK0 ] unsigned int 
  6075 ;;  f2              4   34[BANK0 ] unsigned int 
  6076 ;; Auto vars:     Size  Location     Type
  6077 ;;  f3              4   38[BANK0 ] unsigned int 
  6078 ;;  sign            1   44[BANK0 ] unsigned char 
  6079 ;;  exp             1   43[BANK0 ] unsigned char 
  6080 ;;  cntr            1   42[BANK0 ] unsigned char 
  6081 ;; Return value:  Size  Location     Type
  6082 ;;                  4   30[BANK0 ] unsigned char 
  6083 ;; Registers used:
  6084 ;;		wreg, status,2, status,0, cstack
  6085 ;; Tracked objects:
  6086 ;;		On entry : 0/0
  6087 ;;		On exit  : 0/0
  6088 ;;		Unchanged: 0/0
  6089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6090 ;;      Params:         0       8       0       0       0       0       0
  6091 ;;      Locals:         0       7       0       0       0       0       0
  6092 ;;      Temps:          0       0       0       0       0       0       0
  6093 ;;      Totals:         0      15       0       0       0       0       0
  6094 ;;Total ram usage:       15 bytes
  6095 ;; Hardware stack levels used:    1
  6096 ;; Hardware stack levels required when called:    3
  6097 ;; This function calls:
  6098 ;;		___flpack
  6099 ;; This function is called by:
  6100 ;;		_Accel_Get
  6101 ;;		_Gyros_Update
  6102 ;;		_asin
  6103 ;;		_atan
  6104 ;;		_exp
  6105 ;; This function uses a non-reentrant model
  6106 ;;
  6107                           
  6108                           	psect	text29
  6109  001E88                     __ptext29:
  6110                           	opt stack 0
  6111  001E88                     ___fldiv:
  6112                           	opt stack 24
  6113                           
  6114                           ;incstack = 0
  6115  001E88  0100               	movlb	0	; () banked
  6116  001E8A  3580               	rlcf	(___fldiv@f1+2)& (0+255),w,b
  6117  001E8C  3581               	rlcf	(___fldiv@f1+3)& (0+255),w,b
  6118  001E8E  0100               	movlb	0	; () banked
  6119  001E90  6F8B               	movwf	___fldiv@exp& (0+255),b
  6120  001E92  0100               	movlb	0	; () banked
  6121  001E94  518B               	movf	___fldiv@exp& (0+255),w,b
  6122  001E96  A4D8               	btfss	status,2,c
  6123  001E98  D00A               	goto	l3591
  6124                           
  6125                           ; BSR set to: 0
  6126  001E9A  0E00               	movlw	0
  6127  001E9C  0100               	movlb	0	; () banked
  6128  001E9E  6F7E               	movwf	?___fldiv& (0+255),b
  6129  001EA0  0E00               	movlw	0
  6130  001EA2  6F7F               	movwf	(?___fldiv+1)& (0+255),b
  6131  001EA4  0E00               	movlw	0
  6132  001EA6  6F80               	movwf	(?___fldiv+2)& (0+255),b
  6133  001EA8  0E00               	movlw	0
  6134  001EAA  6F81               	movwf	(?___fldiv+3)& (0+255),b
  6135                           
  6136                           ; BSR set to: 0
  6137  001EAC  0012               	return	
  6138  001EAE                     l3591:
  6139                           
  6140                           ; BSR set to: 0
  6141  001EAE  0100               	movlb	0	; () banked
  6142  001EB0  3584               	rlcf	(___fldiv@f2+2)& (0+255),w,b
  6143  001EB2  3585               	rlcf	(___fldiv@f2+3)& (0+255),w,b
  6144  001EB4  0100               	movlb	0	; () banked
  6145  001EB6  6F8C               	movwf	___fldiv@sign& (0+255),b
  6146  001EB8  0100               	movlb	0	; () banked
  6147  001EBA  518C               	movf	___fldiv@sign& (0+255),w,b
  6148  001EBC  A4D8               	btfss	status,2,c
  6149  001EBE  D00A               	goto	l3597
  6150                           
  6151                           ; BSR set to: 0
  6152  001EC0  0E00               	movlw	0
  6153  001EC2  0100               	movlb	0	; () banked
  6154  001EC4  6F7E               	movwf	?___fldiv& (0+255),b
  6155  001EC6  0E00               	movlw	0
  6156  001EC8  6F7F               	movwf	(?___fldiv+1)& (0+255),b
  6157  001ECA  0E00               	movlw	0
  6158  001ECC  6F80               	movwf	(?___fldiv+2)& (0+255),b
  6159  001ECE  0E00               	movlw	0
  6160  001ED0  6F81               	movwf	(?___fldiv+3)& (0+255),b
  6161                           
  6162                           ; BSR set to: 0
  6163  001ED2  0012               	return	
  6164  001ED4                     l3597:
  6165                           
  6166                           ; BSR set to: 0
  6167  001ED4  0100               	movlb	0	; () banked
  6168  001ED6  518C               	movf	___fldiv@sign& (0+255),w,b
  6169  001ED8  0F89               	addlw	137
  6170  001EDA  0100               	movlb	0	; () banked
  6171  001EDC  5F8B               	subwf	___fldiv@exp& (0+255),f,b
  6172                           
  6173                           ; BSR set to: 0
  6174  001EDE  C081  F08C         	movff	___fldiv@f1+3,___fldiv@sign
  6175  001EE2  0100               	movlb	0	; () banked
  6176  001EE4  5185               	movf	(___fldiv@f2+3)& (0+255),w,b
  6177  001EE6  0100               	movlb	0	; () banked
  6178  001EE8  1B8C               	xorwf	___fldiv@sign& (0+255),f,b
  6179  001EEA  0E80               	movlw	128
  6180  001EEC  0100               	movlb	0	; () banked
  6181  001EEE  178C               	andwf	___fldiv@sign& (0+255),f,b
  6182                           
  6183                           ; BSR set to: 0
  6184  001EF0  0100               	movlb	0	; () banked
  6185  001EF2  8F80               	bsf	(___fldiv@f1+2)& (0+255),7,b
  6186                           
  6187                           ; BSR set to: 0
  6188  001EF4  0EFF               	movlw	255
  6189  001EF6  0100               	movlb	0	; () banked
  6190  001EF8  177E               	andwf	___fldiv@f1& (0+255),f,b
  6191  001EFA  0EFF               	movlw	255
  6192  001EFC  177F               	andwf	(___fldiv@f1+1)& (0+255),f,b
  6193  001EFE  0EFF               	movlw	255
  6194  001F00  1780               	andwf	(___fldiv@f1+2)& (0+255),f,b
  6195  001F02  0E00               	movlw	0
  6196  001F04  1781               	andwf	(___fldiv@f1+3)& (0+255),f,b
  6197  001F06  0100               	movlb	0	; () banked
  6198  001F08  8F84               	bsf	(___fldiv@f2+2)& (0+255),7,b
  6199                           
  6200                           ; BSR set to: 0
  6201  001F0A  0EFF               	movlw	255
  6202  001F0C  0100               	movlb	0	; () banked
  6203  001F0E  1782               	andwf	___fldiv@f2& (0+255),f,b
  6204  001F10  0EFF               	movlw	255
  6205  001F12  1783               	andwf	(___fldiv@f2+1)& (0+255),f,b
  6206  001F14  0EFF               	movlw	255
  6207  001F16  1784               	andwf	(___fldiv@f2+2)& (0+255),f,b
  6208  001F18  0E00               	movlw	0
  6209  001F1A  1785               	andwf	(___fldiv@f2+3)& (0+255),f,b
  6210                           
  6211                           ; BSR set to: 0
  6212  001F1C  0E20               	movlw	32
  6213  001F1E  0100               	movlb	0	; () banked
  6214  001F20  6F8A               	movwf	___fldiv@cntr& (0+255),b
  6215  001F22  D000               	goto	l3609
  6216  001F24                     l3609:
  6217                           
  6218                           ; BSR set to: 0
  6219  001F24  0100               	movlb	0	; () banked
  6220  001F26  90D8               	bcf	status,0,c
  6221  001F28  3786               	rlcf	___fldiv@f3& (0+255),f,b
  6222  001F2A  3787               	rlcf	(___fldiv@f3+1)& (0+255),f,b
  6223  001F2C  3788               	rlcf	(___fldiv@f3+2)& (0+255),f,b
  6224  001F2E  3789               	rlcf	(___fldiv@f3+3)& (0+255),f,b
  6225                           
  6226                           ; BSR set to: 0
  6227  001F30  0100               	movlb	0	; () banked
  6228  001F32  5182               	movf	___fldiv@f2& (0+255),w,b
  6229  001F34  0100               	movlb	0	; () banked
  6230  001F36  5D7E               	subwf	___fldiv@f1& (0+255),w,b
  6231  001F38  0100               	movlb	0	; () banked
  6232  001F3A  5183               	movf	(___fldiv@f2+1)& (0+255),w,b
  6233  001F3C  0100               	movlb	0	; () banked
  6234  001F3E  597F               	subwfb	(___fldiv@f1+1)& (0+255),w,b
  6235  001F40  0100               	movlb	0	; () banked
  6236  001F42  5184               	movf	(___fldiv@f2+2)& (0+255),w,b
  6237  001F44  0100               	movlb	0	; () banked
  6238  001F46  5980               	subwfb	(___fldiv@f1+2)& (0+255),w,b
  6239  001F48  0100               	movlb	0	; () banked
  6240  001F4A  5185               	movf	(___fldiv@f2+3)& (0+255),w,b
  6241  001F4C  0100               	movlb	0	; () banked
  6242  001F4E  5981               	subwfb	(___fldiv@f1+3)& (0+255),w,b
  6243  001F50  A0D8               	btfss	status,0,c
  6244  001F52  D013               	goto	l3617
  6245                           
  6246                           ; BSR set to: 0
  6247  001F54  0100               	movlb	0	; () banked
  6248  001F56  5182               	movf	___fldiv@f2& (0+255),w,b
  6249  001F58  0100               	movlb	0	; () banked
  6250  001F5A  5F7E               	subwf	___fldiv@f1& (0+255),f,b
  6251  001F5C  0100               	movlb	0	; () banked
  6252  001F5E  5183               	movf	(___fldiv@f2+1)& (0+255),w,b
  6253  001F60  0100               	movlb	0	; () banked
  6254  001F62  5B7F               	subwfb	(___fldiv@f1+1)& (0+255),f,b
  6255  001F64  0100               	movlb	0	; () banked
  6256  001F66  5184               	movf	(___fldiv@f2+2)& (0+255),w,b
  6257  001F68  0100               	movlb	0	; () banked
  6258  001F6A  5B80               	subwfb	(___fldiv@f1+2)& (0+255),f,b
  6259  001F6C  0100               	movlb	0	; () banked
  6260  001F6E  5185               	movf	(___fldiv@f2+3)& (0+255),w,b
  6261  001F70  0100               	movlb	0	; () banked
  6262  001F72  5B81               	subwfb	(___fldiv@f1+3)& (0+255),f,b
  6263                           
  6264                           ; BSR set to: 0
  6265  001F74  0100               	movlb	0	; () banked
  6266  001F76  8186               	bsf	___fldiv@f3& (0+255),0,b
  6267  001F78  D000               	goto	l3617
  6268  001F7A                     l3617:
  6269                           
  6270                           ; BSR set to: 0
  6271  001F7A  0100               	movlb	0	; () banked
  6272  001F7C  90D8               	bcf	status,0,c
  6273  001F7E  377E               	rlcf	___fldiv@f1& (0+255),f,b
  6274  001F80  377F               	rlcf	(___fldiv@f1+1)& (0+255),f,b
  6275  001F82  3780               	rlcf	(___fldiv@f1+2)& (0+255),f,b
  6276  001F84  3781               	rlcf	(___fldiv@f1+3)& (0+255),f,b
  6277                           
  6278                           ; BSR set to: 0
  6279  001F86  0100               	movlb	0	; () banked
  6280  001F88  2F8A               	decfsz	___fldiv@cntr& (0+255),f,b
  6281  001F8A  D7CC               	goto	l3609
  6282  001F8C  D000               	goto	l3621
  6283  001F8E                     l3621:
  6284                           
  6285                           ; BSR set to: 0
  6286  001F8E  C086  F020         	movff	___fldiv@f3,___flpack@arg
  6287  001F92  C087  F021         	movff	___fldiv@f3+1,___flpack@arg+1
  6288  001F96  C088  F022         	movff	___fldiv@f3+2,___flpack@arg+2
  6289  001F9A  C089  F023         	movff	___fldiv@f3+3,___flpack@arg+3
  6290  001F9E  C08B  F024         	movff	___fldiv@exp,___flpack@exp
  6291  001FA2  C08C  F025         	movff	___fldiv@sign,___flpack@sign
  6292  001FA6  EC90  F011         	call	___flpack	;wreg free
  6293  001FAA  C020  F07E         	movff	?___flpack,?___fldiv
  6294  001FAE  C021  F07F         	movff	?___flpack+1,?___fldiv+1
  6295  001FB2  C022  F080         	movff	?___flpack+2,?___fldiv+2
  6296  001FB6  C023  F081         	movff	?___flpack+3,?___fldiv+3
  6297  001FBA  0012               	return	
  6298  001FBC  0012               	return		;funcret
  6299  001FBE                     __end_of___fldiv:
  6300                           	opt stack 0
  6301                           tblptru	equ	0xFF8
  6302                           tblptrh	equ	0xFF7
  6303                           tblptrl	equ	0xFF6
  6304                           tablat	equ	0xFF5
  6305                           prodh	equ	0xFF4
  6306                           prodl	equ	0xFF3
  6307                           postinc0	equ	0xFEE
  6308                           wreg	equ	0xFE8
  6309                           indf2	equ	0xFDF
  6310                           postinc2	equ	0xFDE
  6311                           postdec2	equ	0xFDD
  6312                           fsr2h	equ	0xFDA
  6313                           fsr2l	equ	0xFD9
  6314                           status	equ	0xFD8
  6315                           
  6316 ;; *************** function ___awtofl *****************
  6317 ;; Defined at:
  6318 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtofl.c"
  6319 ;; Parameters:    Size  Location     Type
  6320 ;;  c               2    0[BANK0 ] int 
  6321 ;; Auto vars:     Size  Location     Type
  6322 ;;  f1              4    0        int 
  6323 ;;  sign            1   41[COMRAM] unsigned char 
  6324 ;; Return value:  Size  Location     Type
  6325 ;;                  4    0[BANK0 ] unsigned char 
  6326 ;; Registers used:
  6327 ;;		wreg, status,2, status,0, cstack
  6328 ;; Tracked objects:
  6329 ;;		On entry : 0/0
  6330 ;;		On exit  : 0/0
  6331 ;;		Unchanged: 0/0
  6332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6333 ;;      Params:         0       4       0       0       0       0       0
  6334 ;;      Locals:         1       0       0       0       0       0       0
  6335 ;;      Temps:          0       0       0       0       0       0       0
  6336 ;;      Totals:         1       4       0       0       0       0       0
  6337 ;;Total ram usage:        5 bytes
  6338 ;; Hardware stack levels used:    1
  6339 ;; Hardware stack levels required when called:    3
  6340 ;; This function calls:
  6341 ;;		___flpack
  6342 ;; This function is called by:
  6343 ;;		_Accel_Get
  6344 ;;		_exp
  6345 ;;		_log
  6346 ;; This function uses a non-reentrant model
  6347 ;;
  6348                           
  6349                           	psect	text30
  6350  002C54                     __ptext30:
  6351                           	opt stack 0
  6352  002C54                     ___awtofl:
  6353                           	opt stack 24
  6354                           
  6355                           ;incstack = 0
  6356  002C54  0E00               	movlw	0
  6357  002C56  6E2A               	movwf	___awtofl@sign,c
  6358  002C58  0100               	movlb	0	; () banked
  6359  002C5A  AF61               	btfss	(___awtofl@c+1)& (0+255),7,b
  6360  002C5C  D007               	goto	l3821
  6361                           
  6362                           ; BSR set to: 0
  6363  002C5E  0100               	movlb	0	; () banked
  6364  002C60  6D60               	negf	___awtofl@c& (0+255),b
  6365  002C62  1F61               	comf	(___awtofl@c+1)& (0+255),f,b
  6366  002C64  B0D8               	btfsc	status,0,c
  6367  002C66  2B61               	incf	(___awtofl@c+1)& (0+255),f,b
  6368  002C68  2A2A               	incf	___awtofl@sign,f,c
  6369  002C6A  D000               	goto	l3821
  6370  002C6C                     l3821:
  6371                           
  6372                           ; BSR set to: 0
  6373  002C6C  C060  F020         	movff	___awtofl@c,___flpack@arg
  6374  002C70  C061  F021         	movff	___awtofl@c+1,___flpack@arg+1
  6375  002C74  6A22               	clrf	___flpack@arg+2,c
  6376  002C76  6A23               	clrf	___flpack@arg+3,c
  6377  002C78  0E96               	movlw	150
  6378  002C7A  6E24               	movwf	___flpack@exp,c
  6379  002C7C  C02A  F025         	movff	___awtofl@sign,___flpack@sign
  6380  002C80  EC90  F011         	call	___flpack	;wreg free
  6381  002C84  C020  F060         	movff	?___flpack,?___awtofl
  6382  002C88  C021  F061         	movff	?___flpack+1,?___awtofl+1
  6383  002C8C  C022  F062         	movff	?___flpack+2,?___awtofl+2
  6384  002C90  C023  F063         	movff	?___flpack+3,?___awtofl+3
  6385  002C94  0012               	return	
  6386  002C96  0012               	return		;funcret
  6387  002C98                     __end_of___awtofl:
  6388                           	opt stack 0
  6389                           tblptru	equ	0xFF8
  6390                           tblptrh	equ	0xFF7
  6391                           tblptrl	equ	0xFF6
  6392                           tablat	equ	0xFF5
  6393                           prodh	equ	0xFF4
  6394                           prodl	equ	0xFF3
  6395                           postinc0	equ	0xFEE
  6396                           wreg	equ	0xFE8
  6397                           indf2	equ	0xFDF
  6398                           postinc2	equ	0xFDE
  6399                           postdec2	equ	0xFDD
  6400                           fsr2h	equ	0xFDA
  6401                           fsr2l	equ	0xFD9
  6402                           status	equ	0xFD8
  6403                           
  6404 ;; *************** function ___flpack *****************
  6405 ;; Defined at:
  6406 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\double.c"
  6407 ;; Parameters:    Size  Location     Type
  6408 ;;  arg             4   31[COMRAM] unsigned long 
  6409 ;;  exp             1   35[COMRAM] unsigned char 
  6410 ;;  sign            1   36[COMRAM] unsigned char 
  6411 ;; Auto vars:     Size  Location     Type
  6412 ;;		None
  6413 ;; Return value:  Size  Location     Type
  6414 ;;                  4   31[COMRAM] unsigned char 
  6415 ;; Registers used:
  6416 ;;		wreg, status,2, status,0
  6417 ;; Tracked objects:
  6418 ;;		On entry : 0/0
  6419 ;;		On exit  : 0/0
  6420 ;;		Unchanged: 0/0
  6421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6422 ;;      Params:         6       0       0       0       0       0       0
  6423 ;;      Locals:         0       0       0       0       0       0       0
  6424 ;;      Temps:          4       0       0       0       0       0       0
  6425 ;;      Totals:        10       0       0       0       0       0       0
  6426 ;;Total ram usage:       10 bytes
  6427 ;; Hardware stack levels used:    1
  6428 ;; Hardware stack levels required when called:    2
  6429 ;; This function calls:
  6430 ;;		Nothing
  6431 ;; This function is called by:
  6432 ;;		___altofl
  6433 ;;		___awtofl
  6434 ;;		___fladd
  6435 ;;		___fldiv
  6436 ;;		___flmul
  6437 ;;		___lltofl
  6438 ;; This function uses a non-reentrant model
  6439 ;;
  6440                           
  6441                           	psect	text31
  6442  002320                     __ptext31:
  6443                           	opt stack 0
  6444  002320                     ___flpack:
  6445                           	opt stack 24
  6446                           
  6447                           ;incstack = 0
  6448  002320  5024               	movf	___flpack@exp,w,c
  6449  002322  B4D8               	btfsc	status,2,c
  6450  002324  D006               	goto	l3285
  6451  002326  5020               	movf	___flpack@arg,w,c
  6452  002328  1021               	iorwf	___flpack@arg+1,w,c
  6453  00232A  1022               	iorwf	___flpack@arg+2,w,c
  6454  00232C  1023               	iorwf	___flpack@arg+3,w,c
  6455  00232E  A4D8               	btfss	status,2,c
  6456  002330  D011               	goto	l3291
  6457  002332                     l3285:
  6458  002332  0E00               	movlw	0
  6459  002334  6E20               	movwf	?___flpack,c
  6460  002336  0E00               	movlw	0
  6461  002338  6E21               	movwf	?___flpack+1,c
  6462  00233A  0E00               	movlw	0
  6463  00233C  6E22               	movwf	?___flpack+2,c
  6464  00233E  0E00               	movlw	0
  6465  002340  6E23               	movwf	?___flpack+3,c
  6466  002342  0012               	return	
  6467  002344  D007               	goto	l3291
  6468  002346                     l3289:
  6469  002346  2A24               	incf	___flpack@exp,f,c
  6470  002348  90D8               	bcf	status,0,c
  6471  00234A  3223               	rrcf	___flpack@arg+3,f,c
  6472  00234C  3222               	rrcf	___flpack@arg+2,f,c
  6473  00234E  3221               	rrcf	___flpack@arg+1,f,c
  6474  002350  3220               	rrcf	___flpack@arg,f,c
  6475  002352  D000               	goto	l3291
  6476  002354                     l3291:
  6477  002354  0E00               	movlw	0
  6478  002356  1420               	andwf	___flpack@arg,w,c
  6479  002358  6E26               	movwf	??___flpack& (0+255),c
  6480  00235A  0E00               	movlw	0
  6481  00235C  1421               	andwf	___flpack@arg+1,w,c
  6482  00235E  6E27               	movwf	(??___flpack+1)& (0+255),c
  6483  002360  0E00               	movlw	0
  6484  002362  1422               	andwf	___flpack@arg+2,w,c
  6485  002364  6E28               	movwf	(??___flpack+2)& (0+255),c
  6486  002366  0EFE               	movlw	254
  6487  002368  1423               	andwf	___flpack@arg+3,w,c
  6488  00236A  6E29               	movwf	(??___flpack+3)& (0+255),c
  6489  00236C  5026               	movf	??___flpack,w,c
  6490  00236E  1027               	iorwf	??___flpack+1,w,c
  6491  002370  1028               	iorwf	??___flpack+2,w,c
  6492  002372  1029               	iorwf	??___flpack+3,w,c
  6493  002374  B4D8               	btfsc	status,2,c
  6494  002376  D00E               	goto	l692
  6495  002378  D7E6               	goto	l3289
  6496  00237A  D00C               	goto	l692
  6497  00237C                     l3293:
  6498  00237C  2A24               	incf	___flpack@exp,f,c
  6499  00237E  0E01               	movlw	1
  6500  002380  2620               	addwf	___flpack@arg,f,c
  6501  002382  0E00               	movlw	0
  6502  002384  2221               	addwfc	___flpack@arg+1,f,c
  6503  002386  2222               	addwfc	___flpack@arg+2,f,c
  6504  002388  2223               	addwfc	___flpack@arg+3,f,c
  6505  00238A  90D8               	bcf	status,0,c
  6506  00238C  3223               	rrcf	___flpack@arg+3,f,c
  6507  00238E  3222               	rrcf	___flpack@arg+2,f,c
  6508  002390  3221               	rrcf	___flpack@arg+1,f,c
  6509  002392  3220               	rrcf	___flpack@arg,f,c
  6510  002394                     l692:
  6511  002394  0E00               	movlw	0
  6512  002396  1420               	andwf	___flpack@arg,w,c
  6513  002398  6E26               	movwf	??___flpack& (0+255),c
  6514  00239A  0E00               	movlw	0
  6515  00239C  1421               	andwf	___flpack@arg+1,w,c
  6516  00239E  6E27               	movwf	(??___flpack+1)& (0+255),c
  6517  0023A0  0E00               	movlw	0
  6518  0023A2  1422               	andwf	___flpack@arg+2,w,c
  6519  0023A4  6E28               	movwf	(??___flpack+2)& (0+255),c
  6520  0023A6  0EFF               	movlw	255
  6521  0023A8  1423               	andwf	___flpack@arg+3,w,c
  6522  0023AA  6E29               	movwf	(??___flpack+3)& (0+255),c
  6523  0023AC  5026               	movf	??___flpack,w,c
  6524  0023AE  1027               	iorwf	??___flpack+1,w,c
  6525  0023B0  1028               	iorwf	??___flpack+2,w,c
  6526  0023B2  1029               	iorwf	??___flpack+3,w,c
  6527  0023B4  B4D8               	btfsc	status,2,c
  6528  0023B6  D009               	goto	l3301
  6529  0023B8  D7E1               	goto	l3293
  6530  0023BA  D007               	goto	l3301
  6531  0023BC                     l3299:
  6532  0023BC  0624               	decf	___flpack@exp,f,c
  6533  0023BE  90D8               	bcf	status,0,c
  6534  0023C0  3620               	rlcf	___flpack@arg,f,c
  6535  0023C2  3621               	rlcf	___flpack@arg+1,f,c
  6536  0023C4  3622               	rlcf	___flpack@arg+2,f,c
  6537  0023C6  3623               	rlcf	___flpack@arg+3,f,c
  6538  0023C8  D000               	goto	l3301
  6539  0023CA                     l3301:
  6540  0023CA  BE22               	btfsc	___flpack@arg+2,7,c
  6541  0023CC  D004               	goto	l699
  6542  0023CE  0E02               	movlw	2
  6543  0023D0  6024               	cpfslt	___flpack@exp,c
  6544  0023D2  D7F4               	goto	l3299
  6545  0023D4  D000               	goto	l699
  6546  0023D6                     l699:
  6547  0023D6  B024               	btfsc	___flpack@exp,0,c
  6548  0023D8  D008               	goto	l700
  6549  0023DA  0EFF               	movlw	255
  6550  0023DC  1620               	andwf	___flpack@arg,f,c
  6551  0023DE  0EFF               	movlw	255
  6552  0023E0  1621               	andwf	___flpack@arg+1,f,c
  6553  0023E2  0E7F               	movlw	127
  6554  0023E4  1622               	andwf	___flpack@arg+2,f,c
  6555  0023E6  0EFF               	movlw	255
  6556  0023E8  1623               	andwf	___flpack@arg+3,f,c
  6557  0023EA                     l700:
  6558  0023EA  90D8               	bcf	status,0,c
  6559  0023EC  3224               	rrcf	___flpack@exp,f,c
  6560  0023EE  C024  F026         	movff	___flpack@exp,??___flpack
  6561  0023F2  6A27               	clrf	(??___flpack+1)& (0+255),c
  6562  0023F4  6A28               	clrf	(??___flpack+2)& (0+255),c
  6563  0023F6  6A29               	clrf	(??___flpack+3)& (0+255),c
  6564  0023F8  C026  F029         	movff	??___flpack,??___flpack+3
  6565  0023FC  6A28               	clrf	??___flpack+2,c
  6566  0023FE  6A27               	clrf	??___flpack+1,c
  6567  002400  6A26               	clrf	??___flpack,c
  6568  002402  5026               	movf	??___flpack,w,c
  6569  002404  1220               	iorwf	___flpack@arg,f,c
  6570  002406  5027               	movf	??___flpack+1,w,c
  6571  002408  1221               	iorwf	___flpack@arg+1,f,c
  6572  00240A  5028               	movf	??___flpack+2,w,c
  6573  00240C  1222               	iorwf	___flpack@arg+2,f,c
  6574  00240E  5029               	movf	??___flpack+3,w,c
  6575  002410  1223               	iorwf	___flpack@arg+3,f,c
  6576  002412  5025               	movf	___flpack@sign,w,c
  6577  002414  B4D8               	btfsc	status,2,c
  6578  002416  D002               	goto	l3311
  6579  002418  8E23               	bsf	___flpack@arg+3,7,c
  6580  00241A  D000               	goto	l3311
  6581  00241C                     l3311:
  6582  00241C  C020  F020         	movff	___flpack@arg,?___flpack
  6583  002420  C021  F021         	movff	___flpack@arg+1,?___flpack+1
  6584  002424  C022  F022         	movff	___flpack@arg+2,?___flpack+2
  6585  002428  C023  F023         	movff	___flpack@arg+3,?___flpack+3
  6586  00242C  0012               	return	
  6587  00242E  0012               	return		;funcret
  6588  002430                     __end_of___flpack:
  6589                           	opt stack 0
  6590                           tblptru	equ	0xFF8
  6591                           tblptrh	equ	0xFF7
  6592                           tblptrl	equ	0xFF6
  6593                           tablat	equ	0xFF5
  6594                           prodh	equ	0xFF4
  6595                           prodl	equ	0xFF3
  6596                           postinc0	equ	0xFEE
  6597                           wreg	equ	0xFE8
  6598                           indf2	equ	0xFDF
  6599                           postinc2	equ	0xFDE
  6600                           postdec2	equ	0xFDD
  6601                           fsr2h	equ	0xFDA
  6602                           fsr2l	equ	0xFD9
  6603                           status	equ	0xFD8
  6604                           
  6605 ;; *************** function _Gyros_Init *****************
  6606 ;; Defined at:
  6607 ;;		line 3 in file "gyros.c"
  6608 ;; Parameters:    Size  Location     Type
  6609 ;;		None
  6610 ;; Auto vars:     Size  Location     Type
  6611 ;;		None
  6612 ;; Return value:  Size  Location     Type
  6613 ;;		None               void
  6614 ;; Registers used:
  6615 ;;		wreg, status,2
  6616 ;; Tracked objects:
  6617 ;;		On entry : 0/0
  6618 ;;		On exit  : 0/0
  6619 ;;		Unchanged: 0/0
  6620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6621 ;;      Params:         0       0       0       0       0       0       0
  6622 ;;      Locals:         0       0       0       0       0       0       0
  6623 ;;      Temps:          0       0       0       0       0       0       0
  6624 ;;      Totals:         0       0       0       0       0       0       0
  6625 ;;Total ram usage:        0 bytes
  6626 ;; Hardware stack levels used:    1
  6627 ;; Hardware stack levels required when called:    2
  6628 ;; This function calls:
  6629 ;;		Nothing
  6630 ;; This function is called by:
  6631 ;;		_main
  6632 ;; This function uses a non-reentrant model
  6633 ;;
  6634                           
  6635                           	psect	text32
  6636  00283E                     __ptext32:
  6637                           	opt stack 0
  6638  00283E                     _Gyros_Init:
  6639                           	opt stack 28
  6640                           
  6641                           ;gyros.c: 5: Gyros_LastAccel.x = 0;
  6642                           
  6643                           ;incstack = 0
  6644  00283E  0E00               	movlw	0
  6645  002840  0100               	movlb	0	; () banked
  6646  002842  6FE0               	movwf	gyros@Gyros_LastAccel& (0+255),b
  6647  002844  0E00               	movlw	0
  6648  002846  6FE1               	movwf	(gyros@Gyros_LastAccel+1)& (0+255),b
  6649  002848  0E00               	movlw	0
  6650  00284A  6FE2               	movwf	(gyros@Gyros_LastAccel+2)& (0+255),b
  6651  00284C  0E00               	movlw	0
  6652  00284E  6FE3               	movwf	(gyros@Gyros_LastAccel+3)& (0+255),b
  6653                           
  6654                           ;gyros.c: 6: Gyros_LastAccel.y = 0;
  6655  002850  0E00               	movlw	0
  6656  002852  0100               	movlb	0	; () banked
  6657  002854  6FE4               	movwf	(gyros@Gyros_LastAccel+4)& (0+255),b
  6658  002856  0E00               	movlw	0
  6659  002858  6FE5               	movwf	(gyros@Gyros_LastAccel+5)& (0+255),b
  6660  00285A  0E00               	movlw	0
  6661  00285C  6FE6               	movwf	(gyros@Gyros_LastAccel+6)& (0+255),b
  6662  00285E  0E00               	movlw	0
  6663  002860  6FE7               	movwf	(gyros@Gyros_LastAccel+7)& (0+255),b
  6664                           
  6665                           ;gyros.c: 7: Gyros_LastAccel.z = 0;
  6666  002862  0E00               	movlw	0
  6667  002864  0100               	movlb	0	; () banked
  6668  002866  6FE8               	movwf	(gyros@Gyros_LastAccel+8)& (0+255),b
  6669  002868  0E00               	movlw	0
  6670  00286A  6FE9               	movwf	(gyros@Gyros_LastAccel+9)& (0+255),b
  6671  00286C  0E00               	movlw	0
  6672  00286E  6FEA               	movwf	(gyros@Gyros_LastAccel+10)& (0+255),b
  6673  002870  0E00               	movlw	0
  6674  002872  6FEB               	movwf	(gyros@Gyros_LastAccel+11)& (0+255),b
  6675                           
  6676                           ;gyros.c: 9: Gyros_Vel.x = 0;
  6677  002874  0E00               	movlw	0
  6678  002876  0100               	movlb	0	; () banked
  6679  002878  6FEC               	movwf	gyros@Gyros_Vel& (0+255),b
  6680  00287A  0E00               	movlw	0
  6681  00287C  6FED               	movwf	(gyros@Gyros_Vel+1)& (0+255),b
  6682  00287E  0E00               	movlw	0
  6683  002880  6FEE               	movwf	(gyros@Gyros_Vel+2)& (0+255),b
  6684  002882  0E00               	movlw	0
  6685  002884  6FEF               	movwf	(gyros@Gyros_Vel+3)& (0+255),b
  6686                           
  6687                           ;gyros.c: 10: Gyros_Vel.y = 0;
  6688  002886  0E00               	movlw	0
  6689  002888  0100               	movlb	0	; () banked
  6690  00288A  6FF0               	movwf	(gyros@Gyros_Vel+4)& (0+255),b
  6691  00288C  0E00               	movlw	0
  6692  00288E  6FF1               	movwf	(gyros@Gyros_Vel+5)& (0+255),b
  6693  002890  0E00               	movlw	0
  6694  002892  6FF2               	movwf	(gyros@Gyros_Vel+6)& (0+255),b
  6695  002894  0E00               	movlw	0
  6696  002896  6FF3               	movwf	(gyros@Gyros_Vel+7)& (0+255),b
  6697                           
  6698                           ;gyros.c: 11: Gyros_Vel.z = 0;
  6699  002898  0E00               	movlw	0
  6700  00289A  0100               	movlb	0	; () banked
  6701  00289C  6FF4               	movwf	(gyros@Gyros_Vel+8)& (0+255),b
  6702  00289E  0E00               	movlw	0
  6703  0028A0  6FF5               	movwf	(gyros@Gyros_Vel+9)& (0+255),b
  6704  0028A2  0E00               	movlw	0
  6705  0028A4  6FF6               	movwf	(gyros@Gyros_Vel+10)& (0+255),b
  6706  0028A6  0E00               	movlw	0
  6707  0028A8  6FF7               	movwf	(gyros@Gyros_Vel+11)& (0+255),b
  6708                           
  6709                           ;gyros.c: 13: Gyros_Angle.phi = 0;
  6710  0028AA  0E00               	movlw	0
  6711  0028AC  0101               	movlb	1	; () banked
  6712  0028AE  6F54               	movwf	(gyros@Gyros_Angle+4)& (0+255),b
  6713  0028B0  0E00               	movlw	0
  6714  0028B2  6F55               	movwf	(gyros@Gyros_Angle+5)& (0+255),b
  6715  0028B4  0E00               	movlw	0
  6716  0028B6  6F56               	movwf	(gyros@Gyros_Angle+6)& (0+255),b
  6717  0028B8  0E00               	movlw	0
  6718  0028BA  6F57               	movwf	(gyros@Gyros_Angle+7)& (0+255),b
  6719                           
  6720                           ;gyros.c: 14: Gyros_Angle.theta = 0;
  6721  0028BC  0E00               	movlw	0
  6722  0028BE  0101               	movlb	1	; () banked
  6723  0028C0  6F50               	movwf	gyros@Gyros_Angle& (0+255),b
  6724  0028C2  0E00               	movlw	0
  6725  0028C4  6F51               	movwf	(gyros@Gyros_Angle+1)& (0+255),b
  6726  0028C6  0E00               	movlw	0
  6727  0028C8  6F52               	movwf	(gyros@Gyros_Angle+2)& (0+255),b
  6728  0028CA  0E00               	movlw	0
  6729  0028CC  6F53               	movwf	(gyros@Gyros_Angle+3)& (0+255),b
  6730                           
  6731                           ; BSR set to: 1
  6732  0028CE  0012               	return		;funcret
  6733  0028D0                     __end_of_Gyros_Init:
  6734                           	opt stack 0
  6735                           tblptru	equ	0xFF8
  6736                           tblptrh	equ	0xFF7
  6737                           tblptrl	equ	0xFF6
  6738                           tablat	equ	0xFF5
  6739                           prodh	equ	0xFF4
  6740                           prodl	equ	0xFF3
  6741                           postinc0	equ	0xFEE
  6742                           wreg	equ	0xFE8
  6743                           indf2	equ	0xFDF
  6744                           postinc2	equ	0xFDE
  6745                           postdec2	equ	0xFDD
  6746                           fsr2h	equ	0xFDA
  6747                           fsr2l	equ	0xFD9
  6748                           status	equ	0xFD8
  6749                           
  6750 ;; *************** function _Accel_Init *****************
  6751 ;; Defined at:
  6752 ;;		line 3 in file "accel.c"
  6753 ;; Parameters:    Size  Location     Type
  6754 ;;		None
  6755 ;; Auto vars:     Size  Location     Type
  6756 ;;  fsr             1    5[BANK0 ] unsigned char 
  6757 ;;  name            1    4[BANK0 ] unsigned char 
  6758 ;; Return value:  Size  Location     Type
  6759 ;;		None               void
  6760 ;; Registers used:
  6761 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6762 ;; Tracked objects:
  6763 ;;		On entry : 0/0
  6764 ;;		On exit  : 0/0
  6765 ;;		Unchanged: 0/0
  6766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6767 ;;      Params:         0       0       0       0       0       0       0
  6768 ;;      Locals:         0       2       0       0       0       0       0
  6769 ;;      Temps:          0       0       0       0       0       0       0
  6770 ;;      Totals:         0       2       0       0       0       0       0
  6771 ;;Total ram usage:        2 bytes
  6772 ;; Hardware stack levels used:    1
  6773 ;; Hardware stack levels required when called:    8
  6774 ;; This function calls:
  6775 ;;		_Accel_Active
  6776 ;;		_Accel_ReadRegister
  6777 ;;		_Accel_StandBy
  6778 ;;		_Accel_WriteRegister
  6779 ;; This function is called by:
  6780 ;;		_main
  6781 ;; This function uses a non-reentrant model
  6782 ;;
  6783                           
  6784                           	psect	text33
  6785  002C0C                     __ptext33:
  6786                           	opt stack 0
  6787  002C0C                     _Accel_Init:
  6788                           	opt stack 22
  6789  002C0C                     
  6790                           ;accel.c: 7: name = Accel_ReadRegister(0x0D);
  6791  002C0C  0E0D               	movlw	13
  6792  002C0E  EC0E  F017         	call	_Accel_ReadRegister
  6793  002C12  0100               	movlb	0	; () banked
  6794  002C14  6F64               	movwf	Accel_Init@name& (0+255),b
  6795                           
  6796                           ; BSR set to: 0
  6797                           ;accel.c: 8: } while (name != 0x2A);
  6798  002C16  0E2A               	movlw	42
  6799  002C18  0100               	movlb	0	; () banked
  6800  002C1A  1964               	xorwf	Accel_Init@name& (0+255),w,b
  6801  002C1C  A4D8               	btfss	status,2,c
  6802  002C1E  D7F6               	goto	l4095
  6803                           
  6804                           ; BSR set to: 0
  6805                           ;accel.c: 10: Accel_StandBy();
  6806                           
  6807                           ; BSR set to: 0
  6808  002C20  EC67  F017         	call	_Accel_StandBy	;wreg free
  6809                           
  6810                           ;accel.c: 13: byte fsr = 2;
  6811  002C24  0E02               	movlw	2
  6812  002C26  0100               	movlb	0	; () banked
  6813  002C28  6F65               	movwf	Accel_Init@fsr& (0+255),b
  6814                           
  6815                           ; BSR set to: 0
  6816                           ;accel.c: 14: if(fsr > 8) fsr = 8;
  6817  002C2A  0E08               	movlw	8
  6818  002C2C  0100               	movlb	0	; () banked
  6819  002C2E  6565               	cpfsgt	Accel_Init@fsr& (0+255),b
  6820  002C30  D004               	goto	l4107
  6821                           
  6822                           ; BSR set to: 0
  6823  002C32  0E08               	movlw	8
  6824  002C34  0100               	movlb	0	; () banked
  6825  002C36  6F65               	movwf	Accel_Init@fsr& (0+255),b
  6826  002C38  D000               	goto	l4107
  6827  002C3A                     l4107:
  6828                           
  6829                           ; BSR set to: 0
  6830                           ;accel.c: 15: fsr >>= 2;
  6831  002C3A  0100               	movlb	0	; () banked
  6832  002C3C  90D8               	bcf	status,0,c
  6833  002C3E  3365               	rrcf	Accel_Init@fsr& (0+255),f,b
  6834  002C40  90D8               	bcf	status,0,c
  6835  002C42  3365               	rrcf	Accel_Init@fsr& (0+255),f,b
  6836                           
  6837                           ; BSR set to: 0
  6838                           ;accel.c: 16: Accel_WriteRegister(0x0E, fsr);
  6839  002C44  C065  F025         	movff	Accel_Init@fsr,Accel_WriteRegister@value
  6840  002C48  0E0E               	movlw	14
  6841  002C4A  EC48  F017         	call	_Accel_WriteRegister
  6842                           
  6843                           ;accel.c: 18: Accel_Active();
  6844  002C4E  EC72  F017         	call	_Accel_Active	;wreg free
  6845  002C52  0012               	return		;funcret
  6846  002C54                     __end_of_Accel_Init:
  6847                           	opt stack 0
  6848                           tblptru	equ	0xFF8
  6849                           tblptrh	equ	0xFF7
  6850                           tblptrl	equ	0xFF6
  6851                           tablat	equ	0xFF5
  6852                           prodh	equ	0xFF4
  6853                           prodl	equ	0xFF3
  6854                           postinc0	equ	0xFEE
  6855                           wreg	equ	0xFE8
  6856                           indf2	equ	0xFDF
  6857                           postinc2	equ	0xFDE
  6858                           postdec2	equ	0xFDD
  6859                           fsr2h	equ	0xFDA
  6860                           fsr2l	equ	0xFD9
  6861                           status	equ	0xFD8
  6862                           
  6863 ;; *************** function _Accel_StandBy *****************
  6864 ;; Defined at:
  6865 ;;		line 21 in file "accel.c"
  6866 ;; Parameters:    Size  Location     Type
  6867 ;;		None
  6868 ;; Auto vars:     Size  Location     Type
  6869 ;;  c               1   43[COMRAM] unsigned char 
  6870 ;; Return value:  Size  Location     Type
  6871 ;;		None               void
  6872 ;; Registers used:
  6873 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6874 ;; Tracked objects:
  6875 ;;		On entry : 0/0
  6876 ;;		On exit  : 0/0
  6877 ;;		Unchanged: 0/0
  6878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6879 ;;      Params:         0       0       0       0       0       0       0
  6880 ;;      Locals:         1       0       0       0       0       0       0
  6881 ;;      Temps:          0       0       0       0       0       0       0
  6882 ;;      Totals:         1       0       0       0       0       0       0
  6883 ;;Total ram usage:        1 bytes
  6884 ;; Hardware stack levels used:    1
  6885 ;; Hardware stack levels required when called:    7
  6886 ;; This function calls:
  6887 ;;		_Accel_ReadRegister
  6888 ;;		_Accel_WriteRegister
  6889 ;; This function is called by:
  6890 ;;		_Accel_Init
  6891 ;; This function uses a non-reentrant model
  6892 ;;
  6893                           
  6894                           	psect	text34
  6895  002ECE                     __ptext34:
  6896                           	opt stack 0
  6897  002ECE                     _Accel_StandBy:
  6898                           	opt stack 22
  6899                           
  6900                           ;accel.c: 23: byte c = Accel_ReadRegister(0x2A);
  6901                           
  6902                           ;incstack = 0
  6903  002ECE  0E2A               	movlw	42
  6904  002ED0  EC0E  F017         	call	_Accel_ReadRegister
  6905  002ED4  6E2C               	movwf	Accel_StandBy@c,c
  6906                           
  6907                           ;accel.c: 24: Accel_WriteRegister(0x2A, c & 0xFE);
  6908  002ED6  502C               	movf	Accel_StandBy@c,w,c
  6909  002ED8  0BFE               	andlw	254
  6910  002EDA  6E25               	movwf	Accel_WriteRegister@value,c
  6911  002EDC  0E2A               	movlw	42
  6912  002EDE  EC48  F017         	call	_Accel_WriteRegister
  6913  002EE2  0012               	return		;funcret
  6914  002EE4                     __end_of_Accel_StandBy:
  6915                           	opt stack 0
  6916                           tblptru	equ	0xFF8
  6917                           tblptrh	equ	0xFF7
  6918                           tblptrl	equ	0xFF6
  6919                           tablat	equ	0xFF5
  6920                           prodh	equ	0xFF4
  6921                           prodl	equ	0xFF3
  6922                           postinc0	equ	0xFEE
  6923                           wreg	equ	0xFE8
  6924                           indf2	equ	0xFDF
  6925                           postinc2	equ	0xFDE
  6926                           postdec2	equ	0xFDD
  6927                           fsr2h	equ	0xFDA
  6928                           fsr2l	equ	0xFD9
  6929                           status	equ	0xFD8
  6930                           
  6931 ;; *************** function _Accel_Active *****************
  6932 ;; Defined at:
  6933 ;;		line 27 in file "accel.c"
  6934 ;; Parameters:    Size  Location     Type
  6935 ;;		None
  6936 ;; Auto vars:     Size  Location     Type
  6937 ;;  c               1   43[COMRAM] unsigned char 
  6938 ;; Return value:  Size  Location     Type
  6939 ;;		None               void
  6940 ;; Registers used:
  6941 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6942 ;; Tracked objects:
  6943 ;;		On entry : 0/0
  6944 ;;		On exit  : 0/0
  6945 ;;		Unchanged: 0/0
  6946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6947 ;;      Params:         0       0       0       0       0       0       0
  6948 ;;      Locals:         1       0       0       0       0       0       0
  6949 ;;      Temps:          0       0       0       0       0       0       0
  6950 ;;      Totals:         1       0       0       0       0       0       0
  6951 ;;Total ram usage:        1 bytes
  6952 ;; Hardware stack levels used:    1
  6953 ;; Hardware stack levels required when called:    7
  6954 ;; This function calls:
  6955 ;;		_Accel_ReadRegister
  6956 ;;		_Accel_WriteRegister
  6957 ;; This function is called by:
  6958 ;;		_Accel_Init
  6959 ;; This function uses a non-reentrant model
  6960 ;;
  6961                           
  6962                           	psect	text35
  6963  002EE4                     __ptext35:
  6964                           	opt stack 0
  6965  002EE4                     _Accel_Active:
  6966                           	opt stack 22
  6967                           
  6968                           ;accel.c: 29: byte c = Accel_ReadRegister(0x2A);
  6969                           
  6970                           ;incstack = 0
  6971  002EE4  0E2A               	movlw	42
  6972  002EE6  EC0E  F017         	call	_Accel_ReadRegister
  6973  002EEA  6E2C               	movwf	Accel_Active@c,c
  6974                           
  6975                           ;accel.c: 30: Accel_WriteRegister(0x2A, c | 0x01);
  6976  002EEC  502C               	movf	Accel_Active@c,w,c
  6977  002EEE  0901               	iorlw	1
  6978  002EF0  6E25               	movwf	Accel_WriteRegister@value,c
  6979  002EF2  0E2A               	movlw	42
  6980  002EF4  EC48  F017         	call	_Accel_WriteRegister
  6981  002EF8  0012               	return		;funcret
  6982  002EFA                     __end_of_Accel_Active:
  6983                           	opt stack 0
  6984                           tblptru	equ	0xFF8
  6985                           tblptrh	equ	0xFF7
  6986                           tblptrl	equ	0xFF6
  6987                           tablat	equ	0xFF5
  6988                           prodh	equ	0xFF4
  6989                           prodl	equ	0xFF3
  6990                           postinc0	equ	0xFEE
  6991                           wreg	equ	0xFE8
  6992                           indf2	equ	0xFDF
  6993                           postinc2	equ	0xFDE
  6994                           postdec2	equ	0xFDD
  6995                           fsr2h	equ	0xFDA
  6996                           fsr2l	equ	0xFD9
  6997                           status	equ	0xFD8
  6998                           
  6999 ;; *************** function _Accel_WriteRegister *****************
  7000 ;; Defined at:
  7001 ;;		line 59 in file "accel.c"
  7002 ;; Parameters:    Size  Location     Type
  7003 ;;  reg             1    wreg     unsigned char 
  7004 ;;  value           1   36[COMRAM] unsigned char 
  7005 ;; Auto vars:     Size  Location     Type
  7006 ;;  reg             1   37[COMRAM] unsigned char 
  7007 ;;  status          1   38[COMRAM] char 
  7008 ;; Return value:  Size  Location     Type
  7009 ;;		None               void
  7010 ;; Registers used:
  7011 ;;		wreg, status,2, status,0, cstack
  7012 ;; Tracked objects:
  7013 ;;		On entry : 0/0
  7014 ;;		On exit  : 0/0
  7015 ;;		Unchanged: 0/0
  7016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7017 ;;      Params:         1       0       0       0       0       0       0
  7018 ;;      Locals:         2       0       0       0       0       0       0
  7019 ;;      Temps:          0       0       0       0       0       0       0
  7020 ;;      Totals:         3       0       0       0       0       0       0
  7021 ;;Total ram usage:        3 bytes
  7022 ;; Hardware stack levels used:    1
  7023 ;; Hardware stack levels required when called:    5
  7024 ;; This function calls:
  7025 ;;		_EEAckPolling
  7026 ;;		_EEByteWrite
  7027 ;; This function is called by:
  7028 ;;		_Accel_Init
  7029 ;;		_Accel_StandBy
  7030 ;;		_Accel_Active
  7031 ;; This function uses a non-reentrant model
  7032 ;;
  7033                           
  7034                           	psect	text36
  7035  002E90                     __ptext36:
  7036                           	opt stack 0
  7037  002E90                     _Accel_WriteRegister:
  7038                           	opt stack 24
  7039                           
  7040                           ;incstack = 0
  7041                           ;Accel_WriteRegister@reg stored from wreg
  7042  002E90  6E26               	movwf	Accel_WriteRegister@reg,c
  7043  002E92                     
  7044                           ;accel.c: 63: status = EEByteWrite(0x3A, reg, value);
  7045  002E92  C026  F022         	movff	Accel_WriteRegister@reg,EEByteWrite@address
  7046  002E96  C025  F023         	movff	Accel_WriteRegister@value,EEByteWrite@data
  7047  002E9A  0E3A               	movlw	58
  7048  002E9C  EC7C  F013         	call	_EEByteWrite
  7049  002EA0  6E27               	movwf	Accel_WriteRegister@status,c
  7050                           
  7051                           ;accel.c: 64: } while (status != 0);
  7052  002EA2  5027               	movf	Accel_WriteRegister@status,w,c
  7053  002EA4  A4D8               	btfss	status,2,c
  7054  002EA6  D7F5               	goto	l3893
  7055                           
  7056                           ;accel.c: 66: EEAckPolling(0x3A);
  7057  002EA8  0E3A               	movlw	58
  7058  002EAA  EC68  F014         	call	_EEAckPolling
  7059  002EAE  0012               	return		;funcret
  7060  002EB0                     __end_of_Accel_WriteRegister:
  7061                           	opt stack 0
  7062                           tblptru	equ	0xFF8
  7063                           tblptrh	equ	0xFF7
  7064                           tblptrl	equ	0xFF6
  7065                           tablat	equ	0xFF5
  7066                           prodh	equ	0xFF4
  7067                           prodl	equ	0xFF3
  7068                           postinc0	equ	0xFEE
  7069                           wreg	equ	0xFE8
  7070                           indf2	equ	0xFDF
  7071                           postinc2	equ	0xFDE
  7072                           postdec2	equ	0xFDD
  7073                           fsr2h	equ	0xFDA
  7074                           fsr2l	equ	0xFD9
  7075                           status	equ	0xFD8
  7076                           
  7077 ;; *************** function _EEByteWrite *****************
  7078 ;; Defined at:
  7079 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_eebw.c"
  7080 ;; Parameters:    Size  Location     Type
  7081 ;;  control         1    wreg     unsigned char 
  7082 ;;  address         1   33[COMRAM] unsigned char 
  7083 ;;  data            1   34[COMRAM] unsigned char 
  7084 ;; Auto vars:     Size  Location     Type
  7085 ;;  control         1   35[COMRAM] unsigned char 
  7086 ;; Return value:  Size  Location     Type
  7087 ;;                  1    wreg      char 
  7088 ;; Registers used:
  7089 ;;		wreg, status,2, status,0, cstack
  7090 ;; Tracked objects:
  7091 ;;		On entry : 0/0
  7092 ;;		On exit  : 0/0
  7093 ;;		Unchanged: 0/0
  7094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7095 ;;      Params:         2       0       0       0       0       0       0
  7096 ;;      Locals:         1       0       0       0       0       0       0
  7097 ;;      Temps:          0       0       0       0       0       0       0
  7098 ;;      Totals:         3       0       0       0       0       0       0
  7099 ;;Total ram usage:        3 bytes
  7100 ;; Hardware stack levels used:    1
  7101 ;; Hardware stack levels required when called:    4
  7102 ;; This function calls:
  7103 ;;		_IdleI2C
  7104 ;;		_WriteI2C
  7105 ;; This function is called by:
  7106 ;;		_Accel_WriteRegister
  7107 ;; This function uses a non-reentrant model
  7108 ;;
  7109                           
  7110                           	psect	text37
  7111  0026F8                     __ptext37:
  7112                           	opt stack 0
  7113  0026F8                     _EEByteWrite:
  7114                           	opt stack 24
  7115                           
  7116                           ;incstack = 0
  7117                           ;EEByteWrite@control stored from wreg
  7118  0026F8  6E24               	movwf	EEByteWrite@control,c
  7119  0026FA  EC7D  F017         	call	_IdleI2C	;wreg free
  7120  0026FE  80C5               	bsf	4037,0,c	;volatile
  7121  002700  D000               	goto	l222
  7122  002702                     l222:
  7123  002702  A0C5               	btfss	4037,0,c	;volatile
  7124  002704  D002               	goto	l225
  7125  002706  D7FD               	goto	l222
  7126  002708  D000               	goto	l225
  7127  00270A                     l225:
  7128  00270A  B0C5               	btfsc	4037,0,c	;volatile
  7129  00270C  D7FE               	goto	l225
  7130  00270E  A6A1               	btfss	4001,3,c	;volatile
  7131  002710  D003               	goto	l3695
  7132  002712  0EFF               	movlw	255
  7133  002714  0012               	return	
  7134  002716  D036               	goto	l230
  7135  002718                     l3695:
  7136  002718  5024               	movf	EEByteWrite@control,w,c
  7137  00271A  EC4F  F015         	call	_WriteI2C
  7138  00271E  0900               	iorlw	0
  7139  002720  B4D8               	btfsc	status,2,c
  7140  002722  D006               	goto	l231
  7141  002724  84C5               	bsf	4037,2,c	;volatile
  7142  002726  D000               	goto	l232
  7143  002728                     l232:
  7144  002728  B4C5               	btfsc	4037,2,c	;volatile
  7145  00272A  D7FE               	goto	l232
  7146  00272C  0EFD               	movlw	253
  7147  00272E  0012               	return	
  7148  002730                     l231:
  7149  002730  BCC5               	btfsc	4037,6,c	;volatile
  7150  002732  D022               	goto	l235
  7151  002734  5022               	movf	EEByteWrite@address,w,c
  7152  002736  EC4F  F015         	call	_WriteI2C
  7153  00273A  0900               	iorlw	0
  7154  00273C  B4D8               	btfsc	status,2,c
  7155  00273E  D006               	goto	l236
  7156  002740  84C5               	bsf	4037,2,c	;volatile
  7157  002742  D000               	goto	l237
  7158  002744                     l237:
  7159  002744  B4C5               	btfsc	4037,2,c	;volatile
  7160  002746  D7FE               	goto	l237
  7161  002748  0EFD               	movlw	253
  7162  00274A  0012               	return	
  7163  00274C                     l236:
  7164  00274C  BCC5               	btfsc	4037,6,c	;volatile
  7165  00274E  D00D               	goto	l240
  7166  002750  5023               	movf	EEByteWrite@data,w,c
  7167  002752  EC4F  F015         	call	_WriteI2C
  7168  002756  0900               	iorlw	0
  7169  002758  B4D8               	btfsc	status,2,c
  7170  00275A  D014               	goto	l230
  7171  00275C  84C5               	bsf	4037,2,c	;volatile
  7172  00275E  D000               	goto	l242
  7173  002760                     l242:
  7174  002760  B4C5               	btfsc	4037,2,c	;volatile
  7175  002762  D7FE               	goto	l242
  7176  002764  0EFD               	movlw	253
  7177  002766  0012               	return	
  7178  002768  D00D               	goto	l230
  7179  00276A                     l240:
  7180  00276A  84C5               	bsf	4037,2,c	;volatile
  7181  00276C  D000               	goto	l246
  7182  00276E                     l246:
  7183  00276E  B4C5               	btfsc	4037,2,c	;volatile
  7184  002770  D7FE               	goto	l246
  7185  002772  0EFE               	movlw	254
  7186  002774  0012               	return	
  7187  002776  D006               	goto	l230
  7188  002778                     l235:
  7189  002778  84C5               	bsf	4037,2,c	;volatile
  7190  00277A  D000               	goto	l250
  7191  00277C                     l250:
  7192  00277C  B4C5               	btfsc	4037,2,c	;volatile
  7193  00277E  D7FE               	goto	l250
  7194  002780  0EFE               	movlw	254
  7195  002782  0012               	return	
  7196  002784                     l230:
  7197  002784  84C5               	bsf	4037,2,c	;volatile
  7198  002786  D000               	goto	l253
  7199  002788                     l253:
  7200  002788  A4C5               	btfss	4037,2,c	;volatile
  7201  00278A  D002               	goto	l256
  7202  00278C  D7FD               	goto	l253
  7203  00278E  D000               	goto	l256
  7204  002790                     l256:
  7205  002790  B4C5               	btfsc	4037,2,c	;volatile
  7206  002792  D7FE               	goto	l256
  7207  002794  A6A1               	btfss	4001,3,c	;volatile
  7208  002796  D002               	goto	l3731
  7209  002798  0EFF               	movlw	255
  7210  00279A  0012               	return	
  7211  00279C                     l3731:
  7212  00279C  0E00               	movlw	0
  7213  00279E  0012               	return	
  7214  0027A0  0012               	return		;funcret
  7215  0027A2                     __end_of_EEByteWrite:
  7216                           	opt stack 0
  7217                           tblptru	equ	0xFF8
  7218                           tblptrh	equ	0xFF7
  7219                           tblptrl	equ	0xFF6
  7220                           tablat	equ	0xFF5
  7221                           prodh	equ	0xFF4
  7222                           prodl	equ	0xFF3
  7223                           postinc0	equ	0xFEE
  7224                           wreg	equ	0xFE8
  7225                           indf2	equ	0xFDF
  7226                           postinc2	equ	0xFDE
  7227                           postdec2	equ	0xFDD
  7228                           fsr2h	equ	0xFDA
  7229                           fsr2l	equ	0xFD9
  7230                           status	equ	0xFD8
  7231                           
  7232 ;; *************** function _EEAckPolling *****************
  7233 ;; Defined at:
  7234 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_eeap.c"
  7235 ;; Parameters:    Size  Location     Type
  7236 ;;  control         1    wreg     unsigned char 
  7237 ;; Auto vars:     Size  Location     Type
  7238 ;;  control         1   33[COMRAM] unsigned char 
  7239 ;; Return value:  Size  Location     Type
  7240 ;;                  1    wreg      char 
  7241 ;; Registers used:
  7242 ;;		wreg, status,2, status,0, cstack
  7243 ;; Tracked objects:
  7244 ;;		On entry : 0/0
  7245 ;;		On exit  : 0/0
  7246 ;;		Unchanged: 0/0
  7247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7248 ;;      Params:         0       0       0       0       0       0       0
  7249 ;;      Locals:         1       0       0       0       0       0       0
  7250 ;;      Temps:          0       0       0       0       0       0       0
  7251 ;;      Totals:         1       0       0       0       0       0       0
  7252 ;;Total ram usage:        1 bytes
  7253 ;; Hardware stack levels used:    1
  7254 ;; Hardware stack levels required when called:    4
  7255 ;; This function calls:
  7256 ;;		_IdleI2C
  7257 ;;		_WriteI2C
  7258 ;; This function is called by:
  7259 ;;		_Accel_WriteRegister
  7260 ;; This function uses a non-reentrant model
  7261 ;;
  7262                           
  7263                           	psect	text38
  7264  0028D0                     __ptext38:
  7265                           	opt stack 0
  7266  0028D0                     _EEAckPolling:
  7267                           	opt stack 24
  7268                           
  7269                           ;incstack = 0
  7270                           ;EEAckPolling@control stored from wreg
  7271  0028D0  6E22               	movwf	EEAckPolling@control,c
  7272  0028D2  EC7D  F017         	call	_IdleI2C	;wreg free
  7273  0028D6  80C5               	bsf	4037,0,c	;volatile
  7274  0028D8  D000               	goto	l178
  7275  0028DA                     l178:
  7276  0028DA  A0C5               	btfss	4037,0,c	;volatile
  7277  0028DC  D002               	goto	l181
  7278  0028DE  D7FD               	goto	l178
  7279  0028E0  D000               	goto	l181
  7280  0028E2                     l181:
  7281  0028E2  B0C5               	btfsc	4037,0,c	;volatile
  7282  0028E4  D7FE               	goto	l181
  7283  0028E6  B6A1               	btfsc	4001,3,c	;volatile
  7284  0028E8  0012               	return	
  7285  0028EA  D002               	goto	l3743
  7286                           
  7287                           ;	Return value of _EEAckPolling is never used
  7288  0028EC  0012               	return	
  7289  0028EE  D027               	goto	l186
  7290  0028F0                     l3743:
  7291  0028F0  5022               	movf	EEAckPolling@control,w,c
  7292  0028F2  EC4F  F015         	call	_WriteI2C
  7293  0028F6  0AFF               	xorlw	-1
  7294  0028F8  A4D8               	btfss	status,2,c
  7295  0028FA  D01F               	goto	l191
  7296  0028FC  84C5               	bsf	4037,2,c	;volatile
  7297  0028FE  D000               	goto	l188
  7298  002900                     l188:
  7299  002900  A4C5               	btfss	4037,2,c	;volatile
  7300  002902  0012               	return	
  7301  002904  D7FD               	goto	l188
  7302                           
  7303                           ;	Return value of _EEAckPolling is never used
  7304  002906  0012               	return	
  7305  002908  D018               	goto	l191
  7306  00290A                     l192:
  7307  00290A  82C5               	bsf	4037,1,c	;volatile
  7308  00290C  D000               	goto	l193
  7309  00290E                     l193:
  7310  00290E  A2C5               	btfss	4037,1,c	;volatile
  7311  002910  D002               	goto	l196
  7312  002912  D7FD               	goto	l193
  7313  002914  D000               	goto	l196
  7314  002916                     l196:
  7315  002916  B2C5               	btfsc	4037,1,c	;volatile
  7316  002918  D7FE               	goto	l196
  7317  00291A  B6A1               	btfsc	4001,3,c	;volatile
  7318  00291C  0012               	return	
  7319  00291E  D001               	goto	l3749
  7320                           
  7321                           ;	Return value of _EEAckPolling is never used
  7322  002920  0012               	return	
  7323  002922                     l3749:
  7324  002922  5022               	movf	EEAckPolling@control,w,c
  7325  002924  EC4F  F015         	call	_WriteI2C
  7326  002928  0AFF               	xorlw	-1
  7327  00292A  A4D8               	btfss	status,2,c
  7328  00292C  D006               	goto	l191
  7329  00292E  84C5               	bsf	4037,2,c	;volatile
  7330  002930  D000               	goto	l201
  7331  002932                     l201:
  7332  002932  A4C5               	btfss	4037,2,c	;volatile
  7333  002934  0012               	return	
  7334  002936  D7FD               	goto	l201
  7335                           
  7336                           ;	Return value of _EEAckPolling is never used
  7337  002938  0012               	return	
  7338  00293A                     l191:
  7339  00293A  BCC5               	btfsc	4037,6,c	;volatile
  7340  00293C  D7E6               	goto	l192
  7341  00293E                     l186:
  7342  00293E  84C5               	bsf	4037,2,c	;volatile
  7343  002940  D000               	goto	l205
  7344  002942                     l205:
  7345  002942  A4C5               	btfss	4037,2,c	;volatile
  7346  002944  D002               	goto	l208
  7347  002946  D7FD               	goto	l205
  7348  002948  D000               	goto	l208
  7349  00294A                     l208:
  7350  00294A  B4C5               	btfsc	4037,2,c	;volatile
  7351  00294C  D7FE               	goto	l208
  7352  00294E  50A1               	movf	4001,w,c	;volatile
  7353                           
  7354                           ;	Return value of _EEAckPolling is never used
  7355  002950  0012               	return	
  7356                           
  7357                           ;	Return value of _EEAckPolling is never used
  7358  002952  0012               	return		;funcret
  7359  002954                     __end_of_EEAckPolling:
  7360                           	opt stack 0
  7361                           tblptru	equ	0xFF8
  7362                           tblptrh	equ	0xFF7
  7363                           tblptrl	equ	0xFF6
  7364                           tablat	equ	0xFF5
  7365                           prodh	equ	0xFF4
  7366                           prodl	equ	0xFF3
  7367                           postinc0	equ	0xFEE
  7368                           wreg	equ	0xFE8
  7369                           indf2	equ	0xFDF
  7370                           postinc2	equ	0xFDE
  7371                           postdec2	equ	0xFDD
  7372                           fsr2h	equ	0xFDA
  7373                           fsr2l	equ	0xFD9
  7374                           status	equ	0xFD8
  7375                           
  7376 ;; *************** function _Accel_ReadRegister *****************
  7377 ;; Defined at:
  7378 ;;		line 69 in file "accel.c"
  7379 ;; Parameters:    Size  Location     Type
  7380 ;;  reg             1    wreg     unsigned char 
  7381 ;; Auto vars:     Size  Location     Type
  7382 ;;  reg             1    2[BANK0 ] unsigned char 
  7383 ;;  out             1    3[BANK0 ] unsigned char 
  7384 ;; Return value:  Size  Location     Type
  7385 ;;                  1    wreg      unsigned char 
  7386 ;; Registers used:
  7387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7388 ;; Tracked objects:
  7389 ;;		On entry : 0/0
  7390 ;;		On exit  : 0/0
  7391 ;;		Unchanged: 0/0
  7392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7393 ;;      Params:         0       0       0       0       0       0       0
  7394 ;;      Locals:         0       2       0       0       0       0       0
  7395 ;;      Temps:          0       0       0       0       0       0       0
  7396 ;;      Totals:         0       2       0       0       0       0       0
  7397 ;;Total ram usage:        2 bytes
  7398 ;; Hardware stack levels used:    1
  7399 ;; Hardware stack levels required when called:    6
  7400 ;; This function calls:
  7401 ;;		_Accel_ReadRegisters
  7402 ;; This function is called by:
  7403 ;;		_Accel_Init
  7404 ;;		_Accel_StandBy
  7405 ;;		_Accel_Active
  7406 ;; This function uses a non-reentrant model
  7407 ;;
  7408                           
  7409                           	psect	text39
  7410  002E1C                     __ptext39:
  7411                           	opt stack 0
  7412  002E1C                     _Accel_ReadRegister:
  7413                           	opt stack 22
  7414                           
  7415                           ;incstack = 0
  7416                           ;Accel_ReadRegister@reg stored from wreg
  7417  002E1C  0100               	movlb	0	; () banked
  7418  002E1E  6F62               	movwf	Accel_ReadRegister@reg& (0+255),b
  7419                           
  7420                           ; BSR set to: 0
  7421                           ;accel.c: 71: byte out = 0;
  7422  002E20  0E00               	movlw	0
  7423  002E22  0100               	movlb	0	; () banked
  7424  002E24  6F63               	movwf	Accel_ReadRegister@out& (0+255),b
  7425                           
  7426                           ; BSR set to: 0
  7427                           ;accel.c: 72: Accel_ReadRegisters(reg, &out, 1);
  7428  002E26  0E63               	movlw	low Accel_ReadRegister@out
  7429  002E28  6E28               	movwf	Accel_ReadRegisters@out,c
  7430  002E2A  0E00               	movlw	high Accel_ReadRegister@out
  7431  002E2C  6E29               	movwf	Accel_ReadRegisters@out+1,c
  7432  002E2E  0E00               	movlw	0
  7433  002E30  6E2B               	movwf	Accel_ReadRegisters@length+1,c
  7434  002E32  0E01               	movlw	1
  7435  002E34  6E2A               	movwf	Accel_ReadRegisters@length,c
  7436  002E36  0100               	movlb	0	; () banked
  7437  002E38  5162               	movf	Accel_ReadRegister@reg& (0+255),w,b
  7438  002E3A  ECDD  F016         	call	_Accel_ReadRegisters
  7439                           
  7440                           ;accel.c: 74: return out;
  7441  002E3E  0100               	movlb	0	; () banked
  7442  002E40  5163               	movf	Accel_ReadRegister@out& (0+255),w,b
  7443  002E42  0012               	return	
  7444                           
  7445                           ; BSR set to: 0
  7446                           
  7447                           ; BSR set to: 0
  7448  002E44  0012               	return		;funcret
  7449  002E46                     __end_of_Accel_ReadRegister:
  7450                           	opt stack 0
  7451                           tblptru	equ	0xFF8
  7452                           tblptrh	equ	0xFF7
  7453                           tblptrl	equ	0xFF6
  7454                           tablat	equ	0xFF5
  7455                           prodh	equ	0xFF4
  7456                           prodl	equ	0xFF3
  7457                           postinc0	equ	0xFEE
  7458                           wreg	equ	0xFE8
  7459                           indf2	equ	0xFDF
  7460                           postinc2	equ	0xFDE
  7461                           postdec2	equ	0xFDD
  7462                           fsr2h	equ	0xFDA
  7463                           fsr2l	equ	0xFD9
  7464                           status	equ	0xFD8
  7465                           
  7466 ;; *************** function _Accel_ReadRegisters *****************
  7467 ;; Defined at:
  7468 ;;		line 77 in file "accel.c"
  7469 ;; Parameters:    Size  Location     Type
  7470 ;;  reg             1    wreg     unsigned char 
  7471 ;;  out             2   39[COMRAM] PTR unsigned char 
  7472 ;;		 -> Accel_ReadRegister@out(1), Accel_Get@raw(6), 
  7473 ;;  length          2   41[COMRAM] int 
  7474 ;; Auto vars:     Size  Location     Type
  7475 ;;  reg             1    0[BANK0 ] unsigned char 
  7476 ;;  status          1    1[BANK0 ] char 
  7477 ;; Return value:  Size  Location     Type
  7478 ;;		None               void
  7479 ;; Registers used:
  7480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7481 ;; Tracked objects:
  7482 ;;		On entry : 0/0
  7483 ;;		On exit  : 0/0
  7484 ;;		Unchanged: 0/0
  7485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7486 ;;      Params:         4       0       0       0       0       0       0
  7487 ;;      Locals:         0       2       0       0       0       0       0
  7488 ;;      Temps:          0       0       0       0       0       0       0
  7489 ;;      Totals:         4       2       0       0       0       0       0
  7490 ;;Total ram usage:        6 bytes
  7491 ;; Hardware stack levels used:    1
  7492 ;; Hardware stack levels required when called:    5
  7493 ;; This function calls:
  7494 ;;		_EESequentialRead
  7495 ;; This function is called by:
  7496 ;;		_Accel_Get
  7497 ;;		_Accel_ReadRegister
  7498 ;; This function uses a non-reentrant model
  7499 ;;
  7500                           
  7501                           	psect	text40
  7502  002DBA                     __ptext40:
  7503                           	opt stack 0
  7504  002DBA                     _Accel_ReadRegisters:
  7505                           	opt stack 23
  7506                           
  7507                           ; BSR set to: 0
  7508                           ;incstack = 0
  7509                           ;Accel_ReadRegisters@reg stored from wreg
  7510  002DBA  0100               	movlb	0	; () banked
  7511  002DBC  6F60               	movwf	Accel_ReadRegisters@reg& (0+255),b
  7512                           
  7513                           ; BSR set to: 0
  7514                           ;accel.c: 79: signed char status = 0;
  7515  002DBE  0E00               	movlw	0
  7516  002DC0  0100               	movlb	0	; () banked
  7517  002DC2  6F61               	movwf	Accel_ReadRegisters@status& (0+255),b
  7518  002DC4  D000               	goto	l3681
  7519  002DC6                     l3681:
  7520                           
  7521                           ; BSR set to: 0
  7522                           ;accel.c: 82: status = EESequentialRead(0x3A, reg, out, length);
  7523  002DC6  C060  F023         	movff	Accel_ReadRegisters@reg,EESequentialRead@address
  7524  002DCA  C028  F024         	movff	Accel_ReadRegisters@out,EESequentialRead@rdptr
  7525  002DCE  C029  F025         	movff	Accel_ReadRegisters@out+1,EESequentialRead@rdptr+1
  7526  002DD2  C02A  F026         	movff	Accel_ReadRegisters@length,EESequentialRead@length
  7527  002DD6  0E3A               	movlw	58
  7528  002DD8  EC18  F012         	call	_EESequentialRead
  7529  002DDC  0100               	movlb	0	; () banked
  7530  002DDE  6F61               	movwf	Accel_ReadRegisters@status& (0+255),b
  7531                           
  7532                           ; BSR set to: 0
  7533                           ;accel.c: 83: } while (status != 0);
  7534  002DE0  0100               	movlb	0	; () banked
  7535  002DE2  5161               	movf	Accel_ReadRegisters@status& (0+255),w,b
  7536  002DE4  0100               	movlb	0	; () banked
  7537  002DE6  A4D8               	btfss	status,2,c
  7538  002DE8  D7EE               	goto	l3681
  7539                           
  7540                           ; BSR set to: 0
  7541                           
  7542                           ; BSR set to: 0
  7543  002DEA  0012               	return		;funcret
  7544  002DEC                     __end_of_Accel_ReadRegisters:
  7545                           	opt stack 0
  7546                           tblptru	equ	0xFF8
  7547                           tblptrh	equ	0xFF7
  7548                           tblptrl	equ	0xFF6
  7549                           tablat	equ	0xFF5
  7550                           prodh	equ	0xFF4
  7551                           prodl	equ	0xFF3
  7552                           postinc0	equ	0xFEE
  7553                           wreg	equ	0xFE8
  7554                           indf2	equ	0xFDF
  7555                           postinc2	equ	0xFDE
  7556                           postdec2	equ	0xFDD
  7557                           fsr2h	equ	0xFDA
  7558                           fsr2l	equ	0xFD9
  7559                           status	equ	0xFD8
  7560                           
  7561 ;; *************** function _EESequentialRead *****************
  7562 ;; Defined at:
  7563 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_eesr.c"
  7564 ;; Parameters:    Size  Location     Type
  7565 ;;  control         1    wreg     unsigned char 
  7566 ;;  address         1   34[COMRAM] unsigned char 
  7567 ;;  rdptr           2   35[COMRAM] PTR unsigned char 
  7568 ;;		 -> Accel_ReadRegister@out(1), Accel_Get@raw(6), 
  7569 ;;  length          1   37[COMRAM] unsigned char 
  7570 ;; Auto vars:     Size  Location     Type
  7571 ;;  control         1   38[COMRAM] unsigned char 
  7572 ;; Return value:  Size  Location     Type
  7573 ;;                  1    wreg      char 
  7574 ;; Registers used:
  7575 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7576 ;; Tracked objects:
  7577 ;;		On entry : 0/0
  7578 ;;		On exit  : 0/0
  7579 ;;		Unchanged: 0/0
  7580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7581 ;;      Params:         4       0       0       0       0       0       0
  7582 ;;      Locals:         1       0       0       0       0       0       0
  7583 ;;      Temps:          0       0       0       0       0       0       0
  7584 ;;      Totals:         5       0       0       0       0       0       0
  7585 ;;Total ram usage:        5 bytes
  7586 ;; Hardware stack levels used:    1
  7587 ;; Hardware stack levels required when called:    4
  7588 ;; This function calls:
  7589 ;;		_IdleI2C
  7590 ;;		_WriteI2C
  7591 ;;		_getsI2C
  7592 ;; This function is called by:
  7593 ;;		_Accel_ReadRegisters
  7594 ;; This function uses a non-reentrant model
  7595 ;;
  7596                           
  7597                           	psect	text41
  7598  002430                     __ptext41:
  7599                           	opt stack 0
  7600  002430                     _EESequentialRead:
  7601                           	opt stack 23
  7602                           
  7603                           ; BSR set to: 0
  7604                           ;incstack = 0
  7605                           ;EESequentialRead@control stored from wreg
  7606  002430  6E27               	movwf	EESequentialRead@control,c
  7607  002432  EC7D  F017         	call	_IdleI2C	;wreg free
  7608  002436  80C5               	bsf	4037,0,c	;volatile
  7609  002438  D000               	goto	l272
  7610  00243A                     l272:
  7611  00243A  A0C5               	btfss	4037,0,c	;volatile
  7612  00243C  D002               	goto	l275
  7613  00243E  D7FD               	goto	l272
  7614  002440  D000               	goto	l275
  7615  002442                     l275:
  7616  002442  B0C5               	btfsc	4037,0,c	;volatile
  7617  002444  D7FE               	goto	l275
  7618  002446  A6A1               	btfss	4001,3,c	;volatile
  7619  002448  D003               	goto	l3521
  7620  00244A                     l3515:
  7621  00244A  0EFF               	movlw	255
  7622  00244C  0012               	return	
  7623  00244E  D06A               	goto	l3569
  7624  002450                     l3521:
  7625  002450  5027               	movf	EESequentialRead@control,w,c
  7626  002452  EC4F  F015         	call	_WriteI2C
  7627  002456  0900               	iorlw	0
  7628  002458  B4D8               	btfsc	status,2,c
  7629  00245A  D006               	goto	l281
  7630  00245C  84C5               	bsf	4037,2,c	;volatile
  7631  00245E  D000               	goto	l282
  7632  002460                     l282:
  7633  002460  B4C5               	btfsc	4037,2,c	;volatile
  7634  002462  D7FE               	goto	l282
  7635  002464  0EFD               	movlw	253
  7636  002466  0012               	return	
  7637  002468                     l281:
  7638  002468  BCC5               	btfsc	4037,6,c	;volatile
  7639  00246A  D055               	goto	l285
  7640  00246C  5023               	movf	EESequentialRead@address,w,c
  7641  00246E  EC4F  F015         	call	_WriteI2C
  7642  002472  0900               	iorlw	0
  7643  002474  B4D8               	btfsc	status,2,c
  7644  002476  D006               	goto	l286
  7645  002478  84C5               	bsf	4037,2,c	;volatile
  7646  00247A  D000               	goto	l287
  7647  00247C                     l287:
  7648  00247C  B4C5               	btfsc	4037,2,c	;volatile
  7649  00247E  D7FE               	goto	l287
  7650  002480  0EFD               	movlw	253
  7651  002482  0012               	return	
  7652  002484                     l286:
  7653  002484  BCC5               	btfsc	4037,6,c	;volatile
  7654  002486  D040               	goto	l290
  7655  002488  82C5               	bsf	4037,1,c	;volatile
  7656  00248A  D000               	goto	l291
  7657  00248C                     l291:
  7658  00248C  A2C5               	btfss	4037,1,c	;volatile
  7659  00248E  D002               	goto	l294
  7660  002490  D7FD               	goto	l291
  7661  002492  D000               	goto	l294
  7662  002494                     l294:
  7663  002494  B2C5               	btfsc	4037,1,c	;volatile
  7664  002496  D7FE               	goto	l294
  7665  002498  2827               	incf	EESequentialRead@control,w,c
  7666  00249A  EC4F  F015         	call	_WriteI2C
  7667  00249E  0900               	iorlw	0
  7668  0024A0  B4D8               	btfsc	status,2,c
  7669  0024A2  D006               	goto	l297
  7670  0024A4  84C5               	bsf	4037,2,c	;volatile
  7671  0024A6  D000               	goto	l298
  7672  0024A8                     l298:
  7673  0024A8  B4C5               	btfsc	4037,2,c	;volatile
  7674  0024AA  D7FE               	goto	l298
  7675  0024AC  0EFD               	movlw	253
  7676  0024AE  0012               	return	
  7677  0024B0                     l297:
  7678  0024B0  BCC5               	btfsc	4037,6,c	;volatile
  7679  0024B2  D023               	goto	l301
  7680  0024B4  C024  F020         	movff	EESequentialRead@rdptr,getsI2C@rdptr
  7681  0024B8  C025  F021         	movff	EESequentialRead@rdptr+1,getsI2C@rdptr+1
  7682  0024BC  C026  F022         	movff	EESequentialRead@length,getsI2C@length
  7683  0024C0  ECB1  F015         	call	_getsI2C	;wreg free
  7684  0024C4  0900               	iorlw	0
  7685  0024C6  B4D8               	btfsc	status,2,c
  7686  0024C8  D002               	goto	l302
  7687  0024CA  0EFF               	movlw	255
  7688  0024CC  0012               	return	
  7689  0024CE                     l302:
  7690  0024CE  8AC5               	bsf	4037,5,c	;volatile
  7691  0024D0  88C5               	bsf	4037,4,c	;volatile
  7692  0024D2  D000               	goto	l303
  7693  0024D4                     l303:
  7694  0024D4  A8C5               	btfss	4037,4,c	;volatile
  7695  0024D6  D002               	goto	l306
  7696  0024D8  D7FD               	goto	l303
  7697  0024DA  D000               	goto	l306
  7698  0024DC                     l306:
  7699  0024DC  B8C5               	btfsc	4037,4,c	;volatile
  7700  0024DE  D7FE               	goto	l306
  7701  0024E0  84C5               	bsf	4037,2,c	;volatile
  7702  0024E2  D000               	goto	l309
  7703  0024E4                     l309:
  7704  0024E4  A4C5               	btfss	4037,2,c	;volatile
  7705  0024E6  D002               	goto	l312
  7706  0024E8  D7FD               	goto	l309
  7707  0024EA  D000               	goto	l312
  7708  0024EC                     l312:
  7709  0024EC  B4C5               	btfsc	4037,2,c	;volatile
  7710  0024EE  D7FE               	goto	l312
  7711  0024F0  A6A1               	btfss	4001,3,c	;volatile
  7712  0024F2  D018               	goto	l3569
  7713  0024F4  D7AA               	goto	l3515
  7714  0024F6  0012               	return	
  7715  0024F8  D015               	goto	l3569
  7716  0024FA                     l301:
  7717  0024FA  84C5               	bsf	4037,2,c	;volatile
  7718  0024FC  D000               	goto	l317
  7719  0024FE                     l317:
  7720  0024FE  B4C5               	btfsc	4037,2,c	;volatile
  7721  002500  D7FE               	goto	l317
  7722  002502                     l3557:
  7723  002502  0EFE               	movlw	254
  7724  002504  0012               	return	
  7725  002506  D00E               	goto	l3569
  7726  002508                     l290:
  7727  002508  84C5               	bsf	4037,2,c	;volatile
  7728  00250A  D000               	goto	l321
  7729  00250C                     l321:
  7730  00250C  B4C5               	btfsc	4037,2,c	;volatile
  7731  00250E  D7FE               	goto	l321
  7732  002510  D7F8               	goto	l3557
  7733  002512  0012               	return	
  7734  002514  D007               	goto	l3569
  7735  002516                     l285:
  7736  002516  84C5               	bsf	4037,2,c	;volatile
  7737  002518  D000               	goto	l325
  7738  00251A                     l325:
  7739  00251A  B4C5               	btfsc	4037,2,c	;volatile
  7740  00251C  D7FE               	goto	l325
  7741  00251E  D7F1               	goto	l3557
  7742  002520  0012               	return	
  7743  002522  D000               	goto	l3569
  7744  002524                     l3569:
  7745  002524  0E00               	movlw	0
  7746  002526  0012               	return	
  7747  002528  0012               	return		;funcret
  7748  00252A                     __end_of_EESequentialRead:
  7749                           	opt stack 0
  7750                           tblptru	equ	0xFF8
  7751                           tblptrh	equ	0xFF7
  7752                           tblptrl	equ	0xFF6
  7753                           tablat	equ	0xFF5
  7754                           prodh	equ	0xFF4
  7755                           prodl	equ	0xFF3
  7756                           postinc0	equ	0xFEE
  7757                           wreg	equ	0xFE8
  7758                           indf2	equ	0xFDF
  7759                           postinc2	equ	0xFDE
  7760                           postdec2	equ	0xFDD
  7761                           fsr2h	equ	0xFDA
  7762                           fsr2l	equ	0xFD9
  7763                           status	equ	0xFD8
  7764                           
  7765 ;; *************** function _getsI2C *****************
  7766 ;; Defined at:
  7767 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_gets.c"
  7768 ;; Parameters:    Size  Location     Type
  7769 ;;  rdptr           2   31[COMRAM] PTR unsigned char 
  7770 ;;		 -> Accel_ReadRegister@out(1), Accel_Get@raw(6), 
  7771 ;;  length          1   33[COMRAM] unsigned char 
  7772 ;; Auto vars:     Size  Location     Type
  7773 ;;		None
  7774 ;; Return value:  Size  Location     Type
  7775 ;;                  1    wreg      char 
  7776 ;; Registers used:
  7777 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7778 ;; Tracked objects:
  7779 ;;		On entry : 0/0
  7780 ;;		On exit  : 0/0
  7781 ;;		Unchanged: 0/0
  7782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7783 ;;      Params:         3       0       0       0       0       0       0
  7784 ;;      Locals:         0       0       0       0       0       0       0
  7785 ;;      Temps:          0       0       0       0       0       0       0
  7786 ;;      Totals:         3       0       0       0       0       0       0
  7787 ;;Total ram usage:        3 bytes
  7788 ;; Hardware stack levels used:    1
  7789 ;; Hardware stack levels required when called:    3
  7790 ;; This function calls:
  7791 ;;		_ReadI2C
  7792 ;; This function is called by:
  7793 ;;		_EESequentialRead
  7794 ;; This function uses a non-reentrant model
  7795 ;;
  7796                           
  7797                           	psect	text42
  7798  002B62                     __ptext42:
  7799                           	opt stack 0
  7800  002B62                     _getsI2C:
  7801                           	opt stack 23
  7802                           
  7803                           ;incstack = 0
  7804  002B62  D024               	goto	l3379
  7805  002B64                     l3363:
  7806  002B64  EC37  F017         	call	_ReadI2C	;wreg free
  7807  002B68  C020  FFD9         	movff	getsI2C@rdptr,fsr2l
  7808  002B6C  C021  FFDA         	movff	getsI2C@rdptr+1,fsr2h
  7809  002B70  6EDF               	movwf	indf2,c
  7810  002B72  4A20               	infsnz	getsI2C@rdptr,f,c
  7811  002B74  2A21               	incf	getsI2C@rdptr+1,f,c
  7812  002B76  D000               	goto	l340
  7813  002B78                     l340:
  7814  002B78  B6C5               	btfsc	4037,3,c	;volatile
  7815  002B7A  D7FE               	goto	l340
  7816  002B7C  A6A1               	btfss	4001,3,c	;volatile
  7817  002B7E  D002               	goto	l3371
  7818  002B80  0EFF               	movlw	255
  7819  002B82  0012               	return	
  7820  002B84                     l3371:
  7821  002B84  50C6               	movf	4038,w,c	;volatile
  7822  002B86  0B0F               	andlw	15
  7823  002B88  0A08               	xorlw	8
  7824  002B8A  B4D8               	btfsc	status,2,c
  7825  002B8C  D005               	goto	l3375
  7826  002B8E  50C6               	movf	4038,w,c	;volatile
  7827  002B90  0B0F               	andlw	15
  7828  002B92  0A0B               	xorlw	11
  7829  002B94  A4D8               	btfss	status,2,c
  7830  002B96  D00A               	goto	l3379
  7831  002B98                     l3375:
  7832  002B98  5022               	movf	getsI2C@length,w,c
  7833  002B9A  B4D8               	btfsc	status,2,c
  7834  002B9C  D007               	goto	l3379
  7835  002B9E  9AC5               	bcf	4037,5,c	;volatile
  7836  002BA0  88C5               	bsf	4037,4,c	;volatile
  7837  002BA2  D000               	goto	l349
  7838  002BA4                     l349:
  7839  002BA4  A8C5               	btfss	4037,4,c	;volatile
  7840  002BA6  D002               	goto	l3379
  7841  002BA8  D7FD               	goto	l349
  7842  002BAA  D000               	goto	l3379
  7843  002BAC                     l3379:
  7844  002BAC  0622               	decf	getsI2C@length,f,c
  7845  002BAE  2822               	incf	getsI2C@length,w,c
  7846  002BB0  A4D8               	btfss	status,2,c
  7847  002BB2  D7D8               	goto	l3363
  7848  002BB4  0E00               	movlw	0
  7849  002BB6  0012               	return	
  7850  002BB8  0012               	return		;funcret
  7851  002BBA                     __end_of_getsI2C:
  7852                           	opt stack 0
  7853                           tblptru	equ	0xFF8
  7854                           tblptrh	equ	0xFF7
  7855                           tblptrl	equ	0xFF6
  7856                           tablat	equ	0xFF5
  7857                           prodh	equ	0xFF4
  7858                           prodl	equ	0xFF3
  7859                           postinc0	equ	0xFEE
  7860                           wreg	equ	0xFE8
  7861                           indf2	equ	0xFDF
  7862                           postinc2	equ	0xFDE
  7863                           postdec2	equ	0xFDD
  7864                           fsr2h	equ	0xFDA
  7865                           fsr2l	equ	0xFD9
  7866                           status	equ	0xFD8
  7867                           
  7868 ;; *************** function _ReadI2C *****************
  7869 ;; Defined at:
  7870 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_read.c"
  7871 ;; Parameters:    Size  Location     Type
  7872 ;;		None
  7873 ;; Auto vars:     Size  Location     Type
  7874 ;;		None
  7875 ;; Return value:  Size  Location     Type
  7876 ;;                  1    wreg      unsigned char 
  7877 ;; Registers used:
  7878 ;;		wreg, status,2, status,0
  7879 ;; Tracked objects:
  7880 ;;		On entry : 0/0
  7881 ;;		On exit  : 0/0
  7882 ;;		Unchanged: 0/0
  7883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7884 ;;      Params:         0       0       0       0       0       0       0
  7885 ;;      Locals:         0       0       0       0       0       0       0
  7886 ;;      Temps:          0       0       0       0       0       0       0
  7887 ;;      Totals:         0       0       0       0       0       0       0
  7888 ;;Total ram usage:        0 bytes
  7889 ;; Hardware stack levels used:    1
  7890 ;; Hardware stack levels required when called:    2
  7891 ;; This function calls:
  7892 ;;		Nothing
  7893 ;; This function is called by:
  7894 ;;		_getsI2C
  7895 ;; This function uses a non-reentrant model
  7896 ;;
  7897                           
  7898                           	psect	text43
  7899  002E6E                     __ptext43:
  7900                           	opt stack 0
  7901  002E6E                     _ReadI2C:
  7902                           	opt stack 23
  7903                           
  7904                           ;incstack = 0
  7905  002E6E  50C6               	movf	4038,w,c	;volatile
  7906  002E70  0B0F               	andlw	15
  7907  002E72  0A08               	xorlw	8
  7908  002E74  B4D8               	btfsc	status,2,c
  7909  002E76  D005               	goto	l386
  7910  002E78  50C6               	movf	4038,w,c	;volatile
  7911  002E7A  0B0F               	andlw	15
  7912  002E7C  0A0B               	xorlw	11
  7913  002E7E  A4D8               	btfss	status,2,c
  7914  002E80  D002               	goto	l387
  7915  002E82                     l386:
  7916  002E82  86C5               	bsf	4037,3,c	;volatile
  7917  002E84  D000               	goto	l387
  7918  002E86                     l387:
  7919  002E86  A0C7               	btfss	4039,0,c	;volatile
  7920  002E88  D7FE               	goto	l387
  7921  002E8A  50C9               	movf	4041,w,c	;volatile
  7922  002E8C  0012               	return	
  7923  002E8E  0012               	return		;funcret
  7924  002E90                     __end_of_ReadI2C:
  7925                           	opt stack 0
  7926                           tblptru	equ	0xFF8
  7927                           tblptrh	equ	0xFF7
  7928                           tblptrl	equ	0xFF6
  7929                           tablat	equ	0xFF5
  7930                           prodh	equ	0xFF4
  7931                           prodl	equ	0xFF3
  7932                           postinc0	equ	0xFEE
  7933                           wreg	equ	0xFE8
  7934                           indf2	equ	0xFDF
  7935                           postinc2	equ	0xFDE
  7936                           postdec2	equ	0xFDD
  7937                           fsr2h	equ	0xFDA
  7938                           fsr2l	equ	0xFD9
  7939                           status	equ	0xFD8
  7940                           
  7941 ;; *************** function _WriteI2C *****************
  7942 ;; Defined at:
  7943 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_writ.c"
  7944 ;; Parameters:    Size  Location     Type
  7945 ;;  data_out        1    wreg     unsigned char 
  7946 ;; Auto vars:     Size  Location     Type
  7947 ;;  data_out        1   32[COMRAM] unsigned char 
  7948 ;; Return value:  Size  Location     Type
  7949 ;;                  1    wreg      char 
  7950 ;; Registers used:
  7951 ;;		wreg, status,2, status,0, cstack
  7952 ;; Tracked objects:
  7953 ;;		On entry : 0/0
  7954 ;;		On exit  : 0/0
  7955 ;;		Unchanged: 0/0
  7956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7957 ;;      Params:         0       0       0       0       0       0       0
  7958 ;;      Locals:         1       0       0       0       0       0       0
  7959 ;;      Temps:          0       0       0       0       0       0       0
  7960 ;;      Totals:         1       0       0       0       0       0       0
  7961 ;;Total ram usage:        1 bytes
  7962 ;; Hardware stack levels used:    1
  7963 ;; Hardware stack levels required when called:    3
  7964 ;; This function calls:
  7965 ;;		_IdleI2C
  7966 ;; This function is called by:
  7967 ;;		_EEAckPolling
  7968 ;;		_EEByteWrite
  7969 ;;		_EESequentialRead
  7970 ;; This function uses a non-reentrant model
  7971 ;;
  7972                           
  7973                           	psect	text44
  7974  002A9E                     __ptext44:
  7975                           	opt stack 0
  7976  002A9E                     _WriteI2C:
  7977                           	opt stack 23
  7978                           
  7979                           ;incstack = 0
  7980                           ;WriteI2C@data_out stored from wreg
  7981  002A9E  6E21               	movwf	WriteI2C@data_out,c
  7982  002AA0  C021  FFC9         	movff	WriteI2C@data_out,4041	;volatile
  7983  002AA4  AEC6               	btfss	4038,7,c	;volatile
  7984  002AA6  D002               	goto	l3325
  7985  002AA8  0EFF               	movlw	255
  7986  002AAA  0012               	return	
  7987  002AAC                     l3325:
  7988  002AAC  50C6               	movf	4038,w,c	;volatile
  7989  002AAE  0B0F               	andlw	15
  7990  002AB0  0A08               	xorlw	8
  7991  002AB2  B4D8               	btfsc	status,2,c
  7992  002AB4  D010               	goto	l3343
  7993  002AB6  50C6               	movf	4038,w,c	;volatile
  7994  002AB8  0B0F               	andlw	15
  7995  002ABA  0A0B               	xorlw	11
  7996  002ABC  B4D8               	btfsc	status,2,c
  7997  002ABE  D00B               	goto	l3343
  7998  002AC0  88C6               	bsf	4038,4,c	;volatile
  7999  002AC2  D000               	goto	l411
  8000  002AC4                     l411:
  8001  002AC4  A69E               	btfss	3998,3,c	;volatile
  8002  002AC6  D7FE               	goto	l411
  8003  002AC8  A4C7               	btfss	4039,2,c	;volatile
  8004  002ACA  B0C7               	btfsc	4039,0,c	;volatile
  8005  002ACC  D002               	goto	l3339
  8006  002ACE  0EFE               	movlw	254
  8007  002AD0  0012               	return	
  8008  002AD2                     l3339:
  8009  002AD2  0E00               	movlw	0
  8010  002AD4  0012               	return	
  8011  002AD6                     l3343:
  8012  002AD6  50C6               	movf	4038,w,c	;volatile
  8013  002AD8  0B0F               	andlw	15
  8014  002ADA  0A08               	xorlw	8
  8015  002ADC  B4D8               	btfsc	status,2,c
  8016  002ADE  D006               	goto	l420
  8017  002AE0  50C6               	movf	4038,w,c	;volatile
  8018  002AE2  0B0F               	andlw	15
  8019  002AE4  0A0B               	xorlw	11
  8020  002AE6  A4D8               	btfss	status,2,c
  8021  002AE8  0012               	return	
  8022  002AEA  D000               	goto	l420
  8023  002AEC                     l420:
  8024  002AEC  B0C7               	btfsc	4039,0,c	;volatile
  8025  002AEE  D7FE               	goto	l420
  8026  002AF0  EC7D  F017         	call	_IdleI2C	;wreg free
  8027  002AF4  ACC5               	btfss	4037,6,c	;volatile
  8028  002AF6  D002               	goto	l3357
  8029  002AF8  0EFE               	movlw	254
  8030  002AFA  0012               	return	
  8031  002AFC                     l3357:
  8032  002AFC  0E00               	movlw	0
  8033  002AFE  0012               	return	
  8034  002B00  0012               	return		;funcret
  8035  002B02                     __end_of_WriteI2C:
  8036                           	opt stack 0
  8037                           tblptru	equ	0xFF8
  8038                           tblptrh	equ	0xFF7
  8039                           tblptrl	equ	0xFF6
  8040                           tablat	equ	0xFF5
  8041                           prodh	equ	0xFF4
  8042                           prodl	equ	0xFF3
  8043                           postinc0	equ	0xFEE
  8044                           wreg	equ	0xFE8
  8045                           indf2	equ	0xFDF
  8046                           postinc2	equ	0xFDE
  8047                           postdec2	equ	0xFDD
  8048                           fsr2h	equ	0xFDA
  8049                           fsr2l	equ	0xFD9
  8050                           status	equ	0xFD8
  8051                           
  8052 ;; *************** function _IdleI2C *****************
  8053 ;; Defined at:
  8054 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_idle.c"
  8055 ;; Parameters:    Size  Location     Type
  8056 ;;		None
  8057 ;; Auto vars:     Size  Location     Type
  8058 ;;		None
  8059 ;; Return value:  Size  Location     Type
  8060 ;;		None               void
  8061 ;; Registers used:
  8062 ;;		wreg, status,2, status,0
  8063 ;; Tracked objects:
  8064 ;;		On entry : 0/0
  8065 ;;		On exit  : 0/0
  8066 ;;		Unchanged: 0/0
  8067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8068 ;;      Params:         0       0       0       0       0       0       0
  8069 ;;      Locals:         0       0       0       0       0       0       0
  8070 ;;      Temps:          1       0       0       0       0       0       0
  8071 ;;      Totals:         1       0       0       0       0       0       0
  8072 ;;Total ram usage:        1 bytes
  8073 ;; Hardware stack levels used:    1
  8074 ;; Hardware stack levels required when called:    2
  8075 ;; This function calls:
  8076 ;;		Nothing
  8077 ;; This function is called by:
  8078 ;;		_EEAckPolling
  8079 ;;		_EEByteWrite
  8080 ;;		_EESequentialRead
  8081 ;;		_WriteI2C
  8082 ;; This function uses a non-reentrant model
  8083 ;;
  8084                           
  8085                           	psect	text45
  8086  002EFA                     __ptext45:
  8087                           	opt stack 0
  8088  002EFA                     _IdleI2C:
  8089                           	opt stack 23
  8090                           
  8091                           ;incstack = 0
  8092  002EFA  D000               	goto	l3269
  8093  002EFC                     l3269:
  8094  002EFC  CFC5 F020          	movff	4037,??_IdleI2C	;volatile
  8095  002F00  0E1F               	movlw	31
  8096  002F02  1620               	andwf	??_IdleI2C,f,c
  8097  002F04  B4D8               	btfsc	status,2,c
  8098  002F06  B4C7               	btfsc	4039,2,c	;volatile
  8099  002F08  D7F9               	goto	l3269
  8100  002F0A  0012               	return		;funcret
  8101  002F0C                     __end_of_IdleI2C:
  8102                           	opt stack 0
  8103                           tblptru	equ	0xFF8
  8104                           tblptrh	equ	0xFF7
  8105                           tblptrl	equ	0xFF6
  8106                           tablat	equ	0xFF5
  8107                           prodh	equ	0xFF4
  8108                           prodl	equ	0xFF3
  8109                           postinc0	equ	0xFEE
  8110                           wreg	equ	0xFE8
  8111                           indf2	equ	0xFDF
  8112                           postinc2	equ	0xFDE
  8113                           postdec2	equ	0xFDD
  8114                           fsr2h	equ	0xFDA
  8115                           fsr2l	equ	0xFD9
  8116                           status	equ	0xFD8
  8117                           
  8118 ;; *************** function _System_LowPriorityInterrupt *****************
  8119 ;; Defined at:
  8120 ;;		line 8 in file "system.c"
  8121 ;; Parameters:    Size  Location     Type
  8122 ;;		None
  8123 ;; Auto vars:     Size  Location     Type
  8124 ;;		None
  8125 ;; Return value:  Size  Location     Type
  8126 ;;		None               void
  8127 ;; Registers used:
  8128 ;;		None
  8129 ;; Tracked objects:
  8130 ;;		On entry : 0/0
  8131 ;;		On exit  : 0/0
  8132 ;;		Unchanged: 0/0
  8133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8134 ;;      Params:         0       0       0       0       0       0       0
  8135 ;;      Locals:         0       0       0       0       0       0       0
  8136 ;;      Temps:         17       0       0       0       0       0       0
  8137 ;;      Totals:        17       0       0       0       0       0       0
  8138 ;;Total ram usage:       17 bytes
  8139 ;; Hardware stack levels used:    1
  8140 ;; Hardware stack levels required when called:    1
  8141 ;; This function calls:
  8142 ;;		Nothing
  8143 ;; This function is called by:
  8144 ;;		Interrupt level 1
  8145 ;; This function uses a non-reentrant model
  8146 ;;
  8147                           
  8148                           	psect	intcodelo
  8149  000018                     __pintcodelo:
  8150                           	opt stack 0
  8151  000018                     _System_LowPriorityInterrupt:
  8152                           	opt stack 22
  8153                           
  8154                           ;incstack = 0
  8155  000018  CFD8 F001          	movff	status,??_System_LowPriorityInterrupt
  8156  00001C  CFE8 F002          	movff	wreg,??_System_LowPriorityInterrupt+1
  8157  000020  CFE0 F003          	movff	bsr,??_System_LowPriorityInterrupt+2
  8158  000024  CFFA F004          	movff	pclath,??_System_LowPriorityInterrupt+3
  8159  000028  CFFB F005          	movff	pclatu,??_System_LowPriorityInterrupt+4
  8160  00002C  CFE9 F006          	movff	fsr0l,??_System_LowPriorityInterrupt+5
  8161  000030  CFEA F007          	movff	fsr0h,??_System_LowPriorityInterrupt+6
  8162  000034  CFE1 F008          	movff	fsr1l,??_System_LowPriorityInterrupt+7
  8163  000038  CFE2 F009          	movff	fsr1h,??_System_LowPriorityInterrupt+8
  8164  00003C  CFD9 F00A          	movff	fsr2l,??_System_LowPriorityInterrupt+9
  8165  000040  CFDA F00B          	movff	fsr2h,??_System_LowPriorityInterrupt+10
  8166  000044  CFF3 F00C          	movff	prodl,??_System_LowPriorityInterrupt+11
  8167  000048  CFF4 F00D          	movff	prodh,??_System_LowPriorityInterrupt+12
  8168  00004C  CFF6 F00E          	movff	tblptrl,??_System_LowPriorityInterrupt+13
  8169  000050  CFF7 F00F          	movff	tblptrh,??_System_LowPriorityInterrupt+14
  8170  000054  CFF8 F010          	movff	tblptru,??_System_LowPriorityInterrupt+15
  8171  000058  CFF5 F011          	movff	tablat,??_System_LowPriorityInterrupt+16
  8172  00005C  C011  FFF5         	movff	??_System_LowPriorityInterrupt+16,tablat
  8173  000060  C010  FFF8         	movff	??_System_LowPriorityInterrupt+15,tblptru
  8174  000064  C00F  FFF7         	movff	??_System_LowPriorityInterrupt+14,tblptrh
  8175  000068  C00E  FFF6         	movff	??_System_LowPriorityInterrupt+13,tblptrl
  8176  00006C  C00D  FFF4         	movff	??_System_LowPriorityInterrupt+12,prodh
  8177  000070  C00C  FFF3         	movff	??_System_LowPriorityInterrupt+11,prodl
  8178  000074  C00B  FFDA         	movff	??_System_LowPriorityInterrupt+10,fsr2h
  8179  000078  C00A  FFD9         	movff	??_System_LowPriorityInterrupt+9,fsr2l
  8180  00007C  C009  FFE2         	movff	??_System_LowPriorityInterrupt+8,fsr1h
  8181  000080  C008  FFE1         	movff	??_System_LowPriorityInterrupt+7,fsr1l
  8182  000084  C007  FFEA         	movff	??_System_LowPriorityInterrupt+6,fsr0h
  8183  000088  C006  FFE9         	movff	??_System_LowPriorityInterrupt+5,fsr0l
  8184  00008C  C005  FFFB         	movff	??_System_LowPriorityInterrupt+4,pclatu
  8185  000090  C004  FFFA         	movff	??_System_LowPriorityInterrupt+3,pclath
  8186  000094  C003  FFE0         	movff	??_System_LowPriorityInterrupt+2,bsr
  8187  000098  C002  FFE8         	movff	??_System_LowPriorityInterrupt+1,wreg
  8188  00009C  C001  FFD8         	movff	??_System_LowPriorityInterrupt,status
  8189  0000A0  0010               	retfie	
  8190  0000A2                     __end_of_System_LowPriorityInterrupt:
  8191                           	opt stack 0
  8192                           pclatu	equ	0xFFB
  8193                           pclath	equ	0xFFA
  8194                           tblptru	equ	0xFF8
  8195                           tblptrh	equ	0xFF7
  8196                           tblptrl	equ	0xFF6
  8197                           tablat	equ	0xFF5
  8198                           prodh	equ	0xFF4
  8199                           prodl	equ	0xFF3
  8200                           postinc0	equ	0xFEE
  8201                           fsr0h	equ	0xFEA
  8202                           fsr0l	equ	0xFE9
  8203                           wreg	equ	0xFE8
  8204                           fsr1h	equ	0xFE2
  8205                           fsr1l	equ	0xFE1
  8206                           bsr	equ	0xFE0
  8207                           indf2	equ	0xFDF
  8208                           postinc2	equ	0xFDE
  8209                           postdec2	equ	0xFDD
  8210                           fsr2h	equ	0xFDA
  8211                           fsr2l	equ	0xFD9
  8212                           status	equ	0xFD8
  8213                           
  8214 ;; *************** function _System_HighPriorityInterrupt *****************
  8215 ;; Defined at:
  8216 ;;		line 3 in file "system.c"
  8217 ;; Parameters:    Size  Location     Type
  8218 ;;		None
  8219 ;; Auto vars:     Size  Location     Type
  8220 ;;		None
  8221 ;; Return value:  Size  Location     Type
  8222 ;;		None               void
  8223 ;; Registers used:
  8224 ;;		None
  8225 ;; Tracked objects:
  8226 ;;		On entry : 0/0
  8227 ;;		On exit  : 0/0
  8228 ;;		Unchanged: 0/0
  8229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8230 ;;      Params:         0       0       0       0       0       0       0
  8231 ;;      Locals:         0       0       0       0       0       0       0
  8232 ;;      Temps:         14       0       0       0       0       0       0
  8233 ;;      Totals:        14       0       0       0       0       0       0
  8234 ;;Total ram usage:       14 bytes
  8235 ;; Hardware stack levels used:    1
  8236 ;; This function calls:
  8237 ;;		Nothing
  8238 ;; This function is called by:
  8239 ;;		Interrupt level 2
  8240 ;; This function uses a non-reentrant model
  8241 ;;
  8242                           
  8243                           	psect	intcode
  8244  000008                     __pintcode:
  8245                           	opt stack 0
  8246  000008                     _System_HighPriorityInterrupt:
  8247                           	opt stack 22
  8248                           
  8249                           ;incstack = 0
  8250  000008  CFFA F012          	movff	pclath,??_System_HighPriorityInterrupt
  8251  00000C  CFFB F013          	movff	pclatu,??_System_HighPriorityInterrupt+1
  8252  000010  CFE9 F014          	movff	fsr0l,??_System_HighPriorityInterrupt+2
  8253  000014  EF1C  F015         	goto	int_func
  8254                           pclatu	equ	0xFFB
  8255                           pclath	equ	0xFFA
  8256                           tblptru	equ	0xFF8
  8257                           tblptrh	equ	0xFF7
  8258                           tblptrl	equ	0xFF6
  8259                           tablat	equ	0xFF5
  8260                           prodh	equ	0xFF4
  8261                           prodl	equ	0xFF3
  8262                           postinc0	equ	0xFEE
  8263                           fsr0h	equ	0xFEA
  8264                           fsr0l	equ	0xFE9
  8265                           wreg	equ	0xFE8
  8266                           fsr1h	equ	0xFE2
  8267                           fsr1l	equ	0xFE1
  8268                           bsr	equ	0xFE0
  8269                           indf2	equ	0xFDF
  8270                           postinc2	equ	0xFDE
  8271                           postdec2	equ	0xFDD
  8272                           fsr2h	equ	0xFDA
  8273                           fsr2l	equ	0xFD9
  8274                           status	equ	0xFD8
  8275                           
  8276                           	psect	intcode_body
  8277  002A38                     __pintcode_body:
  8278                           	opt stack 22
  8279  002A38                     int_func:
  8280                           	opt stack 22
  8281  002A38  CFEA F015          	movff	fsr0h,??_System_HighPriorityInterrupt+3
  8282  002A3C  CFE1 F016          	movff	fsr1l,??_System_HighPriorityInterrupt+4
  8283  002A40  CFE2 F017          	movff	fsr1h,??_System_HighPriorityInterrupt+5
  8284  002A44  CFD9 F018          	movff	fsr2l,??_System_HighPriorityInterrupt+6
  8285  002A48  CFDA F019          	movff	fsr2h,??_System_HighPriorityInterrupt+7
  8286  002A4C  CFF3 F01A          	movff	prodl,??_System_HighPriorityInterrupt+8
  8287  002A50  CFF4 F01B          	movff	prodh,??_System_HighPriorityInterrupt+9
  8288  002A54  CFF6 F01C          	movff	tblptrl,??_System_HighPriorityInterrupt+10
  8289  002A58  CFF7 F01D          	movff	tblptrh,??_System_HighPriorityInterrupt+11
  8290  002A5C  CFF8 F01E          	movff	tblptru,??_System_HighPriorityInterrupt+12
  8291  002A60  CFF5 F01F          	movff	tablat,??_System_HighPriorityInterrupt+13
  8292  002A64  C01F  FFF5         	movff	??_System_HighPriorityInterrupt+13,tablat
  8293  002A68  C01E  FFF8         	movff	??_System_HighPriorityInterrupt+12,tblptru
  8294  002A6C  C01D  FFF7         	movff	??_System_HighPriorityInterrupt+11,tblptrh
  8295  002A70  C01C  FFF6         	movff	??_System_HighPriorityInterrupt+10,tblptrl
  8296  002A74  C01B  FFF4         	movff	??_System_HighPriorityInterrupt+9,prodh
  8297  002A78  C01A  FFF3         	movff	??_System_HighPriorityInterrupt+8,prodl
  8298  002A7C  C019  FFDA         	movff	??_System_HighPriorityInterrupt+7,fsr2h
  8299  002A80  C018  FFD9         	movff	??_System_HighPriorityInterrupt+6,fsr2l
  8300  002A84  C017  FFE2         	movff	??_System_HighPriorityInterrupt+5,fsr1h
  8301  002A88  C016  FFE1         	movff	??_System_HighPriorityInterrupt+4,fsr1l
  8302  002A8C  C015  FFEA         	movff	??_System_HighPriorityInterrupt+3,fsr0h
  8303  002A90  C014  FFE9         	movff	??_System_HighPriorityInterrupt+2,fsr0l
  8304  002A94  C013  FFFB         	movff	??_System_HighPriorityInterrupt+1,pclatu
  8305  002A98  C012  FFFA         	movff	??_System_HighPriorityInterrupt,pclath
  8306  002A9C  0011               	retfie		f
  8307  002A9E                     __end_of_System_HighPriorityInterrupt:
  8308                           	opt stack 0
  8309                           pclatu	equ	0xFFB
  8310                           pclath	equ	0xFFA
  8311                           tblptru	equ	0xFF8
  8312                           tblptrh	equ	0xFF7
  8313                           tblptrl	equ	0xFF6
  8314                           tablat	equ	0xFF5
  8315                           prodh	equ	0xFF4
  8316                           prodl	equ	0xFF3
  8317                           postinc0	equ	0xFEE
  8318                           fsr0h	equ	0xFEA
  8319                           fsr0l	equ	0xFE9
  8320                           wreg	equ	0xFE8
  8321                           fsr1h	equ	0xFE2
  8322                           fsr1l	equ	0xFE1
  8323                           bsr	equ	0xFE0
  8324                           indf2	equ	0xFDF
  8325                           postinc2	equ	0xFDE
  8326                           postdec2	equ	0xFDD
  8327                           fsr2h	equ	0xFDA
  8328                           fsr2l	equ	0xFD9
  8329                           status	equ	0xFD8
  8330                           pclatu	equ	0xFFB
  8331                           pclath	equ	0xFFA
  8332                           tblptru	equ	0xFF8
  8333                           tblptrh	equ	0xFF7
  8334                           tblptrl	equ	0xFF6
  8335                           tablat	equ	0xFF5
  8336                           prodh	equ	0xFF4
  8337                           prodl	equ	0xFF3
  8338                           postinc0	equ	0xFEE
  8339                           fsr0h	equ	0xFEA
  8340                           fsr0l	equ	0xFE9
  8341                           wreg	equ	0xFE8
  8342                           fsr1h	equ	0xFE2
  8343                           fsr1l	equ	0xFE1
  8344                           bsr	equ	0xFE0
  8345                           indf2	equ	0xFDF
  8346                           postinc2	equ	0xFDE
  8347                           postdec2	equ	0xFDD
  8348                           fsr2h	equ	0xFDA
  8349                           fsr2l	equ	0xFD9
  8350                           status	equ	0xFD8
  8351                           
  8352                           	psect	rparam
  8353  0000                     pclatu	equ	0xFFB
  8354                           pclath	equ	0xFFA
  8355                           tblptru	equ	0xFF8
  8356                           tblptrh	equ	0xFF7
  8357                           tblptrl	equ	0xFF6
  8358                           tablat	equ	0xFF5
  8359                           prodh	equ	0xFF4
  8360                           prodl	equ	0xFF3
  8361                           postinc0	equ	0xFEE
  8362                           fsr0h	equ	0xFEA
  8363                           fsr0l	equ	0xFE9
  8364                           wreg	equ	0xFE8
  8365                           fsr1h	equ	0xFE2
  8366                           fsr1l	equ	0xFE1
  8367                           bsr	equ	0xFE0
  8368                           indf2	equ	0xFDF
  8369                           postinc2	equ	0xFDE
  8370                           postdec2	equ	0xFDD
  8371                           fsr2h	equ	0xFDA
  8372                           fsr2l	equ	0xFD9
  8373                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    120
    Data        0
    BSS         66
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     44      64
    BANK0           160    128     154
    BANK1           256     68      88
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), atan@coeff_a(CODE[24]), atan@coeff_b(CODE[20]), 

    getsI2C@rdptr	PTR unsigned char  size(2) Largest target is 6
		 -> Accel_ReadRegister@out(BANK0[1]), Accel_Get@raw(BANK0[6]), 

    EESequentialRead@rdptr	PTR unsigned char  size(2) Largest target is 6
		 -> Accel_ReadRegister@out(BANK0[1]), Accel_Get@raw(BANK0[6]), 

    Accel_ReadRegisters@out	PTR unsigned char  size(2) Largest target is 6
		 -> Accel_ReadRegister@out(BANK0[1]), Accel_Get@raw(BANK0[6]), 

    Accel_Get@out	PTR struct . size(2) Largest target is 12
		 -> Gyros_Update@a(BANK1[12]), 

    Accel_Get@f_out	PTR float  size(2) Largest target is 12
		 -> Gyros_Update@a(BANK1[12]), 


Critical Paths under _main in COMRAM

    _System_Init->_OpenUSART
    _Gyros_Update->___fladd
    _pow->___flge
    _log->___fladd
    _exp->___flge
    _floor->___fladd
    _floor->___flge
    ___altofl->___flpack
    ___altofl->___fltol
    ___lltofl->___flpack
    _acos->___fladd
    _asin->___fladd
    _asin->___flge
    _sqrt->___flge
    ___flsub->___fladd
    _atan->___fladd
    _atan->___flge
    _fabs->___flneg
    _eval_poly->___fladd
    ___flmul->___fladd
    ___fladd->___awtofl
    ___flge->_fabs
    _Accel_Get->_Accel_ReadRegisters
    ___fldiv->___fladd
    ___awtofl->___flpack
    _Accel_Init->_Accel_Active
    _Accel_Init->_Accel_StandBy
    _Accel_WriteRegister->_EEByteWrite
    _EEByteWrite->_WriteI2C
    _EEAckPolling->_WriteI2C
    _Accel_ReadRegister->_Accel_ReadRegisters
    _Accel_ReadRegisters->_EESequentialRead
    _EESequentialRead->_getsI2C
    _WriteI2C->_IdleI2C

Critical Paths under _System_HighPriorityInterrupt in COMRAM

    None.

Critical Paths under _System_LowPriorityInterrupt in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_Gyros_Update
    _Gyros_Update->_acos
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___fladd
    _acos->_asin
    _asin->_sqrt
    _sqrt->_pow
    ___flsub->___fladd
    _atan->_eval_poly
    _eval_poly->___flmul
    ___flmul->___fladd
    ___fladd->___awtofl
    _Accel_Get->___fldiv
    ___fldiv->___flmul
    _Accel_Init->_Accel_ReadRegister
    _Accel_StandBy->_Accel_ReadRegister
    _Accel_Active->_Accel_ReadRegister
    _Accel_ReadRegister->_Accel_ReadRegisters

Critical Paths under _System_HighPriorityInterrupt in BANK0

    None.

Critical Paths under _System_LowPriorityInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Gyros_Update
    _acos->_asin

Critical Paths under _System_HighPriorityInterrupt in BANK1

    None.

Critical Paths under _System_LowPriorityInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _System_HighPriorityInterrupt in BANK2

    None.

Critical Paths under _System_LowPriorityInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _System_HighPriorityInterrupt in BANK3

    None.

Critical Paths under _System_LowPriorityInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _System_HighPriorityInterrupt in BANK4

    None.

Critical Paths under _System_LowPriorityInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _System_HighPriorityInterrupt in BANK5

    None.

Critical Paths under _System_LowPriorityInterrupt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  265621
                                            127 BANK0      1     1      0
                         _Accel_Init
                         _Gyros_Init
                       _Gyros_Update
                        _System_Init
 ---------------------------------------------------------------------------------
 (1) _System_Init                                          0     0      0     407
                           _CloseI2C
                            _OpenI2C
                          _OpenUSART
                          _baudUSART
 ---------------------------------------------------------------------------------
 (2) _baudUSART                                            1     1      0      15
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     284
                                             31 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _OpenI2C                                              2     1      1     108
                                             31 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _CloseI2C                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Gyros_Update                                        56    52      4  259326
                                            123 BANK0      4     0      4
                                             24 BANK1     44    44      0
                          _Accel_Get
                            ___fladd
                            ___fldiv
                            ___flmul
                               _acos
                               _atan
                                _pow
                               _sqrt
 ---------------------------------------------------------------------------------
 (2) _pow                                                 21    13      8   95561
                                             65 BANK0     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___lltofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  6     2      4   30982
                                             46 BANK0      6     2      4
                           ___awtofl
                            ___fladd
                            ___flmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                 11     7      4   51842
                                             54 BANK0     11     7      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                8     2      6     513
                                             46 BANK0      8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                               10     6      4   12415
                                             15 BANK0     10     6      4
                           ___altofl
                            ___fladd
                             ___flge
                            ___fltol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                8     2      6     630
                                             31 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) ___fltol                                             10     6      4     421
                                             31 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (5) ___altofl                                             5     1      4    2794
                                             41 COMRAM     1     1      0
                                              0 BANK0      4     0      4
                           ___flpack
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lltofl                                             4     0      4    2692
                                              0 BANK0      4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) _acos                                                 8     4      4   82471
                                            115 BANK0      8     4      4
                            ___fladd
                            ___flneg
                               _asin
                                _pow (ARG)
 ---------------------------------------------------------------------------------
 (3) _asin                                                40    36      4   74645
                                            111 BANK0      4     0      4
                                              0 BANK1     24    24      0
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                               _atan
                               _fabs
                               _sqrt
 ---------------------------------------------------------------------------------
 (2) _sqrt                                                25    21      4   15583
                                             86 BANK0     25    21      4
                            ___fldiv (ARG)
                             ___flge
                            ___flmul
                            ___flneg (ARG)
                            ___flsub
                                _pow (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    7213
                                             15 BANK0      8     0      8
                           ___awtofl (ARG)
                            ___fladd
 ---------------------------------------------------------------------------------
 (2) _atan                                                21    17      4   36512
                                             46 BANK0     21    17      4
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                          _eval_poly
                               _fabs
 ---------------------------------------------------------------------------------
 (3) _fabs                                                 4     0      4    1313
                                             35 COMRAM     4     0      4
                            ___flneg
 ---------------------------------------------------------------------------------
 (4) ___flneg                                              4     0      4     989
                                             31 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           16     8      8   14099
                                             30 BANK0     16     8      8
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             15     7      8    6226
                                             15 BANK0     15     7      8
                           ___awtofl (ARG)
                            ___fladd (ARG)
                            ___flneg (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             12     4      8    6695
                                             42 COMRAM     1     1      0
                                              4 BANK0     11     3      8
                           ___awtofl (ARG)
                            ___flneg (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8    1430
                                             39 COMRAM     4     4      0
                                              0 BANK0      8     0      8
                               _fabs (ARG)
 ---------------------------------------------------------------------------------
 (2) _Accel_Get                                           20    18      2    9974
                                             45 BANK0     20    18      2
                _Accel_ReadRegisters
                           ___awtofl
                            ___fldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     287
                                             31 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___fldiv                                             15     7      8    4963
                                             30 BANK0     15     7      8
                           ___awtofl (ARG)
                            ___fladd (ARG)
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (4) ___awtofl                                             9     5      4    2948
                                             41 COMRAM     1     1      0
                                              0 BANK0      4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (5) ___flpack                                            10     4      6    2584
                                             31 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (1) _Gyros_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Accel_Init                                           2     2      0    5888
                                              4 BANK0      2     2      0
                       _Accel_Active
                 _Accel_ReadRegister
                      _Accel_StandBy
                _Accel_WriteRegister
 ---------------------------------------------------------------------------------
 (2) _Accel_StandBy                                        1     1      0    1939
                                             43 COMRAM     1     1      0
                 _Accel_ReadRegister
                _Accel_WriteRegister
 ---------------------------------------------------------------------------------
 (2) _Accel_Active                                         1     1      0    1939
                                             43 COMRAM     1     1      0
                 _Accel_ReadRegister
                _Accel_WriteRegister
 ---------------------------------------------------------------------------------
 (2) _Accel_WriteRegister                                  3     2      1     698
                                             36 COMRAM     3     2      1
                       _EEAckPolling
                        _EEByteWrite
 ---------------------------------------------------------------------------------
 (3) _EEByteWrite                                          3     1      2     278
                                             33 COMRAM     3     1      2
                            _IdleI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (3) _EEAckPolling                                         1     1      0      93
                                             33 COMRAM     1     1      0
                            _IdleI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (3) _Accel_ReadRegister                                   2     2      0    1207
                                              2 BANK0      2     2      0
                _Accel_ReadRegisters
 ---------------------------------------------------------------------------------
 (3) _Accel_ReadRegisters                                  6     2      4    1105
                                             39 COMRAM     4     0      4
                                              0 BANK0      2     2      0
                   _EESequentialRead
 ---------------------------------------------------------------------------------
 (4) _EESequentialRead                                     5     1      4     667
                                             34 COMRAM     5     1      4
                            _IdleI2C
                           _WriteI2C
                            _getsI2C
 ---------------------------------------------------------------------------------
 (5) _getsI2C                                              3     0      3     250
                                             31 COMRAM     3     0      3
                            _ReadI2C
 ---------------------------------------------------------------------------------
 (6) _ReadI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _WriteI2C                                             1     1      0      31
                                             32 COMRAM     1     1      0
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (6) _IdleI2C                                              1     1      0       0
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _System_LowPriorityInterrupt                         17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _System_HighPriorityInterrupt                        14    14      0       0
                                             17 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Accel_Init
     _Accel_Active
       _Accel_ReadRegister
         _Accel_ReadRegisters
           _EESequentialRead
             _IdleI2C
             _WriteI2C
               _IdleI2C
             _getsI2C
               _ReadI2C
       _Accel_WriteRegister
         _EEAckPolling
           _IdleI2C
           _WriteI2C
             _IdleI2C
         _EEByteWrite
           _IdleI2C
           _WriteI2C
             _IdleI2C
     _Accel_ReadRegister
       _Accel_ReadRegisters
         _EESequentialRead
           _IdleI2C
           _WriteI2C
             _IdleI2C
           _getsI2C
             _ReadI2C
     _Accel_StandBy
       _Accel_ReadRegister
         _Accel_ReadRegisters
           _EESequentialRead
             _IdleI2C
             _WriteI2C
               _IdleI2C
             _getsI2C
               _ReadI2C
       _Accel_WriteRegister
         _EEAckPolling
           _IdleI2C
           _WriteI2C
             _IdleI2C
         _EEByteWrite
           _IdleI2C
           _WriteI2C
             _IdleI2C
     _Accel_WriteRegister
       _EEAckPolling
         _IdleI2C
         _WriteI2C
           _IdleI2C
       _EEByteWrite
         _IdleI2C
         _WriteI2C
           _IdleI2C
   _Gyros_Init
   _Gyros_Update
     _Accel_Get
       _Accel_ReadRegisters
         _EESequentialRead
           _IdleI2C
           _WriteI2C
             _IdleI2C
           _getsI2C
             _ReadI2C
       ___awtofl
         ___flpack
       ___fldiv
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg (ARG)
         ___flpack (ARG)
       ___wmul
     ___fladd
       ___awtofl (ARG)
         ___flpack
       ___flneg (ARG)
       ___flpack (ARG)
       _frexp (ARG)
     ___fldiv
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flneg (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg (ARG)
       ___flpack (ARG)
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flneg (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg (ARG)
       ___flpack (ARG)
       _frexp (ARG)
     _acos
       ___fladd
         ___awtofl (ARG)
           ___flpack
         ___flneg (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg
       _asin
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___fldiv
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
         ___flge
           _fabs (ARG)
             ___flneg
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         _atan
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___fldiv
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
           ___flge
             _fabs (ARG)
               ___flneg
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
           _fabs
             ___flneg
         _fabs
           ___flneg
         _sqrt
           ___fldiv (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
           ___flge (ARG)
             _fabs (ARG)
               ___flneg
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flsub (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
           _pow (ARG)
             ___flge
               _fabs (ARG)
                 ___flneg
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg
             ___fltol
             ___lltofl
               ___flpack
             _exp
               ___awtofl
                 ___flpack
               ___fldiv
                 ___awtofl (ARG)
                   ___flpack
                 ___fladd (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fladd (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___flneg (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                 ___flpack (ARG)
               ___flge
                 _fabs (ARG)
                   ___flneg
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fladd (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg
               ___flsub
                 ___awtofl (ARG)
                   ___flpack
                 ___fladd (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
               ___fltol
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fladd (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___flneg (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
               _floor
                 ___altofl
                   ___flpack
                   ___fltol (ARG)
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flge
                   _fabs (ARG)
                     ___flneg
                 ___fltol
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flneg (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fladd (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___flneg (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flneg (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
               _log (ARG)
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fladd (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___flneg (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flneg (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fladd (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___flneg (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flneg (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fladd (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fladd (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___flneg (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
       _pow (ARG)
         ___flge
           _fabs (ARG)
             ___flneg
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___fltol
         ___lltofl
           ___flpack
         _exp
           ___awtofl
             ___flpack
           ___fldiv
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
           ___flge
             _fabs (ARG)
               ___flneg
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg
           ___flsub
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
           ___fltol
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
           _floor
             ___altofl
               ___flpack
               ___fltol (ARG)
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flge
               _fabs (ARG)
                 ___flneg
             ___fltol
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fladd (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
           _log (ARG)
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fladd (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     _atan
       ___fladd
         ___awtofl (ARG)
           ___flpack
         ___flneg (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___fldiv
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg (ARG)
         ___flpack (ARG)
       ___flge
         _fabs (ARG)
           ___flneg
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg
       _eval_poly
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
       _fabs
         ___flneg
     _pow
       ___flge
         _fabs (ARG)
           ___flneg
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg
       ___fltol
       ___lltofl
         ___flpack
       _exp
         ___awtofl
           ___flpack
         ___fldiv
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
         ___flge
           _fabs (ARG)
             ___flneg
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___flsub
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
         ___fltol
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
         _floor
           ___altofl
             ___flpack
             ___fltol (ARG)
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flge
             _fabs (ARG)
               ___flneg
           ___fltol
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
         _log (ARG)
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
       _log
         ___awtofl
           ___flpack
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
         _frexp
     _sqrt
       ___fldiv (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg (ARG)
         ___flpack (ARG)
       ___flge (ARG)
         _fabs (ARG)
           ___flneg
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg (ARG)
       ___flsub (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
       _pow (ARG)
         ___flge
           _fabs (ARG)
             ___flneg
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___fltol
         ___lltofl
           ___flpack
         _exp
           ___awtofl
             ___flpack
           ___fldiv
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
           ___flge
             _fabs (ARG)
               ___flneg
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg
           ___flsub
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
           ___fltol
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
           _floor
             ___altofl
               ___flpack
               ___fltol (ARG)
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flge
               _fabs (ARG)
                 ___flneg
             ___fltol
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fladd (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
           _log (ARG)
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fladd (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
   _System_Init
     _CloseI2C
     _OpenI2C
     _OpenUSART
     _baudUSART

 _System_LowPriorityInterrupt (ROOT)

 _System_HighPriorityInterrupt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     44      58       6       34.4%
BITBANK5            EF      0       0      15        0.0%
BANK5               EF      0       0      13        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     80      9A       4       96.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2C      40       1       67.4%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     132      14        0.0%
DATA                 0      0     132      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Dec 05 15:46:30 2018

                        ___altofl@sign 002A                           ___fldiv@cntr 008A  
                         ___fldiv@sign 008C                          _Accel_StandBy 2ECE  
                          _SSPSTATbits 000FC7                                     l89 1BA8  
                                   bsr 000FE0                    ___wmul@multiplicand 0022  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                         ___flpack@arg 0020                           ___flpack@exp 0024  
                                  l201 2932                                    l301 24FA  
                                  l205 2942                                    l302 24CE  
                                  l230 2784                                    l222 2702  
                                  l303 24D4                                    l231 2730  
                                  l312 24EC                                    l208 294A  
                                  l240 276A                                    l232 2728  
                                  l160 29A8                                    l321 250C  
                                  l225 270A                                    l153 2980  
                                  l306 24DC                                    l250 277C  
                                  l242 2760                                    l411 2AC4  
                                  l235 2778                                    l420 2AEC  
                                  l340 2B78                                    l236 274C  
                                  l325 251A                                    l317 24FE  
                                  l309 24E4                                    l181 28E2  
                                  l253 2788                                    l237 2744  
                                  l157 299A                                    l246 276E  
                                  l158 299C                                    l191 293A  
                                  l159 29A6                                    l272 243A  
                                  l192 290A                                    l256 2790  
                                  l281 2468                                    l193 290E  
                                  l601 1412                                    l290 2508  
                                  l282 2460                                    l186 293E  
                                  l178 28DA                                    l291 248C  
                                  l275 2442                                    l196 2916  
                                  l188 2900                                    l700 23EA  
                                  l349 2BA4                                    l285 2516  
                                  l294 2494                                    l286 2484  
                                  l287 247C                                    l720 112E  
                                  l712 2D44                                    l297 24B0  
                                  l386 2E82                                    l298 24A8  
                                  l387 2E86                                    l724 1168  
                                  l726 1196                                    l735 127E  
                                  l760 26A6                                    l692 2394  
                                  l699 23D6                           __CFG_CPB$OFF 000000  
                         __CFG_CPD$OFF 000000                                    _exp 0E66  
                                  _log 1BAA                                    _pow 17D0  
                         __CFG_BORV$18 000000                                    wreg 000FE8  
                         ___flmul@cntr 007C                  Accel_ReadRegister@reg 0062  
                         ___flmul@sign 007D                  Accel_ReadRegister@out 0063  
                         __CFG_LVP$OFF 000000                         gyros@Gyros_Vel 00EC  
                        ___flpack@sign 0025                           ___fltol@exp1 0029  
                                 l1031 1820                                   l1041 15F8  
                                 l1042 15E4                                   l1036 19BE  
                                 l1062 0F60                                   l1063 10E0  
                                 l1073 21FC                  ??_Accel_WriteRegister 0026  
                                 l3021 2970                                   l3025 2978  
                                 l3017 2966                                   l3301 23CA  
                                 l4005 10A8                                   l3037 2992  
                                 l3029 2984                                   l3311 241C  
                                 l4033 1A66                                   l4107 2C3A  
                                 l4043 1B28                                   l3411 11CE  
                                 l3403 118C                                   l3325 2AAC  
                                 l3421 1220                                   l3343 2AD6  
                                 l3431 126E                                   l3423 122C  
                                 l3521 2450                                   l3417 11FE  
                                 l2633 25A6                                   l2617 2548  
                                 l4073 18E2                                   l4065 185C  
                                 l3339 2AD2                                   l3371 2B84  
                                 l3363 2B64                                   l3515 244A  
                                 l3291 2354                                   l3435 12A6  
                                 l3419 1210                                   l3507 2DA6  
                                 l2651 2600                                   l2643 25D0  
                                 l4059 1834                                   l3269 2EFC  
                                 l3357 2AFC                                   l3293 237C  
                                 l3285 2332                                   l3621 1F8E  
                                 l3429 125C                                   l2645 25DE  
                                 l2637 25B6                                   l4077 1912  
                                 l3375 2B98                                   l4095 2C0C  
                                 l3439 12CE                                   l3391 1140  
                                 l2647 25E8                                   l4167 2CEC  
                                 l3289 2346                                   l3617 1F7A  
                                 l3609 1F24                                   l3449 1322  
                                 l3481 1DE8                                   l3465 1D70  
                                 l3641 2260                                   l3379 2BAC  
                                 l3731 279C                                   l3299 23BC  
                                 l3459 1D4A                                   l3643 2302  
                                 l3811 1798                                   l3557 2502  
                                 l3821 2C6C                                   l3397 117A  
                                 l3493 1E38                                   l3477 1DC0  
                                 l3629 2B2A                                   l3581 2BDC  
                                 l3743 28F0                                   l3591 1EAE  
                                 l3655 26F2                                   l3487 1E08  
                                 l3569 2524                                   l3681 2DC6  
                                 l3649 265E                                   l3489 1E10  
                                 l3761 139E                                   l3905 0BA0  
                                 l3499 1E58                                   l3931 0DC0  
                                 l3667 27D0                                   l3843 2162  
                                 l3835 212C                                   l3749 2922  
                                 l3597 1ED4                                   l3773 1568  
                                 l3695 2718                                   l3919 0CDE  
                                 l3839 2140                                   l3863 204E  
                                 l3855 1FE6                                   l3777 1580  
                                 l3881 20DC                                   l3875 2082  
                                 l3971 0E8E                                   l3955 1C00  
                                 ?_exp 0096                                   l3893 2E92  
                                 l3797 167A                                   l3949 1BCE  
                                 ?_log 008E                                   l3879 2098  
                                 l3983 0F22                                   l3977 0ED8  
                                 ?_pow 00A1                                   _PIE1 000F9D  
                                 u5120 1A64                                   u5200 18C4  
                                 u5070 0F2C                                   u5135 1AD8  
                                 u5080 0F2E                                   u2690 2566  
                                 u2695 255C                                   u5247 2D0C  
                                 u4810 13CE                                   u4490 27F8  
                                 u4820 13D0                                   u4910 2150  
                                 u4498 27FA                                   u4940 2018  
                                 u4948 201C                                   _acos 29C6  
                                 _fabs 2D1A                                   _atan 1352  
                                 _asin 0B42                                   _main 2CDA  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                                 fsr0l 000FE9                                   fsr2h 000FDA  
                                 fsr1l 000FE1                                   indf2 000FDF  
                                 fsr2l 000FD9                                   _sqrt 15A8  
                  baudUSART@baudconfig 0020                                   exp@x 0096  
                                 log@x 008E                        _Gyros_LastAccel 002D  
                                 pclat 000FFA                                   pow@x 00A1  
                                 pow@y 00A5                                   prodh 000FF4  
                                 prodl 000FF3                                   start 00A2  
                        __CFG_IESO$OFF 000000                        __end_of_IdleI2C 2F0C  
                        __CFG_MCLRE$ON 000000                   __size_of_System_Init 0042  
                         ___param_bank 000010                        __end_of_ReadI2C 2E90  
                       ?_Accel_StandBy 0001                        __end_of_OpenI2C 2ECE  
                                ??_exp 002C                                  ??_log 002C  
               Accel_ReadRegisters@reg 0060                                  ??_pow 002C  
               Accel_ReadRegisters@out 0028                                  ?_acos 00D3  
                                ?_fabs 0024                          ___fltol@sign1 0028  
                                ?_atan 008E                                  ?_asin 00CF  
                      __end_of___fladd 1352                                  ?_main 0001  
                      __end_of___fldiv 1FBE                        __end_of___flneg 2DBA  
                      __end_of___flmul 1E88                        __end_of___flsub 2B62  
                      __end_of___fltol 2614                                  ?_sqrt 00B6  
                                _RCSTA 000FAB                                  _SPBRG 000FAF  
                                _TXSTA 000FAC                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                   __end_of_EEAckPolling 2954  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_getsI2C 2BBA  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                        ___awtofl@sign 002A                         __CFG_EBTR3$OFF 000000  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                         __CFG_EBTRB$OFF 000000  
                                acos@x 00D3                                  fabs@d 0024  
                                _floor 20F0                                  _ldexp 1FBE  
                                _frexp 27A2                                  _errno 00F8  
                                atan@f 008E                                  atan@x 0096  
                                atan@y 0092                                  asin@x 00CF  
                                asin@y 0110                                  tablat 000FF5  
                                pow@yi 00B2                     __size_of_Accel_Get 01DA  
                                sqrt@i 00C6                                  sqrt@q 00C7  
                                sqrt@x 00CB                                  sqrt@y 00B6  
                                sqrt@z 00C2                                  status 000FD8  
                       __CFG_HFOFST$ON 000000                           Accel_Get@raw 0095  
                         Accel_Get@out 008D                         __CFG_PBADEN$ON 000000  
                          exp@exponent 009E                       __end_of_CloseI2C 2F18  
                          ldexp@newexp 0092                            ?_Accel_Init 0001  
                      __initialization 2D56                            log@exponent 0092  
                         __end_of_acos 2A38                           __end_of_fabs 2D56  
                         __end_of_atan 15A8                           __end_of_asin 0E66  
                         __end_of_main 2D1A                           __end_of_sqrt 17D0  
                               ??_acos 002C                                 ??_fabs 0028  
                     gyros@Gyros_Angle 0150                                 ??_atan 002C  
                               ??_asin 002C                                 ??_main 00DF  
                    ?_EESequentialRead 0023                                 ??_sqrt 00BA  
                        __activetblptr 000001                     ??_EESequentialRead 0027  
                               ?_floor 006F                                 ?_ldexp 008E  
                               ?_frexp 0020                       __end_of___altofl 2C0C  
                     __end_of___flpack 2430                       __end_of_WriteI2C 2B02  
                     __end_of___awtofl 2C98                       __end_of___lltofl 2E1C  
                          OpenI2C@slew 0020                         __CFG_WDTEN$OFF 000000  
                            ??_IdleI2C 0020                                 _SPBRGH 000FB0  
                               _SSPADD 000FC8                                 _SSPBUF 000FC9  
                            ??_ReadI2C 0020                             _Gyros_Init 283E  
                            ??_OpenI2C 0021                        ??_Accel_StandBy 002C  
                       __CFG_XINST$OFF 000000                     __size_of_OpenUSART 0072  
            Accel_ReadRegisters@length 002A                                 ___flge 2614  
                            ??___fladd 002B                                 ___wmul 2E46  
                            ??___fldiv 002C                              ??___flneg 0024  
                       __CFG_STVREN$ON 000000                   __size_of_EEByteWrite 00AA  
                            ??___flmul 002C                              ??___flsub 002C  
                            ??___fltol 0024              Accel_ReadRegisters@status 0061  
                               clear_0 2D5C                                 clear_1 2D68  
                               clear_2 2D74                              ??_getsI2C 0023  
                    __end_of_Accel_Get 1BAA                                 floor@i 0073  
                               floor@x 006F                           __mediumconst 0000  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8         ??_System_HighPriorityInterrupt 0012  
                  __size_of_Accel_Init 0048                                 sqrt@og 00BE  
                        Accel_Active@c 002C                             ___fladd@f1 0064  
                           ___fladd@f2 0068                             ___flge@ff1 0060  
                           ___flge@ff2 0064                    EEAckPolling@control 0022  
                     __end_ofexp@coeff 0629                       __end_oflog@coeff 064D  
                           ___altofl@c 0060                             ___fldiv@f1 007E  
                           ___fldiv@f2 0082                             ___fldiv@f3 0086  
                           __accesstop 0060                __end_of__initialization 2D7A  
                           ___flneg@f1 0020                             ___flmul@f1 006F  
                           ___flmul@f2 0073                           eval_poly@res 008A  
                        ___rparam_used 000001                             ___flsub@f1 006F  
                           ___flsub@f2 0073                             ___fltol@f1 0020  
                           ___awtofl@c 0060                          Accel_Init@fsr 0065  
                   __size_of_baudUSART 0008                         __pcstackCOMRAM 0001  
                           ___lltofl@c 0060                          __end_of_floor 220E  
                        __end_of_ldexp 20F0                          __end_of_frexp 283E  
          __end_of_Accel_ReadRegisters 2DEC                  __size_of_EEAckPolling 0084  
                        ?_Gyros_Update 00DB                              ?_CloseI2C 0001  
                    __end_of_OpenUSART 29C6                                ??_floor 002C  
                              ??_ldexp 0094                                ??_frexp 0026  
                           __pbssBANK0 00E0                             __pbssBANK1 0144  
                   __size_of_eval_poly 0112            __size_of_Accel_ReadRegister 002A  
                          ?_Gyros_Init 0001                          Gyros_Update@a 0138  
                         _EEAckPolling 28D0                                ?___flge 0060  
                              ?___wmul 0020                              ?___altofl 0060  
                              _BAUDCON 000FB8                              ?___flpack 0020  
                            ?_WriteI2C 0001                              ?___awtofl 0060  
                            ?___lltofl 0060                         ??_Gyros_Update 002C  
          __end_of_Accel_WriteRegister 2EB0                      __end_of_baudUSART 2F14  
                           ??_CloseI2C 0020                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                          _Gyros_Angle 0039                 EESequentialRead@length 0026  
                              _IdleI2C 2EFA                          ??_System_Init 0023  
                              _ReadI2C 2E6E                                _OpenI2C 2EB0  
                              __Hparam 0000                                __Lparam 0000  
                         ??_Accel_Init 002D                        __size_of___flge 00E4  
                              ___fladd 10F2                                ___fldiv 1E88  
                              ___flneg 2D88                                ___flmul 1D24  
                              ___flsub 2B02                                ___fltol 252A  
                      __size_of___wmul 0028                           __psmallconst 0600  
                           ??___altofl 002A                             ??___flpack 0026  
                              __pcinit 2D56                             ??_WriteI2C 0021  
                           ??___awtofl 002A                      __end_of_eval_poly 2320  
                              __ramtop 0600                             ??___lltofl 002A  
                              _getsI2C 2B62                                __ptext0 2CDA  
                              __ptext1 2C98                                __ptext2 2F0C  
                              __ptext3 2954                                __ptext4 2EB0  
                              __ptext5 2F14                                __ptext6 067A  
                              __ptext7 17D0                                __ptext8 1BAA  
                              __ptext9 0E66                 Accel_WriteRegister@reg 0026  
                         __size_of_exp 028C                           __size_of_log 017A  
                    _Gyros_Update$2020 011C                      _Gyros_Update$2021 0120  
                    _Gyros_Update$2022 0124                      _Gyros_Update$2023 0128  
                    _Gyros_Update$2024 012C                      _Gyros_Update$2025 0130  
                    _Gyros_Update$2026 0134                      _Gyros_Update$2019 0118  
                  __size_of_Gyros_Init 0092                        atan@val_squared 009B  
                         __size_of_pow 0200                                atan@val 009F  
                              asin@sgn 0100                     __end_of_Accel_Init 2C54  
                       __pintcode_body 2A38                   end_of_initialization 2D7A  
                              exp@sign 00A0              __size_of_EESequentialRead 00FA  
                              int_func 2A38                   gyros@Gyros_LastAccel 00E0  
                              pow@sign 00B1                              _RCSTAbits 000FAB  
         ?_System_LowPriorityInterrupt 0001                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                  __end_of_System_Init 2CDA                         Accel_Get@f_out 009D  
                      EEByteWrite@data 0023                              _TRISCbits 000F94  
                            _Accel_Get 19D0                            ___fldiv@exp 008B  
                          ___flmul@exp 0077                              _TXSTAbits 000FAC  
                        ?_Accel_Active 0001                         Accel_Init@name 0064  
                 __end_of_Gyros_Update 0B42                          ??_EEByteWrite 0024  
                __end_of_Accel_StandBy 2EE4                         __end_of___flge 26F8  
                       __end_of___wmul 2E6E                             floor@expon 0077  
                  start_initialization 2D56                             eval_poly@d 0082  
                           eval_poly@n 0084                             eval_poly@x 007E  
                           ?_Accel_Get 008D                             ldexp@value 008E  
                          __end_of_exp 10F2                            __end_of_log 1D24  
                          __end_of_pow 19D0                         Accel_StandBy@c 002C  
                     WriteI2C@data_out 0021                      __size_of_CloseI2C 0004  
                           frexp@value 0020                              _OpenUSART 2954  
                       ??_Accel_Active 002C                           ??_Gyros_Init 0020  
                          _System_Init 2C98                              _Gyros_Vel 0144  
                             ??___flge 0028   __end_of_System_HighPriorityInterrupt 2A9E  
__size_of_System_HighPriorityInterrupt 2A96           _System_HighPriorityInterrupt 0008  
                             ??___wmul 0024                       __CFG_LPT1OSC$OFF 000000  
                  __end_of_EEByteWrite 27A2                      __size_of___altofl 0052  
                    __size_of___flpack 0110                      __size_of_WriteI2C 0064  
                    __size_of___awtofl 0044                              _acos$2027 00D7  
                    __size_of___lltofl 0030           __size_of_Accel_ReadRegisters 0032  
                          __pbssCOMRAM 002D                     __end_of_Gyros_Init 28D0  
                        __pcstackBANK0 0060                          __pcstackBANK1 0100  
 __size_of_System_LowPriorityInterrupt 008A             __end_of_Accel_ReadRegister 2E46  
                            _baudUSART 2F0C                               ?_IdleI2C 0001  
                     _EESequentialRead 2430                             ?_OpenUSART 0020  
                            _asin$2030 010C                              _asin$2031 0108  
                            _asin$2028 0104                              _asin$2029 0114  
                       Gyros_Update@dt 00DB                               ?_ReadI2C 0001  
                             ?_OpenI2C 0020                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                               ?___fladd 0064  
                             ?___fldiv 007E                               ?___flneg 0020  
                             ?___flmul 006F                               ?___flsub 006F  
                             ?___fltol 0020          ?_System_HighPriorityInterrupt 0001  
                          __pintcodelo 0018                               ?_getsI2C 0020  
                EESequentialRead@rdptr 0024                            __smallconst 0600  
                            _eval_poly 220E                            ??_Accel_Get 008F  
             Accel_WriteRegister@value 0025                         __size_of_floor 011E  
                       __size_of_ldexp 0132                         __size_of_frexp 009C  
                           ?_baudUSART 0001           __size_of_Accel_WriteRegister 0020  
                __size_of_Gyros_Update 04C8                         ___wmul@product 0024  
                             _LATCbits 000F8B                              atan@recip 009A  
                             _PIE1bits 000F9D                            _EEByteWrite 26F8  
                             _PIR1bits 000F9E                               _PIR2bits 000FA1  
                     __CFG_WDTPS$32768 000000                EESequentialRead@address 0023  
              EESequentialRead@control 0027                      ___wmul@multiplier 0020  
                 __end_of_Accel_Active 2EFA                             ?_eval_poly 007E  
                         _Gyros_Update 067A                    __end_ofatan@coeff_a 0665  
                  __end_ofatan@coeff_b 0679                               _CloseI2C 2F14  
                           Accel_Get@i 009F                       OpenI2C@sync_mode 0021  
                          ??_OpenUSART 0022                       __size_of_IdleI2C 0012  
                      OpenUSART@config 0022                              frexp@eptr 0024  
                     __size_of_ReadI2C 0022                               __Hrparam 0000  
                     __size_of_OpenI2C 001E                               __Lrparam 0000  
                         __Lsmallconst 0600                     __CFG_BOREN$SBORDIS 000000  
                     __size_of___fladd 0260                       __size_of___fldiv 0136  
                     __size_of___flneg 0032                       __size_of___flmul 0164  
                        getsI2C@length 0022                       __size_of___flsub 0060  
                     __size_of___fltol 00EA                               ___altofl 2BBA  
                             ___flpack 2320                               _WriteI2C 2A9E  
                             ___awtofl 2C54                               ___lltofl 2DEC  
                     __size_of_getsI2C 0058                               _exp$2034 009A  
                             __ptext10 1FBE                               __ptext11 20F0  
                             __ptext20 1352                               __ptext12 27A2  
                             __ptext21 2D1A                               __ptext13 252A  
                             __ptext30 2C54                               __ptext22 2D88  
                             __ptext14 2BBA                               __ptext31 2320  
                             __ptext23 220E                               __ptext15 2DEC  
                             __ptext40 2DBA                               __ptext32 283E  
                             __ptext24 1D24                               __ptext16 29C6  
                             __ptext41 2430                               __ptext33 2C0C  
                             __ptext25 10F2                               __ptext17 0B42  
                             __ptext42 2B62                               __ptext34 2ECE  
                             __ptext26 2614                               __ptext18 15A8  
                             __ptext43 2E6E                               __ptext35 2EE4  
                             __ptext27 19D0                               __ptext19 2B02  
                             __ptext44 2A9E                               __ptext36 2E90  
                             __ptext28 2E46                               __ptext45 2EFA  
                             __ptext37 26F8                               __ptext29 1E88  
                             __ptext38 28D0                               __ptext39 2E1C  
                             _pow$2032 00A9                               _pow$2033 00AD  
                          ??_baudUSART 0020                          __size_of_acos 0072  
                        __size_of_fabs 003C                          __size_of_atan 0256  
                        __size_of_asin 0324                          __size_of_main 0040  
                        __size_of_sqrt 0228                           ?_System_Init 0001  
                  _Accel_ReadRegisters 2DBA                          ?_EEAckPolling 0001  
             __end_of_EESequentialRead 252A                            atan@coeff_a 064D  
                          atan@coeff_b 0665                               exp@coeff 0601  
                ___flmul@f3_as_product 0078                               log@coeff 0629  
                 ?_Accel_ReadRegisters 0028                            ??_eval_poly 0086  
                       OpenUSART@spbrg 0020                           getsI2C@rdptr 0020  
               __size_of_Accel_StandBy 0016                               intlevel1 0000  
                             intlevel2 0000                         ??_EEAckPolling 0022  
                           _OSCCONbits 000FD3                     _Accel_ReadRegister 2E1C  
  __end_of_System_LowPriorityInterrupt 00A2            _System_LowPriorityInterrupt 0018  
                   EEByteWrite@address 0022                  __size_of_Accel_Active 0016  
                  _Accel_WriteRegister 2E90                    ?_Accel_ReadRegister 0001  
                   EEByteWrite@control 0024          ??_System_LowPriorityInterrupt 0001  
                ??_Accel_ReadRegisters 002C                            _SSPCON1bits 000FC6  
                          _SSPCON2bits 000FC5                        Accel_Get@gCount 009B  
                 ?_Accel_WriteRegister 0025                   ??_Accel_ReadRegister 002C  
                         ___fladd@exp1 006E                           ___fladd@exp2 006D  
                         ___fladd@sign 006C                      __CFG_FOSC$INTIO67 000000  
                         _Accel_Active 2EE4                           ?_EEByteWrite 0022  
                           _Accel_Init 2C0C              Accel_WriteRegister@status 0027  
