

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Dec 05 01:35:20 2018

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    61                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    62                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    63  0000                     
    64                           	psect	smallconst
    65  000600                     __psmallconst:
    66                           	opt stack 0
    67  000600  00                 	db	0
    68  000601                     exp@coeff:
    69                           	opt stack 0
    70  000601  0000               	dw	0
    71  000603  3F80               	dw	16256
    72  000605  7218               	dw	29208
    73  000607  3F31               	dw	16177
    74  000609  FDF0               	dw	65008
    75  00060B  3E75               	dw	15989
    76  00060D  5847               	dw	22599
    77  00060F  3D63               	dw	15715
    78  000611  9558               	dw	38232
    79  000613  3C1D               	dw	15389
    80  000615  C482               	dw	50306
    81  000617  3AAE               	dw	15022
    82  000619  78A8               	dw	30888
    83  00061B  3921               	dw	14625
    84  00061D  93EF               	dw	37871
    85  00061F  3780               	dw	14208
    86  000621  92A0               	dw	37536
    87  000623  35A7               	dw	13735
    88  000625  5646               	dw	22086
    89  000627  3415               	dw	13333
    90  000629                     __end_ofexp@coeff:
    91                           	opt stack 0
    92  000629                     log@coeff:
    93                           	opt stack 0
    94  000629  0000               	dw	0
    95  00062B  0000               	dw	0
    96  00062D  FFC4               	dw	65476
    97  00062F  3F7F               	dw	16255
    98  000631  EF80               	dw	61312
    99  000633  BEFF               	dw	48895
   100  000635  E190               	dw	57744
   101  000637  3EA9               	dw	16041
   102  000639  82EC               	dw	33516
   103  00063B  BE76               	dw	48758
   104  00063D  AD82               	dw	44418
   105  00063F  3E2B               	dw	15915
   106  000641  3C0E               	dw	15374
   107  000643  BDC3               	dw	48579
   108  000645  D187               	dw	53639
   109  000647  3D13               	dw	15635
   110  000649  7841               	dw	30785
   111  00064B  BBD3               	dw	48083
   112  00064D                     __end_oflog@coeff:
   113                           	opt stack 0
   114  00064D                     atan@coeff_a:
   115                           	opt stack 0
   116  00064D  3C06               	dw	15366
   117  00064F  4204               	dw	16900
   118  000651  9F7D               	dw	40829
   119  000653  426A               	dw	17002
   120  000655  905C               	dw	36956
   121  000657  4201               	dw	16897
   122  000659  4D60               	dw	19808
   123  00065B  40BB               	dw	16571
   124  00065D  EC51               	dw	60497
   125  00065F  3E47               	dw	15943
   126  000661  8DDE               	dw	36318
   127  000663  BB1F               	dw	47903
   128  000665                     __end_ofatan@coeff_a:
   129                           	opt stack 0
   130  000665                     atan@coeff_b:
   131                           	opt stack 0
   132  000665  3C06               	dw	15366
   133  000667  4204               	dw	16900
   134  000669  59C0               	dw	22976
   135  00066B  428B               	dw	17035
   136  00066D  0474               	dw	1140
   137  00066F  4244               	dw	16964
   138  000671  9BF9               	dw	39929
   139  000673  414F               	dw	16719
   140  000675  0000               	dw	0
   141  000677  3F80               	dw	16256
   142  000679                     __end_ofatan@coeff_b:
   143                           	opt stack 0
   144  0000                     _LATCbits	set	3979
   145  0000                     _TRISCbits	set	3988
   146  0000                     _BAUDCON	set	4024
   147  0000                     _OSCCONbits	set	4051
   148  0000                     _PIE1	set	3997
   149  0000                     _PIE1bits	set	3997
   150  0000                     _PIR1bits	set	3998
   151  0000                     _PIR2bits	set	4001
   152  0000                     _RCSTA	set	4011
   153  0000                     _RCSTAbits	set	4011
   154  0000                     _SPBRG	set	4015
   155  0000                     _SPBRGH	set	4016
   156  0000                     _SSPADD	set	4040
   157  0000                     _SSPBUF	set	4041
   158  0000                     _SSPCON1	set	4038
   159  0000                     _SSPCON1bits	set	4038
   160  0000                     _SSPCON2	set	4037
   161  0000                     _SSPCON2bits	set	4037
   162  0000                     _SSPSTAT	set	4039
   163  0000                     _SSPSTATbits	set	4039
   164  0000                     _TXSTA	set	4012
   165  0000                     _TXSTAbits	set	4012
   166                           
   167                           ; #config settings
   168  000679  00                 	db	0	; dummy byte at the end
   169  0000                     
   170                           	psect	cinit
   171  002BE8                     __pcinit:
   172                           	opt stack 0
   173  002BE8                     start_initialization:
   174                           	opt stack 0
   175  002BE8                     __initialization:
   176                           	opt stack 0
   177                           
   178                           ; Clear objects allocated to BANK1 (20 bytes)
   179  002BE8  EE01  F044         	lfsr	0,__pbssBANK1
   180  002BEC  0E14               	movlw	20
   181  002BEE                     clear_0:
   182  002BEE  6AEE               	clrf	postinc0,c
   183  002BF0  06E8               	decf	wreg,f,c
   184  002BF2  E1FD               	bnz	clear_0
   185                           
   186                           ; Clear objects allocated to BANK0 (26 bytes)
   187  002BF4  EE00  F0E2         	lfsr	0,__pbssBANK0
   188  002BF8  0E1A               	movlw	26
   189  002BFA                     clear_1:
   190  002BFA  6AEE               	clrf	postinc0,c
   191  002BFC  06E8               	decf	wreg,f,c
   192  002BFE  E1FD               	bnz	clear_1
   193                           
   194                           ; Clear objects allocated to COMRAM (20 bytes)
   195  002C00  EE00  F02D         	lfsr	0,__pbssCOMRAM
   196  002C04  0E14               	movlw	20
   197  002C06                     clear_2:
   198  002C06  6AEE               	clrf	postinc0,c
   199  002C08  06E8               	decf	wreg,f,c
   200  002C0A  E1FD               	bnz	clear_2
   201  002C0C                     end_of_initialization:
   202                           	opt stack 0
   203  002C0C                     __end_of__initialization:
   204                           	opt stack 0
   205  002C0C  0E00               	movlw	low (__Lsmallconst shr (0+16))
   206  002C0E  6EF8               	movwf	tblptru,c
   207  002C10  0E06               	movlw	high __Lsmallconst
   208  002C12  6EF7               	movwf	tblptrh,c
   209  002C14  0100               	movlb	0
   210  002C16  EF54  F014         	goto	_main	;jump to C main() function
   211                           tblptru	equ	0xFF8
   212                           tblptrh	equ	0xFF7
   213                           postinc0	equ	0xFEE
   214                           wreg	equ	0xFE8
   215                           
   216                           	psect	bssCOMRAM
   217  00002D                     __pbssCOMRAM:
   218                           	opt stack 0
   219  00002D                     	ds	12
   220  000039                     	ds	8
   221                           tblptru	equ	0xFF8
   222                           tblptrh	equ	0xFF7
   223                           postinc0	equ	0xFEE
   224                           wreg	equ	0xFE8
   225                           
   226                           	psect	bssBANK0
   227  0000E2                     __pbssBANK0:
   228                           	opt stack 0
   229  0000E2                     gyros@Gyros_LastAccel:
   230                           	opt stack 0
   231  0000E2                     	ds	12
   232  0000EE                     gyros@Gyros_Vel:
   233                           	opt stack 0
   234  0000EE                     	ds	12
   235  0000FA                     _errno:
   236                           	opt stack 0
   237  0000FA                     	ds	2
   238                           tblptru	equ	0xFF8
   239                           tblptrh	equ	0xFF7
   240                           postinc0	equ	0xFEE
   241                           wreg	equ	0xFE8
   242                           
   243                           	psect	bssBANK1
   244  000144                     __pbssBANK1:
   245                           	opt stack 0
   246  000144                     	ds	12
   247  000150                     gyros@Gyros_Angle:
   248                           	opt stack 0
   249  000150                     	ds	8
   250                           tblptru	equ	0xFF8
   251                           tblptrh	equ	0xFF7
   252                           postinc0	equ	0xFEE
   253                           wreg	equ	0xFE8
   254                           
   255                           	psect	cstackBANK1
   256  000100                     __pcstackBANK1:
   257                           	opt stack 0
   258  000100                     asin@sgn:
   259                           	opt stack 0
   260                           
   261                           ; 4 bytes @ 0x0
   262  000100                     	ds	4
   263  000104                     _asin$1986:
   264                           	opt stack 0
   265                           
   266                           ; 4 bytes @ 0x4
   267  000104                     	ds	4
   268  000108                     _asin$1989:
   269                           	opt stack 0
   270                           
   271                           ; 4 bytes @ 0x8
   272  000108                     	ds	4
   273  00010C                     _asin$1988:
   274                           	opt stack 0
   275                           
   276                           ; 4 bytes @ 0xC
   277  00010C                     	ds	4
   278  000110                     asin@y:
   279                           	opt stack 0
   280                           
   281                           ; 4 bytes @ 0x10
   282  000110                     	ds	4
   283  000114                     _asin$1987:
   284                           	opt stack 0
   285                           
   286                           ; 4 bytes @ 0x14
   287  000114                     	ds	4
   288  000118                     _Gyros_Update$1977:
   289                           	opt stack 0
   290                           
   291                           ; 4 bytes @ 0x18
   292  000118                     	ds	4
   293  00011C                     _Gyros_Update$1978:
   294                           	opt stack 0
   295                           
   296                           ; 4 bytes @ 0x1C
   297  00011C                     	ds	4
   298  000120                     _Gyros_Update$1979:
   299                           	opt stack 0
   300                           
   301                           ; 4 bytes @ 0x20
   302  000120                     	ds	4
   303  000124                     _Gyros_Update$1980:
   304                           	opt stack 0
   305                           
   306                           ; 4 bytes @ 0x24
   307  000124                     	ds	4
   308  000128                     _Gyros_Update$1981:
   309                           	opt stack 0
   310                           
   311                           ; 4 bytes @ 0x28
   312  000128                     	ds	4
   313  00012C                     _Gyros_Update$1982:
   314                           	opt stack 0
   315                           
   316                           ; 4 bytes @ 0x2C
   317  00012C                     	ds	4
   318  000130                     _Gyros_Update$1983:
   319                           	opt stack 0
   320                           
   321                           ; 4 bytes @ 0x30
   322  000130                     	ds	4
   323  000134                     _Gyros_Update$1984:
   324                           	opt stack 0
   325                           
   326                           ; 4 bytes @ 0x34
   327  000134                     	ds	4
   328  000138                     Gyros_Update@a:
   329                           	opt stack 0
   330                           
   331                           ; 12 bytes @ 0x38
   332  000138                     	ds	12
   333                           tblptru	equ	0xFF8
   334                           tblptrh	equ	0xFF7
   335                           postinc0	equ	0xFEE
   336                           wreg	equ	0xFE8
   337                           
   338                           	psect	cstackBANK0
   339  000060                     __pcstackBANK0:
   340                           	opt stack 0
   341  000060                     ?___altofl:
   342                           	opt stack 0
   343  000060                     ?___awtofl:
   344                           	opt stack 0
   345  000060                     ?___lltofl:
   346                           	opt stack 0
   347  000060                     ___awtofl@c:
   348                           	opt stack 0
   349  000060                     ___altofl@c:
   350                           	opt stack 0
   351  000060                     ___flge@ff1:
   352                           	opt stack 0
   353  000060                     ___lltofl@c:
   354                           	opt stack 0
   355                           
   356                           ; 4 bytes @ 0x0
   357  000060                     	ds	4
   358  000064                     ?___fladd:
   359                           	opt stack 0
   360  000064                     ___fladd@f1:
   361                           	opt stack 0
   362  000064                     ___flge@ff2:
   363                           	opt stack 0
   364                           
   365                           ; 4 bytes @ 0x4
   366  000064                     	ds	4
   367  000068                     ___fladd@f2:
   368                           	opt stack 0
   369                           
   370                           ; 4 bytes @ 0x8
   371  000068                     	ds	4
   372  00006C                     ___fladd@sign:
   373                           	opt stack 0
   374                           
   375                           ; 1 bytes @ 0xC
   376  00006C                     	ds	1
   377  00006D                     ___fladd@exp2:
   378                           	opt stack 0
   379                           
   380                           ; 1 bytes @ 0xD
   381  00006D                     	ds	1
   382  00006E                     ___fladd@exp1:
   383                           	opt stack 0
   384                           
   385                           ; 1 bytes @ 0xE
   386  00006E                     	ds	1
   387  00006F                     ?___flmul:
   388                           	opt stack 0
   389  00006F                     ?___flsub:
   390                           	opt stack 0
   391  00006F                     ?_floor:
   392                           	opt stack 0
   393  00006F                     ___flmul@f1:
   394                           	opt stack 0
   395  00006F                     ___flsub@f1:
   396                           	opt stack 0
   397  00006F                     floor@x:
   398                           	opt stack 0
   399                           
   400                           ; 4 bytes @ 0xF
   401  00006F                     	ds	4
   402  000073                     ___flmul@f2:
   403                           	opt stack 0
   404  000073                     ___flsub@f2:
   405                           	opt stack 0
   406  000073                     floor@i:
   407                           	opt stack 0
   408                           
   409                           ; 4 bytes @ 0x13
   410  000073                     	ds	4
   411  000077                     ___flmul@exp:
   412                           	opt stack 0
   413  000077                     floor@expon:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0x17
   417  000077                     	ds	1
   418  000078                     ___flmul@f3_as_product:
   419                           	opt stack 0
   420                           
   421                           ; 4 bytes @ 0x18
   422  000078                     	ds	4
   423  00007C                     ___flmul@cntr:
   424                           	opt stack 0
   425                           
   426                           ; 1 bytes @ 0x1C
   427  00007C                     	ds	1
   428  00007D                     ___flmul@sign:
   429                           	opt stack 0
   430                           
   431                           ; 1 bytes @ 0x1D
   432  00007D                     	ds	1
   433  00007E                     ?___fldiv:
   434                           	opt stack 0
   435  00007E                     ?_eval_poly:
   436                           	opt stack 0
   437  00007E                     eval_poly@x:
   438                           	opt stack 0
   439  00007E                     ___fldiv@f1:
   440                           	opt stack 0
   441                           
   442                           ; 4 bytes @ 0x1E
   443  00007E                     	ds	4
   444  000082                     eval_poly@d:
   445                           	opt stack 0
   446  000082                     ___fldiv@f2:
   447                           	opt stack 0
   448                           
   449                           ; 4 bytes @ 0x22
   450  000082                     	ds	2
   451  000084                     eval_poly@n:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0x24
   455  000084                     	ds	2
   456  000086                     ??_eval_poly:
   457  000086                     ___fldiv@f3:
   458                           	opt stack 0
   459                           
   460                           ; 4 bytes @ 0x26
   461  000086                     	ds	4
   462  00008A                     ___fldiv@cntr:
   463                           	opt stack 0
   464  00008A                     eval_poly@res:
   465                           	opt stack 0
   466                           
   467                           ; 4 bytes @ 0x2A
   468  00008A                     	ds	1
   469  00008B                     ___fldiv@exp:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0x2B
   473  00008B                     	ds	1
   474  00008C                     ___fldiv@sign:
   475                           	opt stack 0
   476                           
   477                           ; 1 bytes @ 0x2C
   478  00008C                     	ds	1
   479  00008D                     Accel_Get@out:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x2D
   483  00008D                     	ds	1
   484  00008E                     ?_atan:
   485                           	opt stack 0
   486  00008E                     ?_log:
   487                           	opt stack 0
   488  00008E                     ?_ldexp:
   489                           	opt stack 0
   490  00008E                     atan@f:
   491                           	opt stack 0
   492  00008E                     ldexp@value:
   493                           	opt stack 0
   494  00008E                     log@x:
   495                           	opt stack 0
   496                           
   497                           ; 4 bytes @ 0x2E
   498  00008E                     	ds	1
   499  00008F                     ??_Accel_Get:
   500                           
   501                           ; 0 bytes @ 0x2F
   502  00008F                     	ds	3
   503  000092                     ldexp@newexp:
   504                           	opt stack 0
   505  000092                     log@exponent:
   506                           	opt stack 0
   507  000092                     atan@y:
   508                           	opt stack 0
   509                           
   510                           ; 4 bytes @ 0x32
   511  000092                     	ds	2
   512  000094                     ??_ldexp:
   513                           
   514                           ; 0 bytes @ 0x34
   515  000094                     	ds	1
   516  000095                     Accel_Get@raw:
   517                           	opt stack 0
   518                           
   519                           ; 6 bytes @ 0x35
   520  000095                     	ds	1
   521  000096                     ?_exp:
   522                           	opt stack 0
   523  000096                     atan@x:
   524                           	opt stack 0
   525  000096                     exp@x:
   526                           	opt stack 0
   527                           
   528                           ; 4 bytes @ 0x36
   529  000096                     	ds	4
   530  00009A                     atan@recip:
   531                           	opt stack 0
   532  00009A                     _exp$1992:
   533                           	opt stack 0
   534                           
   535                           ; 4 bytes @ 0x3A
   536  00009A                     	ds	1
   537  00009B                     Accel_Get@f_out:
   538                           	opt stack 0
   539  00009B                     atan@val_squared:
   540                           	opt stack 0
   541                           
   542                           ; 4 bytes @ 0x3B
   543  00009B                     	ds	2
   544  00009D                     Accel_Get@gCount:
   545                           	opt stack 0
   546                           
   547                           ; 2 bytes @ 0x3D
   548  00009D                     	ds	1
   549  00009E                     exp@exponent:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x3E
   553  00009E                     	ds	1
   554  00009F                     Accel_Get@i:
   555                           	opt stack 0
   556  00009F                     atan@val:
   557                           	opt stack 0
   558                           
   559                           ; 4 bytes @ 0x3F
   560  00009F                     	ds	1
   561  0000A0                     exp@sign:
   562                           	opt stack 0
   563                           
   564                           ; 1 bytes @ 0x40
   565  0000A0                     	ds	1
   566  0000A1                     ?_pow:
   567                           	opt stack 0
   568  0000A1                     pow@x:
   569                           	opt stack 0
   570                           
   571                           ; 4 bytes @ 0x41
   572  0000A1                     	ds	4
   573  0000A5                     pow@y:
   574                           	opt stack 0
   575                           
   576                           ; 4 bytes @ 0x45
   577  0000A5                     	ds	4
   578  0000A9                     _pow$1990:
   579                           	opt stack 0
   580                           
   581                           ; 4 bytes @ 0x49
   582  0000A9                     	ds	4
   583  0000AD                     _pow$1991:
   584                           	opt stack 0
   585                           
   586                           ; 4 bytes @ 0x4D
   587  0000AD                     	ds	4
   588  0000B1                     pow@sign:
   589                           	opt stack 0
   590                           
   591                           ; 1 bytes @ 0x51
   592  0000B1                     	ds	1
   593  0000B2                     pow@yi:
   594                           	opt stack 0
   595                           
   596                           ; 4 bytes @ 0x52
   597  0000B2                     	ds	4
   598  0000B6                     ?_sqrt:
   599                           	opt stack 0
   600  0000B6                     sqrt@y:
   601                           	opt stack 0
   602                           
   603                           ; 4 bytes @ 0x56
   604  0000B6                     	ds	4
   605  0000BA                     ??_sqrt:
   606                           
   607                           ; 0 bytes @ 0x5A
   608  0000BA                     	ds	4
   609  0000BE                     sqrt@og:
   610                           	opt stack 0
   611                           
   612                           ; 4 bytes @ 0x5E
   613  0000BE                     	ds	4
   614  0000C2                     sqrt@z:
   615                           	opt stack 0
   616                           
   617                           ; 4 bytes @ 0x62
   618  0000C2                     	ds	4
   619  0000C6                     sqrt@i:
   620                           	opt stack 0
   621                           
   622                           ; 1 bytes @ 0x66
   623  0000C6                     	ds	1
   624  0000C7                     sqrt@q:
   625                           	opt stack 0
   626                           
   627                           ; 4 bytes @ 0x67
   628  0000C7                     	ds	4
   629  0000CB                     sqrt@x:
   630                           	opt stack 0
   631                           
   632                           ; 4 bytes @ 0x6B
   633  0000CB                     	ds	4
   634  0000CF                     ?_asin:
   635                           	opt stack 0
   636  0000CF                     asin@x:
   637                           	opt stack 0
   638                           
   639                           ; 4 bytes @ 0x6F
   640  0000CF                     	ds	4
   641  0000D3                     ?_acos:
   642                           	opt stack 0
   643  0000D3                     acos@x:
   644                           	opt stack 0
   645                           
   646                           ; 4 bytes @ 0x73
   647  0000D3                     	ds	4
   648  0000D7                     _acos$1985:
   649                           	opt stack 0
   650                           
   651                           ; 4 bytes @ 0x77
   652  0000D7                     	ds	4
   653  0000DB                     Gyros_Update@dt:
   654                           	opt stack 0
   655                           
   656                           ; 4 bytes @ 0x7B
   657  0000DB                     	ds	4
   658  0000DF                     ??_main:
   659                           
   660                           ; 0 bytes @ 0x7F
   661  0000DF                     	ds	1
   662  0000E0                     main@i:
   663                           	opt stack 0
   664                           
   665                           ; 2 bytes @ 0x80
   666  0000E0                     	ds	2
   667                           tblptru	equ	0xFF8
   668                           tblptrh	equ	0xFF7
   669                           postinc0	equ	0xFEE
   670                           wreg	equ	0xFE8
   671                           
   672                           	psect	cstackCOMRAM
   673  000001                     __pcstackCOMRAM:
   674                           	opt stack 0
   675  000001                     ??_System_LowPriorityInterrupt:
   676  000001                     
   677                           ; 1 bytes @ 0x0
   678  000001                     	ds	17
   679  000012                     ??_System_HighPriorityInterrupt:
   680                           
   681                           ; 0 bytes @ 0x11
   682  000012                     	ds	14
   683  000020                     ??_IdleI2C:
   684  000020                     ?___wmul:
   685                           	opt stack 0
   686  000020                     ?___flpack:
   687                           	opt stack 0
   688  000020                     ?_frexp:
   689                           	opt stack 0
   690  000020                     ?___flneg:
   691                           	opt stack 0
   692  000020                     ?___fltol:
   693                           	opt stack 0
   694  000020                     baudUSART@baudconfig:
   695                           	opt stack 0
   696  000020                     OpenI2C@slew:
   697                           	opt stack 0
   698  000020                     OpenUSART@spbrg:
   699                           	opt stack 0
   700  000020                     getsI2C@rdptr:
   701                           	opt stack 0
   702  000020                     ___wmul@multiplier:
   703                           	opt stack 0
   704  000020                     ___flpack@arg:
   705                           	opt stack 0
   706  000020                     ___flneg@f1:
   707                           	opt stack 0
   708  000020                     ___fltol@f1:
   709                           	opt stack 0
   710  000020                     frexp@value:
   711                           	opt stack 0
   712                           
   713                           ; 4 bytes @ 0x1F
   714  000020                     	ds	1
   715  000021                     OpenI2C@sync_mode:
   716                           	opt stack 0
   717  000021                     WriteI2C@data_out:
   718                           	opt stack 0
   719                           
   720                           ; 1 bytes @ 0x20
   721  000021                     	ds	1
   722  000022                     OpenUSART@config:
   723                           	opt stack 0
   724  000022                     EEByteWrite@address:
   725                           	opt stack 0
   726  000022                     getsI2C@length:
   727                           	opt stack 0
   728  000022                     ___wmul@multiplicand:
   729                           	opt stack 0
   730                           
   731                           ; 2 bytes @ 0x21
   732  000022                     	ds	1
   733  000023                     EEByteWrite@data:
   734                           	opt stack 0
   735  000023                     EESequentialRead@address:
   736                           	opt stack 0
   737                           
   738                           ; 1 bytes @ 0x22
   739  000023                     	ds	1
   740  000024                     ??___fltol:
   741  000024                     ?_fabs:
   742                           	opt stack 0
   743  000024                     EEByteWrite@control:
   744                           	opt stack 0
   745  000024                     ___flpack@exp:
   746                           	opt stack 0
   747  000024                     EESequentialRead@rdptr:
   748                           	opt stack 0
   749  000024                     ___wmul@product:
   750                           	opt stack 0
   751  000024                     frexp@eptr:
   752                           	opt stack 0
   753  000024                     fabs@d:
   754                           	opt stack 0
   755                           
   756                           ; 4 bytes @ 0x23
   757  000024                     	ds	1
   758  000025                     Accel_WriteRegister@value:
   759                           	opt stack 0
   760  000025                     ___flpack@sign:
   761                           	opt stack 0
   762                           
   763                           ; 1 bytes @ 0x24
   764  000025                     	ds	1
   765  000026                     ??___flpack:
   766  000026                     ??_frexp:
   767  000026                     Accel_WriteRegister@reg:
   768                           	opt stack 0
   769  000026                     EESequentialRead@length:
   770                           	opt stack 0
   771                           
   772                           ; 1 bytes @ 0x25
   773  000026                     	ds	1
   774  000027                     EESequentialRead@control:
   775                           	opt stack 0
   776                           
   777                           ; 1 bytes @ 0x26
   778  000027                     	ds	1
   779  000028                     ??___flge:
   780  000028                     Accel_ReadRegister@reg:
   781                           	opt stack 0
   782  000028                     ___fltol@sign1:
   783                           	opt stack 0
   784  000028                     Accel_ReadRegisters@out:
   785                           	opt stack 0
   786                           
   787                           ; 2 bytes @ 0x27
   788  000028                     	ds	1
   789  000029                     Accel_ReadRegister@out:
   790                           	opt stack 0
   791  000029                     ___fltol@exp1:
   792                           	opt stack 0
   793                           
   794                           ; 1 bytes @ 0x28
   795  000029                     	ds	1
   796  00002A                     Accel_StandBy@c:
   797                           	opt stack 0
   798  00002A                     Accel_Active@c:
   799                           	opt stack 0
   800  00002A                     ___altofl@sign:
   801                           	opt stack 0
   802  00002A                     ___awtofl@sign:
   803                           	opt stack 0
   804  00002A                     Accel_ReadRegisters@length:
   805                           	opt stack 0
   806                           
   807                           ; 2 bytes @ 0x29
   808  00002A                     	ds	1
   809  00002B                     ??___fladd:
   810  00002B                     Accel_Init@name:
   811                           	opt stack 0
   812                           
   813                           ; 1 bytes @ 0x2A
   814  00002B                     	ds	1
   815  00002C                     Accel_Init@fsr:
   816                           	opt stack 0
   817  00002C                     Accel_ReadRegisters@reg:
   818                           	opt stack 0
   819                           
   820                           ; 1 bytes @ 0x2B
   821  00002C                     	ds	1
   822  00002D                     tblptru	equ	0xFF8
   823                           tblptrh	equ	0xFF7
   824                           postinc0	equ	0xFEE
   825                           wreg	equ	0xFE8
   826                           
   827                           ; 0 bytes @ 0x2C
   828 ;;
   829 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   830 ;;
   831 ;; *************** function _main *****************
   832 ;; Defined at:
   833 ;;		line 67 in file "main.c"
   834 ;; Parameters:    Size  Location     Type
   835 ;;		None
   836 ;; Auto vars:     Size  Location     Type
   837 ;;  i               2  128[BANK0 ] int 
   838 ;; Return value:  Size  Location     Type
   839 ;;		None               void
   840 ;; Registers used:
   841 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   842 ;; Tracked objects:
   843 ;;		On entry : 0/0
   844 ;;		On exit  : 0/0
   845 ;;		Unchanged: 0/0
   846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   847 ;;      Params:         0       0       0       0       0       0       0
   848 ;;      Locals:         0       2       0       0       0       0       0
   849 ;;      Temps:          0       1       0       0       0       0       0
   850 ;;      Totals:         0       3       0       0       0       0       0
   851 ;;Total ram usage:        3 bytes
   852 ;; Hardware stack levels required when called:    9
   853 ;; This function calls:
   854 ;;		_Accel_Init
   855 ;;		_Gyros_Init
   856 ;;		_Gyros_Update
   857 ;;		_System_Init
   858 ;; This function is called by:
   859 ;;		Startup code after reset
   860 ;; This function uses a non-reentrant model
   861 ;;
   862                           
   863                           	psect	text0
   864  0028A8                     __ptext0:
   865                           	opt stack 0
   866  0028A8                     _main:
   867                           	opt stack 22
   868                           
   869                           ;main.c: 68: System_Init();
   870                           
   871                           ;incstack = 0
   872  0028A8  EC96  F015         	call	_System_Init	;wreg free
   873                           
   874                           ;main.c: 70: LATCbits.LATC0 = 0;
   875  0028AC  908B               	bcf	3979,0,c	;volatile
   876                           
   877                           ;main.c: 71: Accel_Init();
   878  0028AE  ECB7  F015         	call	_Accel_Init	;wreg free
   879                           
   880                           ;main.c: 72: Gyros_Init();
   881  0028B2  EC99  F013         	call	_Gyros_Init	;wreg free
   882                           
   883                           ;main.c: 73: LATCbits.LATC0 = 1;
   884  0028B6  808B               	bsf	3979,0,c	;volatile
   885  0028B8  D000               	goto	l3662
   886  0028BA                     l3662:
   887                           
   888                           ;main.c: 76: LATCbits.LATC0 = ~LATCbits.LATC0;
   889  0028BA  708B               	btg	3979,0,c	;volatile
   890                           
   891                           ;main.c: 77: Gyros_Update(1.0f);
   892  0028BC  0E00               	movlw	0
   893  0028BE  0100               	movlb	0	; () banked
   894  0028C0  6FDB               	movwf	Gyros_Update@dt& (0+255),b
   895  0028C2  0E00               	movlw	0
   896  0028C4  6FDC               	movwf	(Gyros_Update@dt+1)& (0+255),b
   897  0028C6  0E80               	movlw	128
   898  0028C8  6FDD               	movwf	(Gyros_Update@dt+2)& (0+255),b
   899  0028CA  0E3F               	movlw	63
   900  0028CC  6FDE               	movwf	(Gyros_Update@dt+3)& (0+255),b
   901  0028CE  EC3D  F003         	call	_Gyros_Update	;wreg free
   902                           
   903                           ;main.c: 79: for (int i = 0; i < 100; i++) _delay((unsigned long)((10)*(16000000/4000.0)
      +                          ));
   904  0028D2  0E00               	movlw	0
   905  0028D4  0100               	movlb	0	; () banked
   906  0028D6  6FE1               	movwf	(main@i+1)& (0+255),b
   907  0028D8  0E00               	movlw	0
   908  0028DA  6FE0               	movwf	main@i& (0+255),b
   909  0028DC                     l3668:
   910                           
   911                           ; BSR set to: 0
   912  0028DC  0100               	movlb	0	; () banked
   913  0028DE  BFE1               	btfsc	(main@i+1)& (0+255),7,b
   914  0028E0  D00A               	goto	l3672
   915  0028E2  0100               	movlb	0	; () banked
   916  0028E4  51E1               	movf	(main@i+1)& (0+255),w,b
   917  0028E6  E1E9               	bnz	l3662
   918  0028E8  0E64               	movlw	100
   919  0028EA  0100               	movlb	0	; () banked
   920  0028EC  5DE0               	subwf	main@i& (0+255),w,b
   921  0028EE  B0D8               	btfsc	status,0,c
   922  0028F0  D7E4               	goto	l3662
   923  0028F2  D001               	goto	l3672
   924                           
   925                           ; BSR set to: 0
   926  0028F4  D7E2               	goto	l3662
   927  0028F6                     l3672:
   928                           
   929                           ; BSR set to: 0
   930  0028F6  0E34               	movlw	52
   931  0028F8  0100               	movlb	0	; () banked
   932  0028FA  6FDF               	movwf	??_main& (0+255),b
   933  0028FC  0EF2               	movlw	242
   934  0028FE                     u4187:
   935  0028FE  2EE8               	decfsz	wreg,f,c
   936  002900  D7FE               	goto	u4187
   937  002902  2FDF               	decfsz	??_main& (0+255),f,b
   938  002904  D7FC               	goto	u4187
   939  002906  0100               	movlb	0	; () banked
   940  002908  4BE0               	infsnz	main@i& (0+255),f,b
   941  00290A  2BE1               	incf	(main@i+1)& (0+255),f,b
   942  00290C  D7E7               	goto	l3668
   943                           
   944                           ; BSR set to: 0
   945                           
   946                           ; BSR set to: 0
   947  00290E  D7D5               	goto	l3662
   948                           
   949                           ; BSR set to: 0
   950                           
   951                           ; BSR set to: 0
   952  002910  EF51  F000         	goto	start
   953  002914                     __end_of_main:
   954                           	opt stack 0
   955                           tblptru	equ	0xFF8
   956                           tblptrh	equ	0xFF7
   957                           postinc0	equ	0xFEE
   958                           wreg	equ	0xFE8
   959                           status	equ	0xFD8
   960                           
   961 ;; *************** function _System_Init *****************
   962 ;; Defined at:
   963 ;;		line 13 in file "system.c"
   964 ;; Parameters:    Size  Location     Type
   965 ;;		None
   966 ;; Auto vars:     Size  Location     Type
   967 ;;		None
   968 ;; Return value:  Size  Location     Type
   969 ;;		None               void
   970 ;; Registers used:
   971 ;;		wreg, status,2, status,0, cstack
   972 ;; Tracked objects:
   973 ;;		On entry : 0/0
   974 ;;		On exit  : 0/0
   975 ;;		Unchanged: 0/0
   976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   977 ;;      Params:         0       0       0       0       0       0       0
   978 ;;      Locals:         0       0       0       0       0       0       0
   979 ;;      Temps:          0       0       0       0       0       0       0
   980 ;;      Totals:         0       0       0       0       0       0       0
   981 ;;Total ram usage:        0 bytes
   982 ;; Hardware stack levels used:    1
   983 ;; Hardware stack levels required when called:    3
   984 ;; This function calls:
   985 ;;		_CloseI2C
   986 ;;		_OpenI2C
   987 ;;		_OpenUSART
   988 ;;		_baudUSART
   989 ;; This function is called by:
   990 ;;		_main
   991 ;; This function uses a non-reentrant model
   992 ;;
   993                           
   994                           	psect	text1
   995  002B2C                     __ptext1:
   996                           	opt stack 0
   997  002B2C                     _System_Init:
   998                           	opt stack 27
   999                           
  1000                           ;system.c: 15: OSCCONbits.SCS = 0b11;
  1001                           
  1002                           ; BSR set to: 0
  1003                           ;incstack = 0
  1004  002B2C  0E03               	movlw	3
  1005  002B2E  12D3               	iorwf	4051,f,c	;volatile
  1006                           
  1007                           ;system.c: 16: OSCCONbits.IRCF = 0b111;
  1008  002B30  88D3               	bsf	4051,4,c	;volatile
  1009  002B32  8AD3               	bsf	4051,5,c	;volatile
  1010  002B34  8CD3               	bsf	4051,6,c	;volatile
  1011                           
  1012                           ;system.c: 17: TRISCbits.RC0 = 0;
  1013  002B36  9094               	bcf	3988,0,c	;volatile
  1014                           
  1015                           ;system.c: 18: LATCbits.LATC0 = 0;
  1016  002B38  908B               	bcf	3979,0,c	;volatile
  1017                           
  1018                           ;system.c: 21: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  1019  002B3A  0E4F               	movlw	79
  1020  002B3C  16AB               	andwf	4011,f,c	;volatile
  1021  002B3E  9AAC               	bcf	4012,5,c	;volatile
  1022  002B40  0ECF               	movlw	207
  1023  002B42  169D               	andwf	3997,f,c	;volatile
  1024                           
  1025                           ;system.c: 22: OpenUSART(0b00000000 | 0b00000000 | 0b00000000
  1026                           ;system.c: 23: | 0b00000000 | 0b00001000 | 0b00000000, 51);
  1027  002B44  0E00               	movlw	0
  1028  002B46  6E21               	movwf	OpenUSART@spbrg+1,c
  1029  002B48  0E33               	movlw	51
  1030  002B4A  6E20               	movwf	OpenUSART@spbrg,c
  1031  002B4C  0E08               	movlw	8
  1032  002B4E  ECE2  F013         	call	_OpenUSART
  1033                           
  1034                           ;system.c: 24: baudUSART (0b00000000 | 0b00000000);
  1035  002B52  0E00               	movlw	0
  1036  002B54  ECB8  F016         	call	_baudUSART
  1037                           
  1038                           ;system.c: 27: CloseI2C();
  1039  002B58  ECBC  F016         	call	_CloseI2C	;wreg free
  1040                           
  1041                           ;system.c: 28: OpenI2C(0b00001000, 0b10000000);
  1042  002B5C  0E80               	movlw	128
  1043  002B5E  6E20               	movwf	OpenI2C@slew,c
  1044  002B60  0E08               	movlw	8
  1045  002B62  EC74  F016         	call	_OpenI2C
  1046                           
  1047                           ;system.c: 31: SSPADD = 39;
  1048  002B66  0E27               	movlw	39
  1049  002B68  6EC8               	movwf	4040,c	;volatile
  1050                           
  1051                           ;system.c: 34: LATCbits.LATC0 = 1;
  1052  002B6A  808B               	bsf	3979,0,c	;volatile
  1053  002B6C  0012               	return		;funcret
  1054  002B6E                     __end_of_System_Init:
  1055                           	opt stack 0
  1056                           tblptru	equ	0xFF8
  1057                           tblptrh	equ	0xFF7
  1058                           postinc0	equ	0xFEE
  1059                           wreg	equ	0xFE8
  1060                           status	equ	0xFD8
  1061                           
  1062 ;; *************** function _baudUSART *****************
  1063 ;; Defined at:
  1064 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\ubaud.c"
  1065 ;; Parameters:    Size  Location     Type
  1066 ;;  baudconfig      1    wreg     unsigned char 
  1067 ;; Auto vars:     Size  Location     Type
  1068 ;;  baudconfig      1   31[COMRAM] unsigned char 
  1069 ;; Return value:  Size  Location     Type
  1070 ;;		None               void
  1071 ;; Registers used:
  1072 ;;		wreg
  1073 ;; Tracked objects:
  1074 ;;		On entry : 0/0
  1075 ;;		On exit  : 0/0
  1076 ;;		Unchanged: 0/0
  1077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1078 ;;      Params:         0       0       0       0       0       0       0
  1079 ;;      Locals:         1       0       0       0       0       0       0
  1080 ;;      Temps:          0       0       0       0       0       0       0
  1081 ;;      Totals:         1       0       0       0       0       0       0
  1082 ;;Total ram usage:        1 bytes
  1083 ;; Hardware stack levels used:    1
  1084 ;; Hardware stack levels required when called:    2
  1085 ;; This function calls:
  1086 ;;		Nothing
  1087 ;; This function is called by:
  1088 ;;		_System_Init
  1089 ;; This function uses a non-reentrant model
  1090 ;;
  1091                           
  1092                           	psect	text2
  1093  002D70                     __ptext2:
  1094                           	opt stack 0
  1095  002D70                     _baudUSART:
  1096                           	opt stack 27
  1097                           
  1098                           ;incstack = 0
  1099                           ;baudUSART@baudconfig stored from wreg
  1100  002D70  6E20               	movwf	baudUSART@baudconfig,c
  1101  002D72  C020  FFB8         	movff	baudUSART@baudconfig,4024	;volatile
  1102  002D76  0012               	return		;funcret
  1103  002D78                     __end_of_baudUSART:
  1104                           	opt stack 0
  1105                           tblptru	equ	0xFF8
  1106                           tblptrh	equ	0xFF7
  1107                           postinc0	equ	0xFEE
  1108                           wreg	equ	0xFE8
  1109                           status	equ	0xFD8
  1110                           
  1111 ;; *************** function _OpenUSART *****************
  1112 ;; Defined at:
  1113 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  1114 ;; Parameters:    Size  Location     Type
  1115 ;;  config          1    wreg     unsigned char 
  1116 ;;  spbrg           2   31[COMRAM] unsigned int 
  1117 ;; Auto vars:     Size  Location     Type
  1118 ;;  config          1   33[COMRAM] unsigned char 
  1119 ;; Return value:  Size  Location     Type
  1120 ;;		None               void
  1121 ;; Registers used:
  1122 ;;		wreg, status,2
  1123 ;; Tracked objects:
  1124 ;;		On entry : 0/0
  1125 ;;		On exit  : 0/0
  1126 ;;		Unchanged: 0/0
  1127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1128 ;;      Params:         2       0       0       0       0       0       0
  1129 ;;      Locals:         1       0       0       0       0       0       0
  1130 ;;      Temps:          0       0       0       0       0       0       0
  1131 ;;      Totals:         3       0       0       0       0       0       0
  1132 ;;Total ram usage:        3 bytes
  1133 ;; Hardware stack levels used:    1
  1134 ;; Hardware stack levels required when called:    2
  1135 ;; This function calls:
  1136 ;;		Nothing
  1137 ;; This function is called by:
  1138 ;;		_System_Init
  1139 ;; This function uses a non-reentrant model
  1140 ;;
  1141                           
  1142                           	psect	text3
  1143  0027C4                     __ptext3:
  1144                           	opt stack 0
  1145  0027C4                     _OpenUSART:
  1146                           	opt stack 27
  1147                           
  1148                           ;incstack = 0
  1149                           ;OpenUSART@config stored from wreg
  1150  0027C4  6E22               	movwf	OpenUSART@config,c
  1151  0027C6  0E00               	movlw	0
  1152  0027C8  6EAC               	movwf	4012,c	;volatile
  1153  0027CA  0E00               	movlw	0
  1154  0027CC  6EAB               	movwf	4011,c	;volatile
  1155  0027CE  A022               	btfss	OpenUSART@config,0,c
  1156  0027D0  D002               	goto	l2786
  1157  0027D2  88AC               	bsf	4012,4,c	;volatile
  1158  0027D4  D000               	goto	l2786
  1159  0027D6                     l2786:
  1160  0027D6  A222               	btfss	OpenUSART@config,1,c
  1161  0027D8  D003               	goto	l2790
  1162  0027DA  8CAC               	bsf	4012,6,c	;volatile
  1163  0027DC  8CAB               	bsf	4011,6,c	;volatile
  1164  0027DE  D000               	goto	l2790
  1165  0027E0                     l2790:
  1166  0027E0  A422               	btfss	OpenUSART@config,2,c
  1167  0027E2  D002               	goto	l2794
  1168  0027E4  8EAC               	bsf	4012,7,c	;volatile
  1169  0027E6  D000               	goto	l2794
  1170  0027E8                     l2794:
  1171  0027E8  A622               	btfss	OpenUSART@config,3,c
  1172  0027EA  D002               	goto	l150
  1173  0027EC  88AB               	bsf	4011,4,c	;volatile
  1174  0027EE  D002               	goto	l2798
  1175  0027F0                     l150:
  1176  0027F0  8AAB               	bsf	4011,5,c	;volatile
  1177  0027F2  D000               	goto	l2798
  1178  0027F4                     l2798:
  1179  0027F4  B822               	btfsc	OpenUSART@config,4,c
  1180  0027F6  84AC               	bsf	4012,2,c	;volatile
  1181  0027F8  989E               	bcf	3998,4,c	;volatile
  1182  0027FA  AA22               	btfss	OpenUSART@config,5,c
  1183  0027FC  D002               	goto	l2806
  1184  0027FE  86AB               	bsf	4011,3,c	;volatile
  1185  002800  D000               	goto	l2806
  1186  002802                     l2806:
  1187  002802  AC22               	btfss	OpenUSART@config,6,c
  1188  002804  D002               	goto	l154
  1189  002806  8A9D               	bsf	3997,5,c	;volatile
  1190  002808  D001               	goto	l155
  1191  00280A                     l154:
  1192  00280A  9A9D               	bcf	3997,5,c	;volatile
  1193  00280C                     l155:
  1194  00280C  9A9E               	bcf	3998,5,c	;volatile
  1195  00280E  AE22               	btfss	OpenUSART@config,7,c
  1196  002810  D002               	goto	l156
  1197  002812  889D               	bsf	3997,4,c	;volatile
  1198  002814  D001               	goto	l157
  1199  002816                     l156:
  1200  002816  989D               	bcf	3997,4,c	;volatile
  1201  002818                     l157:
  1202  002818  C020  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  1203  00281C  5021               	movf	OpenUSART@spbrg+1,w,c
  1204  00281E  6EB0               	movwf	4016,c	;volatile
  1205  002820  8AAC               	bsf	4012,5,c	;volatile
  1206  002822  8EAB               	bsf	4011,7,c	;volatile
  1207  002824  9C94               	bcf	3988,6,c	;volatile
  1208  002826  8E94               	bsf	3988,7,c	;volatile
  1209  002828  A8AC               	btfss	4012,4,c	;volatile
  1210  00282A  0012               	return	
  1211  00282C  BEAC               	btfsc	4012,7,c	;volatile
  1212  00282E  0012               	return	
  1213  002830  8C94               	bsf	3988,6,c	;volatile
  1214  002832  0012               	return	
  1215  002834  0012               	return		;funcret
  1216  002836                     __end_of_OpenUSART:
  1217                           	opt stack 0
  1218                           tblptru	equ	0xFF8
  1219                           tblptrh	equ	0xFF7
  1220                           postinc0	equ	0xFEE
  1221                           wreg	equ	0xFE8
  1222                           status	equ	0xFD8
  1223                           
  1224 ;; *************** function _OpenI2C *****************
  1225 ;; Defined at:
  1226 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_open.c"
  1227 ;; Parameters:    Size  Location     Type
  1228 ;;  sync_mode       1    wreg     unsigned char 
  1229 ;;  slew            1   31[COMRAM] unsigned char 
  1230 ;; Auto vars:     Size  Location     Type
  1231 ;;  sync_mode       1   32[COMRAM] unsigned char 
  1232 ;; Return value:  Size  Location     Type
  1233 ;;		None               void
  1234 ;; Registers used:
  1235 ;;		wreg, status,2, status,0
  1236 ;; Tracked objects:
  1237 ;;		On entry : 0/0
  1238 ;;		On exit  : 0/0
  1239 ;;		Unchanged: 0/0
  1240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1241 ;;      Params:         1       0       0       0       0       0       0
  1242 ;;      Locals:         1       0       0       0       0       0       0
  1243 ;;      Temps:          0       0       0       0       0       0       0
  1244 ;;      Totals:         2       0       0       0       0       0       0
  1245 ;;Total ram usage:        2 bytes
  1246 ;; Hardware stack levels used:    1
  1247 ;; Hardware stack levels required when called:    2
  1248 ;; This function calls:
  1249 ;;		Nothing
  1250 ;; This function is called by:
  1251 ;;		_System_Init
  1252 ;; This function uses a non-reentrant model
  1253 ;;
  1254                           
  1255                           	psect	text4
  1256  002CE8                     __ptext4:
  1257                           	opt stack 0
  1258  002CE8                     _OpenI2C:
  1259                           	opt stack 27
  1260                           
  1261                           ;incstack = 0
  1262                           ;OpenI2C@sync_mode stored from wreg
  1263  002CE8  6E21               	movwf	OpenI2C@sync_mode,c
  1264  002CEA  0E3F               	movlw	63
  1265  002CEC  16C7               	andwf	4039,f,c	;volatile
  1266  002CEE  0E00               	movlw	0
  1267  002CF0  6EC6               	movwf	4038,c	;volatile
  1268  002CF2  0E00               	movlw	0
  1269  002CF4  6EC5               	movwf	4037,c	;volatile
  1270  002CF6  5021               	movf	OpenI2C@sync_mode,w,c
  1271  002CF8  12C6               	iorwf	4038,f,c	;volatile
  1272  002CFA  5020               	movf	OpenI2C@slew,w,c
  1273  002CFC  12C7               	iorwf	4039,f,c	;volatile
  1274  002CFE  8694               	bsf	3988,3,c	;volatile
  1275  002D00  8894               	bsf	3988,4,c	;volatile
  1276  002D02  8AC6               	bsf	4038,5,c	;volatile
  1277  002D04  0012               	return		;funcret
  1278  002D06                     __end_of_OpenI2C:
  1279                           	opt stack 0
  1280                           tblptru	equ	0xFF8
  1281                           tblptrh	equ	0xFF7
  1282                           postinc0	equ	0xFEE
  1283                           wreg	equ	0xFE8
  1284                           status	equ	0xFD8
  1285                           
  1286 ;; *************** function _CloseI2C *****************
  1287 ;; Defined at:
  1288 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_clos.c"
  1289 ;; Parameters:    Size  Location     Type
  1290 ;;		None
  1291 ;; Auto vars:     Size  Location     Type
  1292 ;;		None
  1293 ;; Return value:  Size  Location     Type
  1294 ;;		None               void
  1295 ;; Registers used:
  1296 ;;		status,2, status,0
  1297 ;; Tracked objects:
  1298 ;;		On entry : 0/0
  1299 ;;		On exit  : 0/0
  1300 ;;		Unchanged: 0/0
  1301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1302 ;;      Params:         0       0       0       0       0       0       0
  1303 ;;      Locals:         0       0       0       0       0       0       0
  1304 ;;      Temps:          0       0       0       0       0       0       0
  1305 ;;      Totals:         0       0       0       0       0       0       0
  1306 ;;Total ram usage:        0 bytes
  1307 ;; Hardware stack levels used:    1
  1308 ;; Hardware stack levels required when called:    2
  1309 ;; This function calls:
  1310 ;;		Nothing
  1311 ;; This function is called by:
  1312 ;;		_System_Init
  1313 ;; This function uses a non-reentrant model
  1314 ;;
  1315                           
  1316                           	psect	text5
  1317  002D78                     __ptext5:
  1318                           	opt stack 0
  1319  002D78                     _CloseI2C:
  1320                           	opt stack 27
  1321                           
  1322                           ;incstack = 0
  1323  002D78  9AC6               	bcf	4038,5,c	;volatile
  1324  002D7A  0012               	return		;funcret
  1325  002D7C                     __end_of_CloseI2C:
  1326                           	opt stack 0
  1327                           tblptru	equ	0xFF8
  1328                           tblptrh	equ	0xFF7
  1329                           postinc0	equ	0xFEE
  1330                           wreg	equ	0xFE8
  1331                           status	equ	0xFD8
  1332                           
  1333 ;; *************** function _Gyros_Update *****************
  1334 ;; Defined at:
  1335 ;;		line 17 in file "gyros.c"
  1336 ;; Parameters:    Size  Location     Type
  1337 ;;  dt              4  123[BANK0 ] float 
  1338 ;; Auto vars:     Size  Location     Type
  1339 ;;  a              12   56[BANK1 ] struct .
  1340 ;; Return value:  Size  Location     Type
  1341 ;;		None               void
  1342 ;; Registers used:
  1343 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1344 ;; Tracked objects:
  1345 ;;		On entry : 0/0
  1346 ;;		On exit  : 0/0
  1347 ;;		Unchanged: 0/0
  1348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1349 ;;      Params:         0       4       0       0       0       0       0
  1350 ;;      Locals:         0       0      44       0       0       0       0
  1351 ;;      Temps:          0       0       0       0       0       0       0
  1352 ;;      Totals:         0       4      44       0       0       0       0
  1353 ;;Total ram usage:       48 bytes
  1354 ;; Hardware stack levels used:    1
  1355 ;; Hardware stack levels required when called:    8
  1356 ;; This function calls:
  1357 ;;		_Accel_Get
  1358 ;;		___fladd
  1359 ;;		___fldiv
  1360 ;;		___flmul
  1361 ;;		_acos
  1362 ;;		_atan
  1363 ;;		_pow
  1364 ;;		_sqrt
  1365 ;; This function is called by:
  1366 ;;		_main
  1367 ;; This function uses a non-reentrant model
  1368 ;;
  1369                           
  1370                           	psect	text6
  1371  00067A                     __ptext6:
  1372                           	opt stack 0
  1373  00067A                     _Gyros_Update:
  1374                           	opt stack 22
  1375                           
  1376                           ;gyros.c: 19: vec3f a;
  1377                           ;gyros.c: 20: Accel_Get(&a);
  1378                           
  1379                           ;incstack = 0
  1380  00067A  0E38               	movlw	low Gyros_Update@a
  1381  00067C  0100               	movlb	0	; () banked
  1382  00067E  6F8D               	movwf	Accel_Get@out& (0+255),b
  1383  000680  0E01               	movlw	high Gyros_Update@a
  1384  000682  0100               	movlb	0	; () banked
  1385  000684  6F8E               	movwf	(Accel_Get@out+1)& (0+255),b
  1386  000686  EC97  F00C         	call	_Accel_Get	;wreg free
  1387                           
  1388                           ;gyros.c: 22: Gyros_Angle.theta = atan(a.x / a.y);
  1389  00068A  C138  F07E         	movff	Gyros_Update@a,___fldiv@f1
  1390  00068E  C139  F07F         	movff	Gyros_Update@a+1,___fldiv@f1+1
  1391  000692  C13A  F080         	movff	Gyros_Update@a+2,___fldiv@f1+2
  1392  000696  C13B  F081         	movff	Gyros_Update@a+3,___fldiv@f1+3
  1393  00069A  C13C  F082         	movff	Gyros_Update@a+4,___fldiv@f2
  1394  00069E  C13D  F083         	movff	Gyros_Update@a+5,___fldiv@f2+1
  1395  0006A2  C13E  F084         	movff	Gyros_Update@a+6,___fldiv@f2+2
  1396  0006A6  C13F  F085         	movff	Gyros_Update@a+7,___fldiv@f2+3
  1397  0006AA  ECCB  F00E         	call	___fldiv	;wreg free
  1398  0006AE  C07E  F118         	movff	?___fldiv,_Gyros_Update$1977
  1399  0006B2  C07F  F119         	movff	?___fldiv+1,_Gyros_Update$1977+1
  1400  0006B6  C080  F11A         	movff	?___fldiv+2,_Gyros_Update$1977+2
  1401  0006BA  C081  F11B         	movff	?___fldiv+3,_Gyros_Update$1977+3
  1402                           
  1403                           ;gyros.c: 22: Gyros_Angle.theta = atan(a.x / a.y);
  1404  0006BE  C118  F08E         	movff	_Gyros_Update$1977,atan@f
  1405  0006C2  C119  F08F         	movff	_Gyros_Update$1977+1,atan@f+1
  1406  0006C6  C11A  F090         	movff	_Gyros_Update$1977+2,atan@f+2
  1407  0006CA  C11B  F091         	movff	_Gyros_Update$1977+3,atan@f+3
  1408  0006CE  EC58  F009         	call	_atan	;wreg free
  1409  0006D2  C08E  F150         	movff	?_atan,gyros@Gyros_Angle
  1410  0006D6  C08F  F151         	movff	?_atan+1,gyros@Gyros_Angle+1
  1411  0006DA  C090  F152         	movff	?_atan+2,gyros@Gyros_Angle+2
  1412  0006DE  C091  F153         	movff	?_atan+3,gyros@Gyros_Angle+3
  1413                           
  1414                           ;gyros.c: 23: Gyros_Angle.phi = acos(a.z / (sqrt(pow(a.x, 2.0) + pow(a.y, 2.0) + pow(a.z
      +                          , 2.0))));
  1415  0006E2  0E00               	movlw	0
  1416  0006E4  0100               	movlb	0	; () banked
  1417  0006E6  6FA5               	movwf	pow@y& (0+255),b
  1418  0006E8  0E00               	movlw	0
  1419  0006EA  6FA6               	movwf	(pow@y+1)& (0+255),b
  1420  0006EC  0E00               	movlw	0
  1421  0006EE  6FA7               	movwf	(pow@y+2)& (0+255),b
  1422  0006F0  0E40               	movlw	64
  1423  0006F2  6FA8               	movwf	(pow@y+3)& (0+255),b
  1424  0006F4  C13C  F0A1         	movff	Gyros_Update@a+4,pow@x
  1425  0006F8  C13D  F0A2         	movff	Gyros_Update@a+5,pow@x+1
  1426  0006FC  C13E  F0A3         	movff	Gyros_Update@a+6,pow@x+2
  1427  000700  C13F  F0A4         	movff	Gyros_Update@a+7,pow@x+3
  1428  000704  EC97  F00B         	call	_pow	;wreg free
  1429  000708  C0A1  F11C         	movff	?_pow,_Gyros_Update$1978
  1430  00070C  C0A2  F11D         	movff	?_pow+1,_Gyros_Update$1978+1
  1431  000710  C0A3  F11E         	movff	?_pow+2,_Gyros_Update$1978+2
  1432  000714  C0A4  F11F         	movff	?_pow+3,_Gyros_Update$1978+3
  1433                           
  1434                           ;gyros.c: 23: Gyros_Angle.phi = acos(a.z / (sqrt(pow(a.x, 2.0) + pow(a.y, 2.0) + pow(a.z
      +                          , 2.0))));
  1435  000718  0E00               	movlw	0
  1436  00071A  0100               	movlb	0	; () banked
  1437  00071C  6FA5               	movwf	pow@y& (0+255),b
  1438  00071E  0E00               	movlw	0
  1439  000720  6FA6               	movwf	(pow@y+1)& (0+255),b
  1440  000722  0E00               	movlw	0
  1441  000724  6FA7               	movwf	(pow@y+2)& (0+255),b
  1442  000726  0E40               	movlw	64
  1443  000728  6FA8               	movwf	(pow@y+3)& (0+255),b
  1444  00072A  C138  F0A1         	movff	Gyros_Update@a,pow@x
  1445  00072E  C139  F0A2         	movff	Gyros_Update@a+1,pow@x+1
  1446  000732  C13A  F0A3         	movff	Gyros_Update@a+2,pow@x+2
  1447  000736  C13B  F0A4         	movff	Gyros_Update@a+3,pow@x+3
  1448  00073A  EC97  F00B         	call	_pow	;wreg free
  1449  00073E  C0A1  F120         	movff	?_pow,_Gyros_Update$1979
  1450  000742  C0A2  F121         	movff	?_pow+1,_Gyros_Update$1979+1
  1451  000746  C0A3  F122         	movff	?_pow+2,_Gyros_Update$1979+2
  1452  00074A  C0A4  F123         	movff	?_pow+3,_Gyros_Update$1979+3
  1453                           
  1454                           ;gyros.c: 23: Gyros_Angle.phi = acos(a.z / (sqrt(pow(a.x, 2.0) + pow(a.y, 2.0) + pow(a.z
      +                          , 2.0))));
  1455  00074E  0E00               	movlw	0
  1456  000750  0100               	movlb	0	; () banked
  1457  000752  6FA5               	movwf	pow@y& (0+255),b
  1458  000754  0E00               	movlw	0
  1459  000756  6FA6               	movwf	(pow@y+1)& (0+255),b
  1460  000758  0E00               	movlw	0
  1461  00075A  6FA7               	movwf	(pow@y+2)& (0+255),b
  1462  00075C  0E40               	movlw	64
  1463  00075E  6FA8               	movwf	(pow@y+3)& (0+255),b
  1464  000760  C140  F0A1         	movff	Gyros_Update@a+8,pow@x
  1465  000764  C141  F0A2         	movff	Gyros_Update@a+9,pow@x+1
  1466  000768  C142  F0A3         	movff	Gyros_Update@a+10,pow@x+2
  1467  00076C  C143  F0A4         	movff	Gyros_Update@a+11,pow@x+3
  1468  000770  EC97  F00B         	call	_pow	;wreg free
  1469  000774  C0A1  F124         	movff	?_pow,_Gyros_Update$1980
  1470  000778  C0A2  F125         	movff	?_pow+1,_Gyros_Update$1980+1
  1471  00077C  C0A3  F126         	movff	?_pow+2,_Gyros_Update$1980+2
  1472  000780  C0A4  F127         	movff	?_pow+3,_Gyros_Update$1980+3
  1473                           
  1474                           ;gyros.c: 23: Gyros_Angle.phi = acos(a.z / (sqrt(pow(a.x, 2.0) + pow(a.y, 2.0) + pow(a.z
      +                          , 2.0))));
  1475  000784  C11C  F068         	movff	_Gyros_Update$1978,___fladd@f2
  1476  000788  C11D  F069         	movff	_Gyros_Update$1978+1,___fladd@f2+1
  1477  00078C  C11E  F06A         	movff	_Gyros_Update$1978+2,___fladd@f2+2
  1478  000790  C11F  F06B         	movff	_Gyros_Update$1978+3,___fladd@f2+3
  1479  000794  C120  F064         	movff	_Gyros_Update$1979,___fladd@f1
  1480  000798  C121  F065         	movff	_Gyros_Update$1979+1,___fladd@f1+1
  1481  00079C  C122  F066         	movff	_Gyros_Update$1979+2,___fladd@f1+2
  1482  0007A0  C123  F067         	movff	_Gyros_Update$1979+3,___fladd@f1+3
  1483  0007A4  EC28  F008         	call	___fladd	;wreg free
  1484  0007A8  C064  F128         	movff	?___fladd,_Gyros_Update$1981
  1485  0007AC  C065  F129         	movff	?___fladd+1,_Gyros_Update$1981+1
  1486  0007B0  C066  F12A         	movff	?___fladd+2,_Gyros_Update$1981+2
  1487  0007B4  C067  F12B         	movff	?___fladd+3,_Gyros_Update$1981+3
  1488                           
  1489                           ;gyros.c: 23: Gyros_Angle.phi = acos(a.z / (sqrt(pow(a.x, 2.0) + pow(a.y, 2.0) + pow(a.z
      +                          , 2.0))));
  1490  0007B8  C124  F068         	movff	_Gyros_Update$1980,___fladd@f2
  1491  0007BC  C125  F069         	movff	_Gyros_Update$1980+1,___fladd@f2+1
  1492  0007C0  C126  F06A         	movff	_Gyros_Update$1980+2,___fladd@f2+2
  1493  0007C4  C127  F06B         	movff	_Gyros_Update$1980+3,___fladd@f2+3
  1494  0007C8  C128  F064         	movff	_Gyros_Update$1981,___fladd@f1
  1495  0007CC  C129  F065         	movff	_Gyros_Update$1981+1,___fladd@f1+1
  1496  0007D0  C12A  F066         	movff	_Gyros_Update$1981+2,___fladd@f1+2
  1497  0007D4  C12B  F067         	movff	_Gyros_Update$1981+3,___fladd@f1+3
  1498  0007D8  EC28  F008         	call	___fladd	;wreg free
  1499  0007DC  C064  F12C         	movff	?___fladd,_Gyros_Update$1982
  1500  0007E0  C065  F12D         	movff	?___fladd+1,_Gyros_Update$1982+1
  1501  0007E4  C066  F12E         	movff	?___fladd+2,_Gyros_Update$1982+2
  1502  0007E8  C067  F12F         	movff	?___fladd+3,_Gyros_Update$1982+3
  1503                           
  1504                           ;gyros.c: 23: Gyros_Angle.phi = acos(a.z / (sqrt(pow(a.x, 2.0) + pow(a.y, 2.0) + pow(a.z
      +                          , 2.0))));
  1505  0007EC  C140  F07E         	movff	Gyros_Update@a+8,___fldiv@f1
  1506  0007F0  C141  F07F         	movff	Gyros_Update@a+9,___fldiv@f1+1
  1507  0007F4  C142  F080         	movff	Gyros_Update@a+10,___fldiv@f1+2
  1508  0007F8  C143  F081         	movff	Gyros_Update@a+11,___fldiv@f1+3
  1509  0007FC  C12C  F0B6         	movff	_Gyros_Update$1982,sqrt@y
  1510  000800  C12D  F0B7         	movff	_Gyros_Update$1982+1,sqrt@y+1
  1511  000804  C12E  F0B8         	movff	_Gyros_Update$1982+2,sqrt@y+2
  1512  000808  C12F  F0B9         	movff	_Gyros_Update$1982+3,sqrt@y+3
  1513  00080C  EC83  F00A         	call	_sqrt	;wreg free
  1514  000810  C0B6  F082         	movff	?_sqrt,___fldiv@f2
  1515  000814  C0B7  F083         	movff	?_sqrt+1,___fldiv@f2+1
  1516  000818  C0B8  F084         	movff	?_sqrt+2,___fldiv@f2+2
  1517  00081C  C0B9  F085         	movff	?_sqrt+3,___fldiv@f2+3
  1518  000820  ECCB  F00E         	call	___fldiv	;wreg free
  1519  000824  C07E  F130         	movff	?___fldiv,_Gyros_Update$1983
  1520  000828  C07F  F131         	movff	?___fldiv+1,_Gyros_Update$1983+1
  1521  00082C  C080  F132         	movff	?___fldiv+2,_Gyros_Update$1983+2
  1522  000830  C081  F133         	movff	?___fldiv+3,_Gyros_Update$1983+3
  1523                           
  1524                           ;gyros.c: 23: Gyros_Angle.phi = acos(a.z / (sqrt(pow(a.x, 2.0) + pow(a.y, 2.0) + pow(a.z
      +                          , 2.0))));
  1525  000834  C130  F0D3         	movff	_Gyros_Update$1983,acos@x
  1526  000838  C131  F0D4         	movff	_Gyros_Update$1983+1,acos@x+1
  1527  00083C  C132  F0D5         	movff	_Gyros_Update$1983+2,acos@x+2
  1528  000840  C133  F0D6         	movff	_Gyros_Update$1983+3,acos@x+3
  1529  000844  EC1B  F014         	call	_acos	;wreg free
  1530  000848  C0D3  F154         	movff	?_acos,gyros@Gyros_Angle+4
  1531  00084C  C0D4  F155         	movff	?_acos+1,gyros@Gyros_Angle+5
  1532  000850  C0D5  F156         	movff	?_acos+2,gyros@Gyros_Angle+6
  1533  000854  C0D6  F157         	movff	?_acos+3,gyros@Gyros_Angle+7
  1534                           
  1535                           ;gyros.c: 25: Gyros_Vel.x += (a.x + Gyros_LastAccel.x) * dt / 2.0;
  1536  000858  0E00               	movlw	0
  1537  00085A  0100               	movlb	0	; () banked
  1538  00085C  6F82               	movwf	___fldiv@f2& (0+255),b
  1539  00085E  0E00               	movlw	0
  1540  000860  6F83               	movwf	(___fldiv@f2+1)& (0+255),b
  1541  000862  0E00               	movlw	0
  1542  000864  6F84               	movwf	(___fldiv@f2+2)& (0+255),b
  1543  000866  0E40               	movlw	64
  1544  000868  6F85               	movwf	(___fldiv@f2+3)& (0+255),b
  1545  00086A  C0DB  F073         	movff	Gyros_Update@dt,___flmul@f2
  1546  00086E  C0DC  F074         	movff	Gyros_Update@dt+1,___flmul@f2+1
  1547  000872  C0DD  F075         	movff	Gyros_Update@dt+2,___flmul@f2+2
  1548  000876  C0DE  F076         	movff	Gyros_Update@dt+3,___flmul@f2+3
  1549  00087A  C0E2  F068         	movff	gyros@Gyros_LastAccel,___fladd@f2
  1550  00087E  C0E3  F069         	movff	gyros@Gyros_LastAccel+1,___fladd@f2+1
  1551  000882  C0E4  F06A         	movff	gyros@Gyros_LastAccel+2,___fladd@f2+2
  1552  000886  C0E5  F06B         	movff	gyros@Gyros_LastAccel+3,___fladd@f2+3
  1553  00088A  C138  F064         	movff	Gyros_Update@a,___fladd@f1
  1554  00088E  C139  F065         	movff	Gyros_Update@a+1,___fladd@f1+1
  1555  000892  C13A  F066         	movff	Gyros_Update@a+2,___fladd@f1+2
  1556  000896  C13B  F067         	movff	Gyros_Update@a+3,___fladd@f1+3
  1557  00089A  EC28  F008         	call	___fladd	;wreg free
  1558  00089E  C064  F06F         	movff	?___fladd,___flmul@f1
  1559  0008A2  C065  F070         	movff	?___fladd+1,___flmul@f1+1
  1560  0008A6  C066  F071         	movff	?___fladd+2,___flmul@f1+2
  1561  0008AA  C067  F072         	movff	?___fladd+3,___flmul@f1+3
  1562  0008AE  EC19  F00E         	call	___flmul	;wreg free
  1563  0008B2  C06F  F07E         	movff	?___flmul,___fldiv@f1
  1564  0008B6  C070  F07F         	movff	?___flmul+1,___fldiv@f1+1
  1565  0008BA  C071  F080         	movff	?___flmul+2,___fldiv@f1+2
  1566  0008BE  C072  F081         	movff	?___flmul+3,___fldiv@f1+3
  1567  0008C2  ECCB  F00E         	call	___fldiv	;wreg free
  1568  0008C6  C07E  F134         	movff	?___fldiv,_Gyros_Update$1984
  1569  0008CA  C07F  F135         	movff	?___fldiv+1,_Gyros_Update$1984+1
  1570  0008CE  C080  F136         	movff	?___fldiv+2,_Gyros_Update$1984+2
  1571  0008D2  C081  F137         	movff	?___fldiv+3,_Gyros_Update$1984+3
  1572                           
  1573                           ;gyros.c: 25: Gyros_Vel.x += (a.x + Gyros_LastAccel.x) * dt / 2.0;
  1574  0008D6  C0EE  F064         	movff	gyros@Gyros_Vel,___fladd@f1
  1575  0008DA  C0EF  F065         	movff	gyros@Gyros_Vel+1,___fladd@f1+1
  1576  0008DE  C0F0  F066         	movff	gyros@Gyros_Vel+2,___fladd@f1+2
  1577  0008E2  C0F1  F067         	movff	gyros@Gyros_Vel+3,___fladd@f1+3
  1578  0008E6  C134  F068         	movff	_Gyros_Update$1984,___fladd@f2
  1579  0008EA  C135  F069         	movff	_Gyros_Update$1984+1,___fladd@f2+1
  1580  0008EE  C136  F06A         	movff	_Gyros_Update$1984+2,___fladd@f2+2
  1581  0008F2  C137  F06B         	movff	_Gyros_Update$1984+3,___fladd@f2+3
  1582  0008F6  EC28  F008         	call	___fladd	;wreg free
  1583  0008FA  C064  F0EE         	movff	?___fladd,gyros@Gyros_Vel
  1584  0008FE  C065  F0EF         	movff	?___fladd+1,gyros@Gyros_Vel+1
  1585  000902  C066  F0F0         	movff	?___fladd+2,gyros@Gyros_Vel+2
  1586  000906  C067  F0F1         	movff	?___fladd+3,gyros@Gyros_Vel+3
  1587                           
  1588                           ;gyros.c: 26: Gyros_Vel.y += (a.y + Gyros_LastAccel.y) * dt / 2.0;
  1589  00090A  0E00               	movlw	0
  1590  00090C  0100               	movlb	0	; () banked
  1591  00090E  6F82               	movwf	___fldiv@f2& (0+255),b
  1592  000910  0E00               	movlw	0
  1593  000912  6F83               	movwf	(___fldiv@f2+1)& (0+255),b
  1594  000914  0E00               	movlw	0
  1595  000916  6F84               	movwf	(___fldiv@f2+2)& (0+255),b
  1596  000918  0E40               	movlw	64
  1597  00091A  6F85               	movwf	(___fldiv@f2+3)& (0+255),b
  1598  00091C  C0DB  F073         	movff	Gyros_Update@dt,___flmul@f2
  1599  000920  C0DC  F074         	movff	Gyros_Update@dt+1,___flmul@f2+1
  1600  000924  C0DD  F075         	movff	Gyros_Update@dt+2,___flmul@f2+2
  1601  000928  C0DE  F076         	movff	Gyros_Update@dt+3,___flmul@f2+3
  1602  00092C  C0E6  F068         	movff	gyros@Gyros_LastAccel+4,___fladd@f2
  1603  000930  C0E7  F069         	movff	gyros@Gyros_LastAccel+5,___fladd@f2+1
  1604  000934  C0E8  F06A         	movff	gyros@Gyros_LastAccel+6,___fladd@f2+2
  1605  000938  C0E9  F06B         	movff	gyros@Gyros_LastAccel+7,___fladd@f2+3
  1606  00093C  C13C  F064         	movff	Gyros_Update@a+4,___fladd@f1
  1607  000940  C13D  F065         	movff	Gyros_Update@a+5,___fladd@f1+1
  1608  000944  C13E  F066         	movff	Gyros_Update@a+6,___fladd@f1+2
  1609  000948  C13F  F067         	movff	Gyros_Update@a+7,___fladd@f1+3
  1610  00094C  EC28  F008         	call	___fladd	;wreg free
  1611  000950  C064  F06F         	movff	?___fladd,___flmul@f1
  1612  000954  C065  F070         	movff	?___fladd+1,___flmul@f1+1
  1613  000958  C066  F071         	movff	?___fladd+2,___flmul@f1+2
  1614  00095C  C067  F072         	movff	?___fladd+3,___flmul@f1+3
  1615  000960  EC19  F00E         	call	___flmul	;wreg free
  1616  000964  C06F  F07E         	movff	?___flmul,___fldiv@f1
  1617  000968  C070  F07F         	movff	?___flmul+1,___fldiv@f1+1
  1618  00096C  C071  F080         	movff	?___flmul+2,___fldiv@f1+2
  1619  000970  C072  F081         	movff	?___flmul+3,___fldiv@f1+3
  1620  000974  ECCB  F00E         	call	___fldiv	;wreg free
  1621  000978  C07E  F134         	movff	?___fldiv,_Gyros_Update$1984
  1622  00097C  C07F  F135         	movff	?___fldiv+1,_Gyros_Update$1984+1
  1623  000980  C080  F136         	movff	?___fldiv+2,_Gyros_Update$1984+2
  1624  000984  C081  F137         	movff	?___fldiv+3,_Gyros_Update$1984+3
  1625                           
  1626                           ;gyros.c: 26: Gyros_Vel.y += (a.y + Gyros_LastAccel.y) * dt / 2.0;
  1627  000988  C0F2  F064         	movff	gyros@Gyros_Vel+4,___fladd@f1
  1628  00098C  C0F3  F065         	movff	gyros@Gyros_Vel+5,___fladd@f1+1
  1629  000990  C0F4  F066         	movff	gyros@Gyros_Vel+6,___fladd@f1+2
  1630  000994  C0F5  F067         	movff	gyros@Gyros_Vel+7,___fladd@f1+3
  1631  000998  C134  F068         	movff	_Gyros_Update$1984,___fladd@f2
  1632  00099C  C135  F069         	movff	_Gyros_Update$1984+1,___fladd@f2+1
  1633  0009A0  C136  F06A         	movff	_Gyros_Update$1984+2,___fladd@f2+2
  1634  0009A4  C137  F06B         	movff	_Gyros_Update$1984+3,___fladd@f2+3
  1635  0009A8  EC28  F008         	call	___fladd	;wreg free
  1636  0009AC  C064  F0F2         	movff	?___fladd,gyros@Gyros_Vel+4
  1637  0009B0  C065  F0F3         	movff	?___fladd+1,gyros@Gyros_Vel+5
  1638  0009B4  C066  F0F4         	movff	?___fladd+2,gyros@Gyros_Vel+6
  1639  0009B8  C067  F0F5         	movff	?___fladd+3,gyros@Gyros_Vel+7
  1640                           
  1641                           ;gyros.c: 27: Gyros_Vel.z += (a.z + Gyros_LastAccel.z) * dt / 2.0;
  1642  0009BC  0E00               	movlw	0
  1643  0009BE  0100               	movlb	0	; () banked
  1644  0009C0  6F82               	movwf	___fldiv@f2& (0+255),b
  1645  0009C2  0E00               	movlw	0
  1646  0009C4  6F83               	movwf	(___fldiv@f2+1)& (0+255),b
  1647  0009C6  0E00               	movlw	0
  1648  0009C8  6F84               	movwf	(___fldiv@f2+2)& (0+255),b
  1649  0009CA  0E40               	movlw	64
  1650  0009CC  6F85               	movwf	(___fldiv@f2+3)& (0+255),b
  1651  0009CE  C0DB  F073         	movff	Gyros_Update@dt,___flmul@f2
  1652  0009D2  C0DC  F074         	movff	Gyros_Update@dt+1,___flmul@f2+1
  1653  0009D6  C0DD  F075         	movff	Gyros_Update@dt+2,___flmul@f2+2
  1654  0009DA  C0DE  F076         	movff	Gyros_Update@dt+3,___flmul@f2+3
  1655  0009DE  C0EA  F068         	movff	gyros@Gyros_LastAccel+8,___fladd@f2
  1656  0009E2  C0EB  F069         	movff	gyros@Gyros_LastAccel+9,___fladd@f2+1
  1657  0009E6  C0EC  F06A         	movff	gyros@Gyros_LastAccel+10,___fladd@f2+2
  1658  0009EA  C0ED  F06B         	movff	gyros@Gyros_LastAccel+11,___fladd@f2+3
  1659  0009EE  C140  F064         	movff	Gyros_Update@a+8,___fladd@f1
  1660  0009F2  C141  F065         	movff	Gyros_Update@a+9,___fladd@f1+1
  1661  0009F6  C142  F066         	movff	Gyros_Update@a+10,___fladd@f1+2
  1662  0009FA  C143  F067         	movff	Gyros_Update@a+11,___fladd@f1+3
  1663  0009FE  EC28  F008         	call	___fladd	;wreg free
  1664  000A02  C064  F06F         	movff	?___fladd,___flmul@f1
  1665  000A06  C065  F070         	movff	?___fladd+1,___flmul@f1+1
  1666  000A0A  C066  F071         	movff	?___fladd+2,___flmul@f1+2
  1667  000A0E  C067  F072         	movff	?___fladd+3,___flmul@f1+3
  1668  000A12  EC19  F00E         	call	___flmul	;wreg free
  1669  000A16  C06F  F07E         	movff	?___flmul,___fldiv@f1
  1670  000A1A  C070  F07F         	movff	?___flmul+1,___fldiv@f1+1
  1671  000A1E  C071  F080         	movff	?___flmul+2,___fldiv@f1+2
  1672  000A22  C072  F081         	movff	?___flmul+3,___fldiv@f1+3
  1673  000A26  ECCB  F00E         	call	___fldiv	;wreg free
  1674  000A2A  C07E  F134         	movff	?___fldiv,_Gyros_Update$1984
  1675  000A2E  C07F  F135         	movff	?___fldiv+1,_Gyros_Update$1984+1
  1676  000A32  C080  F136         	movff	?___fldiv+2,_Gyros_Update$1984+2
  1677  000A36  C081  F137         	movff	?___fldiv+3,_Gyros_Update$1984+3
  1678                           
  1679                           ;gyros.c: 27: Gyros_Vel.z += (a.z + Gyros_LastAccel.z) * dt / 2.0;
  1680  000A3A  C0F6  F064         	movff	gyros@Gyros_Vel+8,___fladd@f1
  1681  000A3E  C0F7  F065         	movff	gyros@Gyros_Vel+9,___fladd@f1+1
  1682  000A42  C0F8  F066         	movff	gyros@Gyros_Vel+10,___fladd@f1+2
  1683  000A46  C0F9  F067         	movff	gyros@Gyros_Vel+11,___fladd@f1+3
  1684  000A4A  C134  F068         	movff	_Gyros_Update$1984,___fladd@f2
  1685  000A4E  C135  F069         	movff	_Gyros_Update$1984+1,___fladd@f2+1
  1686  000A52  C136  F06A         	movff	_Gyros_Update$1984+2,___fladd@f2+2
  1687  000A56  C137  F06B         	movff	_Gyros_Update$1984+3,___fladd@f2+3
  1688  000A5A  EC28  F008         	call	___fladd	;wreg free
  1689  000A5E  C064  F0F6         	movff	?___fladd,gyros@Gyros_Vel+8
  1690  000A62  C065  F0F7         	movff	?___fladd+1,gyros@Gyros_Vel+9
  1691  000A66  C066  F0F8         	movff	?___fladd+2,gyros@Gyros_Vel+10
  1692  000A6A  C067  F0F9         	movff	?___fladd+3,gyros@Gyros_Vel+11
  1693                           
  1694                           ;gyros.c: 29: Gyros_LastAccel.x = a.x;
  1695  000A6E  C138  F0E2         	movff	Gyros_Update@a,gyros@Gyros_LastAccel
  1696  000A72  C139  F0E3         	movff	Gyros_Update@a+1,gyros@Gyros_LastAccel+1
  1697  000A76  C13A  F0E4         	movff	Gyros_Update@a+2,gyros@Gyros_LastAccel+2
  1698  000A7A  C13B  F0E5         	movff	Gyros_Update@a+3,gyros@Gyros_LastAccel+3
  1699                           
  1700                           ;gyros.c: 30: Gyros_LastAccel.y = a.y;
  1701  000A7E  C13C  F0E6         	movff	Gyros_Update@a+4,gyros@Gyros_LastAccel+4
  1702  000A82  C13D  F0E7         	movff	Gyros_Update@a+5,gyros@Gyros_LastAccel+5
  1703  000A86  C13E  F0E8         	movff	Gyros_Update@a+6,gyros@Gyros_LastAccel+6
  1704  000A8A  C13F  F0E9         	movff	Gyros_Update@a+7,gyros@Gyros_LastAccel+7
  1705                           
  1706                           ;gyros.c: 31: Gyros_LastAccel.z = a.z;
  1707  000A8E  C140  F0EA         	movff	Gyros_Update@a+8,gyros@Gyros_LastAccel+8
  1708  000A92  C141  F0EB         	movff	Gyros_Update@a+9,gyros@Gyros_LastAccel+9
  1709  000A96  C142  F0EC         	movff	Gyros_Update@a+10,gyros@Gyros_LastAccel+10
  1710  000A9A  C143  F0ED         	movff	Gyros_Update@a+11,gyros@Gyros_LastAccel+11
  1711  000A9E  0012               	return		;funcret
  1712  000AA0                     __end_of_Gyros_Update:
  1713                           	opt stack 0
  1714                           tblptru	equ	0xFF8
  1715                           tblptrh	equ	0xFF7
  1716                           postinc0	equ	0xFEE
  1717                           wreg	equ	0xFE8
  1718                           status	equ	0xFD8
  1719                           
  1720 ;; *************** function _pow *****************
  1721 ;; Defined at:
  1722 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\pow.c"
  1723 ;; Parameters:    Size  Location     Type
  1724 ;;  x               4   65[BANK0 ] struct .
  1725 ;;  y               4   69[BANK0 ] struct .
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;  yi              4   82[BANK0 ] unsigned long 
  1728 ;;  sign            1   81[BANK0 ] unsigned char 
  1729 ;; Return value:  Size  Location     Type
  1730 ;;                  4   65[BANK0 ] unsigned char 
  1731 ;; Registers used:
  1732 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1733 ;; Tracked objects:
  1734 ;;		On entry : 0/0
  1735 ;;		On exit  : 0/0
  1736 ;;		Unchanged: 0/0
  1737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1738 ;;      Params:         0       8       0       0       0       0       0
  1739 ;;      Locals:         0      13       0       0       0       0       0
  1740 ;;      Temps:          0       0       0       0       0       0       0
  1741 ;;      Totals:         0      21       0       0       0       0       0
  1742 ;;Total ram usage:       21 bytes
  1743 ;; Hardware stack levels used:    1
  1744 ;; Hardware stack levels required when called:    6
  1745 ;; This function calls:
  1746 ;;		___flge
  1747 ;;		___flmul
  1748 ;;		___flneg
  1749 ;;		___fltol
  1750 ;;		___lltofl
  1751 ;;		_exp
  1752 ;;		_log
  1753 ;; This function is called by:
  1754 ;;		_Gyros_Update
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758                           	psect	text7
  1759  00172E                     __ptext7:
  1760                           	opt stack 0
  1761  00172E                     _pow:
  1762                           	opt stack 23
  1763                           
  1764                           ;incstack = 0
  1765  00172E  0E00               	movlw	0
  1766  001730  0100               	movlb	0	; () banked
  1767  001732  6FB1               	movwf	pow@sign& (0+255),b
  1768                           
  1769                           ; BSR set to: 0
  1770  001734  0100               	movlb	0	; () banked
  1771  001736  51A1               	movf	pow@x& (0+255),w,b
  1772  001738  0100               	movlb	0	; () banked
  1773  00173A  11A2               	iorwf	(pow@x+1)& (0+255),w,b
  1774  00173C  0100               	movlb	0	; () banked
  1775  00173E  11A3               	iorwf	(pow@x+2)& (0+255),w,b
  1776  001740  0100               	movlb	0	; () banked
  1777  001742  11A4               	iorwf	(pow@x+3)& (0+255),w,b
  1778  001744  A4D8               	btfss	status,2,c
  1779  001746  D025               	goto	l3578
  1780                           
  1781                           ; BSR set to: 0
  1782  001748  0E00               	movlw	0
  1783  00174A  0100               	movlb	0	; () banked
  1784  00174C  6F60               	movwf	___flge@ff1& (0+255),b
  1785  00174E  0E00               	movlw	0
  1786  001750  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  1787  001752  0E00               	movlw	0
  1788  001754  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  1789  001756  0E00               	movlw	0
  1790  001758  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  1791  00175A  C0A5  F064         	movff	pow@y,___flge@ff2
  1792  00175E  C0A6  F065         	movff	pow@y+1,___flge@ff2+1
  1793  001762  C0A7  F066         	movff	pow@y+2,___flge@ff2+2
  1794  001766  C0A8  F067         	movff	pow@y+3,___flge@ff2+3
  1795  00176A  EC88  F012         	call	___flge	;wreg free
  1796  00176E  0100               	movlb	0	; () banked
  1797  001770  A0D8               	btfss	status,0,c
  1798  001772  D005               	goto	l984
  1799                           
  1800                           ; BSR set to: 0
  1801  001774  0E00               	movlw	0
  1802  001776  0100               	movlb	0	; () banked
  1803  001778  6FFB               	movwf	(_errno+1)& (0+255),b
  1804  00177A  0E21               	movlw	33
  1805  00177C  6FFA               	movwf	_errno& (0+255),b
  1806  00177E                     l984:
  1807                           
  1808                           ; BSR set to: 0
  1809  00177E  0E00               	movlw	0
  1810  001780  0100               	movlb	0	; () banked
  1811  001782  6FA1               	movwf	?_pow& (0+255),b
  1812  001784  0E00               	movlw	0
  1813  001786  6FA2               	movwf	(?_pow+1)& (0+255),b
  1814  001788  0E00               	movlw	0
  1815  00178A  6FA3               	movwf	(?_pow+2)& (0+255),b
  1816  00178C  0E00               	movlw	0
  1817  00178E  6FA4               	movwf	(?_pow+3)& (0+255),b
  1818                           
  1819                           ; BSR set to: 0
  1820  001790  0012               	return	
  1821  001792                     l3578:
  1822                           
  1823                           ; BSR set to: 0
  1824  001792  0100               	movlb	0	; () banked
  1825  001794  51A5               	movf	pow@y& (0+255),w,b
  1826  001796  0100               	movlb	0	; () banked
  1827  001798  11A6               	iorwf	(pow@y+1)& (0+255),w,b
  1828  00179A  0100               	movlb	0	; () banked
  1829  00179C  11A7               	iorwf	(pow@y+2)& (0+255),w,b
  1830  00179E  0100               	movlb	0	; () banked
  1831  0017A0  11A8               	iorwf	(pow@y+3)& (0+255),w,b
  1832  0017A2  A4D8               	btfss	status,2,c
  1833  0017A4  D00A               	goto	l3584
  1834                           
  1835                           ; BSR set to: 0
  1836  0017A6  0E00               	movlw	0
  1837  0017A8  0100               	movlb	0	; () banked
  1838  0017AA  6FA1               	movwf	?_pow& (0+255),b
  1839  0017AC  0E00               	movlw	0
  1840  0017AE  6FA2               	movwf	(?_pow+1)& (0+255),b
  1841  0017B0  0E80               	movlw	128
  1842  0017B2  6FA3               	movwf	(?_pow+2)& (0+255),b
  1843  0017B4  0E3F               	movlw	63
  1844  0017B6  6FA4               	movwf	(?_pow+3)& (0+255),b
  1845                           
  1846                           ; BSR set to: 0
  1847  0017B8  0012               	return	
  1848  0017BA                     l3584:
  1849                           
  1850                           ; BSR set to: 0
  1851  0017BA  0100               	movlb	0	; () banked
  1852  0017BC  AFA4               	btfss	(pow@x+3)& (0+255),7,b
  1853  0017BE  D058               	goto	l3596
  1854                           
  1855                           ; BSR set to: 0
  1856  0017C0  C0A5  F020         	movff	pow@y,___fltol@f1
  1857  0017C4  C0A6  F021         	movff	pow@y+1,___fltol@f1+1
  1858  0017C8  C0A7  F022         	movff	pow@y+2,___fltol@f1+2
  1859  0017CC  C0A8  F023         	movff	pow@y+3,___fltol@f1+3
  1860  0017D0  EC9F  F011         	call	___fltol	;wreg free
  1861  0017D4  C020  F0B2         	movff	?___fltol,pow@yi
  1862  0017D8  C021  F0B3         	movff	?___fltol+1,pow@yi+1
  1863  0017DC  C022  F0B4         	movff	?___fltol+2,pow@yi+2
  1864  0017E0  C023  F0B5         	movff	?___fltol+3,pow@yi+3
  1865  0017E4  C0B2  F060         	movff	pow@yi,___lltofl@c
  1866  0017E8  C0B3  F061         	movff	pow@yi+1,___lltofl@c+1
  1867  0017EC  C0B4  F062         	movff	pow@yi+2,___lltofl@c+2
  1868  0017F0  C0B5  F063         	movff	pow@yi+3,___lltofl@c+3
  1869  0017F4  EC26  F016         	call	___lltofl	;wreg free
  1870  0017F8  0100               	movlb	0	; () banked
  1871  0017FA  51A5               	movf	pow@y& (0+255),w,b
  1872  0017FC  0100               	movlb	0	; () banked
  1873  0017FE  1960               	xorwf	?___lltofl& (0+255),w,b
  1874  001800  E110               	bnz	u4140
  1875  001802  0100               	movlb	0	; () banked
  1876  001804  51A6               	movf	(pow@y+1)& (0+255),w,b
  1877  001806  0100               	movlb	0	; () banked
  1878  001808  1961               	xorwf	(?___lltofl+1)& (0+255),w,b
  1879  00180A  E10B               	bnz	u4140
  1880  00180C  0100               	movlb	0	; () banked
  1881  00180E  51A7               	movf	(pow@y+2)& (0+255),w,b
  1882  001810  0100               	movlb	0	; () banked
  1883  001812  1962               	xorwf	(?___lltofl+2)& (0+255),w,b
  1884  001814  E106               	bnz	u4140
  1885  001816  0100               	movlb	0	; () banked
  1886  001818  51A8               	movf	(pow@y+3)& (0+255),w,b
  1887  00181A  0100               	movlb	0	; () banked
  1888  00181C  1963               	xorwf	(?___lltofl+3)& (0+255),w,b
  1889  00181E  B4D8               	btfsc	status,2,c
  1890  001820  D00F               	goto	l3592
  1891  001822                     u4140:
  1892                           
  1893                           ; BSR set to: 0
  1894  001822  0E00               	movlw	0
  1895  001824  0100               	movlb	0	; () banked
  1896  001826  6FFB               	movwf	(_errno+1)& (0+255),b
  1897  001828  0E21               	movlw	33
  1898  00182A  6FFA               	movwf	_errno& (0+255),b
  1899  00182C  0E00               	movlw	0
  1900  00182E  0100               	movlb	0	; () banked
  1901  001830  6FA1               	movwf	?_pow& (0+255),b
  1902  001832  0E00               	movlw	0
  1903  001834  6FA2               	movwf	(?_pow+1)& (0+255),b
  1904  001836  0E00               	movlw	0
  1905  001838  6FA3               	movwf	(?_pow+2)& (0+255),b
  1906  00183A  0E00               	movlw	0
  1907  00183C  6FA4               	movwf	(?_pow+3)& (0+255),b
  1908                           
  1909                           ; BSR set to: 0
  1910  00183E  0012               	return	
  1911  001840                     l3592:
  1912                           
  1913                           ; BSR set to: 0
  1914  001840  0100               	movlb	0	; () banked
  1915  001842  51B2               	movf	pow@yi& (0+255),w,b
  1916  001844  0B01               	andlw	1
  1917  001846  0100               	movlb	0	; () banked
  1918  001848  6FB1               	movwf	pow@sign& (0+255),b
  1919                           
  1920                           ; BSR set to: 0
  1921  00184A  C0A1  F020         	movff	pow@x,___flneg@f1
  1922  00184E  C0A2  F021         	movff	pow@x+1,___flneg@f1+1
  1923  001852  C0A3  F022         	movff	pow@x+2,___flneg@f1+2
  1924  001856  C0A4  F023         	movff	pow@x+3,___flneg@f1+3
  1925  00185A  EC0D  F016         	call	___flneg	;wreg free
  1926  00185E  C020  F0A1         	movff	?___flneg,pow@x
  1927  001862  C021  F0A2         	movff	?___flneg+1,pow@x+1
  1928  001866  C022  F0A3         	movff	?___flneg+2,pow@x+2
  1929  00186A  C023  F0A4         	movff	?___flneg+3,pow@x+3
  1930  00186E  D000               	goto	l3596
  1931  001870                     l3596:
  1932  001870  C0A1  F08E         	movff	pow@x,log@x
  1933  001874  C0A2  F08F         	movff	pow@x+1,log@x+1
  1934  001878  C0A3  F090         	movff	pow@x+2,log@x+2
  1935  00187C  C0A4  F091         	movff	pow@x+3,log@x+3
  1936  001880  EC5C  F00D         	call	_log	;wreg free
  1937  001884  C08E  F0A9         	movff	?_log,_pow$1990
  1938  001888  C08F  F0AA         	movff	?_log+1,_pow$1990+1
  1939  00188C  C090  F0AB         	movff	?_log+2,_pow$1990+2
  1940  001890  C091  F0AC         	movff	?_log+3,_pow$1990+3
  1941  001894  C0A9  F06F         	movff	_pow$1990,___flmul@f1
  1942  001898  C0AA  F070         	movff	_pow$1990+1,___flmul@f1+1
  1943  00189C  C0AB  F071         	movff	_pow$1990+2,___flmul@f1+2
  1944  0018A0  C0AC  F072         	movff	_pow$1990+3,___flmul@f1+3
  1945  0018A4  C0A5  F073         	movff	pow@y,___flmul@f2
  1946  0018A8  C0A6  F074         	movff	pow@y+1,___flmul@f2+1
  1947  0018AC  C0A7  F075         	movff	pow@y+2,___flmul@f2+2
  1948  0018B0  C0A8  F076         	movff	pow@y+3,___flmul@f2+3
  1949  0018B4  EC19  F00E         	call	___flmul	;wreg free
  1950  0018B8  C06F  F0AD         	movff	?___flmul,_pow$1991
  1951  0018BC  C070  F0AE         	movff	?___flmul+1,_pow$1991+1
  1952  0018C0  C071  F0AF         	movff	?___flmul+2,_pow$1991+2
  1953  0018C4  C072  F0B0         	movff	?___flmul+3,_pow$1991+3
  1954  0018C8  C0AD  F096         	movff	_pow$1991,exp@x
  1955  0018CC  C0AE  F097         	movff	_pow$1991+1,exp@x+1
  1956  0018D0  C0AF  F098         	movff	_pow$1991+2,exp@x+2
  1957  0018D4  C0B0  F099         	movff	_pow$1991+3,exp@x+3
  1958  0018D8  ECE2  F006         	call	_exp	;wreg free
  1959  0018DC  C096  F0A1         	movff	?_exp,pow@x
  1960  0018E0  C097  F0A2         	movff	?_exp+1,pow@x+1
  1961  0018E4  C098  F0A3         	movff	?_exp+2,pow@x+2
  1962  0018E8  C099  F0A4         	movff	?_exp+3,pow@x+3
  1963  0018EC  0100               	movlb	0	; () banked
  1964  0018EE  51B1               	movf	pow@sign& (0+255),w,b
  1965  0018F0  0100               	movlb	0	; () banked
  1966  0018F2  B4D8               	btfsc	status,2,c
  1967  0018F4  D013               	goto	l989
  1968                           
  1969                           ; BSR set to: 0
  1970  0018F6  C0A1  F020         	movff	pow@x,___flneg@f1
  1971  0018FA  C0A2  F021         	movff	pow@x+1,___flneg@f1+1
  1972  0018FE  C0A3  F022         	movff	pow@x+2,___flneg@f1+2
  1973  001902  C0A4  F023         	movff	pow@x+3,___flneg@f1+3
  1974  001906  EC0D  F016         	call	___flneg	;wreg free
  1975  00190A  C020  F0A1         	movff	?___flneg,?_pow
  1976  00190E  C021  F0A2         	movff	?___flneg+1,?_pow+1
  1977  001912  C022  F0A3         	movff	?___flneg+2,?_pow+2
  1978  001916  C023  F0A4         	movff	?___flneg+3,?_pow+3
  1979  00191A  0012               	return	
  1980  00191C                     l989:
  1981                           
  1982                           ; BSR set to: 0
  1983  00191C  C0A1  F0A1         	movff	pow@x,?_pow
  1984  001920  C0A2  F0A2         	movff	pow@x+1,?_pow+1
  1985  001924  C0A3  F0A3         	movff	pow@x+2,?_pow+2
  1986  001928  C0A4  F0A4         	movff	pow@x+3,?_pow+3
  1987  00192C  0012               	return		;funcret
  1988  00192E                     __end_of_pow:
  1989                           	opt stack 0
  1990                           tblptru	equ	0xFF8
  1991                           tblptrh	equ	0xFF7
  1992                           postinc0	equ	0xFEE
  1993                           wreg	equ	0xFE8
  1994                           status	equ	0xFD8
  1995                           
  1996 ;; *************** function _log *****************
  1997 ;; Defined at:
  1998 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  1999 ;; Parameters:    Size  Location     Type
  2000 ;;  x               4   46[BANK0 ] unsigned char 
  2001 ;; Auto vars:     Size  Location     Type
  2002 ;;  exponent        2   50[BANK0 ] int 
  2003 ;; Return value:  Size  Location     Type
  2004 ;;                  4   46[BANK0 ] int 
  2005 ;; Registers used:
  2006 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2007 ;; Tracked objects:
  2008 ;;		On entry : 0/0
  2009 ;;		On exit  : 0/0
  2010 ;;		Unchanged: 0/0
  2011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2012 ;;      Params:         0       4       0       0       0       0       0
  2013 ;;      Locals:         0       2       0       0       0       0       0
  2014 ;;      Temps:          0       0       0       0       0       0       0
  2015 ;;      Totals:         0       6       0       0       0       0       0
  2016 ;;Total ram usage:        6 bytes
  2017 ;; Hardware stack levels used:    1
  2018 ;; Hardware stack levels required when called:    5
  2019 ;; This function calls:
  2020 ;;		___awtofl
  2021 ;;		___fladd
  2022 ;;		___flmul
  2023 ;;		_eval_poly
  2024 ;;		_frexp
  2025 ;; This function is called by:
  2026 ;;		_pow
  2027 ;; This function uses a non-reentrant model
  2028 ;;
  2029                           
  2030                           	psect	text8
  2031  001AB8                     __ptext8:
  2032                           	opt stack 0
  2033  001AB8                     _log:
  2034                           	opt stack 23
  2035                           
  2036                           ;incstack = 0
  2037  001AB8  0100               	movlb	0	; () banked
  2038  001ABA  AF91               	btfss	(log@x+3)& (0+255),7,b
  2039  001ABC  D00F               	goto	l3482
  2040                           
  2041                           ; BSR set to: 0
  2042  001ABE  0E00               	movlw	0
  2043  001AC0  0100               	movlb	0	; () banked
  2044  001AC2  6FFB               	movwf	(_errno+1)& (0+255),b
  2045  001AC4  0E21               	movlw	33
  2046  001AC6  6FFA               	movwf	_errno& (0+255),b
  2047  001AC8  0E00               	movlw	0
  2048  001ACA  0100               	movlb	0	; () banked
  2049  001ACC  6F8E               	movwf	?_log& (0+255),b
  2050  001ACE  0E00               	movlw	0
  2051  001AD0  6F8F               	movwf	(?_log+1)& (0+255),b
  2052  001AD2  0E00               	movlw	0
  2053  001AD4  6F90               	movwf	(?_log+2)& (0+255),b
  2054  001AD6  0E00               	movlw	0
  2055  001AD8  6F91               	movwf	(?_log+3)& (0+255),b
  2056                           
  2057                           ; BSR set to: 0
  2058  001ADA  0012               	return	
  2059  001ADC                     l3482:
  2060                           
  2061                           ; BSR set to: 0
  2062  001ADC  0100               	movlb	0	; () banked
  2063  001ADE  518E               	movf	log@x& (0+255),w,b
  2064  001AE0  0100               	movlb	0	; () banked
  2065  001AE2  118F               	iorwf	(log@x+1)& (0+255),w,b
  2066  001AE4  0100               	movlb	0	; () banked
  2067  001AE6  1190               	iorwf	(log@x+2)& (0+255),w,b
  2068  001AE8  0100               	movlb	0	; () banked
  2069  001AEA  1191               	iorwf	(log@x+3)& (0+255),w,b
  2070  001AEC  A4D8               	btfss	status,2,c
  2071  001AEE  D00F               	goto	l3488
  2072                           
  2073                           ; BSR set to: 0
  2074  001AF0  0E00               	movlw	0
  2075  001AF2  0100               	movlb	0	; () banked
  2076  001AF4  6FFB               	movwf	(_errno+1)& (0+255),b
  2077  001AF6  0E22               	movlw	34
  2078  001AF8  6FFA               	movwf	_errno& (0+255),b
  2079  001AFA  0E00               	movlw	0
  2080  001AFC  0100               	movlb	0	; () banked
  2081  001AFE  6F8E               	movwf	?_log& (0+255),b
  2082  001B00  0E00               	movlw	0
  2083  001B02  6F8F               	movwf	(?_log+1)& (0+255),b
  2084  001B04  0E00               	movlw	0
  2085  001B06  6F90               	movwf	(?_log+2)& (0+255),b
  2086  001B08  0E00               	movlw	0
  2087  001B0A  6F91               	movwf	(?_log+3)& (0+255),b
  2088                           
  2089                           ; BSR set to: 0
  2090  001B0C  0012               	return	
  2091  001B0E                     l3488:
  2092                           
  2093                           ; BSR set to: 0
  2094  001B0E  0E00               	movlw	0
  2095  001B10  0100               	movlb	0	; () banked
  2096  001B12  6F73               	movwf	___flmul@f2& (0+255),b
  2097  001B14  0E00               	movlw	0
  2098  001B16  6F74               	movwf	(___flmul@f2+1)& (0+255),b
  2099  001B18  0E00               	movlw	0
  2100  001B1A  6F75               	movwf	(___flmul@f2+2)& (0+255),b
  2101  001B1C  0E40               	movlw	64
  2102  001B1E  6F76               	movwf	(___flmul@f2+3)& (0+255),b
  2103  001B20  0E92               	movlw	low log@exponent
  2104  001B22  6E24               	movwf	frexp@eptr,c
  2105  001B24  0E00               	movlw	high log@exponent
  2106  001B26  6E25               	movwf	frexp@eptr+1,c
  2107  001B28  C08E  F020         	movff	log@x,frexp@value
  2108  001B2C  C08F  F021         	movff	log@x+1,frexp@value+1
  2109  001B30  C090  F022         	movff	log@x+2,frexp@value+2
  2110  001B34  C091  F023         	movff	log@x+3,frexp@value+3
  2111  001B38  EC4B  F013         	call	_frexp	;wreg free
  2112  001B3C  C020  F06F         	movff	?_frexp,___flmul@f1
  2113  001B40  C021  F070         	movff	?_frexp+1,___flmul@f1+1
  2114  001B44  C022  F071         	movff	?_frexp+2,___flmul@f1+2
  2115  001B48  C023  F072         	movff	?_frexp+3,___flmul@f1+3
  2116  001B4C  EC19  F00E         	call	___flmul	;wreg free
  2117  001B50  C06F  F064         	movff	?___flmul,___fladd@f1
  2118  001B54  C070  F065         	movff	?___flmul+1,___fladd@f1+1
  2119  001B58  C071  F066         	movff	?___flmul+2,___fladd@f1+2
  2120  001B5C  C072  F067         	movff	?___flmul+3,___fladd@f1+3
  2121  001B60  0E00               	movlw	0
  2122  001B62  0100               	movlb	0	; () banked
  2123  001B64  6F68               	movwf	___fladd@f2& (0+255),b
  2124  001B66  0E00               	movlw	0
  2125  001B68  6F69               	movwf	(___fladd@f2+1)& (0+255),b
  2126  001B6A  0E80               	movlw	128
  2127  001B6C  6F6A               	movwf	(___fladd@f2+2)& (0+255),b
  2128  001B6E  0EBF               	movlw	191
  2129  001B70  6F6B               	movwf	(___fladd@f2+3)& (0+255),b
  2130  001B72  EC28  F008         	call	___fladd	;wreg free
  2131  001B76  C064  F08E         	movff	?___fladd,log@x
  2132  001B7A  C065  F08F         	movff	?___fladd+1,log@x+1
  2133  001B7E  C066  F090         	movff	?___fladd+2,log@x+2
  2134  001B82  C067  F091         	movff	?___fladd+3,log@x+3
  2135  001B86  0100               	movlb	0	; () banked
  2136  001B88  0792               	decf	log@exponent& (0+255),f,b
  2137  001B8A  A0D8               	btfss	status,0,c
  2138  001B8C  0793               	decf	(log@exponent+1)& (0+255),f,b
  2139                           
  2140                           ; BSR set to: 0
  2141  001B8E  C08E  F07E         	movff	log@x,eval_poly@x
  2142  001B92  C08F  F07F         	movff	log@x+1,eval_poly@x+1
  2143  001B96  C090  F080         	movff	log@x+2,eval_poly@x+2
  2144  001B9A  C091  F081         	movff	log@x+3,eval_poly@x+3
  2145  001B9E  0E29               	movlw	low log@coeff
  2146  001BA0  0100               	movlb	0	; () banked
  2147  001BA2  6F82               	movwf	eval_poly@d& (0+255),b
  2148  001BA4  0E06               	movlw	high log@coeff
  2149  001BA6  0100               	movlb	0	; () banked
  2150  001BA8  6F83               	movwf	(eval_poly@d+1)& (0+255),b
  2151  001BAA  0E00               	movlw	0
  2152  001BAC  0100               	movlb	0	; () banked
  2153  001BAE  6F85               	movwf	(eval_poly@n+1)& (0+255),b
  2154  001BB0  0E08               	movlw	8
  2155  001BB2  6F84               	movwf	eval_poly@n& (0+255),b
  2156  001BB4  EC8E  F010         	call	_eval_poly	;wreg free
  2157  001BB8  C07E  F08E         	movff	?_eval_poly,log@x
  2158  001BBC  C07F  F08F         	movff	?_eval_poly+1,log@x+1
  2159  001BC0  C080  F090         	movff	?_eval_poly+2,log@x+2
  2160  001BC4  C081  F091         	movff	?_eval_poly+3,log@x+3
  2161  001BC8  0E18               	movlw	24
  2162  001BCA  0100               	movlb	0	; () banked
  2163  001BCC  6F73               	movwf	___flmul@f2& (0+255),b
  2164  001BCE  0E72               	movlw	114
  2165  001BD0  6F74               	movwf	(___flmul@f2+1)& (0+255),b
  2166  001BD2  0E31               	movlw	49
  2167  001BD4  6F75               	movwf	(___flmul@f2+2)& (0+255),b
  2168  001BD6  0E3F               	movlw	63
  2169  001BD8  6F76               	movwf	(___flmul@f2+3)& (0+255),b
  2170  001BDA  C092  F060         	movff	log@exponent,___awtofl@c
  2171  001BDE  C093  F061         	movff	log@exponent+1,___awtofl@c+1
  2172  001BE2  EC74  F015         	call	___awtofl	;wreg free
  2173  001BE6  C060  F06F         	movff	?___awtofl,___flmul@f1
  2174  001BEA  C061  F070         	movff	?___awtofl+1,___flmul@f1+1
  2175  001BEE  C062  F071         	movff	?___awtofl+2,___flmul@f1+2
  2176  001BF2  C063  F072         	movff	?___awtofl+3,___flmul@f1+3
  2177  001BF6  EC19  F00E         	call	___flmul	;wreg free
  2178  001BFA  C06F  F064         	movff	?___flmul,___fladd@f1
  2179  001BFE  C070  F065         	movff	?___flmul+1,___fladd@f1+1
  2180  001C02  C071  F066         	movff	?___flmul+2,___fladd@f1+2
  2181  001C06  C072  F067         	movff	?___flmul+3,___fladd@f1+3
  2182  001C0A  C08E  F068         	movff	log@x,___fladd@f2
  2183  001C0E  C08F  F069         	movff	log@x+1,___fladd@f2+1
  2184  001C12  C090  F06A         	movff	log@x+2,___fladd@f2+2
  2185  001C16  C091  F06B         	movff	log@x+3,___fladd@f2+3
  2186  001C1A  EC28  F008         	call	___fladd	;wreg free
  2187  001C1E  C064  F08E         	movff	?___fladd,?_log
  2188  001C22  C065  F08F         	movff	?___fladd+1,?_log+1
  2189  001C26  C066  F090         	movff	?___fladd+2,?_log+2
  2190  001C2A  C067  F091         	movff	?___fladd+3,?_log+3
  2191  001C2E  0012               	return	
  2192  001C30  0012               	return		;funcret
  2193  001C32                     __end_of_log:
  2194                           	opt stack 0
  2195                           tblptru	equ	0xFF8
  2196                           tblptrh	equ	0xFF7
  2197                           postinc0	equ	0xFEE
  2198                           wreg	equ	0xFE8
  2199                           status	equ	0xFD8
  2200                           
  2201 ;; *************** function _exp *****************
  2202 ;; Defined at:
  2203 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\exp.c"
  2204 ;; Parameters:    Size  Location     Type
  2205 ;;  x               4   54[BANK0 ] int 
  2206 ;; Auto vars:     Size  Location     Type
  2207 ;;  exponent        2   62[BANK0 ] int 
  2208 ;;  sign            1   64[BANK0 ] unsigned char 
  2209 ;; Return value:  Size  Location     Type
  2210 ;;                  4   54[BANK0 ] unsigned char 
  2211 ;; Registers used:
  2212 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2213 ;; Tracked objects:
  2214 ;;		On entry : 0/0
  2215 ;;		On exit  : 0/0
  2216 ;;		Unchanged: 0/0
  2217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2218 ;;      Params:         0       4       0       0       0       0       0
  2219 ;;      Locals:         0       7       0       0       0       0       0
  2220 ;;      Temps:          0       0       0       0       0       0       0
  2221 ;;      Totals:         0      11       0       0       0       0       0
  2222 ;;Total ram usage:       11 bytes
  2223 ;; Hardware stack levels used:    1
  2224 ;; Hardware stack levels required when called:    5
  2225 ;; This function calls:
  2226 ;;		___awtofl
  2227 ;;		___fldiv
  2228 ;;		___flge
  2229 ;;		___flmul
  2230 ;;		___flneg
  2231 ;;		___flsub
  2232 ;;		___fltol
  2233 ;;		_eval_poly
  2234 ;;		_floor
  2235 ;;		_ldexp
  2236 ;; This function is called by:
  2237 ;;		_pow
  2238 ;; This function uses a non-reentrant model
  2239 ;;
  2240                           
  2241                           	psect	text9
  2242  000DC4                     __ptext9:
  2243                           	opt stack 0
  2244  000DC4                     _exp:
  2245                           	opt stack 23
  2246                           
  2247                           ;incstack = 0
  2248  000DC4  0100               	movlb	0	; () banked
  2249  000DC6  5196               	movf	exp@x& (0+255),w,b
  2250  000DC8  0100               	movlb	0	; () banked
  2251  000DCA  1197               	iorwf	(exp@x+1)& (0+255),w,b
  2252  000DCC  0100               	movlb	0	; () banked
  2253  000DCE  1198               	iorwf	(exp@x+2)& (0+255),w,b
  2254  000DD0  0100               	movlb	0	; () banked
  2255  000DD2  1199               	iorwf	(exp@x+3)& (0+255),w,b
  2256  000DD4  A4D8               	btfss	status,2,c
  2257  000DD6  D00A               	goto	l3504
  2258                           
  2259                           ; BSR set to: 0
  2260  000DD8  0E00               	movlw	0
  2261  000DDA  0100               	movlb	0	; () banked
  2262  000DDC  6F96               	movwf	?_exp& (0+255),b
  2263  000DDE  0E00               	movlw	0
  2264  000DE0  6F97               	movwf	(?_exp+1)& (0+255),b
  2265  000DE2  0E80               	movlw	128
  2266  000DE4  6F98               	movwf	(?_exp+2)& (0+255),b
  2267  000DE6  0E3F               	movlw	63
  2268  000DE8  6F99               	movwf	(?_exp+3)& (0+255),b
  2269                           
  2270                           ; BSR set to: 0
  2271  000DEA  0012               	return	
  2272  000DEC                     l3504:
  2273                           
  2274                           ; BSR set to: 0
  2275  000DEC  0E18               	movlw	24
  2276  000DEE  0100               	movlb	0	; () banked
  2277  000DF0  6F60               	movwf	___flge@ff1& (0+255),b
  2278  000DF2  0E72               	movlw	114
  2279  000DF4  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  2280  000DF6  0E31               	movlw	49
  2281  000DF8  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  2282  000DFA  0E44               	movlw	68
  2283  000DFC  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  2284  000DFE  C096  F064         	movff	exp@x,___flge@ff2
  2285  000E02  C097  F065         	movff	exp@x+1,___flge@ff2+1
  2286  000E06  C098  F066         	movff	exp@x+2,___flge@ff2+2
  2287  000E0A  C099  F067         	movff	exp@x+3,___flge@ff2+3
  2288  000E0E  EC88  F012         	call	___flge	;wreg free
  2289  000E12  0100               	movlb	0	; () banked
  2290  000E14  B0D8               	btfsc	status,0,c
  2291  000E16  D00F               	goto	l3510
  2292                           
  2293                           ; BSR set to: 0
  2294  000E18  0E00               	movlw	0
  2295  000E1A  0100               	movlb	0	; () banked
  2296  000E1C  6FFB               	movwf	(_errno+1)& (0+255),b
  2297  000E1E  0E22               	movlw	34
  2298  000E20  6FFA               	movwf	_errno& (0+255),b
  2299  000E22  0EFF               	movlw	255
  2300  000E24  0100               	movlb	0	; () banked
  2301  000E26  6F96               	movwf	?_exp& (0+255),b
  2302  000E28  0EFF               	movlw	255
  2303  000E2A  6F97               	movwf	(?_exp+1)& (0+255),b
  2304  000E2C  0E7F               	movlw	127
  2305  000E2E  6F98               	movwf	(?_exp+2)& (0+255),b
  2306  000E30  0E7F               	movlw	127
  2307  000E32  6F99               	movwf	(?_exp+3)& (0+255),b
  2308                           
  2309                           ; BSR set to: 0
  2310  000E34  0012               	return	
  2311  000E36                     l3510:
  2312                           
  2313                           ; BSR set to: 0
  2314  000E36  C096  F060         	movff	exp@x,___flge@ff1
  2315  000E3A  C097  F061         	movff	exp@x+1,___flge@ff1+1
  2316  000E3E  C098  F062         	movff	exp@x+2,___flge@ff1+2
  2317  000E42  C099  F063         	movff	exp@x+3,___flge@ff1+3
  2318  000E46  0E87               	movlw	135
  2319  000E48  0100               	movlb	0	; () banked
  2320  000E4A  6F64               	movwf	___flge@ff2& (0+255),b
  2321  000E4C  0E48               	movlw	72
  2322  000E4E  6F65               	movwf	(___flge@ff2+1)& (0+255),b
  2323  000E50  0E3A               	movlw	58
  2324  000E52  6F66               	movwf	(___flge@ff2+2)& (0+255),b
  2325  000E54  0EC4               	movlw	196
  2326  000E56  6F67               	movwf	(___flge@ff2+3)& (0+255),b
  2327  000E58  EC88  F012         	call	___flge	;wreg free
  2328  000E5C  0100               	movlb	0	; () banked
  2329  000E5E  B0D8               	btfsc	status,0,c
  2330  000E60  D00F               	goto	l3516
  2331                           
  2332                           ; BSR set to: 0
  2333  000E62  0E00               	movlw	0
  2334  000E64  0100               	movlb	0	; () banked
  2335  000E66  6FFB               	movwf	(_errno+1)& (0+255),b
  2336  000E68  0E22               	movlw	34
  2337  000E6A  6FFA               	movwf	_errno& (0+255),b
  2338  000E6C  0E00               	movlw	0
  2339  000E6E  0100               	movlb	0	; () banked
  2340  000E70  6F96               	movwf	?_exp& (0+255),b
  2341  000E72  0E00               	movlw	0
  2342  000E74  6F97               	movwf	(?_exp+1)& (0+255),b
  2343  000E76  0E00               	movlw	0
  2344  000E78  6F98               	movwf	(?_exp+2)& (0+255),b
  2345  000E7A  0E00               	movlw	0
  2346  000E7C  6F99               	movwf	(?_exp+3)& (0+255),b
  2347                           
  2348                           ; BSR set to: 0
  2349  000E7E  0012               	return	
  2350  000E80                     l3516:
  2351                           
  2352                           ; BSR set to: 0
  2353  000E80  0100               	movlb	0	; () banked
  2354  000E82  AF99               	btfss	(exp@x+3)& (0+255),7,b
  2355  000E84  D002               	goto	u4010
  2356  000E86  0E01               	movlw	1
  2357  000E88  D001               	goto	u4020
  2358  000E8A                     u4010:
  2359  000E8A  0E00               	movlw	0
  2360  000E8C                     u4020:
  2361  000E8C  0100               	movlb	0	; () banked
  2362  000E8E  6FA0               	movwf	exp@sign& (0+255),b
  2363                           
  2364                           ; BSR set to: 0
  2365  000E90  0100               	movlb	0	; () banked
  2366  000E92  51A0               	movf	exp@sign& (0+255),w,b
  2367  000E94  0100               	movlb	0	; () banked
  2368  000E96  B4D8               	btfsc	status,2,c
  2369  000E98  D012               	goto	l1015
  2370                           
  2371                           ; BSR set to: 0
  2372  000E9A  C096  F020         	movff	exp@x,___flneg@f1
  2373  000E9E  C097  F021         	movff	exp@x+1,___flneg@f1+1
  2374  000EA2  C098  F022         	movff	exp@x+2,___flneg@f1+2
  2375  000EA6  C099  F023         	movff	exp@x+3,___flneg@f1+3
  2376  000EAA  EC0D  F016         	call	___flneg	;wreg free
  2377  000EAE  C020  F096         	movff	?___flneg,exp@x
  2378  000EB2  C021  F097         	movff	?___flneg+1,exp@x+1
  2379  000EB6  C022  F098         	movff	?___flneg+2,exp@x+2
  2380  000EBA  C023  F099         	movff	?___flneg+3,exp@x+3
  2381  000EBE                     l1015:
  2382  000EBE  C096  F06F         	movff	exp@x,___flmul@f1
  2383  000EC2  C097  F070         	movff	exp@x+1,___flmul@f1+1
  2384  000EC6  C098  F071         	movff	exp@x+2,___flmul@f1+2
  2385  000ECA  C099  F072         	movff	exp@x+3,___flmul@f1+3
  2386  000ECE  0E3B               	movlw	59
  2387  000ED0  0100               	movlb	0	; () banked
  2388  000ED2  6F73               	movwf	___flmul@f2& (0+255),b
  2389  000ED4  0EAA               	movlw	170
  2390  000ED6  6F74               	movwf	(___flmul@f2+1)& (0+255),b
  2391  000ED8  0EB8               	movlw	184
  2392  000EDA  6F75               	movwf	(___flmul@f2+2)& (0+255),b
  2393  000EDC  0E3F               	movlw	63
  2394  000EDE  6F76               	movwf	(___flmul@f2+3)& (0+255),b
  2395  000EE0  EC19  F00E         	call	___flmul	;wreg free
  2396  000EE4  C06F  F096         	movff	?___flmul,exp@x
  2397  000EE8  C070  F097         	movff	?___flmul+1,exp@x+1
  2398  000EEC  C071  F098         	movff	?___flmul+2,exp@x+2
  2399  000EF0  C072  F099         	movff	?___flmul+3,exp@x+3
  2400  000EF4  C096  F06F         	movff	exp@x,floor@x
  2401  000EF8  C097  F070         	movff	exp@x+1,floor@x+1
  2402  000EFC  C098  F071         	movff	exp@x+2,floor@x+2
  2403  000F00  C099  F072         	movff	exp@x+3,floor@x+3
  2404  000F04  ECFF  F00F         	call	_floor	;wreg free
  2405  000F08  C06F  F09A         	movff	?_floor,_exp$1992
  2406  000F0C  C070  F09B         	movff	?_floor+1,_exp$1992+1
  2407  000F10  C071  F09C         	movff	?_floor+2,_exp$1992+2
  2408  000F14  C072  F09D         	movff	?_floor+3,_exp$1992+3
  2409  000F18  C09A  F020         	movff	_exp$1992,___fltol@f1
  2410  000F1C  C09B  F021         	movff	_exp$1992+1,___fltol@f1+1
  2411  000F20  C09C  F022         	movff	_exp$1992+2,___fltol@f1+2
  2412  000F24  C09D  F023         	movff	_exp$1992+3,___fltol@f1+3
  2413  000F28  EC9F  F011         	call	___fltol	;wreg free
  2414  000F2C  C020  F09E         	movff	?___fltol,exp@exponent
  2415  000F30  C021  F09F         	movff	?___fltol+1,exp@exponent+1
  2416  000F34  C096  F06F         	movff	exp@x,___flsub@f1
  2417  000F38  C097  F070         	movff	exp@x+1,___flsub@f1+1
  2418  000F3C  C098  F071         	movff	exp@x+2,___flsub@f1+2
  2419  000F40  C099  F072         	movff	exp@x+3,___flsub@f1+3
  2420  000F44  C09E  F060         	movff	exp@exponent,___awtofl@c
  2421  000F48  C09F  F061         	movff	exp@exponent+1,___awtofl@c+1
  2422  000F4C  EC74  F015         	call	___awtofl	;wreg free
  2423  000F50  C060  F073         	movff	?___awtofl,___flsub@f2
  2424  000F54  C061  F074         	movff	?___awtofl+1,___flsub@f2+1
  2425  000F58  C062  F075         	movff	?___awtofl+2,___flsub@f2+2
  2426  000F5C  C063  F076         	movff	?___awtofl+3,___flsub@f2+3
  2427  000F60  ECEF  F014         	call	___flsub	;wreg free
  2428  000F64  C06F  F096         	movff	?___flsub,exp@x
  2429  000F68  C070  F097         	movff	?___flsub+1,exp@x+1
  2430  000F6C  C071  F098         	movff	?___flsub+2,exp@x+2
  2431  000F70  C072  F099         	movff	?___flsub+3,exp@x+3
  2432  000F74  C096  F07E         	movff	exp@x,eval_poly@x
  2433  000F78  C097  F07F         	movff	exp@x+1,eval_poly@x+1
  2434  000F7C  C098  F080         	movff	exp@x+2,eval_poly@x+2
  2435  000F80  C099  F081         	movff	exp@x+3,eval_poly@x+3
  2436  000F84  0E01               	movlw	low exp@coeff
  2437  000F86  0100               	movlb	0	; () banked
  2438  000F88  6F82               	movwf	eval_poly@d& (0+255),b
  2439  000F8A  0E06               	movlw	high exp@coeff
  2440  000F8C  0100               	movlb	0	; () banked
  2441  000F8E  6F83               	movwf	(eval_poly@d+1)& (0+255),b
  2442  000F90  0E00               	movlw	0
  2443  000F92  0100               	movlb	0	; () banked
  2444  000F94  6F85               	movwf	(eval_poly@n+1)& (0+255),b
  2445  000F96  0E09               	movlw	9
  2446  000F98  6F84               	movwf	eval_poly@n& (0+255),b
  2447  000F9A  EC8E  F010         	call	_eval_poly	;wreg free
  2448  000F9E  C07E  F08E         	movff	?_eval_poly,ldexp@value
  2449  000FA2  C07F  F08F         	movff	?_eval_poly+1,ldexp@value+1
  2450  000FA6  C080  F090         	movff	?_eval_poly+2,ldexp@value+2
  2451  000FAA  C081  F091         	movff	?_eval_poly+3,ldexp@value+3
  2452  000FAE  C09E  F092         	movff	exp@exponent,ldexp@newexp
  2453  000FB2  C09F  F093         	movff	exp@exponent+1,ldexp@newexp+1
  2454  000FB6  EC66  F00F         	call	_ldexp	;wreg free
  2455  000FBA  C08E  F096         	movff	?_ldexp,exp@x
  2456  000FBE  C08F  F097         	movff	?_ldexp+1,exp@x+1
  2457  000FC2  C090  F098         	movff	?_ldexp+2,exp@x+2
  2458  000FC6  C091  F099         	movff	?_ldexp+3,exp@x+3
  2459  000FCA  0100               	movlb	0	; () banked
  2460  000FCC  51A0               	movf	exp@sign& (0+255),w,b
  2461  000FCE  0100               	movlb	0	; () banked
  2462  000FD0  B4D8               	btfsc	status,2,c
  2463  000FD2  D035               	goto	l1016
  2464                           
  2465                           ; BSR set to: 0
  2466  000FD4  0100               	movlb	0	; () banked
  2467  000FD6  2996               	incf	exp@x& (0+255),w,b
  2468  000FD8  E116               	bnz	l3538
  2469  000FDA  0100               	movlb	0	; () banked
  2470  000FDC  2997               	incf	(exp@x+1)& (0+255),w,b
  2471  000FDE  E113               	bnz	l3538
  2472  000FE0  0E7F               	movlw	127
  2473  000FE2  0100               	movlb	0	; () banked
  2474  000FE4  1998               	xorwf	(exp@x+2)& (0+255),w,b
  2475  000FE6  E10F               	bnz	l3538
  2476  000FE8  0E7F               	movlw	127
  2477  000FEA  0100               	movlb	0	; () banked
  2478  000FEC  1999               	xorwf	(exp@x+3)& (0+255),w,b
  2479  000FEE  A4D8               	btfss	status,2,c
  2480  000FF0  D00A               	goto	l3538
  2481                           
  2482                           ; BSR set to: 0
  2483  000FF2  0E00               	movlw	0
  2484  000FF4  0100               	movlb	0	; () banked
  2485  000FF6  6F96               	movwf	?_exp& (0+255),b
  2486  000FF8  0E00               	movlw	0
  2487  000FFA  6F97               	movwf	(?_exp+1)& (0+255),b
  2488  000FFC  0E00               	movlw	0
  2489  000FFE  6F98               	movwf	(?_exp+2)& (0+255),b
  2490  001000  0E00               	movlw	0
  2491  001002  6F99               	movwf	(?_exp+3)& (0+255),b
  2492                           
  2493                           ; BSR set to: 0
  2494  001004  0012               	return	
  2495  001006                     l3538:
  2496                           
  2497                           ; BSR set to: 0
  2498  001006  0E00               	movlw	0
  2499  001008  0100               	movlb	0	; () banked
  2500  00100A  6F7E               	movwf	___fldiv@f1& (0+255),b
  2501  00100C  0E00               	movlw	0
  2502  00100E  6F7F               	movwf	(___fldiv@f1+1)& (0+255),b
  2503  001010  0E80               	movlw	128
  2504  001012  6F80               	movwf	(___fldiv@f1+2)& (0+255),b
  2505  001014  0E3F               	movlw	63
  2506  001016  6F81               	movwf	(___fldiv@f1+3)& (0+255),b
  2507  001018  C096  F082         	movff	exp@x,___fldiv@f2
  2508  00101C  C097  F083         	movff	exp@x+1,___fldiv@f2+1
  2509  001020  C098  F084         	movff	exp@x+2,___fldiv@f2+2
  2510  001024  C099  F085         	movff	exp@x+3,___fldiv@f2+3
  2511  001028  ECCB  F00E         	call	___fldiv	;wreg free
  2512  00102C  C07E  F096         	movff	?___fldiv,?_exp
  2513  001030  C07F  F097         	movff	?___fldiv+1,?_exp+1
  2514  001034  C080  F098         	movff	?___fldiv+2,?_exp+2
  2515  001038  C081  F099         	movff	?___fldiv+3,?_exp+3
  2516  00103C  0012               	return	
  2517  00103E                     l1016:
  2518                           
  2519                           ; BSR set to: 0
  2520  00103E  C096  F096         	movff	exp@x,?_exp
  2521  001042  C097  F097         	movff	exp@x+1,?_exp+1
  2522  001046  C098  F098         	movff	exp@x+2,?_exp+2
  2523  00104A  C099  F099         	movff	exp@x+3,?_exp+3
  2524  00104E  0012               	return		;funcret
  2525  001050                     __end_of_exp:
  2526                           	opt stack 0
  2527                           tblptru	equ	0xFF8
  2528                           tblptrh	equ	0xFF7
  2529                           postinc0	equ	0xFEE
  2530                           wreg	equ	0xFE8
  2531                           status	equ	0xFD8
  2532                           
  2533 ;; *************** function _ldexp *****************
  2534 ;; Defined at:
  2535 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  2536 ;; Parameters:    Size  Location     Type
  2537 ;;  value           4   46[BANK0 ] unsigned char 
  2538 ;;  newexp          2   50[BANK0 ] int 
  2539 ;; Auto vars:     Size  Location     Type
  2540 ;;		None
  2541 ;; Return value:  Size  Location     Type
  2542 ;;                  4   46[BANK0 ] int 
  2543 ;; Registers used:
  2544 ;;		wreg, status,2, status,0
  2545 ;; Tracked objects:
  2546 ;;		On entry : 0/0
  2547 ;;		On exit  : 0/0
  2548 ;;		Unchanged: 0/0
  2549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2550 ;;      Params:         0       6       0       0       0       0       0
  2551 ;;      Locals:         0       0       0       0       0       0       0
  2552 ;;      Temps:          0       2       0       0       0       0       0
  2553 ;;      Totals:         0       8       0       0       0       0       0
  2554 ;;Total ram usage:        8 bytes
  2555 ;; Hardware stack levels used:    1
  2556 ;; Hardware stack levels required when called:    2
  2557 ;; This function calls:
  2558 ;;		Nothing
  2559 ;; This function is called by:
  2560 ;;		_exp
  2561 ;; This function uses a non-reentrant model
  2562 ;;
  2563                           
  2564                           	psect	text10
  2565  001ECC                     __ptext10:
  2566                           	opt stack 0
  2567  001ECC                     _ldexp:
  2568                           	opt stack 25
  2569                           
  2570                           ;incstack = 0
  2571  001ECC  0100               	movlb	0	; () banked
  2572  001ECE  518E               	movf	ldexp@value& (0+255),w,b
  2573  001ED0  0100               	movlb	0	; () banked
  2574  001ED2  118F               	iorwf	(ldexp@value+1)& (0+255),w,b
  2575  001ED4  0100               	movlb	0	; () banked
  2576  001ED6  1190               	iorwf	(ldexp@value+2)& (0+255),w,b
  2577  001ED8  0100               	movlb	0	; () banked
  2578  001EDA  1191               	iorwf	(ldexp@value+3)& (0+255),w,b
  2579  001EDC  A4D8               	btfss	status,2,c
  2580  001EDE  D00A               	goto	l3402
  2581                           
  2582                           ; BSR set to: 0
  2583  001EE0  0E00               	movlw	0
  2584  001EE2  0100               	movlb	0	; () banked
  2585  001EE4  6F8E               	movwf	?_ldexp& (0+255),b
  2586  001EE6  0E00               	movlw	0
  2587  001EE8  6F8F               	movwf	(?_ldexp+1)& (0+255),b
  2588  001EEA  0E00               	movlw	0
  2589  001EEC  6F90               	movwf	(?_ldexp+2)& (0+255),b
  2590  001EEE  0E00               	movlw	0
  2591  001EF0  6F91               	movwf	(?_ldexp+3)& (0+255),b
  2592                           
  2593                           ; BSR set to: 0
  2594  001EF2  0012               	return	
  2595  001EF4                     l3402:
  2596                           
  2597                           ; BSR set to: 0
  2598  001EF4  0100               	movlb	0	; () banked
  2599  001EF6  5191               	movf	(ldexp@value+3)& (0+255),w,b
  2600  001EF8  0B7F               	andlw	127
  2601  001EFA  0100               	movlb	0	; () banked
  2602  001EFC  6F94               	movwf	??_ldexp& (0+255),b
  2603  001EFE  6B95               	clrf	(??_ldexp+1)& (0+255),b
  2604  001F00  90D8               	bcf	status,0,c
  2605  001F02  0100               	movlb	0	; () banked
  2606  001F04  3794               	rlcf	??_ldexp& (0+255),f,b
  2607  001F06  3795               	rlcf	(??_ldexp+1)& (0+255),f,b
  2608  001F08  0100               	movlb	0	; () banked
  2609  001F0A  5194               	movf	??_ldexp& (0+255),w,b
  2610  001F0C  0100               	movlb	0	; () banked
  2611  001F0E  2792               	addwf	ldexp@newexp& (0+255),f,b
  2612  001F10  0100               	movlb	0	; () banked
  2613  001F12  5195               	movf	(??_ldexp+1)& (0+255),w,b
  2614  001F14  0100               	movlb	0	; () banked
  2615  001F16  2393               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  2616  001F18  0100               	movlb	0	; () banked
  2617  001F1A  AF90               	btfss	(ldexp@value+2)& (0+255),7,b
  2618  001F1C  D004               	goto	u3890
  2619  001F1E  0100               	movlb	0	; () banked
  2620  001F20  6B94               	clrf	??_ldexp& (0+255),b
  2621  001F22  2B94               	incf	??_ldexp& (0+255),f,b
  2622  001F24  D002               	goto	u3898
  2623  001F26                     u3890:
  2624  001F26  0100               	movlb	0	; () banked
  2625  001F28  6B94               	clrf	??_ldexp& (0+255),b
  2626  001F2A                     u3898:
  2627  001F2A  0100               	movlb	0	; () banked
  2628  001F2C  5194               	movf	??_ldexp& (0+255),w,b
  2629  001F2E  0100               	movlb	0	; () banked
  2630  001F30  2792               	addwf	ldexp@newexp& (0+255),f,b
  2631  001F32  0E00               	movlw	0
  2632  001F34  2393               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  2633  001F36  0100               	movlb	0	; () banked
  2634  001F38  AF93               	btfss	(ldexp@newexp+1)& (0+255),7,b
  2635  001F3A  D010               	goto	l3410
  2636                           
  2637                           ; BSR set to: 0
  2638  001F3C  0E00               	movlw	0
  2639  001F3E  0100               	movlb	0	; () banked
  2640  001F40  6FFB               	movwf	(_errno+1)& (0+255),b
  2641  001F42  0E22               	movlw	34
  2642  001F44  6FFA               	movwf	_errno& (0+255),b
  2643  001F46  0E00               	movlw	0
  2644  001F48  0100               	movlb	0	; () banked
  2645  001F4A  6F8E               	movwf	?_ldexp& (0+255),b
  2646  001F4C  0E00               	movlw	0
  2647  001F4E  6F8F               	movwf	(?_ldexp+1)& (0+255),b
  2648  001F50  0E00               	movlw	0
  2649  001F52  6F90               	movwf	(?_ldexp+2)& (0+255),b
  2650  001F54  0E00               	movlw	0
  2651  001F56                     L1:
  2652  001F56  6F91               	movwf	(?_ldexp+3)& (0+255),b
  2653                           
  2654                           ; BSR set to: 0
  2655  001F58  0012               	return	
  2656                           
  2657                           ; BSR set to: 0
  2658  001F5A  D047               	goto	l3428
  2659  001F5C                     l3410:
  2660                           
  2661                           ; BSR set to: 0
  2662  001F5C  0100               	movlb	0	; () banked
  2663  001F5E  BF93               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  2664  001F60  D022               	goto	l3426
  2665  001F62  0100               	movlb	0	; () banked
  2666  001F64  0593               	decf	(ldexp@newexp+1)& (0+255),w,b
  2667  001F66  A0D8               	btfss	status,0,c
  2668  001F68  D01E               	goto	l3426
  2669                           
  2670                           ; BSR set to: 0
  2671  001F6A  0E00               	movlw	0
  2672  001F6C  0100               	movlb	0	; () banked
  2673  001F6E  6FFB               	movwf	(_errno+1)& (0+255),b
  2674  001F70  0E22               	movlw	34
  2675  001F72  6FFA               	movwf	_errno& (0+255),b
  2676                           
  2677                           ; BSR set to: 0
  2678  001F74  0100               	movlb	0	; () banked
  2679  001F76  AF91               	btfss	(ldexp@value+3)& (0+255),7,b
  2680  001F78  D00B               	goto	l3422
  2681                           
  2682                           ; BSR set to: 0
  2683  001F7A  0EFF               	movlw	255
  2684  001F7C  0100               	movlb	0	; () banked
  2685  001F7E  6F8E               	movwf	?_ldexp& (0+255),b
  2686  001F80  0EFF               	movlw	255
  2687  001F82  6F8F               	movwf	(?_ldexp+1)& (0+255),b
  2688  001F84  0E7F               	movlw	127
  2689  001F86  6F90               	movwf	(?_ldexp+2)& (0+255),b
  2690  001F88  0EFF               	movlw	255
  2691  001F8A  D7E5               	goto	L1
  2692                           
  2693                           ; BSR set to: 0
  2694  001F8C  0012               	return	
  2695                           
  2696                           ; BSR set to: 0
  2697  001F8E  D02D               	goto	l3428
  2698  001F90                     l3422:
  2699                           
  2700                           ; BSR set to: 0
  2701  001F90  0EFF               	movlw	255
  2702  001F92  0100               	movlb	0	; () banked
  2703  001F94  6F8E               	movwf	?_ldexp& (0+255),b
  2704  001F96  0EFF               	movlw	255
  2705  001F98  6F8F               	movwf	(?_ldexp+1)& (0+255),b
  2706  001F9A  0E7F               	movlw	127
  2707  001F9C  6F90               	movwf	(?_ldexp+2)& (0+255),b
  2708  001F9E  0E7F               	movlw	127
  2709  001FA0  D7DA               	goto	L1
  2710                           
  2711                           ; BSR set to: 0
  2712  001FA2  0012               	return	
  2713                           
  2714                           ; BSR set to: 0
  2715  001FA4  D022               	goto	l3428
  2716  001FA6                     l3426:
  2717                           
  2718                           ; BSR set to: 0
  2719  001FA6  0100               	movlb	0	; () banked
  2720  001FA8  3593               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  2721  001FAA  3193               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  2722  001FAC  0100               	movlb	0	; () banked
  2723  001FAE  6F95               	movwf	(??_ldexp+1)& (0+255),b
  2724  001FB0  0100               	movlb	0	; () banked
  2725  001FB2  3192               	rrcf	ldexp@newexp& (0+255),w,b
  2726  001FB4  0100               	movlb	0	; () banked
  2727  001FB6  6F94               	movwf	??_ldexp& (0+255),b
  2728  001FB8  0100               	movlb	0	; () banked
  2729  001FBA  5191               	movf	(ldexp@value+3)& (0+255),w,b
  2730  001FBC  0100               	movlb	0	; () banked
  2731  001FBE  1994               	xorwf	??_ldexp& (0+255),w,b
  2732  001FC0  0B80               	andlw	-128
  2733  001FC2  1994               	xorwf	??_ldexp& (0+255),w,b
  2734  001FC4  0100               	movlb	0	; () banked
  2735  001FC6  6F91               	movwf	(ldexp@value+3)& (0+255),b
  2736  001FC8  C092  F094         	movff	ldexp@newexp,??_ldexp
  2737  001FCC  0E01               	movlw	1
  2738  001FCE  0100               	movlb	0	; () banked
  2739  001FD0  1794               	andwf	??_ldexp& (0+255),f,b
  2740  001FD2  0100               	movlb	0	; () banked
  2741  001FD4  3394               	rrcf	??_ldexp& (0+255),f,b
  2742  001FD6  3394               	rrcf	??_ldexp& (0+255),f,b
  2743  001FD8  0100               	movlb	0	; () banked
  2744  001FDA  5190               	movf	(ldexp@value+2)& (0+255),w,b
  2745  001FDC  0100               	movlb	0	; () banked
  2746  001FDE  1994               	xorwf	??_ldexp& (0+255),w,b
  2747  001FE0  0B7F               	andlw	-129
  2748  001FE2  1994               	xorwf	??_ldexp& (0+255),w,b
  2749  001FE4  0100               	movlb	0	; () banked
  2750  001FE6  6F90               	movwf	(ldexp@value+2)& (0+255),b
  2751                           
  2752                           ; BSR set to: 0
  2753  001FE8  D000               	goto	l3428
  2754  001FEA                     l3428:
  2755                           
  2756                           ; BSR set to: 0
  2757  001FEA  C08E  F08E         	movff	ldexp@value,?_ldexp
  2758  001FEE  C08F  F08F         	movff	ldexp@value+1,?_ldexp+1
  2759  001FF2  C090  F090         	movff	ldexp@value+2,?_ldexp+2
  2760  001FF6  C091  F091         	movff	ldexp@value+3,?_ldexp+3
  2761  001FFA  0012               	return	
  2762                           
  2763                           ; BSR set to: 0
  2764                           
  2765                           ; BSR set to: 0
  2766  001FFC  0012               	return		;funcret
  2767  001FFE                     __end_of_ldexp:
  2768                           	opt stack 0
  2769                           tblptru	equ	0xFF8
  2770                           tblptrh	equ	0xFF7
  2771                           postinc0	equ	0xFEE
  2772                           wreg	equ	0xFE8
  2773                           status	equ	0xFD8
  2774                           
  2775 ;; *************** function _floor *****************
  2776 ;; Defined at:
  2777 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\floor.c"
  2778 ;; Parameters:    Size  Location     Type
  2779 ;;  x               4   15[BANK0 ] int 
  2780 ;; Auto vars:     Size  Location     Type
  2781 ;;  i               4   19[BANK0 ] int 
  2782 ;;  expon           2   23[BANK0 ] int 
  2783 ;; Return value:  Size  Location     Type
  2784 ;;                  4   15[BANK0 ] int 
  2785 ;; Registers used:
  2786 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2792 ;;      Params:         0       4       0       0       0       0       0
  2793 ;;      Locals:         0       6       0       0       0       0       0
  2794 ;;      Temps:          0       0       0       0       0       0       0
  2795 ;;      Totals:         0      10       0       0       0       0       0
  2796 ;;Total ram usage:       10 bytes
  2797 ;; Hardware stack levels used:    1
  2798 ;; Hardware stack levels required when called:    4
  2799 ;; This function calls:
  2800 ;;		___altofl
  2801 ;;		___fladd
  2802 ;;		___flge
  2803 ;;		___fltol
  2804 ;;		_frexp
  2805 ;; This function is called by:
  2806 ;;		_exp
  2807 ;; This function uses a non-reentrant model
  2808 ;;
  2809                           
  2810                           	psect	text11
  2811  001FFE                     __ptext11:
  2812                           	opt stack 0
  2813  001FFE                     _floor:
  2814                           	opt stack 23
  2815                           
  2816                           ; BSR set to: 0
  2817                           ;incstack = 0
  2818  001FFE  C06F  F020         	movff	floor@x,frexp@value
  2819  002002  C070  F021         	movff	floor@x+1,frexp@value+1
  2820  002006  C071  F022         	movff	floor@x+2,frexp@value+2
  2821  00200A  C072  F023         	movff	floor@x+3,frexp@value+3
  2822  00200E  0E77               	movlw	low floor@expon
  2823  002010  6E24               	movwf	frexp@eptr,c
  2824  002012  0E00               	movlw	high floor@expon
  2825  002014  6E25               	movwf	frexp@eptr+1,c
  2826  002016  EC4B  F013         	call	_frexp	;wreg free
  2827  00201A  0100               	movlb	0	; () banked
  2828  00201C  AF78               	btfss	(floor@expon+1)& (0+255),7,b
  2829  00201E  D017               	goto	l3386
  2830                           
  2831                           ; BSR set to: 0
  2832  002020  0100               	movlb	0	; () banked
  2833  002022  AF72               	btfss	(floor@x+3)& (0+255),7,b
  2834  002024  D00A               	goto	l3382
  2835                           
  2836                           ; BSR set to: 0
  2837  002026  0E00               	movlw	0
  2838  002028  0100               	movlb	0	; () banked
  2839  00202A  6F6F               	movwf	?_floor& (0+255),b
  2840  00202C  0E00               	movlw	0
  2841  00202E  6F70               	movwf	(?_floor+1)& (0+255),b
  2842  002030  0E80               	movlw	128
  2843  002032  6F71               	movwf	(?_floor+2)& (0+255),b
  2844  002034  0EBF               	movlw	191
  2845  002036  6F72               	movwf	(?_floor+3)& (0+255),b
  2846                           
  2847                           ; BSR set to: 0
  2848  002038  0012               	return	
  2849  00203A                     l3382:
  2850                           
  2851                           ; BSR set to: 0
  2852  00203A  0E00               	movlw	0
  2853  00203C  0100               	movlb	0	; () banked
  2854  00203E  6F6F               	movwf	?_floor& (0+255),b
  2855  002040  0E00               	movlw	0
  2856  002042  6F70               	movwf	(?_floor+1)& (0+255),b
  2857  002044  0E00               	movlw	0
  2858  002046  6F71               	movwf	(?_floor+2)& (0+255),b
  2859  002048  0E00               	movlw	0
  2860  00204A  6F72               	movwf	(?_floor+3)& (0+255),b
  2861                           
  2862                           ; BSR set to: 0
  2863  00204C  0012               	return	
  2864  00204E                     l3386:
  2865                           
  2866                           ; BSR set to: 0
  2867  00204E  0100               	movlb	0	; () banked
  2868  002050  5178               	movf	(floor@expon+1)& (0+255),w,b
  2869  002052  E105               	bnz	u3860
  2870  002054  0E1D               	movlw	29
  2871  002056  0100               	movlb	0	; () banked
  2872  002058  5D77               	subwf	floor@expon& (0+255),w,b
  2873  00205A  A0D8               	btfss	status,0,c
  2874  00205C  D009               	goto	l3390
  2875  00205E                     u3860:
  2876                           
  2877                           ; BSR set to: 0
  2878  00205E  C06F  F06F         	movff	floor@x,?_floor
  2879  002062  C070  F070         	movff	floor@x+1,?_floor+1
  2880  002066  C071  F071         	movff	floor@x+2,?_floor+2
  2881  00206A  C072  F072         	movff	floor@x+3,?_floor+3
  2882  00206E  0012               	return	
  2883  002070                     l3390:
  2884                           
  2885                           ; BSR set to: 0
  2886  002070  C06F  F020         	movff	floor@x,___fltol@f1
  2887  002074  C070  F021         	movff	floor@x+1,___fltol@f1+1
  2888  002078  C071  F022         	movff	floor@x+2,___fltol@f1+2
  2889  00207C  C072  F023         	movff	floor@x+3,___fltol@f1+3
  2890  002080  EC9F  F011         	call	___fltol	;wreg free
  2891  002084  C020  F060         	movff	?___fltol,___altofl@c
  2892  002088  C021  F061         	movff	?___fltol+1,___altofl@c+1
  2893  00208C  C022  F062         	movff	?___fltol+2,___altofl@c+2
  2894  002090  C023  F063         	movff	?___fltol+3,___altofl@c+3
  2895  002094  EC4B  F015         	call	___altofl	;wreg free
  2896  002098  C060  F073         	movff	?___altofl,floor@i
  2897  00209C  C061  F074         	movff	?___altofl+1,floor@i+1
  2898  0020A0  C062  F075         	movff	?___altofl+2,floor@i+2
  2899  0020A4  C063  F076         	movff	?___altofl+3,floor@i+3
  2900  0020A8  C06F  F060         	movff	floor@x,___flge@ff1
  2901  0020AC  C070  F061         	movff	floor@x+1,___flge@ff1+1
  2902  0020B0  C071  F062         	movff	floor@x+2,___flge@ff1+2
  2903  0020B4  C072  F063         	movff	floor@x+3,___flge@ff1+3
  2904  0020B8  C073  F064         	movff	floor@i,___flge@ff2
  2905  0020BC  C074  F065         	movff	floor@i+1,___flge@ff2+1
  2906  0020C0  C075  F066         	movff	floor@i+2,___flge@ff2+2
  2907  0020C4  C076  F067         	movff	floor@i+3,___flge@ff2+3
  2908  0020C8  EC88  F012         	call	___flge	;wreg free
  2909  0020CC  0100               	movlb	0	; () banked
  2910  0020CE  B0D8               	btfsc	status,0,c
  2911  0020D0  D01C               	goto	l1026
  2912                           
  2913                           ; BSR set to: 0
  2914  0020D2  C073  F064         	movff	floor@i,___fladd@f1
  2915  0020D6  C074  F065         	movff	floor@i+1,___fladd@f1+1
  2916  0020DA  C075  F066         	movff	floor@i+2,___fladd@f1+2
  2917  0020DE  C076  F067         	movff	floor@i+3,___fladd@f1+3
  2918  0020E2  0E00               	movlw	0
  2919  0020E4  0100               	movlb	0	; () banked
  2920  0020E6  6F68               	movwf	___fladd@f2& (0+255),b
  2921  0020E8  0E00               	movlw	0
  2922  0020EA  6F69               	movwf	(___fladd@f2+1)& (0+255),b
  2923  0020EC  0E80               	movlw	128
  2924  0020EE  6F6A               	movwf	(___fladd@f2+2)& (0+255),b
  2925  0020F0  0EBF               	movlw	191
  2926  0020F2  6F6B               	movwf	(___fladd@f2+3)& (0+255),b
  2927  0020F4  EC28  F008         	call	___fladd	;wreg free
  2928  0020F8  C064  F06F         	movff	?___fladd,?_floor
  2929  0020FC  C065  F070         	movff	?___fladd+1,?_floor+1
  2930  002100  C066  F071         	movff	?___fladd+2,?_floor+2
  2931  002104  C067  F072         	movff	?___fladd+3,?_floor+3
  2932  002108  0012               	return	
  2933  00210A                     l1026:
  2934                           
  2935                           ; BSR set to: 0
  2936  00210A  C073  F06F         	movff	floor@i,?_floor
  2937  00210E  C074  F070         	movff	floor@i+1,?_floor+1
  2938  002112  C075  F071         	movff	floor@i+2,?_floor+2
  2939  002116  C076  F072         	movff	floor@i+3,?_floor+3
  2940  00211A  0012               	return		;funcret
  2941  00211C                     __end_of_floor:
  2942                           	opt stack 0
  2943                           tblptru	equ	0xFF8
  2944                           tblptrh	equ	0xFF7
  2945                           postinc0	equ	0xFEE
  2946                           wreg	equ	0xFE8
  2947                           status	equ	0xFD8
  2948                           
  2949 ;; *************** function _frexp *****************
  2950 ;; Defined at:
  2951 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  2952 ;; Parameters:    Size  Location     Type
  2953 ;;  value           4   31[COMRAM] int 
  2954 ;;  eptr            2   35[COMRAM] PTR int 
  2955 ;;		 -> log@exponent(2), floor@expon(2), 
  2956 ;; Auto vars:     Size  Location     Type
  2957 ;;		None
  2958 ;; Return value:  Size  Location     Type
  2959 ;;                  4   31[COMRAM] PTR int 
  2960 ;; Registers used:
  2961 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2962 ;; Tracked objects:
  2963 ;;		On entry : 0/0
  2964 ;;		On exit  : 0/0
  2965 ;;		Unchanged: 0/0
  2966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2967 ;;      Params:         6       0       0       0       0       0       0
  2968 ;;      Locals:         0       0       0       0       0       0       0
  2969 ;;      Temps:          2       0       0       0       0       0       0
  2970 ;;      Totals:         8       0       0       0       0       0       0
  2971 ;;Total ram usage:        8 bytes
  2972 ;; Hardware stack levels used:    1
  2973 ;; Hardware stack levels required when called:    2
  2974 ;; This function calls:
  2975 ;;		Nothing
  2976 ;; This function is called by:
  2977 ;;		_floor
  2978 ;;		_log
  2979 ;; This function uses a non-reentrant model
  2980 ;;
  2981                           
  2982                           	psect	text12
  2983  002696                     __ptext12:
  2984                           	opt stack 0
  2985  002696                     _frexp:
  2986                           	opt stack 25
  2987                           
  2988                           ;incstack = 0
  2989  002696  5020               	movf	frexp@value,w,c
  2990  002698  1021               	iorwf	frexp@value+1,w,c
  2991  00269A  1022               	iorwf	frexp@value+2,w,c
  2992  00269C  1023               	iorwf	frexp@value+3,w,c
  2993  00269E  A4D8               	btfss	status,2,c
  2994  0026A0  D011               	goto	l3290
  2995  0026A2  C024  FFD9         	movff	frexp@eptr,fsr2l
  2996  0026A6  C025  FFDA         	movff	frexp@eptr+1,fsr2h
  2997  0026AA  0E00               	movlw	0
  2998  0026AC  6EDE               	movwf	postinc2,c
  2999  0026AE  0E00               	movlw	0
  3000  0026B0  6EDD               	movwf	postdec2,c
  3001  0026B2  0E00               	movlw	0
  3002  0026B4  6E20               	movwf	?_frexp,c
  3003  0026B6  0E00               	movlw	0
  3004  0026B8  6E21               	movwf	?_frexp+1,c
  3005  0026BA  0E00               	movlw	0
  3006  0026BC  6E22               	movwf	?_frexp+2,c
  3007  0026BE  0E00               	movlw	0
  3008  0026C0  6E23               	movwf	?_frexp+3,c
  3009  0026C2  0012               	return	
  3010  0026C4                     l3290:
  3011  0026C4  5023               	movf	frexp@value+3,w,c
  3012  0026C6  0B7F               	andlw	127
  3013  0026C8  6E26               	movwf	??_frexp& (0+255),c
  3014  0026CA  6A27               	clrf	(??_frexp+1)& (0+255),c
  3015  0026CC  90D8               	bcf	status,0,c
  3016  0026CE  3626               	rlcf	??_frexp,f,c
  3017  0026D0  3627               	rlcf	??_frexp+1,f,c
  3018  0026D2  C024  FFD9         	movff	frexp@eptr,fsr2l
  3019  0026D6  C025  FFDA         	movff	frexp@eptr+1,fsr2h
  3020  0026DA  C026  FFDE         	movff	??_frexp,postinc2
  3021  0026DE  C027  FFDD         	movff	??_frexp+1,postdec2
  3022  0026E2  AE22               	btfss	frexp@value+2,7,c
  3023  0026E4  D003               	goto	u3740
  3024  0026E6  6A26               	clrf	??_frexp& (0+255),c
  3025  0026E8  2A26               	incf	??_frexp& (0+255),f,c
  3026  0026EA  D001               	goto	u3748
  3027  0026EC                     u3740:
  3028  0026EC  6A26               	clrf	??_frexp& (0+255),c
  3029  0026EE                     u3748:
  3030  0026EE  5026               	movf	??_frexp,w,c
  3031  0026F0  C024  FFD9         	movff	frexp@eptr,fsr2l
  3032  0026F4  C025  FFDA         	movff	frexp@eptr+1,fsr2h
  3033  0026F8  12DE               	iorwf	postinc2,f,c
  3034  0026FA  0E00               	movlw	0
  3035  0026FC  12DD               	iorwf	postdec2,f,c
  3036  0026FE  C024  FFD9         	movff	frexp@eptr,fsr2l
  3037  002702  C025  FFDA         	movff	frexp@eptr+1,fsr2h
  3038  002706  0E82               	movlw	130
  3039  002708  26DE               	addwf	postinc2,f,c
  3040  00270A  0EFF               	movlw	255
  3041  00270C  22DD               	addwfc	postdec2,f,c
  3042  00270E  8023               	bsf	frexp@value+3,0,c
  3043  002710  8223               	bsf	frexp@value+3,1,c
  3044  002712  8423               	bsf	frexp@value+3,2,c
  3045  002714  8623               	bsf	frexp@value+3,3,c
  3046  002716  8823               	bsf	frexp@value+3,4,c
  3047  002718  8A23               	bsf	frexp@value+3,5,c
  3048  00271A  9C23               	bcf	frexp@value+3,6,c
  3049  00271C  9E22               	bcf	frexp@value+2,7,c
  3050  00271E  C020  F020         	movff	frexp@value,?_frexp
  3051  002722  C021  F021         	movff	frexp@value+1,?_frexp+1
  3052  002726  C022  F022         	movff	frexp@value+2,?_frexp+2
  3053  00272A  C023  F023         	movff	frexp@value+3,?_frexp+3
  3054  00272E  0012               	return	
  3055  002730  0012               	return		;funcret
  3056  002732                     __end_of_frexp:
  3057                           	opt stack 0
  3058                           tblptru	equ	0xFF8
  3059                           tblptrh	equ	0xFF7
  3060                           postinc0	equ	0xFEE
  3061                           wreg	equ	0xFE8
  3062                           postinc2	equ	0xFDE
  3063                           postdec2	equ	0xFDD
  3064                           fsr2h	equ	0xFDA
  3065                           fsr2l	equ	0xFD9
  3066                           status	equ	0xFD8
  3067                           
  3068 ;; *************** function ___fltol *****************
  3069 ;; Defined at:
  3070 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fltol.c"
  3071 ;; Parameters:    Size  Location     Type
  3072 ;;  f1              4   31[COMRAM] PTR int 
  3073 ;; Auto vars:     Size  Location     Type
  3074 ;;  exp1            1   40[COMRAM] unsigned char 
  3075 ;;  sign1           1   39[COMRAM] unsigned char 
  3076 ;; Return value:  Size  Location     Type
  3077 ;;                  4   31[COMRAM] long 
  3078 ;; Registers used:
  3079 ;;		wreg, status,2, status,0
  3080 ;; Tracked objects:
  3081 ;;		On entry : 0/0
  3082 ;;		On exit  : 0/0
  3083 ;;		Unchanged: 0/0
  3084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3085 ;;      Params:         4       0       0       0       0       0       0
  3086 ;;      Locals:         2       0       0       0       0       0       0
  3087 ;;      Temps:          4       0       0       0       0       0       0
  3088 ;;      Totals:        10       0       0       0       0       0       0
  3089 ;;Total ram usage:       10 bytes
  3090 ;; Hardware stack levels used:    1
  3091 ;; Hardware stack levels required when called:    2
  3092 ;; This function calls:
  3093 ;;		Nothing
  3094 ;; This function is called by:
  3095 ;;		_pow
  3096 ;;		_exp
  3097 ;;		_floor
  3098 ;; This function uses a non-reentrant model
  3099 ;;
  3100                           
  3101                           	psect	text13
  3102  00233E                     __ptext13:
  3103                           	opt stack 0
  3104  00233E                     ___fltol:
  3105                           	opt stack 24
  3106                           
  3107                           ;incstack = 0
  3108  00233E  3422               	rlcf	___fltol@f1+2,w,c
  3109  002340  3423               	rlcf	___fltol@f1+3,w,c
  3110  002342  6E29               	movwf	___fltol@exp1,c
  3111  002344  5029               	movf	___fltol@exp1,w,c
  3112  002346  A4D8               	btfss	status,2,c
  3113  002348  D009               	goto	l2414
  3114  00234A  0E00               	movlw	0
  3115  00234C  6E20               	movwf	?___fltol,c
  3116  00234E  0E00               	movlw	0
  3117  002350  6E21               	movwf	?___fltol+1,c
  3118  002352  0E00               	movlw	0
  3119  002354  6E22               	movwf	?___fltol+2,c
  3120  002356  0E00               	movlw	0
  3121  002358  6E23               	movwf	?___fltol+3,c
  3122  00235A  0012               	return	
  3123  00235C                     l2414:
  3124  00235C  C020  F024         	movff	___fltol@f1,??___fltol
  3125  002360  C021  F025         	movff	___fltol@f1+1,??___fltol+1
  3126  002364  C022  F026         	movff	___fltol@f1+2,??___fltol+2
  3127  002368  C023  F027         	movff	___fltol@f1+3,??___fltol+3
  3128  00236C  0E20               	movlw	32
  3129  00236E  D005               	goto	u2310
  3130  002370                     u2315:
  3131  002370  90D8               	bcf	status,0,c
  3132  002372  3227               	rrcf	??___fltol+3,f,c
  3133  002374  3226               	rrcf	??___fltol+2,f,c
  3134  002376  3225               	rrcf	??___fltol+1,f,c
  3135  002378  3224               	rrcf	??___fltol,f,c
  3136  00237A                     u2310:
  3137  00237A  2EE8               	decfsz	wreg,f,c
  3138  00237C  D7F9               	goto	u2315
  3139  00237E  5024               	movf	??___fltol,w,c
  3140  002380  6E28               	movwf	___fltol@sign1,c
  3141  002382  8E22               	bsf	___fltol@f1+2,7,c
  3142  002384  0EFF               	movlw	255
  3143  002386  1620               	andwf	___fltol@f1,f,c
  3144  002388  0EFF               	movlw	255
  3145  00238A  1621               	andwf	___fltol@f1+1,f,c
  3146  00238C  0EFF               	movlw	255
  3147  00238E  1622               	andwf	___fltol@f1+2,f,c
  3148  002390  0E00               	movlw	0
  3149  002392  1623               	andwf	___fltol@f1+3,f,c
  3150  002394  0E96               	movlw	150
  3151  002396  5E29               	subwf	___fltol@exp1,f,c
  3152  002398  AE29               	btfss	___fltol@exp1,7,c
  3153  00239A  D017               	goto	l2434
  3154  00239C  5029               	movf	___fltol@exp1,w,c
  3155  00239E  0A80               	xorlw	128
  3156  0023A0  0F97               	addlw	151
  3157  0023A2  B0D8               	btfsc	status,0,c
  3158  0023A4  D00A               	goto	l2430
  3159  0023A6  0E00               	movlw	0
  3160  0023A8  6E20               	movwf	?___fltol,c
  3161  0023AA  0E00               	movlw	0
  3162  0023AC  6E21               	movwf	?___fltol+1,c
  3163  0023AE  0E00               	movlw	0
  3164  0023B0  6E22               	movwf	?___fltol+2,c
  3165  0023B2  0E00               	movlw	0
  3166  0023B4  6E23               	movwf	?___fltol+3,c
  3167  0023B6  0012               	return	
  3168  0023B8  D000               	goto	l2430
  3169  0023BA                     l2430:
  3170  0023BA  90D8               	bcf	status,0,c
  3171  0023BC  3223               	rrcf	___fltol@f1+3,f,c
  3172  0023BE  3222               	rrcf	___fltol@f1+2,f,c
  3173  0023C0  3221               	rrcf	___fltol@f1+1,f,c
  3174  0023C2  3220               	rrcf	___fltol@f1,f,c
  3175  0023C4  3E29               	incfsz	___fltol@exp1,f,c
  3176  0023C6  D7F9               	goto	l2430
  3177  0023C8  D019               	goto	l2444
  3178  0023CA                     l2434:
  3179  0023CA  0E1F               	movlw	31
  3180  0023CC  6429               	cpfsgt	___fltol@exp1,c
  3181  0023CE  D011               	goto	l2442
  3182  0023D0  0E00               	movlw	0
  3183  0023D2  6E20               	movwf	?___fltol,c
  3184  0023D4  0E00               	movlw	0
  3185  0023D6  6E21               	movwf	?___fltol+1,c
  3186  0023D8  0E00               	movlw	0
  3187  0023DA  6E22               	movwf	?___fltol+2,c
  3188  0023DC  0E00               	movlw	0
  3189  0023DE  6E23               	movwf	?___fltol+3,c
  3190  0023E0  0012               	return	
  3191  0023E2  D007               	goto	l2442
  3192  0023E4                     l2440:
  3193  0023E4  90D8               	bcf	status,0,c
  3194  0023E6  3620               	rlcf	___fltol@f1,f,c
  3195  0023E8  3621               	rlcf	___fltol@f1+1,f,c
  3196  0023EA  3622               	rlcf	___fltol@f1+2,f,c
  3197  0023EC  3623               	rlcf	___fltol@f1+3,f,c
  3198  0023EE  0629               	decf	___fltol@exp1,f,c
  3199  0023F0  D000               	goto	l2442
  3200  0023F2                     l2442:
  3201  0023F2  5029               	movf	___fltol@exp1,w,c
  3202  0023F4  B4D8               	btfsc	status,2,c
  3203  0023F6  D002               	goto	l2444
  3204  0023F8  D7F5               	goto	l2440
  3205  0023FA  D000               	goto	l2444
  3206  0023FC                     l2444:
  3207  0023FC  5028               	movf	___fltol@sign1,w,c
  3208  0023FE  B4D8               	btfsc	status,2,c
  3209  002400  D009               	goto	l2448
  3210  002402  1E23               	comf	___fltol@f1+3,f,c
  3211  002404  1E22               	comf	___fltol@f1+2,f,c
  3212  002406  1E21               	comf	___fltol@f1+1,f,c
  3213  002408  6C20               	negf	___fltol@f1,c
  3214  00240A  0E00               	movlw	0
  3215  00240C  2221               	addwfc	___fltol@f1+1,f,c
  3216  00240E  2222               	addwfc	___fltol@f1+2,f,c
  3217  002410  2223               	addwfc	___fltol@f1+3,f,c
  3218  002412  D000               	goto	l2448
  3219  002414                     l2448:
  3220  002414  C020  F020         	movff	___fltol@f1,?___fltol
  3221  002418  C021  F021         	movff	___fltol@f1+1,?___fltol+1
  3222  00241C  C022  F022         	movff	___fltol@f1+2,?___fltol+2
  3223  002420  C023  F023         	movff	___fltol@f1+3,?___fltol+3
  3224  002424  0012               	return	
  3225  002426  0012               	return		;funcret
  3226  002428                     __end_of___fltol:
  3227                           	opt stack 0
  3228                           tblptru	equ	0xFF8
  3229                           tblptrh	equ	0xFF7
  3230                           postinc0	equ	0xFEE
  3231                           wreg	equ	0xFE8
  3232                           postinc2	equ	0xFDE
  3233                           postdec2	equ	0xFDD
  3234                           fsr2h	equ	0xFDA
  3235                           fsr2l	equ	0xFD9
  3236                           status	equ	0xFD8
  3237                           
  3238 ;; *************** function ___altofl *****************
  3239 ;; Defined at:
  3240 ;;		line 36 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\altofl.c"
  3241 ;; Parameters:    Size  Location     Type
  3242 ;;  c               4    0[BANK0 ] long 
  3243 ;; Auto vars:     Size  Location     Type
  3244 ;;  sign            1   41[COMRAM] unsigned char 
  3245 ;; Return value:  Size  Location     Type
  3246 ;;                  4    0[BANK0 ] unsigned char 
  3247 ;; Registers used:
  3248 ;;		wreg, status,2, status,0, cstack
  3249 ;; Tracked objects:
  3250 ;;		On entry : 0/0
  3251 ;;		On exit  : 0/0
  3252 ;;		Unchanged: 0/0
  3253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3254 ;;      Params:         0       4       0       0       0       0       0
  3255 ;;      Locals:         1       0       0       0       0       0       0
  3256 ;;      Temps:          0       0       0       0       0       0       0
  3257 ;;      Totals:         1       4       0       0       0       0       0
  3258 ;;Total ram usage:        5 bytes
  3259 ;; Hardware stack levels used:    1
  3260 ;; Hardware stack levels required when called:    3
  3261 ;; This function calls:
  3262 ;;		___flpack
  3263 ;; This function is called by:
  3264 ;;		_floor
  3265 ;; This function uses a non-reentrant model
  3266 ;;
  3267                           
  3268                           	psect	text14
  3269  002A96                     __ptext14:
  3270                           	opt stack 0
  3271  002A96                     ___altofl:
  3272                           	opt stack 23
  3273                           
  3274                           ;incstack = 0
  3275  002A96  0E00               	movlw	0
  3276  002A98  6E2A               	movwf	___altofl@sign,c
  3277  002A9A  0100               	movlb	0	; () banked
  3278  002A9C  AF63               	btfss	(___altofl@c+3)& (0+255),7,b
  3279  002A9E  D00C               	goto	l3204
  3280                           
  3281                           ; BSR set to: 0
  3282  002AA0  0100               	movlb	0	; () banked
  3283  002AA2  1F63               	comf	(___altofl@c+3)& (0+255),f,b
  3284  002AA4  1F62               	comf	(___altofl@c+2)& (0+255),f,b
  3285  002AA6  1F61               	comf	(___altofl@c+1)& (0+255),f,b
  3286  002AA8  6D60               	negf	___altofl@c& (0+255),b
  3287  002AAA  0E00               	movlw	0
  3288  002AAC  2361               	addwfc	(___altofl@c+1)& (0+255),f,b
  3289  002AAE  2362               	addwfc	(___altofl@c+2)& (0+255),f,b
  3290  002AB0  2363               	addwfc	(___altofl@c+3)& (0+255),f,b
  3291                           
  3292                           ; BSR set to: 0
  3293  002AB2  0E01               	movlw	1
  3294  002AB4  6E2A               	movwf	___altofl@sign,c
  3295  002AB6  D000               	goto	l3204
  3296  002AB8                     l3204:
  3297                           
  3298                           ; BSR set to: 0
  3299  002AB8  C060  F020         	movff	___altofl@c,___flpack@arg
  3300  002ABC  C061  F021         	movff	___altofl@c+1,___flpack@arg+1
  3301  002AC0  C062  F022         	movff	___altofl@c+2,___flpack@arg+2
  3302  002AC4  C063  F023         	movff	___altofl@c+3,___flpack@arg+3
  3303  002AC8  0E96               	movlw	150
  3304  002ACA  6E24               	movwf	___flpack@exp,c
  3305  002ACC  C02A  F025         	movff	___altofl@sign,___flpack@sign
  3306  002AD0  EC17  F011         	call	___flpack	;wreg free
  3307  002AD4  C020  F060         	movff	?___flpack,?___altofl
  3308  002AD8  C021  F061         	movff	?___flpack+1,?___altofl+1
  3309  002ADC  C022  F062         	movff	?___flpack+2,?___altofl+2
  3310  002AE0  C023  F063         	movff	?___flpack+3,?___altofl+3
  3311  002AE4  0012               	return	
  3312  002AE6  0012               	return		;funcret
  3313  002AE8                     __end_of___altofl:
  3314                           	opt stack 0
  3315                           tblptru	equ	0xFF8
  3316                           tblptrh	equ	0xFF7
  3317                           postinc0	equ	0xFEE
  3318                           wreg	equ	0xFE8
  3319                           postinc2	equ	0xFDE
  3320                           postdec2	equ	0xFDD
  3321                           fsr2h	equ	0xFDA
  3322                           fsr2l	equ	0xFD9
  3323                           status	equ	0xFD8
  3324                           
  3325 ;; *************** function ___lltofl *****************
  3326 ;; Defined at:
  3327 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltofl.c"
  3328 ;; Parameters:    Size  Location     Type
  3329 ;;  c               4    0[BANK0 ] unsigned long 
  3330 ;; Auto vars:     Size  Location     Type
  3331 ;;		None
  3332 ;; Return value:  Size  Location     Type
  3333 ;;                  4    0[BANK0 ] unsigned long 
  3334 ;; Registers used:
  3335 ;;		wreg, status,2, status,0, cstack
  3336 ;; Tracked objects:
  3337 ;;		On entry : 0/0
  3338 ;;		On exit  : 0/0
  3339 ;;		Unchanged: 0/0
  3340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3341 ;;      Params:         0       4       0       0       0       0       0
  3342 ;;      Locals:         0       0       0       0       0       0       0
  3343 ;;      Temps:          0       0       0       0       0       0       0
  3344 ;;      Totals:         0       4       0       0       0       0       0
  3345 ;;Total ram usage:        4 bytes
  3346 ;; Hardware stack levels used:    1
  3347 ;; Hardware stack levels required when called:    3
  3348 ;; This function calls:
  3349 ;;		___flpack
  3350 ;; This function is called by:
  3351 ;;		_pow
  3352 ;; This function uses a non-reentrant model
  3353 ;;
  3354                           
  3355                           	psect	text15
  3356  002C4C                     __ptext15:
  3357                           	opt stack 0
  3358  002C4C                     ___lltofl:
  3359                           	opt stack 25
  3360                           
  3361                           ;incstack = 0
  3362  002C4C  C060  F020         	movff	___lltofl@c,___flpack@arg
  3363  002C50  C061  F021         	movff	___lltofl@c+1,___flpack@arg+1
  3364  002C54  C062  F022         	movff	___lltofl@c+2,___flpack@arg+2
  3365  002C58  C063  F023         	movff	___lltofl@c+3,___flpack@arg+3
  3366  002C5C  0E96               	movlw	150
  3367  002C5E  6E24               	movwf	___flpack@exp,c
  3368  002C60  0E00               	movlw	0
  3369  002C62  6E25               	movwf	___flpack@sign,c
  3370  002C64  EC17  F011         	call	___flpack	;wreg free
  3371  002C68  C020  F060         	movff	?___flpack,?___lltofl
  3372  002C6C  C021  F061         	movff	?___flpack+1,?___lltofl+1
  3373  002C70  C022  F062         	movff	?___flpack+2,?___lltofl+2
  3374  002C74  C023  F063         	movff	?___flpack+3,?___lltofl+3
  3375  002C78  0012               	return	
  3376  002C7A  0012               	return		;funcret
  3377  002C7C                     __end_of___lltofl:
  3378                           	opt stack 0
  3379                           tblptru	equ	0xFF8
  3380                           tblptrh	equ	0xFF7
  3381                           postinc0	equ	0xFEE
  3382                           wreg	equ	0xFE8
  3383                           postinc2	equ	0xFDE
  3384                           postdec2	equ	0xFDD
  3385                           fsr2h	equ	0xFDA
  3386                           fsr2l	equ	0xFD9
  3387                           status	equ	0xFD8
  3388                           
  3389 ;; *************** function _acos *****************
  3390 ;; Defined at:
  3391 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\acos.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;  x               4  115[BANK0 ] unsigned long 
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;		None
  3396 ;; Return value:  Size  Location     Type
  3397 ;;                  4  115[BANK0 ] unsigned long 
  3398 ;; Registers used:
  3399 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3400 ;; Tracked objects:
  3401 ;;		On entry : 0/0
  3402 ;;		On exit  : 0/0
  3403 ;;		Unchanged: 0/0
  3404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3405 ;;      Params:         0       4       0       0       0       0       0
  3406 ;;      Locals:         0       4       0       0       0       0       0
  3407 ;;      Temps:          0       0       0       0       0       0       0
  3408 ;;      Totals:         0       8       0       0       0       0       0
  3409 ;;Total ram usage:        8 bytes
  3410 ;; Hardware stack levels used:    1
  3411 ;; Hardware stack levels required when called:    7
  3412 ;; This function calls:
  3413 ;;		___fladd
  3414 ;;		___flneg
  3415 ;;		_asin
  3416 ;; This function is called by:
  3417 ;;		_Gyros_Update
  3418 ;; This function uses a non-reentrant model
  3419 ;;
  3420                           
  3421                           	psect	text16
  3422  002836                     __ptext16:
  3423                           	opt stack 0
  3424  002836                     _acos:
  3425                           	opt stack 22
  3426                           
  3427                           ;incstack = 0
  3428  002836  C0D3  F0CF         	movff	acos@x,asin@x
  3429  00283A  C0D4  F0D0         	movff	acos@x+1,asin@x+1
  3430  00283E  C0D5  F0D1         	movff	acos@x+2,asin@x+2
  3431  002842  C0D6  F0D2         	movff	acos@x+3,asin@x+3
  3432  002846  EC50  F005         	call	_asin	;wreg free
  3433  00284A  C0CF  F0D7         	movff	?_asin,_acos$1985
  3434  00284E  C0D0  F0D8         	movff	?_asin+1,_acos$1985+1
  3435  002852  C0D1  F0D9         	movff	?_asin+2,_acos$1985+2
  3436  002856  C0D2  F0DA         	movff	?_asin+3,_acos$1985+3
  3437  00285A  C0D7  F020         	movff	_acos$1985,___flneg@f1
  3438  00285E  C0D8  F021         	movff	_acos$1985+1,___flneg@f1+1
  3439  002862  C0D9  F022         	movff	_acos$1985+2,___flneg@f1+2
  3440  002866  C0DA  F023         	movff	_acos$1985+3,___flneg@f1+3
  3441  00286A  EC0D  F016         	call	___flneg	;wreg free
  3442  00286E  C020  F064         	movff	?___flneg,___fladd@f1
  3443  002872  C021  F065         	movff	?___flneg+1,___fladd@f1+1
  3444  002876  C022  F066         	movff	?___flneg+2,___fladd@f1+2
  3445  00287A  C023  F067         	movff	?___flneg+3,___fladd@f1+3
  3446  00287E  0EDB               	movlw	219
  3447  002880  0100               	movlb	0	; () banked
  3448  002882  6F68               	movwf	___fladd@f2& (0+255),b
  3449  002884  0E0F               	movlw	15
  3450  002886  6F69               	movwf	(___fladd@f2+1)& (0+255),b
  3451  002888  0EC9               	movlw	201
  3452  00288A  6F6A               	movwf	(___fladd@f2+2)& (0+255),b
  3453  00288C  0E3F               	movlw	63
  3454  00288E  6F6B               	movwf	(___fladd@f2+3)& (0+255),b
  3455  002890  EC28  F008         	call	___fladd	;wreg free
  3456  002894  C064  F0D3         	movff	?___fladd,?_acos
  3457  002898  C065  F0D4         	movff	?___fladd+1,?_acos+1
  3458  00289C  C066  F0D5         	movff	?___fladd+2,?_acos+2
  3459  0028A0  C067  F0D6         	movff	?___fladd+3,?_acos+3
  3460  0028A4  0012               	return	
  3461  0028A6  0012               	return		;funcret
  3462  0028A8                     __end_of_acos:
  3463                           	opt stack 0
  3464                           tblptru	equ	0xFF8
  3465                           tblptrh	equ	0xFF7
  3466                           postinc0	equ	0xFEE
  3467                           wreg	equ	0xFE8
  3468                           postinc2	equ	0xFDE
  3469                           postdec2	equ	0xFDD
  3470                           fsr2h	equ	0xFDA
  3471                           fsr2l	equ	0xFD9
  3472                           status	equ	0xFD8
  3473                           
  3474 ;; *************** function _asin *****************
  3475 ;; Defined at:
  3476 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\asin.c"
  3477 ;; Parameters:    Size  Location     Type
  3478 ;;  x               4  111[BANK0 ] unsigned long 
  3479 ;; Auto vars:     Size  Location     Type
  3480 ;;  y               4   16[BANK1 ] unsigned long 
  3481 ;;  sgn             4    0[BANK1 ] unsigned long 
  3482 ;; Return value:  Size  Location     Type
  3483 ;;                  4  111[BANK0 ] unsigned long 
  3484 ;; Registers used:
  3485 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3486 ;; Tracked objects:
  3487 ;;		On entry : 0/0
  3488 ;;		On exit  : 0/0
  3489 ;;		Unchanged: 0/0
  3490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3491 ;;      Params:         0       4       0       0       0       0       0
  3492 ;;      Locals:         0       0      24       0       0       0       0
  3493 ;;      Temps:          0       0       0       0       0       0       0
  3494 ;;      Totals:         0       4      24       0       0       0       0
  3495 ;;Total ram usage:       28 bytes
  3496 ;; Hardware stack levels used:    1
  3497 ;; Hardware stack levels required when called:    6
  3498 ;; This function calls:
  3499 ;;		___fladd
  3500 ;;		___fldiv
  3501 ;;		___flge
  3502 ;;		___flmul
  3503 ;;		___flneg
  3504 ;;		_atan
  3505 ;;		_fabs
  3506 ;;		_sqrt
  3507 ;; This function is called by:
  3508 ;;		_acos
  3509 ;; This function uses a non-reentrant model
  3510 ;;
  3511                           
  3512                           	psect	text17
  3513  000AA0                     __ptext17:
  3514                           	opt stack 0
  3515  000AA0                     _asin:
  3516                           	opt stack 22
  3517                           
  3518                           ;incstack = 0
  3519  000AA0  0E00               	movlw	0
  3520  000AA2  0100               	movlb	0	; () banked
  3521  000AA4  6F60               	movwf	___flge@ff1& (0+255),b
  3522  000AA6  0E00               	movlw	0
  3523  000AA8  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  3524  000AAA  0E80               	movlw	128
  3525  000AAC  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  3526  000AAE  0E3F               	movlw	63
  3527  000AB0  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  3528  000AB2  C0CF  F024         	movff	asin@x,fabs@d
  3529  000AB6  C0D0  F025         	movff	asin@x+1,fabs@d+1
  3530  000ABA  C0D1  F026         	movff	asin@x+2,fabs@d+2
  3531  000ABE  C0D2  F027         	movff	asin@x+3,fabs@d+3
  3532  000AC2  ECD6  F015         	call	_fabs	;wreg free
  3533  000AC6  C024  F064         	movff	?_fabs,___flge@ff2
  3534  000ACA  C025  F065         	movff	?_fabs+1,___flge@ff2+1
  3535  000ACE  C026  F066         	movff	?_fabs+2,___flge@ff2+2
  3536  000AD2  C027  F067         	movff	?_fabs+3,___flge@ff2+3
  3537  000AD6  EC88  F012         	call	___flge	;wreg free
  3538  000ADA  0100               	movlb	0	; () banked
  3539  000ADC  B0D8               	btfsc	status,0,c
  3540  000ADE  D00F               	goto	l3438
  3541                           
  3542                           ; BSR set to: 0
  3543  000AE0  0E00               	movlw	0
  3544  000AE2  0100               	movlb	0	; () banked
  3545  000AE4  6FFB               	movwf	(_errno+1)& (0+255),b
  3546  000AE6  0E21               	movlw	33
  3547  000AE8  6FFA               	movwf	_errno& (0+255),b
  3548  000AEA  0E00               	movlw	0
  3549  000AEC  0100               	movlb	0	; () banked
  3550  000AEE  6FCF               	movwf	?_asin& (0+255),b
  3551  000AF0  0E00               	movlw	0
  3552  000AF2  6FD0               	movwf	(?_asin+1)& (0+255),b
  3553  000AF4  0E00               	movlw	0
  3554  000AF6  6FD1               	movwf	(?_asin+2)& (0+255),b
  3555  000AF8  0E00               	movlw	0
  3556  000AFA  6FD2               	movwf	(?_asin+3)& (0+255),b
  3557                           
  3558                           ; BSR set to: 0
  3559  000AFC  0012               	return	
  3560  000AFE                     l3438:
  3561                           
  3562                           ; BSR set to: 0
  3563  000AFE  0E00               	movlw	0
  3564  000B00  0101               	movlb	1	; () banked
  3565  000B02  6F00               	movwf	asin@sgn& (0+255),b
  3566  000B04  0E00               	movlw	0
  3567  000B06  6F01               	movwf	(asin@sgn+1)& (0+255),b
  3568  000B08  0E80               	movlw	128
  3569  000B0A  6F02               	movwf	(asin@sgn+2)& (0+255),b
  3570  000B0C  0E3F               	movlw	63
  3571  000B0E  6F03               	movwf	(asin@sgn+3)& (0+255),b
  3572                           
  3573                           ; BSR set to: 1
  3574  000B10  C0CF  F073         	movff	asin@x,___flmul@f2
  3575  000B14  C0D0  F074         	movff	asin@x+1,___flmul@f2+1
  3576  000B18  C0D1  F075         	movff	asin@x+2,___flmul@f2+2
  3577  000B1C  C0D2  F076         	movff	asin@x+3,___flmul@f2+3
  3578  000B20  C0CF  F06F         	movff	asin@x,___flmul@f1
  3579  000B24  C0D0  F070         	movff	asin@x+1,___flmul@f1+1
  3580  000B28  C0D1  F071         	movff	asin@x+2,___flmul@f1+2
  3581  000B2C  C0D2  F072         	movff	asin@x+3,___flmul@f1+3
  3582  000B30  EC19  F00E         	call	___flmul	;wreg free
  3583  000B34  C06F  F020         	movff	?___flmul,___flneg@f1
  3584  000B38  C070  F021         	movff	?___flmul+1,___flneg@f1+1
  3585  000B3C  C071  F022         	movff	?___flmul+2,___flneg@f1+2
  3586  000B40  C072  F023         	movff	?___flmul+3,___flneg@f1+3
  3587  000B44  EC0D  F016         	call	___flneg	;wreg free
  3588  000B48  C020  F064         	movff	?___flneg,___fladd@f1
  3589  000B4C  C021  F065         	movff	?___flneg+1,___fladd@f1+1
  3590  000B50  C022  F066         	movff	?___flneg+2,___fladd@f1+2
  3591  000B54  C023  F067         	movff	?___flneg+3,___fladd@f1+3
  3592  000B58  0E00               	movlw	0
  3593  000B5A  0100               	movlb	0	; () banked
  3594  000B5C  6F68               	movwf	___fladd@f2& (0+255),b
  3595  000B5E  0E00               	movlw	0
  3596  000B60  6F69               	movwf	(___fladd@f2+1)& (0+255),b
  3597  000B62  0E80               	movlw	128
  3598  000B64  6F6A               	movwf	(___fladd@f2+2)& (0+255),b
  3599  000B66  0E3F               	movlw	63
  3600  000B68  6F6B               	movwf	(___fladd@f2+3)& (0+255),b
  3601  000B6A  EC28  F008         	call	___fladd	;wreg free
  3602  000B6E  C064  F104         	movff	?___fladd,_asin$1986
  3603  000B72  C065  F105         	movff	?___fladd+1,_asin$1986+1
  3604  000B76  C066  F106         	movff	?___fladd+2,_asin$1986+2
  3605  000B7A  C067  F107         	movff	?___fladd+3,_asin$1986+3
  3606  000B7E  C104  F0B6         	movff	_asin$1986,sqrt@y
  3607  000B82  C105  F0B7         	movff	_asin$1986+1,sqrt@y+1
  3608  000B86  C106  F0B8         	movff	_asin$1986+2,sqrt@y+2
  3609  000B8A  C107  F0B9         	movff	_asin$1986+3,sqrt@y+3
  3610  000B8E  EC83  F00A         	call	_sqrt	;wreg free
  3611  000B92  C0B6  F110         	movff	?_sqrt,asin@y
  3612  000B96  C0B7  F111         	movff	?_sqrt+1,asin@y+1
  3613  000B9A  C0B8  F112         	movff	?_sqrt+2,asin@y+2
  3614  000B9E  C0B9  F113         	movff	?_sqrt+3,asin@y+3
  3615  000BA2  C0CF  F024         	movff	asin@x,fabs@d
  3616  000BA6  C0D0  F025         	movff	asin@x+1,fabs@d+1
  3617  000BAA  C0D1  F026         	movff	asin@x+2,fabs@d+2
  3618  000BAE  C0D2  F027         	movff	asin@x+3,fabs@d+3
  3619  000BB2  ECD6  F015         	call	_fabs	;wreg free
  3620  000BB6  C024  F060         	movff	?_fabs,___flge@ff1
  3621  000BBA  C025  F061         	movff	?_fabs+1,___flge@ff1+1
  3622  000BBE  C026  F062         	movff	?_fabs+2,___flge@ff1+2
  3623  000BC2  C027  F063         	movff	?_fabs+3,___flge@ff1+3
  3624  000BC6  0E8F               	movlw	143
  3625  000BC8  0100               	movlb	0	; () banked
  3626  000BCA  6F64               	movwf	___flge@ff2& (0+255),b
  3627  000BCC  0EC2               	movlw	194
  3628  000BCE  6F65               	movwf	(___flge@ff2+1)& (0+255),b
  3629  000BD0  0E35               	movlw	53
  3630  000BD2  6F66               	movwf	(___flge@ff2+2)& (0+255),b
  3631  000BD4  0E3F               	movlw	63
  3632  000BD6  6F67               	movwf	(___flge@ff2+3)& (0+255),b
  3633  000BD8  EC88  F012         	call	___flge	;wreg free
  3634  000BDC  0100               	movlb	0	; () banked
  3635  000BDE  B0D8               	btfsc	status,0,c
  3636  000BE0  D02D               	goto	l3452
  3637                           
  3638                           ; BSR set to: 0
  3639  000BE2  C0CF  F07E         	movff	asin@x,___fldiv@f1
  3640  000BE6  C0D0  F07F         	movff	asin@x+1,___fldiv@f1+1
  3641  000BEA  C0D1  F080         	movff	asin@x+2,___fldiv@f1+2
  3642  000BEE  C0D2  F081         	movff	asin@x+3,___fldiv@f1+3
  3643  000BF2  C110  F082         	movff	asin@y,___fldiv@f2
  3644  000BF6  C111  F083         	movff	asin@y+1,___fldiv@f2+1
  3645  000BFA  C112  F084         	movff	asin@y+2,___fldiv@f2+2
  3646  000BFE  C113  F085         	movff	asin@y+3,___fldiv@f2+3
  3647  000C02  ECCB  F00E         	call	___fldiv	;wreg free
  3648  000C06  C07E  F114         	movff	?___fldiv,_asin$1987
  3649  000C0A  C07F  F115         	movff	?___fldiv+1,_asin$1987+1
  3650  000C0E  C080  F116         	movff	?___fldiv+2,_asin$1987+2
  3651  000C12  C081  F117         	movff	?___fldiv+3,_asin$1987+3
  3652  000C16  C114  F08E         	movff	_asin$1987,atan@f
  3653  000C1A  C115  F08F         	movff	_asin$1987+1,atan@f+1
  3654  000C1E  C116  F090         	movff	_asin$1987+2,atan@f+2
  3655  000C22  C117  F091         	movff	_asin$1987+3,atan@f+3
  3656  000C26  EC58  F009         	call	_atan	;wreg free
  3657  000C2A  C08E  F0CF         	movff	?_atan,?_asin
  3658  000C2E  C08F  F0D0         	movff	?_atan+1,?_asin+1
  3659  000C32  C090  F0D1         	movff	?_atan+2,?_asin+2
  3660  000C36  C091  F0D2         	movff	?_atan+3,?_asin+3
  3661  000C3A  0012               	return	
  3662  000C3C                     l3452:
  3663  000C3C  0100               	movlb	0	; () banked
  3664  000C3E  AFD2               	btfss	(asin@x+3)& (0+255),7,b
  3665  000C40  D06E               	goto	l3464
  3666                           
  3667                           ; BSR set to: 0
  3668  000C42  C0CF  F082         	movff	asin@x,___fldiv@f2
  3669  000C46  C0D0  F083         	movff	asin@x+1,___fldiv@f2+1
  3670  000C4A  C0D1  F084         	movff	asin@x+2,___fldiv@f2+2
  3671  000C4E  C0D2  F085         	movff	asin@x+3,___fldiv@f2+3
  3672  000C52  C110  F020         	movff	asin@y,___flneg@f1
  3673  000C56  C111  F021         	movff	asin@y+1,___flneg@f1+1
  3674  000C5A  C112  F022         	movff	asin@y+2,___flneg@f1+2
  3675  000C5E  C113  F023         	movff	asin@y+3,___flneg@f1+3
  3676  000C62  EC0D  F016         	call	___flneg	;wreg free
  3677  000C66  C020  F07E         	movff	?___flneg,___fldiv@f1
  3678  000C6A  C021  F07F         	movff	?___flneg+1,___fldiv@f1+1
  3679  000C6E  C022  F080         	movff	?___flneg+2,___fldiv@f1+2
  3680  000C72  C023  F081         	movff	?___flneg+3,___fldiv@f1+3
  3681  000C76  ECCB  F00E         	call	___fldiv	;wreg free
  3682  000C7A  C07E  F114         	movff	?___fldiv,_asin$1987
  3683  000C7E  C07F  F115         	movff	?___fldiv+1,_asin$1987+1
  3684  000C82  C080  F116         	movff	?___fldiv+2,_asin$1987+2
  3685  000C86  C081  F117         	movff	?___fldiv+3,_asin$1987+3
  3686  000C8A  C114  F08E         	movff	_asin$1987,atan@f
  3687  000C8E  C115  F08F         	movff	_asin$1987+1,atan@f+1
  3688  000C92  C116  F090         	movff	_asin$1987+2,atan@f+2
  3689  000C96  C117  F091         	movff	_asin$1987+3,atan@f+3
  3690  000C9A  EC58  F009         	call	_atan	;wreg free
  3691  000C9E  C08E  F10C         	movff	?_atan,_asin$1988
  3692  000CA2  C08F  F10D         	movff	?_atan+1,_asin$1988+1
  3693  000CA6  C090  F10E         	movff	?_atan+2,_asin$1988+2
  3694  000CAA  C091  F10F         	movff	?_atan+3,_asin$1988+3
  3695  000CAE  0EDB               	movlw	219
  3696  000CB0  0100               	movlb	0	; () banked
  3697  000CB2  6F68               	movwf	___fladd@f2& (0+255),b
  3698  000CB4  0E0F               	movlw	15
  3699  000CB6  6F69               	movwf	(___fladd@f2+1)& (0+255),b
  3700  000CB8  0EC9               	movlw	201
  3701  000CBA  6F6A               	movwf	(___fladd@f2+2)& (0+255),b
  3702  000CBC  0E3F               	movlw	63
  3703  000CBE  6F6B               	movwf	(___fladd@f2+3)& (0+255),b
  3704  000CC0  C10C  F020         	movff	_asin$1988,___flneg@f1
  3705  000CC4  C10D  F021         	movff	_asin$1988+1,___flneg@f1+1
  3706  000CC8  C10E  F022         	movff	_asin$1988+2,___flneg@f1+2
  3707  000CCC  C10F  F023         	movff	_asin$1988+3,___flneg@f1+3
  3708  000CD0  EC0D  F016         	call	___flneg	;wreg free
  3709  000CD4  C020  F064         	movff	?___flneg,___fladd@f1
  3710  000CD8  C021  F065         	movff	?___flneg+1,___fladd@f1+1
  3711  000CDC  C022  F066         	movff	?___flneg+2,___fladd@f1+2
  3712  000CE0  C023  F067         	movff	?___flneg+3,___fladd@f1+3
  3713  000CE4  EC28  F008         	call	___fladd	;wreg free
  3714  000CE8  C064  F108         	movff	?___fladd,_asin$1989
  3715  000CEC  C065  F109         	movff	?___fladd+1,_asin$1989+1
  3716  000CF0  C066  F10A         	movff	?___fladd+2,_asin$1989+2
  3717  000CF4  C067  F10B         	movff	?___fladd+3,_asin$1989+3
  3718  000CF8  C108  F020         	movff	_asin$1989,___flneg@f1
  3719  000CFC  C109  F021         	movff	_asin$1989+1,___flneg@f1+1
  3720  000D00  C10A  F022         	movff	_asin$1989+2,___flneg@f1+2
  3721  000D04  C10B  F023         	movff	_asin$1989+3,___flneg@f1+3
  3722  000D08  EC0D  F016         	call	___flneg	;wreg free
  3723  000D0C  C020  F0CF         	movff	?___flneg,?_asin
  3724  000D10  C021  F0D0         	movff	?___flneg+1,?_asin+1
  3725  000D14  C022  F0D1         	movff	?___flneg+2,?_asin+2
  3726  000D18  C023  F0D2         	movff	?___flneg+3,?_asin+3
  3727  000D1C  0012               	return	
  3728  000D1E                     l3464:
  3729  000D1E  C0CF  F082         	movff	asin@x,___fldiv@f2
  3730  000D22  C0D0  F083         	movff	asin@x+1,___fldiv@f2+1
  3731  000D26  C0D1  F084         	movff	asin@x+2,___fldiv@f2+2
  3732  000D2A  C0D2  F085         	movff	asin@x+3,___fldiv@f2+3
  3733  000D2E  C110  F07E         	movff	asin@y,___fldiv@f1
  3734  000D32  C111  F07F         	movff	asin@y+1,___fldiv@f1+1
  3735  000D36  C112  F080         	movff	asin@y+2,___fldiv@f1+2
  3736  000D3A  C113  F081         	movff	asin@y+3,___fldiv@f1+3
  3737  000D3E  ECCB  F00E         	call	___fldiv	;wreg free
  3738  000D42  C07E  F114         	movff	?___fldiv,_asin$1987
  3739  000D46  C07F  F115         	movff	?___fldiv+1,_asin$1987+1
  3740  000D4A  C080  F116         	movff	?___fldiv+2,_asin$1987+2
  3741  000D4E  C081  F117         	movff	?___fldiv+3,_asin$1987+3
  3742  000D52  C114  F08E         	movff	_asin$1987,atan@f
  3743  000D56  C115  F08F         	movff	_asin$1987+1,atan@f+1
  3744  000D5A  C116  F090         	movff	_asin$1987+2,atan@f+2
  3745  000D5E  C117  F091         	movff	_asin$1987+3,atan@f+3
  3746  000D62  EC58  F009         	call	_atan	;wreg free
  3747  000D66  C08E  F10C         	movff	?_atan,_asin$1988
  3748  000D6A  C08F  F10D         	movff	?_atan+1,_asin$1988+1
  3749  000D6E  C090  F10E         	movff	?_atan+2,_asin$1988+2
  3750  000D72  C091  F10F         	movff	?_atan+3,_asin$1988+3
  3751  000D76  C10C  F020         	movff	_asin$1988,___flneg@f1
  3752  000D7A  C10D  F021         	movff	_asin$1988+1,___flneg@f1+1
  3753  000D7E  C10E  F022         	movff	_asin$1988+2,___flneg@f1+2
  3754  000D82  C10F  F023         	movff	_asin$1988+3,___flneg@f1+3
  3755  000D86  EC0D  F016         	call	___flneg	;wreg free
  3756  000D8A  C020  F064         	movff	?___flneg,___fladd@f1
  3757  000D8E  C021  F065         	movff	?___flneg+1,___fladd@f1+1
  3758  000D92  C022  F066         	movff	?___flneg+2,___fladd@f1+2
  3759  000D96  C023  F067         	movff	?___flneg+3,___fladd@f1+3
  3760  000D9A  0EDB               	movlw	219
  3761  000D9C  0100               	movlb	0	; () banked
  3762  000D9E  6F68               	movwf	___fladd@f2& (0+255),b
  3763  000DA0  0E0F               	movlw	15
  3764  000DA2  6F69               	movwf	(___fladd@f2+1)& (0+255),b
  3765  000DA4  0EC9               	movlw	201
  3766  000DA6  6F6A               	movwf	(___fladd@f2+2)& (0+255),b
  3767  000DA8  0E3F               	movlw	63
  3768  000DAA  6F6B               	movwf	(___fladd@f2+3)& (0+255),b
  3769  000DAC  EC28  F008         	call	___fladd	;wreg free
  3770  000DB0  C064  F0CF         	movff	?___fladd,?_asin
  3771  000DB4  C065  F0D0         	movff	?___fladd+1,?_asin+1
  3772  000DB8  C066  F0D1         	movff	?___fladd+2,?_asin+2
  3773  000DBC  C067  F0D2         	movff	?___fladd+3,?_asin+3
  3774  000DC0  0012               	return	
  3775  000DC2  0012               	return		;funcret
  3776  000DC4                     __end_of_asin:
  3777                           	opt stack 0
  3778                           tblptru	equ	0xFF8
  3779                           tblptrh	equ	0xFF7
  3780                           postinc0	equ	0xFEE
  3781                           wreg	equ	0xFE8
  3782                           postinc2	equ	0xFDE
  3783                           postdec2	equ	0xFDD
  3784                           fsr2h	equ	0xFDA
  3785                           fsr2l	equ	0xFD9
  3786                           status	equ	0xFD8
  3787                           
  3788 ;; *************** function _sqrt *****************
  3789 ;; Defined at:
  3790 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\sqrt.c"
  3791 ;; Parameters:    Size  Location     Type
  3792 ;;  y               4   86[BANK0 ] unsigned long 
  3793 ;; Auto vars:     Size  Location     Type
  3794 ;;  x               4  107[BANK0 ] unsigned long 
  3795 ;;  q               4  103[BANK0 ] unsigned long 
  3796 ;;  z               4   98[BANK0 ] unsigned long 
  3797 ;;  og              4   94[BANK0 ] unsigned long 
  3798 ;;  i               1  102[BANK0 ] unsigned char 
  3799 ;; Return value:  Size  Location     Type
  3800 ;;                  4   86[BANK0 ] unsigned char 
  3801 ;; Registers used:
  3802 ;;		wreg, status,2, status,0, cstack
  3803 ;; Tracked objects:
  3804 ;;		On entry : 0/0
  3805 ;;		On exit  : 0/0
  3806 ;;		Unchanged: 0/0
  3807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3808 ;;      Params:         0       4       0       0       0       0       0
  3809 ;;      Locals:         0      17       0       0       0       0       0
  3810 ;;      Temps:          0       4       0       0       0       0       0
  3811 ;;      Totals:         0      25       0       0       0       0       0
  3812 ;;Total ram usage:       25 bytes
  3813 ;; Hardware stack levels used:    1
  3814 ;; Hardware stack levels required when called:    5
  3815 ;; This function calls:
  3816 ;;		___flge
  3817 ;;		___flmul
  3818 ;;		___flsub
  3819 ;; This function is called by:
  3820 ;;		_Gyros_Update
  3821 ;;		_asin
  3822 ;; This function uses a non-reentrant model
  3823 ;;
  3824                           
  3825                           	psect	text18
  3826  001506                     __ptext18:
  3827                           	opt stack 0
  3828  001506                     _sqrt:
  3829                           	opt stack 24
  3830                           
  3831                           ;incstack = 0
  3832  001506  0E00               	movlw	0
  3833  001508  0100               	movlb	0	; () banked
  3834  00150A  6F60               	movwf	___flge@ff1& (0+255),b
  3835  00150C  0E00               	movlw	0
  3836  00150E  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  3837  001510  0E00               	movlw	0
  3838  001512  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  3839  001514  0E00               	movlw	0
  3840  001516  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  3841  001518  C0B6  F064         	movff	sqrt@y,___flge@ff2
  3842  00151C  C0B7  F065         	movff	sqrt@y+1,___flge@ff2+1
  3843  001520  C0B8  F066         	movff	sqrt@y+2,___flge@ff2+2
  3844  001524  C0B9  F067         	movff	sqrt@y+3,___flge@ff2+3
  3845  001528  EC88  F012         	call	___flge	;wreg free
  3846  00152C  0100               	movlb	0	; () banked
  3847  00152E  A0D8               	btfss	status,0,c
  3848  001530  D012               	goto	l994
  3849                           
  3850                           ; BSR set to: 0
  3851  001532  0100               	movlb	0	; () banked
  3852  001534  AFB9               	btfss	(sqrt@y+3)& (0+255),7,b
  3853  001536  D005               	goto	l995
  3854                           
  3855                           ; BSR set to: 0
  3856  001538  0E00               	movlw	0
  3857  00153A  0100               	movlb	0	; () banked
  3858  00153C  6FFB               	movwf	(_errno+1)& (0+255),b
  3859  00153E  0E21               	movlw	33
  3860  001540  6FFA               	movwf	_errno& (0+255),b
  3861  001542                     l995:
  3862                           
  3863                           ; BSR set to: 0
  3864  001542  0E00               	movlw	0
  3865  001544  0100               	movlb	0	; () banked
  3866  001546  6FB6               	movwf	?_sqrt& (0+255),b
  3867  001548  0E00               	movlw	0
  3868  00154A  6FB7               	movwf	(?_sqrt+1)& (0+255),b
  3869  00154C  0E00               	movlw	0
  3870  00154E  6FB8               	movwf	(?_sqrt+2)& (0+255),b
  3871  001550  0E00               	movlw	0
  3872  001552  6FB9               	movwf	(?_sqrt+3)& (0+255),b
  3873                           
  3874                           ; BSR set to: 0
  3875  001554  0012               	return	
  3876  001556                     l994:
  3877                           
  3878                           ; BSR set to: 0
  3879  001556  C0B6  F0C2         	movff	sqrt@y,sqrt@z
  3880  00155A  C0B7  F0C3         	movff	sqrt@y+1,sqrt@z+1
  3881  00155E  C0B8  F0C4         	movff	sqrt@y+2,sqrt@z+2
  3882  001562  C0B9  F0C5         	movff	sqrt@y+3,sqrt@z+3
  3883                           
  3884                           ; BSR set to: 0
  3885  001566  C0B6  F0BA         	movff	sqrt@y,??_sqrt
  3886  00156A  C0B7  F0BB         	movff	sqrt@y+1,??_sqrt+1
  3887  00156E  C0B8  F0BC         	movff	sqrt@y+2,??_sqrt+2
  3888  001572  C0B9  F0BD         	movff	sqrt@y+3,??_sqrt+3
  3889  001576  0100               	movlb	0	; () banked
  3890  001578  1FBA               	comf	??_sqrt& (0+255),f,b
  3891  00157A  1FBB               	comf	(??_sqrt+1)& (0+255),f,b
  3892  00157C  1FBC               	comf	(??_sqrt+2)& (0+255),f,b
  3893  00157E  1FBD               	comf	(??_sqrt+3)& (0+255),f,b
  3894  001580  2BBA               	incf	??_sqrt& (0+255),f,b
  3895  001582  0E00               	movlw	0
  3896  001584  23BB               	addwfc	(??_sqrt+1)& (0+255),f,b
  3897  001586  23BC               	addwfc	(??_sqrt+2)& (0+255),f,b
  3898  001588  23BD               	addwfc	(??_sqrt+3)& (0+255),f,b
  3899  00158A  0E5E               	movlw	94
  3900  00158C  0100               	movlb	0	; () banked
  3901  00158E  25BA               	addwf	??_sqrt& (0+255),w,b
  3902  001590  0100               	movlb	0	; () banked
  3903  001592  6FCB               	movwf	sqrt@x& (0+255),b
  3904  001594  0EC8               	movlw	200
  3905  001596  0100               	movlb	0	; () banked
  3906  001598  21BB               	addwfc	(??_sqrt+1)& (0+255),w,b
  3907  00159A  0100               	movlb	0	; () banked
  3908  00159C  6FCC               	movwf	(sqrt@x+1)& (0+255),b
  3909  00159E  0E6E               	movlw	110
  3910  0015A0  0100               	movlb	0	; () banked
  3911  0015A2  21BC               	addwfc	(??_sqrt+2)& (0+255),w,b
  3912  0015A4  0100               	movlb	0	; () banked
  3913  0015A6  6FCD               	movwf	(sqrt@x+2)& (0+255),b
  3914  0015A8  0EBE               	movlw	190
  3915  0015AA  0100               	movlb	0	; () banked
  3916  0015AC  21BD               	addwfc	(??_sqrt+3)& (0+255),w,b
  3917  0015AE  0100               	movlb	0	; () banked
  3918  0015B0  6FCE               	movwf	(sqrt@x+3)& (0+255),b
  3919                           
  3920                           ; BSR set to: 0
  3921  0015B2  0100               	movlb	0	; () banked
  3922  0015B4  90D8               	bcf	status,0,c
  3923  0015B6  33CE               	rrcf	(sqrt@x+3)& (0+255),f,b
  3924  0015B8  33CD               	rrcf	(sqrt@x+2)& (0+255),f,b
  3925  0015BA  33CC               	rrcf	(sqrt@x+1)& (0+255),f,b
  3926  0015BC  33CB               	rrcf	sqrt@x& (0+255),f,b
  3927                           
  3928                           ; BSR set to: 0
  3929  0015BE  0E00               	movlw	0
  3930  0015C0  0100               	movlb	0	; () banked
  3931  0015C2  5FC2               	subwf	sqrt@z& (0+255),f,b
  3932  0015C4  0E00               	movlw	0
  3933  0015C6  5BC3               	subwfb	(sqrt@z+1)& (0+255),f,b
  3934  0015C8  0E80               	movlw	128
  3935  0015CA  5BC4               	subwfb	(sqrt@z+2)& (0+255),f,b
  3936  0015CC  0E00               	movlw	0
  3937  0015CE  5BC5               	subwfb	(sqrt@z+3)& (0+255),f,b
  3938                           
  3939                           ; BSR set to: 0
  3940  0015D0  0E04               	movlw	4
  3941  0015D2  0100               	movlb	0	; () banked
  3942  0015D4  6FC6               	movwf	sqrt@i& (0+255),b
  3943  0015D6  D000               	goto	l3344
  3944  0015D8                     l3344:
  3945                           
  3946                           ; BSR set to: 0
  3947  0015D8  C0CB  F0BE         	movff	sqrt@x,sqrt@og
  3948  0015DC  C0CC  F0BF         	movff	sqrt@x+1,sqrt@og+1
  3949  0015E0  C0CD  F0C0         	movff	sqrt@x+2,sqrt@og+2
  3950  0015E4  C0CE  F0C1         	movff	sqrt@x+3,sqrt@og+3
  3951                           
  3952                           ; BSR set to: 0
  3953  0015E8  C0CB  F06F         	movff	sqrt@x,___flmul@f1
  3954  0015EC  C0CC  F070         	movff	sqrt@x+1,___flmul@f1+1
  3955  0015F0  C0CD  F071         	movff	sqrt@x+2,___flmul@f1+2
  3956  0015F4  C0CE  F072         	movff	sqrt@x+3,___flmul@f1+3
  3957  0015F8  C0C2  F073         	movff	sqrt@z,___flmul@f2
  3958  0015FC  C0C3  F074         	movff	sqrt@z+1,___flmul@f2+1
  3959  001600  C0C4  F075         	movff	sqrt@z+2,___flmul@f2+2
  3960  001604  C0C5  F076         	movff	sqrt@z+3,___flmul@f2+3
  3961  001608  EC19  F00E         	call	___flmul	;wreg free
  3962  00160C  C06F  F0C7         	movff	?___flmul,sqrt@q
  3963  001610  C070  F0C8         	movff	?___flmul+1,sqrt@q+1
  3964  001614  C071  F0C9         	movff	?___flmul+2,sqrt@q+2
  3965  001618  C072  F0CA         	movff	?___flmul+3,sqrt@q+3
  3966  00161C  C0C7  F06F         	movff	sqrt@q,___flmul@f1
  3967  001620  C0C8  F070         	movff	sqrt@q+1,___flmul@f1+1
  3968  001624  C0C9  F071         	movff	sqrt@q+2,___flmul@f1+2
  3969  001628  C0CA  F072         	movff	sqrt@q+3,___flmul@f1+3
  3970  00162C  C0CB  F073         	movff	sqrt@x,___flmul@f2
  3971  001630  C0CC  F074         	movff	sqrt@x+1,___flmul@f2+1
  3972  001634  C0CD  F075         	movff	sqrt@x+2,___flmul@f2+2
  3973  001638  C0CE  F076         	movff	sqrt@x+3,___flmul@f2+3
  3974  00163C  EC19  F00E         	call	___flmul	;wreg free
  3975  001640  C06F  F0C7         	movff	?___flmul,sqrt@q
  3976  001644  C070  F0C8         	movff	?___flmul+1,sqrt@q+1
  3977  001648  C071  F0C9         	movff	?___flmul+2,sqrt@q+2
  3978  00164C  C072  F0CA         	movff	?___flmul+3,sqrt@q+3
  3979  001650  C0C7  F06F         	movff	sqrt@q,___flmul@f1
  3980  001654  C0C8  F070         	movff	sqrt@q+1,___flmul@f1+1
  3981  001658  C0C9  F071         	movff	sqrt@q+2,___flmul@f1+2
  3982  00165C  C0CA  F072         	movff	sqrt@q+3,___flmul@f1+3
  3983  001660  C0CB  F073         	movff	sqrt@x,___flmul@f2
  3984  001664  C0CC  F074         	movff	sqrt@x+1,___flmul@f2+1
  3985  001668  C0CD  F075         	movff	sqrt@x+2,___flmul@f2+2
  3986  00166C  C0CE  F076         	movff	sqrt@x+3,___flmul@f2+3
  3987  001670  EC19  F00E         	call	___flmul	;wreg free
  3988  001674  C06F  F0C7         	movff	?___flmul,sqrt@q
  3989  001678  C070  F0C8         	movff	?___flmul+1,sqrt@q+1
  3990  00167C  C071  F0C9         	movff	?___flmul+2,sqrt@q+2
  3991  001680  C072  F0CA         	movff	?___flmul+3,sqrt@q+3
  3992  001684  C0CB  F06F         	movff	sqrt@x,___flmul@f1
  3993  001688  C0CC  F070         	movff	sqrt@x+1,___flmul@f1+1
  3994  00168C  C0CD  F071         	movff	sqrt@x+2,___flmul@f1+2
  3995  001690  C0CE  F072         	movff	sqrt@x+3,___flmul@f1+3
  3996  001694  0E00               	movlw	0
  3997  001696  0100               	movlb	0	; () banked
  3998  001698  6F73               	movwf	___flmul@f2& (0+255),b
  3999  00169A  0E00               	movlw	0
  4000  00169C  6F74               	movwf	(___flmul@f2+1)& (0+255),b
  4001  00169E  0EC0               	movlw	192
  4002  0016A0  6F75               	movwf	(___flmul@f2+2)& (0+255),b
  4003  0016A2  0E3F               	movlw	63
  4004  0016A4  6F76               	movwf	(___flmul@f2+3)& (0+255),b
  4005  0016A6  EC19  F00E         	call	___flmul	;wreg free
  4006  0016AA  C06F  F0CB         	movff	?___flmul,sqrt@x
  4007  0016AE  C070  F0CC         	movff	?___flmul+1,sqrt@x+1
  4008  0016B2  C071  F0CD         	movff	?___flmul+2,sqrt@x+2
  4009  0016B6  C072  F0CE         	movff	?___flmul+3,sqrt@x+3
  4010  0016BA  C0CB  F06F         	movff	sqrt@x,___flsub@f1
  4011  0016BE  C0CC  F070         	movff	sqrt@x+1,___flsub@f1+1
  4012  0016C2  C0CD  F071         	movff	sqrt@x+2,___flsub@f1+2
  4013  0016C6  C0CE  F072         	movff	sqrt@x+3,___flsub@f1+3
  4014  0016CA  C0C7  F073         	movff	sqrt@q,___flsub@f2
  4015  0016CE  C0C8  F074         	movff	sqrt@q+1,___flsub@f2+1
  4016  0016D2  C0C9  F075         	movff	sqrt@q+2,___flsub@f2+2
  4017  0016D6  C0CA  F076         	movff	sqrt@q+3,___flsub@f2+3
  4018  0016DA  ECEF  F014         	call	___flsub	;wreg free
  4019  0016DE  C06F  F0CB         	movff	?___flsub,sqrt@x
  4020  0016E2  C070  F0CC         	movff	?___flsub+1,sqrt@x+1
  4021  0016E6  C071  F0CD         	movff	?___flsub+2,sqrt@x+2
  4022  0016EA  C072  F0CE         	movff	?___flsub+3,sqrt@x+3
  4023  0016EE  0100               	movlb	0	; () banked
  4024  0016F0  2FC6               	decfsz	sqrt@i& (0+255),f,b
  4025  0016F2  D772               	goto	l3344
  4026  0016F4  D000               	goto	l3358
  4027  0016F6                     l3358:
  4028                           
  4029                           ; BSR set to: 0
  4030  0016F6  C0CB  F06F         	movff	sqrt@x,___flmul@f1
  4031  0016FA  C0CC  F070         	movff	sqrt@x+1,___flmul@f1+1
  4032  0016FE  C0CD  F071         	movff	sqrt@x+2,___flmul@f1+2
  4033  001702  C0CE  F072         	movff	sqrt@x+3,___flmul@f1+3
  4034  001706  C0B6  F073         	movff	sqrt@y,___flmul@f2
  4035  00170A  C0B7  F074         	movff	sqrt@y+1,___flmul@f2+1
  4036  00170E  C0B8  F075         	movff	sqrt@y+2,___flmul@f2+2
  4037  001712  C0B9  F076         	movff	sqrt@y+3,___flmul@f2+3
  4038  001716  EC19  F00E         	call	___flmul	;wreg free
  4039  00171A  C06F  F0B6         	movff	?___flmul,?_sqrt
  4040  00171E  C070  F0B7         	movff	?___flmul+1,?_sqrt+1
  4041  001722  C071  F0B8         	movff	?___flmul+2,?_sqrt+2
  4042  001726  C072  F0B9         	movff	?___flmul+3,?_sqrt+3
  4043  00172A  0012               	return	
  4044  00172C  0012               	return		;funcret
  4045  00172E                     __end_of_sqrt:
  4046                           	opt stack 0
  4047                           tblptru	equ	0xFF8
  4048                           tblptrh	equ	0xFF7
  4049                           postinc0	equ	0xFEE
  4050                           wreg	equ	0xFE8
  4051                           postinc2	equ	0xFDE
  4052                           postdec2	equ	0xFDD
  4053                           fsr2h	equ	0xFDA
  4054                           fsr2l	equ	0xFD9
  4055                           status	equ	0xFD8
  4056                           
  4057 ;; *************** function ___flsub *****************
  4058 ;; Defined at:
  4059 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flsub.c"
  4060 ;; Parameters:    Size  Location     Type
  4061 ;;  f1              4   15[BANK0 ] unsigned char 
  4062 ;;  f2              4   19[BANK0 ] unsigned char 
  4063 ;; Auto vars:     Size  Location     Type
  4064 ;;		None
  4065 ;; Return value:  Size  Location     Type
  4066 ;;                  4   15[BANK0 ] unsigned char 
  4067 ;; Registers used:
  4068 ;;		wreg, status,2, status,0, cstack
  4069 ;; Tracked objects:
  4070 ;;		On entry : 0/0
  4071 ;;		On exit  : 0/0
  4072 ;;		Unchanged: 0/0
  4073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4074 ;;      Params:         0       8       0       0       0       0       0
  4075 ;;      Locals:         0       0       0       0       0       0       0
  4076 ;;      Temps:          0       0       0       0       0       0       0
  4077 ;;      Totals:         0       8       0       0       0       0       0
  4078 ;;Total ram usage:        8 bytes
  4079 ;; Hardware stack levels used:    1
  4080 ;; Hardware stack levels required when called:    4
  4081 ;; This function calls:
  4082 ;;		___fladd
  4083 ;; This function is called by:
  4084 ;;		_sqrt
  4085 ;;		_exp
  4086 ;; This function uses a non-reentrant model
  4087 ;;
  4088                           
  4089                           	psect	text19
  4090  0029DE                     __ptext19:
  4091                           	opt stack 0
  4092  0029DE                     ___flsub:
  4093                           	opt stack 24
  4094                           
  4095                           ;incstack = 0
  4096  0029DE  0100               	movlb	0	; () banked
  4097  0029E0  5173               	movf	___flsub@f2& (0+255),w,b
  4098  0029E2  0100               	movlb	0	; () banked
  4099  0029E4  1174               	iorwf	(___flsub@f2+1)& (0+255),w,b
  4100  0029E6  0100               	movlb	0	; () banked
  4101  0029E8  1175               	iorwf	(___flsub@f2+2)& (0+255),w,b
  4102  0029EA  0100               	movlb	0	; () banked
  4103  0029EC  1176               	iorwf	(___flsub@f2+3)& (0+255),w,b
  4104  0029EE  B4D8               	btfsc	status,2,c
  4105  0029F0  D00A               	goto	l3252
  4106                           
  4107                           ; BSR set to: 0
  4108  0029F2  0E00               	movlw	0
  4109  0029F4  0100               	movlb	0	; () banked
  4110  0029F6  1B73               	xorwf	___flsub@f2& (0+255),f,b
  4111  0029F8  0E00               	movlw	0
  4112  0029FA  1B74               	xorwf	(___flsub@f2+1)& (0+255),f,b
  4113  0029FC  0E00               	movlw	0
  4114  0029FE  1B75               	xorwf	(___flsub@f2+2)& (0+255),f,b
  4115  002A00  0E80               	movlw	128
  4116  002A02  1B76               	xorwf	(___flsub@f2+3)& (0+255),f,b
  4117  002A04  D000               	goto	l3252
  4118  002A06                     l3252:
  4119                           
  4120                           ; BSR set to: 0
  4121  002A06  C06F  F064         	movff	___flsub@f1,___fladd@f1
  4122  002A0A  C070  F065         	movff	___flsub@f1+1,___fladd@f1+1
  4123  002A0E  C071  F066         	movff	___flsub@f1+2,___fladd@f1+2
  4124  002A12  C072  F067         	movff	___flsub@f1+3,___fladd@f1+3
  4125  002A16  C073  F068         	movff	___flsub@f2,___fladd@f2
  4126  002A1A  C074  F069         	movff	___flsub@f2+1,___fladd@f2+1
  4127  002A1E  C075  F06A         	movff	___flsub@f2+2,___fladd@f2+2
  4128  002A22  C076  F06B         	movff	___flsub@f2+3,___fladd@f2+3
  4129  002A26  EC28  F008         	call	___fladd	;wreg free
  4130  002A2A  C064  F06F         	movff	?___fladd,?___flsub
  4131  002A2E  C065  F070         	movff	?___fladd+1,?___flsub+1
  4132  002A32  C066  F071         	movff	?___fladd+2,?___flsub+2
  4133  002A36  C067  F072         	movff	?___fladd+3,?___flsub+3
  4134  002A3A  0012               	return	
  4135  002A3C  0012               	return		;funcret
  4136  002A3E                     __end_of___flsub:
  4137                           	opt stack 0
  4138                           tblptru	equ	0xFF8
  4139                           tblptrh	equ	0xFF7
  4140                           postinc0	equ	0xFEE
  4141                           wreg	equ	0xFE8
  4142                           postinc2	equ	0xFDE
  4143                           postdec2	equ	0xFDD
  4144                           fsr2h	equ	0xFDA
  4145                           fsr2l	equ	0xFD9
  4146                           status	equ	0xFD8
  4147                           
  4148 ;; *************** function _atan *****************
  4149 ;; Defined at:
  4150 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\atan.c"
  4151 ;; Parameters:    Size  Location     Type
  4152 ;;  f               4   46[BANK0 ] unsigned char 
  4153 ;; Auto vars:     Size  Location     Type
  4154 ;;  val             4   63[BANK0 ] unsigned char 
  4155 ;;  val_squared     4   59[BANK0 ] unsigned char 
  4156 ;;  x               4   54[BANK0 ] unsigned char 
  4157 ;;  y               4   50[BANK0 ] unsigned char 
  4158 ;;  recip           1   58[BANK0 ] unsigned char 
  4159 ;; Return value:  Size  Location     Type
  4160 ;;                  4   46[BANK0 ] unsigned char 
  4161 ;; Registers used:
  4162 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4163 ;; Tracked objects:
  4164 ;;		On entry : 0/0
  4165 ;;		On exit  : 0/0
  4166 ;;		Unchanged: 0/0
  4167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4168 ;;      Params:         0       4       0       0       0       0       0
  4169 ;;      Locals:         0      17       0       0       0       0       0
  4170 ;;      Temps:          0       0       0       0       0       0       0
  4171 ;;      Totals:         0      21       0       0       0       0       0
  4172 ;;Total ram usage:       21 bytes
  4173 ;; Hardware stack levels used:    1
  4174 ;; Hardware stack levels required when called:    5
  4175 ;; This function calls:
  4176 ;;		___fladd
  4177 ;;		___fldiv
  4178 ;;		___flge
  4179 ;;		___flmul
  4180 ;;		___flneg
  4181 ;;		_eval_poly
  4182 ;;		_fabs
  4183 ;; This function is called by:
  4184 ;;		_Gyros_Update
  4185 ;;		_asin
  4186 ;; This function uses a non-reentrant model
  4187 ;;
  4188                           
  4189                           	psect	text20
  4190  0012B0                     __ptext20:
  4191                           	opt stack 0
  4192  0012B0                     _atan:
  4193                           	opt stack 24
  4194                           
  4195                           ;incstack = 0
  4196  0012B0  C08E  F024         	movff	atan@f,fabs@d
  4197  0012B4  C08F  F025         	movff	atan@f+1,fabs@d+1
  4198  0012B8  C090  F026         	movff	atan@f+2,fabs@d+2
  4199  0012BC  C091  F027         	movff	atan@f+3,fabs@d+3
  4200  0012C0  ECD6  F015         	call	_fabs	;wreg free
  4201  0012C4  C024  F09F         	movff	?_fabs,atan@val
  4202  0012C8  C025  F0A0         	movff	?_fabs+1,atan@val+1
  4203  0012CC  C026  F0A1         	movff	?_fabs+2,atan@val+2
  4204  0012D0  C027  F0A2         	movff	?_fabs+3,atan@val+3
  4205  0012D4  0100               	movlb	0	; () banked
  4206  0012D6  519F               	movf	atan@val& (0+255),w,b
  4207  0012D8  0100               	movlb	0	; () banked
  4208  0012DA  11A0               	iorwf	(atan@val+1)& (0+255),w,b
  4209  0012DC  0100               	movlb	0	; () banked
  4210  0012DE  11A1               	iorwf	(atan@val+2)& (0+255),w,b
  4211  0012E0  0100               	movlb	0	; () banked
  4212  0012E2  11A2               	iorwf	(atan@val+3)& (0+255),w,b
  4213  0012E4  A4D8               	btfss	status,2,c
  4214  0012E6  D00A               	goto	l3308
  4215                           
  4216                           ; BSR set to: 0
  4217  0012E8  0E00               	movlw	0
  4218  0012EA  0100               	movlb	0	; () banked
  4219  0012EC  6F8E               	movwf	?_atan& (0+255),b
  4220  0012EE  0E00               	movlw	0
  4221  0012F0  6F8F               	movwf	(?_atan+1)& (0+255),b
  4222  0012F2  0E00               	movlw	0
  4223  0012F4  6F90               	movwf	(?_atan+2)& (0+255),b
  4224  0012F6  0E00               	movlw	0
  4225  0012F8  6F91               	movwf	(?_atan+3)& (0+255),b
  4226                           
  4227                           ; BSR set to: 0
  4228  0012FA  0012               	return	
  4229  0012FC                     l3308:
  4230                           
  4231                           ; BSR set to: 0
  4232  0012FC  0E00               	movlw	0
  4233  0012FE  0100               	movlb	0	; () banked
  4234  001300  6F60               	movwf	___flge@ff1& (0+255),b
  4235  001302  0E00               	movlw	0
  4236  001304  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  4237  001306  0E80               	movlw	128
  4238  001308  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  4239  00130A  0E3F               	movlw	63
  4240  00130C  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  4241  00130E  C09F  F064         	movff	atan@val,___flge@ff2
  4242  001312  C0A0  F065         	movff	atan@val+1,___flge@ff2+1
  4243  001316  C0A1  F066         	movff	atan@val+2,___flge@ff2+2
  4244  00131A  C0A2  F067         	movff	atan@val+3,___flge@ff2+3
  4245  00131E  EC88  F012         	call	___flge	;wreg free
  4246  001322  0100               	movlb	0	; () banked
  4247  001324  B0D8               	btfsc	status,0,c
  4248  001326  D002               	goto	u3760
  4249  001328  0E01               	movlw	1
  4250  00132A  D001               	goto	u3770
  4251  00132C                     u3760:
  4252  00132C  0E00               	movlw	0
  4253  00132E                     u3770:
  4254  00132E  0100               	movlb	0	; () banked
  4255  001330  6F9A               	movwf	atan@recip& (0+255),b
  4256  001332  0100               	movlb	0	; () banked
  4257  001334  519A               	movf	atan@recip& (0+255),w,b
  4258  001336  B4D8               	btfsc	status,2,c
  4259  001338  D01B               	goto	l554
  4260                           
  4261                           ; BSR set to: 0
  4262  00133A  0E00               	movlw	0
  4263  00133C  0100               	movlb	0	; () banked
  4264  00133E  6F7E               	movwf	___fldiv@f1& (0+255),b
  4265  001340  0E00               	movlw	0
  4266  001342  6F7F               	movwf	(___fldiv@f1+1)& (0+255),b
  4267  001344  0E80               	movlw	128
  4268  001346  6F80               	movwf	(___fldiv@f1+2)& (0+255),b
  4269  001348  0E3F               	movlw	63
  4270  00134A  6F81               	movwf	(___fldiv@f1+3)& (0+255),b
  4271  00134C  C09F  F082         	movff	atan@val,___fldiv@f2
  4272  001350  C0A0  F083         	movff	atan@val+1,___fldiv@f2+1
  4273  001354  C0A1  F084         	movff	atan@val+2,___fldiv@f2+2
  4274  001358  C0A2  F085         	movff	atan@val+3,___fldiv@f2+3
  4275  00135C  ECCB  F00E         	call	___fldiv	;wreg free
  4276  001360  C07E  F09F         	movff	?___fldiv,atan@val
  4277  001364  C07F  F0A0         	movff	?___fldiv+1,atan@val+1
  4278  001368  C080  F0A1         	movff	?___fldiv+2,atan@val+2
  4279  00136C  C081  F0A2         	movff	?___fldiv+3,atan@val+3
  4280  001370                     l554:
  4281  001370  C09F  F06F         	movff	atan@val,___flmul@f1
  4282  001374  C0A0  F070         	movff	atan@val+1,___flmul@f1+1
  4283  001378  C0A1  F071         	movff	atan@val+2,___flmul@f1+2
  4284  00137C  C0A2  F072         	movff	atan@val+3,___flmul@f1+3
  4285  001380  C09F  F073         	movff	atan@val,___flmul@f2
  4286  001384  C0A0  F074         	movff	atan@val+1,___flmul@f2+1
  4287  001388  C0A1  F075         	movff	atan@val+2,___flmul@f2+2
  4288  00138C  C0A2  F076         	movff	atan@val+3,___flmul@f2+3
  4289  001390  EC19  F00E         	call	___flmul	;wreg free
  4290  001394  C06F  F09B         	movff	?___flmul,atan@val_squared
  4291  001398  C070  F09C         	movff	?___flmul+1,atan@val_squared+1
  4292  00139C  C071  F09D         	movff	?___flmul+2,atan@val_squared+2
  4293  0013A0  C072  F09E         	movff	?___flmul+3,atan@val_squared+3
  4294  0013A4  C09B  F07E         	movff	atan@val_squared,eval_poly@x
  4295  0013A8  C09C  F07F         	movff	atan@val_squared+1,eval_poly@x+1
  4296  0013AC  C09D  F080         	movff	atan@val_squared+2,eval_poly@x+2
  4297  0013B0  C09E  F081         	movff	atan@val_squared+3,eval_poly@x+3
  4298  0013B4  0E65               	movlw	low atan@coeff_b
  4299  0013B6  0100               	movlb	0	; () banked
  4300  0013B8  6F82               	movwf	eval_poly@d& (0+255),b
  4301  0013BA  0E06               	movlw	high atan@coeff_b
  4302  0013BC  0100               	movlb	0	; () banked
  4303  0013BE  6F83               	movwf	(eval_poly@d+1)& (0+255),b
  4304  0013C0  0E00               	movlw	0
  4305  0013C2  0100               	movlb	0	; () banked
  4306  0013C4  6F85               	movwf	(eval_poly@n+1)& (0+255),b
  4307  0013C6  0E04               	movlw	4
  4308  0013C8  6F84               	movwf	eval_poly@n& (0+255),b
  4309  0013CA  EC8E  F010         	call	_eval_poly	;wreg free
  4310  0013CE  C07E  F092         	movff	?_eval_poly,atan@y
  4311  0013D2  C07F  F093         	movff	?_eval_poly+1,atan@y+1
  4312  0013D6  C080  F094         	movff	?_eval_poly+2,atan@y+2
  4313  0013DA  C081  F095         	movff	?_eval_poly+3,atan@y+3
  4314  0013DE  C09B  F07E         	movff	atan@val_squared,eval_poly@x
  4315  0013E2  C09C  F07F         	movff	atan@val_squared+1,eval_poly@x+1
  4316  0013E6  C09D  F080         	movff	atan@val_squared+2,eval_poly@x+2
  4317  0013EA  C09E  F081         	movff	atan@val_squared+3,eval_poly@x+3
  4318  0013EE  0E4D               	movlw	low atan@coeff_a
  4319  0013F0  0100               	movlb	0	; () banked
  4320  0013F2  6F82               	movwf	eval_poly@d& (0+255),b
  4321  0013F4  0E06               	movlw	high atan@coeff_a
  4322  0013F6  0100               	movlb	0	; () banked
  4323  0013F8  6F83               	movwf	(eval_poly@d+1)& (0+255),b
  4324  0013FA  0E00               	movlw	0
  4325  0013FC  0100               	movlb	0	; () banked
  4326  0013FE  6F85               	movwf	(eval_poly@n+1)& (0+255),b
  4327  001400  0E05               	movlw	5
  4328  001402  6F84               	movwf	eval_poly@n& (0+255),b
  4329  001404  EC8E  F010         	call	_eval_poly	;wreg free
  4330  001408  C07E  F096         	movff	?_eval_poly,atan@x
  4331  00140C  C07F  F097         	movff	?_eval_poly+1,atan@x+1
  4332  001410  C080  F098         	movff	?_eval_poly+2,atan@x+2
  4333  001414  C081  F099         	movff	?_eval_poly+3,atan@x+3
  4334  001418  C09F  F06F         	movff	atan@val,___flmul@f1
  4335  00141C  C0A0  F070         	movff	atan@val+1,___flmul@f1+1
  4336  001420  C0A1  F071         	movff	atan@val+2,___flmul@f1+2
  4337  001424  C0A2  F072         	movff	atan@val+3,___flmul@f1+3
  4338  001428  C092  F082         	movff	atan@y,___fldiv@f2
  4339  00142C  C093  F083         	movff	atan@y+1,___fldiv@f2+1
  4340  001430  C094  F084         	movff	atan@y+2,___fldiv@f2+2
  4341  001434  C095  F085         	movff	atan@y+3,___fldiv@f2+3
  4342  001438  C096  F07E         	movff	atan@x,___fldiv@f1
  4343  00143C  C097  F07F         	movff	atan@x+1,___fldiv@f1+1
  4344  001440  C098  F080         	movff	atan@x+2,___fldiv@f1+2
  4345  001444  C099  F081         	movff	atan@x+3,___fldiv@f1+3
  4346  001448  ECCB  F00E         	call	___fldiv	;wreg free
  4347  00144C  C07E  F073         	movff	?___fldiv,___flmul@f2
  4348  001450  C07F  F074         	movff	?___fldiv+1,___flmul@f2+1
  4349  001454  C080  F075         	movff	?___fldiv+2,___flmul@f2+2
  4350  001458  C081  F076         	movff	?___fldiv+3,___flmul@f2+3
  4351  00145C  EC19  F00E         	call	___flmul	;wreg free
  4352  001460  C06F  F09F         	movff	?___flmul,atan@val
  4353  001464  C070  F0A0         	movff	?___flmul+1,atan@val+1
  4354  001468  C071  F0A1         	movff	?___flmul+2,atan@val+2
  4355  00146C  C072  F0A2         	movff	?___flmul+3,atan@val+3
  4356  001470  0100               	movlb	0	; () banked
  4357  001472  519A               	movf	atan@recip& (0+255),w,b
  4358  001474  0100               	movlb	0	; () banked
  4359  001476  B4D8               	btfsc	status,2,c
  4360  001478  D026               	goto	l3320
  4361                           
  4362                           ; BSR set to: 0
  4363  00147A  C09F  F020         	movff	atan@val,___flneg@f1
  4364  00147E  C0A0  F021         	movff	atan@val+1,___flneg@f1+1
  4365  001482  C0A1  F022         	movff	atan@val+2,___flneg@f1+2
  4366  001486  C0A2  F023         	movff	atan@val+3,___flneg@f1+3
  4367  00148A  EC0D  F016         	call	___flneg	;wreg free
  4368  00148E  C020  F064         	movff	?___flneg,___fladd@f1
  4369  001492  C021  F065         	movff	?___flneg+1,___fladd@f1+1
  4370  001496  C022  F066         	movff	?___flneg+2,___fladd@f1+2
  4371  00149A  C023  F067         	movff	?___flneg+3,___fladd@f1+3
  4372  00149E  0EDB               	movlw	219
  4373  0014A0  0100               	movlb	0	; () banked
  4374  0014A2  6F68               	movwf	___fladd@f2& (0+255),b
  4375  0014A4  0E0F               	movlw	15
  4376  0014A6  6F69               	movwf	(___fladd@f2+1)& (0+255),b
  4377  0014A8  0EC9               	movlw	201
  4378  0014AA  6F6A               	movwf	(___fladd@f2+2)& (0+255),b
  4379  0014AC  0E3F               	movlw	63
  4380  0014AE  6F6B               	movwf	(___fladd@f2+3)& (0+255),b
  4381  0014B0  EC28  F008         	call	___fladd	;wreg free
  4382  0014B4  C064  F09F         	movff	?___fladd,atan@val
  4383  0014B8  C065  F0A0         	movff	?___fladd+1,atan@val+1
  4384  0014BC  C066  F0A1         	movff	?___fladd+2,atan@val+2
  4385  0014C0  C067  F0A2         	movff	?___fladd+3,atan@val+3
  4386  0014C4  D000               	goto	l3320
  4387  0014C6                     l3320:
  4388  0014C6  0100               	movlb	0	; () banked
  4389  0014C8  BF91               	btfsc	(atan@f+3)& (0+255),7,b
  4390  0014CA  D009               	goto	l3324
  4391                           
  4392                           ; BSR set to: 0
  4393  0014CC  C09F  F08E         	movff	atan@val,?_atan
  4394  0014D0  C0A0  F08F         	movff	atan@val+1,?_atan+1
  4395  0014D4  C0A1  F090         	movff	atan@val+2,?_atan+2
  4396  0014D8  C0A2  F091         	movff	atan@val+3,?_atan+3
  4397  0014DC  0012               	return	
  4398  0014DE                     l3324:
  4399                           
  4400                           ; BSR set to: 0
  4401  0014DE  C09F  F020         	movff	atan@val,___flneg@f1
  4402  0014E2  C0A0  F021         	movff	atan@val+1,___flneg@f1+1
  4403  0014E6  C0A1  F022         	movff	atan@val+2,___flneg@f1+2
  4404  0014EA  C0A2  F023         	movff	atan@val+3,___flneg@f1+3
  4405  0014EE  EC0D  F016         	call	___flneg	;wreg free
  4406  0014F2  C020  F08E         	movff	?___flneg,?_atan
  4407  0014F6  C021  F08F         	movff	?___flneg+1,?_atan+1
  4408  0014FA  C022  F090         	movff	?___flneg+2,?_atan+2
  4409  0014FE  C023  F091         	movff	?___flneg+3,?_atan+3
  4410  001502  0012               	return	
  4411  001504  0012               	return		;funcret
  4412  001506                     __end_of_atan:
  4413                           	opt stack 0
  4414                           tblptru	equ	0xFF8
  4415                           tblptrh	equ	0xFF7
  4416                           postinc0	equ	0xFEE
  4417                           wreg	equ	0xFE8
  4418                           postinc2	equ	0xFDE
  4419                           postdec2	equ	0xFDD
  4420                           fsr2h	equ	0xFDA
  4421                           fsr2l	equ	0xFD9
  4422                           status	equ	0xFD8
  4423                           
  4424 ;; *************** function _fabs *****************
  4425 ;; Defined at:
  4426 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fabs.c"
  4427 ;; Parameters:    Size  Location     Type
  4428 ;;  d               4   35[COMRAM] unsigned char 
  4429 ;; Auto vars:     Size  Location     Type
  4430 ;;		None
  4431 ;; Return value:  Size  Location     Type
  4432 ;;                  4   35[COMRAM] unsigned char 
  4433 ;; Registers used:
  4434 ;;		wreg, status,2, status,0, cstack
  4435 ;; Tracked objects:
  4436 ;;		On entry : 0/0
  4437 ;;		On exit  : 0/0
  4438 ;;		Unchanged: 0/0
  4439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4440 ;;      Params:         4       0       0       0       0       0       0
  4441 ;;      Locals:         0       0       0       0       0       0       0
  4442 ;;      Temps:          0       0       0       0       0       0       0
  4443 ;;      Totals:         4       0       0       0       0       0       0
  4444 ;;Total ram usage:        4 bytes
  4445 ;; Hardware stack levels used:    1
  4446 ;; Hardware stack levels required when called:    3
  4447 ;; This function calls:
  4448 ;;		___flneg
  4449 ;; This function is called by:
  4450 ;;		_asin
  4451 ;;		_atan
  4452 ;; This function uses a non-reentrant model
  4453 ;;
  4454                           
  4455                           	psect	text21
  4456  002BAC                     __ptext21:
  4457                           	opt stack 0
  4458  002BAC                     _fabs:
  4459                           	opt stack 25
  4460                           
  4461                           ;incstack = 0
  4462  002BAC  AE27               	btfss	fabs@d+3,7,c
  4463  002BAE  D013               	goto	l665
  4464  002BB0  C024  F020         	movff	fabs@d,___flneg@f1
  4465  002BB4  C025  F021         	movff	fabs@d+1,___flneg@f1+1
  4466  002BB8  C026  F022         	movff	fabs@d+2,___flneg@f1+2
  4467  002BBC  C027  F023         	movff	fabs@d+3,___flneg@f1+3
  4468  002BC0  EC0D  F016         	call	___flneg	;wreg free
  4469  002BC4  C020  F024         	movff	?___flneg,?_fabs
  4470  002BC8  C021  F025         	movff	?___flneg+1,?_fabs+1
  4471  002BCC  C022  F026         	movff	?___flneg+2,?_fabs+2
  4472  002BD0  C023  F027         	movff	?___flneg+3,?_fabs+3
  4473  002BD4  0012               	return	
  4474  002BD6                     l665:
  4475  002BD6  C024  F024         	movff	fabs@d,?_fabs
  4476  002BDA  C025  F025         	movff	fabs@d+1,?_fabs+1
  4477  002BDE  C026  F026         	movff	fabs@d+2,?_fabs+2
  4478  002BE2  C027  F027         	movff	fabs@d+3,?_fabs+3
  4479  002BE6  0012               	return		;funcret
  4480  002BE8                     __end_of_fabs:
  4481                           	opt stack 0
  4482                           tblptru	equ	0xFF8
  4483                           tblptrh	equ	0xFF7
  4484                           postinc0	equ	0xFEE
  4485                           wreg	equ	0xFE8
  4486                           postinc2	equ	0xFDE
  4487                           postdec2	equ	0xFDD
  4488                           fsr2h	equ	0xFDA
  4489                           fsr2l	equ	0xFD9
  4490                           status	equ	0xFD8
  4491                           
  4492 ;; *************** function ___flneg *****************
  4493 ;; Defined at:
  4494 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flneg.c"
  4495 ;; Parameters:    Size  Location     Type
  4496 ;;  f1              4   31[COMRAM] unsigned char 
  4497 ;; Auto vars:     Size  Location     Type
  4498 ;;		None
  4499 ;; Return value:  Size  Location     Type
  4500 ;;                  4   31[COMRAM] unsigned char 
  4501 ;; Registers used:
  4502 ;;		wreg, status,2, status,0
  4503 ;; Tracked objects:
  4504 ;;		On entry : 0/0
  4505 ;;		On exit  : 0/0
  4506 ;;		Unchanged: 0/0
  4507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4508 ;;      Params:         4       0       0       0       0       0       0
  4509 ;;      Locals:         0       0       0       0       0       0       0
  4510 ;;      Temps:          0       0       0       0       0       0       0
  4511 ;;      Totals:         4       0       0       0       0       0       0
  4512 ;;Total ram usage:        4 bytes
  4513 ;; Hardware stack levels used:    1
  4514 ;; Hardware stack levels required when called:    2
  4515 ;; This function calls:
  4516 ;;		Nothing
  4517 ;; This function is called by:
  4518 ;;		_acos
  4519 ;;		_asin
  4520 ;;		_atan
  4521 ;;		_fabs
  4522 ;;		_pow
  4523 ;;		_exp
  4524 ;; This function uses a non-reentrant model
  4525 ;;
  4526                           
  4527                           	psect	text22
  4528  002C1A                     __ptext22:
  4529                           	opt stack 0
  4530  002C1A                     ___flneg:
  4531                           	opt stack 25
  4532                           
  4533                           ;incstack = 0
  4534  002C1A  5020               	movf	___flneg@f1,w,c
  4535  002C1C  1021               	iorwf	___flneg@f1+1,w,c
  4536  002C1E  1022               	iorwf	___flneg@f1+2,w,c
  4537  002C20  1023               	iorwf	___flneg@f1+3,w,c
  4538  002C22  B4D8               	btfsc	status,2,c
  4539  002C24  D009               	goto	l3192
  4540  002C26  0E00               	movlw	0
  4541  002C28  1A20               	xorwf	___flneg@f1,f,c
  4542  002C2A  0E00               	movlw	0
  4543  002C2C  1A21               	xorwf	___flneg@f1+1,f,c
  4544  002C2E  0E00               	movlw	0
  4545  002C30  1A22               	xorwf	___flneg@f1+2,f,c
  4546  002C32  0E80               	movlw	128
  4547  002C34  1A23               	xorwf	___flneg@f1+3,f,c
  4548  002C36  D000               	goto	l3192
  4549  002C38                     l3192:
  4550  002C38  C020  F020         	movff	___flneg@f1,?___flneg
  4551  002C3C  C021  F021         	movff	___flneg@f1+1,?___flneg+1
  4552  002C40  C022  F022         	movff	___flneg@f1+2,?___flneg+2
  4553  002C44  C023  F023         	movff	___flneg@f1+3,?___flneg+3
  4554  002C48  0012               	return	
  4555  002C4A  0012               	return		;funcret
  4556  002C4C                     __end_of___flneg:
  4557                           	opt stack 0
  4558                           tblptru	equ	0xFF8
  4559                           tblptrh	equ	0xFF7
  4560                           postinc0	equ	0xFEE
  4561                           wreg	equ	0xFE8
  4562                           postinc2	equ	0xFDE
  4563                           postdec2	equ	0xFDD
  4564                           fsr2h	equ	0xFDA
  4565                           fsr2l	equ	0xFD9
  4566                           status	equ	0xFD8
  4567                           
  4568 ;; *************** function _eval_poly *****************
  4569 ;; Defined at:
  4570 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  4571 ;; Parameters:    Size  Location     Type
  4572 ;;  x               4   30[BANK0 ] unsigned char 
  4573 ;;  d               2   34[BANK0 ] PTR const 
  4574 ;;		 -> log@coeff(36), exp@coeff(40), atan@coeff_a(24), atan@coeff_b(20), 
  4575 ;;  n               2   36[BANK0 ] int 
  4576 ;; Auto vars:     Size  Location     Type
  4577 ;;  res             4   42[BANK0 ] int 
  4578 ;; Return value:  Size  Location     Type
  4579 ;;                  4   30[BANK0 ] int 
  4580 ;; Registers used:
  4581 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4582 ;; Tracked objects:
  4583 ;;		On entry : 0/0
  4584 ;;		On exit  : 0/0
  4585 ;;		Unchanged: 0/0
  4586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4587 ;;      Params:         0       8       0       0       0       0       0
  4588 ;;      Locals:         0       4       0       0       0       0       0
  4589 ;;      Temps:          0       4       0       0       0       0       0
  4590 ;;      Totals:         0      16       0       0       0       0       0
  4591 ;;Total ram usage:       16 bytes
  4592 ;; Hardware stack levels used:    1
  4593 ;; Hardware stack levels required when called:    4
  4594 ;; This function calls:
  4595 ;;		___fladd
  4596 ;;		___flmul
  4597 ;; This function is called by:
  4598 ;;		_atan
  4599 ;;		_exp
  4600 ;;		_log
  4601 ;; This function uses a non-reentrant model
  4602 ;;
  4603                           
  4604                           	psect	text23
  4605  00211C                     __ptext23:
  4606                           	opt stack 0
  4607  00211C                     _eval_poly:
  4608                           	opt stack 23
  4609                           
  4610                           ;incstack = 0
  4611  00211C  C084  F086         	movff	eval_poly@n,??_eval_poly
  4612  002120  C085  F087         	movff	eval_poly@n+1,??_eval_poly+1
  4613  002124  0100               	movlb	0	; () banked
  4614  002126  90D8               	bcf	status,0,c
  4615  002128  3786               	rlcf	??_eval_poly& (0+255),f,b
  4616  00212A  3787               	rlcf	(??_eval_poly+1)& (0+255),f,b
  4617  00212C  0100               	movlb	0	; () banked
  4618  00212E  90D8               	bcf	status,0,c
  4619  002130  3786               	rlcf	??_eval_poly& (0+255),f,b
  4620  002132  3787               	rlcf	(??_eval_poly+1)& (0+255),f,b
  4621  002134  C082  F088         	movff	eval_poly@d,??_eval_poly+2
  4622  002138  C083  F089         	movff	eval_poly@d+1,??_eval_poly+3
  4623  00213C  0100               	movlb	0	; () banked
  4624  00213E  5186               	movf	??_eval_poly& (0+255),w,b
  4625  002140  0100               	movlb	0	; () banked
  4626  002142  2788               	addwf	(??_eval_poly+2)& (0+255),f,b
  4627  002144  0100               	movlb	0	; () banked
  4628  002146  5187               	movf	(??_eval_poly+1)& (0+255),w,b
  4629  002148  0100               	movlb	0	; () banked
  4630  00214A  2389               	addwfc	(??_eval_poly+3)& (0+255),f,b
  4631  00214C  C088  FFF6         	movff	??_eval_poly+2,tblptrl
  4632  002150  C089  FFF7         	movff	??_eval_poly+3,tblptrh
  4633  002154                     	if	0	;tblptru may be non-zero
  4634  002154                     	endif
  4635  002154                     	if	0	;tblptru may be non-zero
  4636  002154                     	endif
  4637  002154  0009               	tblrd		*+
  4638  002156  CFF5 F08A          	movff	tablat,eval_poly@res
  4639  00215A  0009               	tblrd		*+
  4640  00215C  CFF5 F08B          	movff	tablat,eval_poly@res+1
  4641  002160  0009               	tblrd		*+
  4642  002162  CFF5 F08C          	movff	tablat,eval_poly@res+2
  4643  002166  000A               	tblrd		*-
  4644  002168  CFF5 F08D          	movff	tablat,eval_poly@res+3
  4645  00216C  D051               	goto	l3266
  4646  00216E                     l3264:
  4647                           
  4648                           ; BSR set to: 0
  4649  00216E  C08A  F073         	movff	eval_poly@res,___flmul@f2
  4650  002172  C08B  F074         	movff	eval_poly@res+1,___flmul@f2+1
  4651  002176  C08C  F075         	movff	eval_poly@res+2,___flmul@f2+2
  4652  00217A  C08D  F076         	movff	eval_poly@res+3,___flmul@f2+3
  4653  00217E  C07E  F06F         	movff	eval_poly@x,___flmul@f1
  4654  002182  C07F  F070         	movff	eval_poly@x+1,___flmul@f1+1
  4655  002186  C080  F071         	movff	eval_poly@x+2,___flmul@f1+2
  4656  00218A  C081  F072         	movff	eval_poly@x+3,___flmul@f1+3
  4657  00218E  EC19  F00E         	call	___flmul	;wreg free
  4658  002192  C06F  F064         	movff	?___flmul,___fladd@f1
  4659  002196  C070  F065         	movff	?___flmul+1,___fladd@f1+1
  4660  00219A  C071  F066         	movff	?___flmul+2,___fladd@f1+2
  4661  00219E  C072  F067         	movff	?___flmul+3,___fladd@f1+3
  4662  0021A2  0100               	movlb	0	; () banked
  4663  0021A4  0784               	decf	eval_poly@n& (0+255),f,b
  4664  0021A6  A0D8               	btfss	status,0,c
  4665  0021A8  0785               	decf	(eval_poly@n+1)& (0+255),f,b
  4666  0021AA  C084  F086         	movff	eval_poly@n,??_eval_poly
  4667  0021AE  C085  F087         	movff	eval_poly@n+1,??_eval_poly+1
  4668  0021B2  0100               	movlb	0	; () banked
  4669  0021B4  90D8               	bcf	status,0,c
  4670  0021B6  3786               	rlcf	??_eval_poly& (0+255),f,b
  4671  0021B8  3787               	rlcf	(??_eval_poly+1)& (0+255),f,b
  4672  0021BA  0100               	movlb	0	; () banked
  4673  0021BC  90D8               	bcf	status,0,c
  4674  0021BE  3786               	rlcf	??_eval_poly& (0+255),f,b
  4675  0021C0  3787               	rlcf	(??_eval_poly+1)& (0+255),f,b
  4676  0021C2  C082  F088         	movff	eval_poly@d,??_eval_poly+2
  4677  0021C6  C083  F089         	movff	eval_poly@d+1,??_eval_poly+3
  4678  0021CA  0100               	movlb	0	; () banked
  4679  0021CC  5186               	movf	??_eval_poly& (0+255),w,b
  4680  0021CE  0100               	movlb	0	; () banked
  4681  0021D0  2788               	addwf	(??_eval_poly+2)& (0+255),f,b
  4682  0021D2  0100               	movlb	0	; () banked
  4683  0021D4  5187               	movf	(??_eval_poly+1)& (0+255),w,b
  4684  0021D6  0100               	movlb	0	; () banked
  4685  0021D8  2389               	addwfc	(??_eval_poly+3)& (0+255),f,b
  4686  0021DA  C088  FFF6         	movff	??_eval_poly+2,tblptrl
  4687  0021DE  C089  FFF7         	movff	??_eval_poly+3,tblptrh
  4688  0021E2                     	if	0	;tblptru may be non-zero
  4689  0021E2                     	endif
  4690  0021E2                     	if	0	;tblptru may be non-zero
  4691  0021E2                     	endif
  4692  0021E2  0009               	tblrd		*+
  4693  0021E4  CFF5 F068          	movff	tablat,___fladd@f2
  4694  0021E8  0009               	tblrd		*+
  4695  0021EA  CFF5 F069          	movff	tablat,___fladd@f2+1
  4696  0021EE  0009               	tblrd		*+
  4697  0021F0  CFF5 F06A          	movff	tablat,___fladd@f2+2
  4698  0021F4  000A               	tblrd		*-
  4699  0021F6  CFF5 F06B          	movff	tablat,___fladd@f2+3
  4700  0021FA  EC28  F008         	call	___fladd	;wreg free
  4701  0021FE  C064  F08A         	movff	?___fladd,eval_poly@res
  4702  002202  C065  F08B         	movff	?___fladd+1,eval_poly@res+1
  4703  002206  C066  F08C         	movff	?___fladd+2,eval_poly@res+2
  4704  00220A  C067  F08D         	movff	?___fladd+3,eval_poly@res+3
  4705  00220E  D000               	goto	l3266
  4706  002210                     l3266:
  4707  002210  0100               	movlb	0	; () banked
  4708  002212  5184               	movf	eval_poly@n& (0+255),w,b
  4709  002214  0100               	movlb	0	; () banked
  4710  002216  1185               	iorwf	(eval_poly@n+1)& (0+255),w,b
  4711  002218  A4D8               	btfss	status,2,c
  4712  00221A  D7A9               	goto	l3264
  4713                           
  4714                           ; BSR set to: 0
  4715  00221C  C08A  F07E         	movff	eval_poly@res,?_eval_poly
  4716  002220  C08B  F07F         	movff	eval_poly@res+1,?_eval_poly+1
  4717  002224  C08C  F080         	movff	eval_poly@res+2,?_eval_poly+2
  4718  002228  C08D  F081         	movff	eval_poly@res+3,?_eval_poly+3
  4719                           
  4720                           ; BSR set to: 0
  4721  00222C  0012               	return		;funcret
  4722  00222E                     __end_of_eval_poly:
  4723                           	opt stack 0
  4724                           tblptru	equ	0xFF8
  4725                           tblptrh	equ	0xFF7
  4726                           tblptrl	equ	0xFF6
  4727                           tablat	equ	0xFF5
  4728                           postinc0	equ	0xFEE
  4729                           wreg	equ	0xFE8
  4730                           postinc2	equ	0xFDE
  4731                           postdec2	equ	0xFDD
  4732                           fsr2h	equ	0xFDA
  4733                           fsr2l	equ	0xFD9
  4734                           status	equ	0xFD8
  4735                           
  4736 ;; *************** function ___flmul *****************
  4737 ;; Defined at:
  4738 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flmul.c"
  4739 ;; Parameters:    Size  Location     Type
  4740 ;;  f1              4   15[BANK0 ] int 
  4741 ;;  f2              4   19[BANK0 ] int 
  4742 ;; Auto vars:     Size  Location     Type
  4743 ;;  f3_as_produc    4   24[BANK0 ] unsigned long 
  4744 ;;  sign            1   29[BANK0 ] unsigned char 
  4745 ;;  cntr            1   28[BANK0 ] unsigned char 
  4746 ;;  exp             1   23[BANK0 ] unsigned char 
  4747 ;; Return value:  Size  Location     Type
  4748 ;;                  4   15[BANK0 ] unsigned char 
  4749 ;; Registers used:
  4750 ;;		wreg, status,2, status,0, cstack
  4751 ;; Tracked objects:
  4752 ;;		On entry : 0/0
  4753 ;;		On exit  : 0/0
  4754 ;;		Unchanged: 0/0
  4755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4756 ;;      Params:         0       8       0       0       0       0       0
  4757 ;;      Locals:         0       7       0       0       0       0       0
  4758 ;;      Temps:          0       0       0       0       0       0       0
  4759 ;;      Totals:         0      15       0       0       0       0       0
  4760 ;;Total ram usage:       15 bytes
  4761 ;; Hardware stack levels used:    1
  4762 ;; Hardware stack levels required when called:    3
  4763 ;; This function calls:
  4764 ;;		___flpack
  4765 ;; This function is called by:
  4766 ;;		_Gyros_Update
  4767 ;;		_asin
  4768 ;;		_atan
  4769 ;;		_eval_poly
  4770 ;;		_pow
  4771 ;;		_sqrt
  4772 ;;		_exp
  4773 ;;		_log
  4774 ;; This function uses a non-reentrant model
  4775 ;;
  4776                           
  4777                           	psect	text24
  4778  001C32                     __ptext24:
  4779                           	opt stack 0
  4780  001C32                     ___flmul:
  4781                           	opt stack 25
  4782                           
  4783                           ; BSR set to: 0
  4784                           ;incstack = 0
  4785  001C32  0100               	movlb	0	; () banked
  4786  001C34  3571               	rlcf	(___flmul@f1+2)& (0+255),w,b
  4787  001C36  3572               	rlcf	(___flmul@f1+3)& (0+255),w,b
  4788  001C38  0100               	movlb	0	; () banked
  4789  001C3A  6F77               	movwf	___flmul@exp& (0+255),b
  4790  001C3C  0100               	movlb	0	; () banked
  4791  001C3E  5177               	movf	___flmul@exp& (0+255),w,b
  4792  001C40  A4D8               	btfss	status,2,c
  4793  001C42  D00A               	goto	l3144
  4794                           
  4795                           ; BSR set to: 0
  4796  001C44  0E00               	movlw	0
  4797  001C46  0100               	movlb	0	; () banked
  4798  001C48  6F6F               	movwf	?___flmul& (0+255),b
  4799  001C4A  0E00               	movlw	0
  4800  001C4C  6F70               	movwf	(?___flmul+1)& (0+255),b
  4801  001C4E  0E00               	movlw	0
  4802  001C50  6F71               	movwf	(?___flmul+2)& (0+255),b
  4803  001C52  0E00               	movlw	0
  4804  001C54  6F72               	movwf	(?___flmul+3)& (0+255),b
  4805                           
  4806                           ; BSR set to: 0
  4807  001C56  0012               	return	
  4808  001C58                     l3144:
  4809                           
  4810                           ; BSR set to: 0
  4811  001C58  0100               	movlb	0	; () banked
  4812  001C5A  3575               	rlcf	(___flmul@f2+2)& (0+255),w,b
  4813  001C5C  3576               	rlcf	(___flmul@f2+3)& (0+255),w,b
  4814  001C5E  0100               	movlb	0	; () banked
  4815  001C60  6F7D               	movwf	___flmul@sign& (0+255),b
  4816  001C62  0100               	movlb	0	; () banked
  4817  001C64  517D               	movf	___flmul@sign& (0+255),w,b
  4818  001C66  A4D8               	btfss	status,2,c
  4819  001C68  D00A               	goto	l3150
  4820                           
  4821                           ; BSR set to: 0
  4822  001C6A  0E00               	movlw	0
  4823  001C6C  0100               	movlb	0	; () banked
  4824  001C6E  6F6F               	movwf	?___flmul& (0+255),b
  4825  001C70  0E00               	movlw	0
  4826  001C72  6F70               	movwf	(?___flmul+1)& (0+255),b
  4827  001C74  0E00               	movlw	0
  4828  001C76  6F71               	movwf	(?___flmul+2)& (0+255),b
  4829  001C78  0E00               	movlw	0
  4830  001C7A  6F72               	movwf	(?___flmul+3)& (0+255),b
  4831                           
  4832                           ; BSR set to: 0
  4833  001C7C  0012               	return	
  4834  001C7E                     l3150:
  4835                           
  4836                           ; BSR set to: 0
  4837  001C7E  0100               	movlb	0	; () banked
  4838  001C80  517D               	movf	___flmul@sign& (0+255),w,b
  4839  001C82  0F7B               	addlw	123
  4840  001C84  0100               	movlb	0	; () banked
  4841  001C86  2777               	addwf	___flmul@exp& (0+255),f,b
  4842                           
  4843                           ; BSR set to: 0
  4844  001C88  C072  F07D         	movff	___flmul@f1+3,___flmul@sign
  4845  001C8C  0100               	movlb	0	; () banked
  4846  001C8E  5176               	movf	(___flmul@f2+3)& (0+255),w,b
  4847  001C90  0100               	movlb	0	; () banked
  4848  001C92  1B7D               	xorwf	___flmul@sign& (0+255),f,b
  4849  001C94  0E80               	movlw	128
  4850  001C96  0100               	movlb	0	; () banked
  4851  001C98  177D               	andwf	___flmul@sign& (0+255),f,b
  4852                           
  4853                           ; BSR set to: 0
  4854  001C9A  0100               	movlb	0	; () banked
  4855  001C9C  8F71               	bsf	(___flmul@f1+2)& (0+255),7,b
  4856                           
  4857                           ; BSR set to: 0
  4858  001C9E  0100               	movlb	0	; () banked
  4859  001CA0  8F75               	bsf	(___flmul@f2+2)& (0+255),7,b
  4860  001CA2  0EFF               	movlw	255
  4861  001CA4  0100               	movlb	0	; () banked
  4862  001CA6  1773               	andwf	___flmul@f2& (0+255),f,b
  4863  001CA8  0EFF               	movlw	255
  4864  001CAA  1774               	andwf	(___flmul@f2+1)& (0+255),f,b
  4865  001CAC  0EFF               	movlw	255
  4866  001CAE  1775               	andwf	(___flmul@f2+2)& (0+255),f,b
  4867  001CB0  0E00               	movlw	0
  4868  001CB2  1776               	andwf	(___flmul@f2+3)& (0+255),f,b
  4869                           
  4870                           ; BSR set to: 0
  4871  001CB4  0E00               	movlw	0
  4872  001CB6  0100               	movlb	0	; () banked
  4873  001CB8  6F78               	movwf	___flmul@f3_as_product& (0+255),b
  4874  001CBA  0E00               	movlw	0
  4875  001CBC  6F79               	movwf	(___flmul@f3_as_product+1)& (0+255),b
  4876  001CBE  0E00               	movlw	0
  4877  001CC0  6F7A               	movwf	(___flmul@f3_as_product+2)& (0+255),b
  4878  001CC2  0E00               	movlw	0
  4879  001CC4  6F7B               	movwf	(___flmul@f3_as_product+3)& (0+255),b
  4880                           
  4881                           ; BSR set to: 0
  4882  001CC6  0E07               	movlw	7
  4883  001CC8  0100               	movlb	0	; () banked
  4884  001CCA  6F7C               	movwf	___flmul@cntr& (0+255),b
  4885  001CCC  D000               	goto	l3162
  4886  001CCE                     l3162:
  4887                           
  4888                           ; BSR set to: 0
  4889  001CCE  0100               	movlb	0	; () banked
  4890  001CD0  A16F               	btfss	___flmul@f1& (0+255),0,b
  4891  001CD2  D011               	goto	l3166
  4892                           
  4893                           ; BSR set to: 0
  4894  001CD4  0100               	movlb	0	; () banked
  4895  001CD6  5173               	movf	___flmul@f2& (0+255),w,b
  4896  001CD8  0100               	movlb	0	; () banked
  4897  001CDA  2778               	addwf	___flmul@f3_as_product& (0+255),f,b
  4898  001CDC  0100               	movlb	0	; () banked
  4899  001CDE  5174               	movf	(___flmul@f2+1)& (0+255),w,b
  4900  001CE0  0100               	movlb	0	; () banked
  4901  001CE2  2379               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
  4902  001CE4  0100               	movlb	0	; () banked
  4903  001CE6  5175               	movf	(___flmul@f2+2)& (0+255),w,b
  4904  001CE8  0100               	movlb	0	; () banked
  4905  001CEA  237A               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
  4906  001CEC  0100               	movlb	0	; () banked
  4907  001CEE  5176               	movf	(___flmul@f2+3)& (0+255),w,b
  4908  001CF0  0100               	movlb	0	; () banked
  4909  001CF2  237B               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
  4910  001CF4  D000               	goto	l3166
  4911  001CF6                     l3166:
  4912                           
  4913                           ; BSR set to: 0
  4914  001CF6  0100               	movlb	0	; () banked
  4915  001CF8  90D8               	bcf	status,0,c
  4916  001CFA  3372               	rrcf	(___flmul@f1+3)& (0+255),f,b
  4917  001CFC  3371               	rrcf	(___flmul@f1+2)& (0+255),f,b
  4918  001CFE  3370               	rrcf	(___flmul@f1+1)& (0+255),f,b
  4919  001D00  336F               	rrcf	___flmul@f1& (0+255),f,b
  4920                           
  4921                           ; BSR set to: 0
  4922  001D02  0100               	movlb	0	; () banked
  4923  001D04  90D8               	bcf	status,0,c
  4924  001D06  3773               	rlcf	___flmul@f2& (0+255),f,b
  4925  001D08  3774               	rlcf	(___flmul@f2+1)& (0+255),f,b
  4926  001D0A  3775               	rlcf	(___flmul@f2+2)& (0+255),f,b
  4927  001D0C  3776               	rlcf	(___flmul@f2+3)& (0+255),f,b
  4928                           
  4929                           ; BSR set to: 0
  4930  001D0E  0100               	movlb	0	; () banked
  4931  001D10  2F7C               	decfsz	___flmul@cntr& (0+255),f,b
  4932  001D12  D7DD               	goto	l3162
  4933  001D14  D000               	goto	l3172
  4934  001D16                     l3172:
  4935                           
  4936                           ; BSR set to: 0
  4937  001D16  0E11               	movlw	17
  4938  001D18  0100               	movlb	0	; () banked
  4939  001D1A  6F7C               	movwf	___flmul@cntr& (0+255),b
  4940  001D1C  D000               	goto	l3174
  4941  001D1E                     l3174:
  4942                           
  4943                           ; BSR set to: 0
  4944  001D1E  0100               	movlb	0	; () banked
  4945  001D20  A16F               	btfss	___flmul@f1& (0+255),0,b
  4946  001D22  D011               	goto	l3178
  4947                           
  4948                           ; BSR set to: 0
  4949  001D24  0100               	movlb	0	; () banked
  4950  001D26  5173               	movf	___flmul@f2& (0+255),w,b
  4951  001D28  0100               	movlb	0	; () banked
  4952  001D2A  2778               	addwf	___flmul@f3_as_product& (0+255),f,b
  4953  001D2C  0100               	movlb	0	; () banked
  4954  001D2E  5174               	movf	(___flmul@f2+1)& (0+255),w,b
  4955  001D30  0100               	movlb	0	; () banked
  4956  001D32  2379               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
  4957  001D34  0100               	movlb	0	; () banked
  4958  001D36  5175               	movf	(___flmul@f2+2)& (0+255),w,b
  4959  001D38  0100               	movlb	0	; () banked
  4960  001D3A  237A               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
  4961  001D3C  0100               	movlb	0	; () banked
  4962  001D3E  5176               	movf	(___flmul@f2+3)& (0+255),w,b
  4963  001D40  0100               	movlb	0	; () banked
  4964  001D42  237B               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
  4965  001D44  D000               	goto	l3178
  4966  001D46                     l3178:
  4967                           
  4968                           ; BSR set to: 0
  4969  001D46  0100               	movlb	0	; () banked
  4970  001D48  90D8               	bcf	status,0,c
  4971  001D4A  3372               	rrcf	(___flmul@f1+3)& (0+255),f,b
  4972  001D4C  3371               	rrcf	(___flmul@f1+2)& (0+255),f,b
  4973  001D4E  3370               	rrcf	(___flmul@f1+1)& (0+255),f,b
  4974  001D50  336F               	rrcf	___flmul@f1& (0+255),f,b
  4975                           
  4976                           ; BSR set to: 0
  4977  001D52  0100               	movlb	0	; () banked
  4978  001D54  90D8               	bcf	status,0,c
  4979  001D56  337B               	rrcf	(___flmul@f3_as_product+3)& (0+255),f,b
  4980  001D58  337A               	rrcf	(___flmul@f3_as_product+2)& (0+255),f,b
  4981  001D5A  3379               	rrcf	(___flmul@f3_as_product+1)& (0+255),f,b
  4982  001D5C  3378               	rrcf	___flmul@f3_as_product& (0+255),f,b
  4983                           
  4984                           ; BSR set to: 0
  4985  001D5E  0100               	movlb	0	; () banked
  4986  001D60  2F7C               	decfsz	___flmul@cntr& (0+255),f,b
  4987  001D62  D7DD               	goto	l3174
  4988  001D64  D000               	goto	l3184
  4989  001D66                     l3184:
  4990                           
  4991                           ; BSR set to: 0
  4992  001D66  C078  F020         	movff	___flmul@f3_as_product,___flpack@arg
  4993  001D6A  C079  F021         	movff	___flmul@f3_as_product+1,___flpack@arg+1
  4994  001D6E  C07A  F022         	movff	___flmul@f3_as_product+2,___flpack@arg+2
  4995  001D72  C07B  F023         	movff	___flmul@f3_as_product+3,___flpack@arg+3
  4996  001D76  C077  F024         	movff	___flmul@exp,___flpack@exp
  4997  001D7A  C07D  F025         	movff	___flmul@sign,___flpack@sign
  4998  001D7E  EC17  F011         	call	___flpack	;wreg free
  4999  001D82  C020  F06F         	movff	?___flpack,?___flmul
  5000  001D86  C021  F070         	movff	?___flpack+1,?___flmul+1
  5001  001D8A  C022  F071         	movff	?___flpack+2,?___flmul+2
  5002  001D8E  C023  F072         	movff	?___flpack+3,?___flmul+3
  5003  001D92  0012               	return	
  5004  001D94  0012               	return		;funcret
  5005  001D96                     __end_of___flmul:
  5006                           	opt stack 0
  5007                           tblptru	equ	0xFF8
  5008                           tblptrh	equ	0xFF7
  5009                           tblptrl	equ	0xFF6
  5010                           tablat	equ	0xFF5
  5011                           postinc0	equ	0xFEE
  5012                           wreg	equ	0xFE8
  5013                           postinc2	equ	0xFDE
  5014                           postdec2	equ	0xFDD
  5015                           fsr2h	equ	0xFDA
  5016                           fsr2l	equ	0xFD9
  5017                           status	equ	0xFD8
  5018                           
  5019 ;; *************** function ___fladd *****************
  5020 ;; Defined at:
  5021 ;;		line 88 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fladd.c"
  5022 ;; Parameters:    Size  Location     Type
  5023 ;;  f1              4    4[BANK0 ] unsigned char 
  5024 ;;  f2              4    8[BANK0 ] unsigned char 
  5025 ;; Auto vars:     Size  Location     Type
  5026 ;;  exp1            1   14[BANK0 ] unsigned char 
  5027 ;;  exp2            1   13[BANK0 ] unsigned char 
  5028 ;;  sign            1   12[BANK0 ] unsigned char 
  5029 ;; Return value:  Size  Location     Type
  5030 ;;                  4    4[BANK0 ] unsigned char 
  5031 ;; Registers used:
  5032 ;;		wreg, status,2, status,0, cstack
  5033 ;; Tracked objects:
  5034 ;;		On entry : 0/0
  5035 ;;		On exit  : 0/0
  5036 ;;		Unchanged: 0/0
  5037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5038 ;;      Params:         0       8       0       0       0       0       0
  5039 ;;      Locals:         0       3       0       0       0       0       0
  5040 ;;      Temps:          1       0       0       0       0       0       0
  5041 ;;      Totals:         1      11       0       0       0       0       0
  5042 ;;Total ram usage:       12 bytes
  5043 ;; Hardware stack levels used:    1
  5044 ;; Hardware stack levels required when called:    3
  5045 ;; This function calls:
  5046 ;;		___flpack
  5047 ;; This function is called by:
  5048 ;;		_Gyros_Update
  5049 ;;		_acos
  5050 ;;		_asin
  5051 ;;		_atan
  5052 ;;		_eval_poly
  5053 ;;		___flsub
  5054 ;;		_floor
  5055 ;;		_log
  5056 ;; This function uses a non-reentrant model
  5057 ;;
  5058                           
  5059                           	psect	text25
  5060  001050                     __ptext25:
  5061                           	opt stack 0
  5062  001050                     ___fladd:
  5063                           	opt stack 24
  5064                           
  5065                           ;incstack = 0
  5066  001050  0100               	movlb	0	; () banked
  5067  001052  3566               	rlcf	(___fladd@f1+2)& (0+255),w,b
  5068  001054  3567               	rlcf	(___fladd@f1+3)& (0+255),w,b
  5069  001056  0100               	movlb	0	; () banked
  5070  001058  6F6E               	movwf	___fladd@exp1& (0+255),b
  5071  00105A  0100               	movlb	0	; () banked
  5072  00105C  356A               	rlcf	(___fladd@f2+2)& (0+255),w,b
  5073  00105E  356B               	rlcf	(___fladd@f2+3)& (0+255),w,b
  5074  001060  0100               	movlb	0	; () banked
  5075  001062  6F6D               	movwf	___fladd@exp2& (0+255),b
  5076  001064  0100               	movlb	0	; () banked
  5077  001066  516E               	movf	___fladd@exp1& (0+255),w,b
  5078  001068  0100               	movlb	0	; () banked
  5079  00106A  B4D8               	btfsc	status,2,c
  5080  00106C  D00F               	goto	l673
  5081                           
  5082                           ; BSR set to: 0
  5083  00106E  0100               	movlb	0	; () banked
  5084  001070  516D               	movf	___fladd@exp2& (0+255),w,b
  5085  001072  0100               	movlb	0	; () banked
  5086  001074  5D6E               	subwf	___fladd@exp1& (0+255),w,b
  5087  001076  B0D8               	btfsc	status,0,c
  5088  001078  D012               	goto	l3076
  5089                           
  5090                           ; BSR set to: 0
  5091  00107A  0100               	movlb	0	; () banked
  5092  00107C  516E               	movf	___fladd@exp1& (0+255),w,b
  5093  00107E  0800               	sublw	0
  5094  001080  0100               	movlb	0	; () banked
  5095  001082  256D               	addwf	___fladd@exp2& (0+255),w,b
  5096  001084  6E2B               	movwf	??___fladd& (0+255),c
  5097  001086  0E20               	movlw	32
  5098  001088  642B               	cpfsgt	??___fladd,c
  5099  00108A  D009               	goto	l3076
  5100  00108C                     l673:
  5101                           
  5102                           ; BSR set to: 0
  5103  00108C  C068  F064         	movff	___fladd@f2,?___fladd
  5104  001090  C069  F065         	movff	___fladd@f2+1,?___fladd+1
  5105  001094  C06A  F066         	movff	___fladd@f2+2,?___fladd+2
  5106  001098  C06B  F067         	movff	___fladd@f2+3,?___fladd+3
  5107  00109C  0012               	return	
  5108  00109E                     l3076:
  5109                           
  5110                           ; BSR set to: 0
  5111  00109E  0100               	movlb	0	; () banked
  5112  0010A0  516D               	movf	___fladd@exp2& (0+255),w,b
  5113  0010A2  0100               	movlb	0	; () banked
  5114  0010A4  B4D8               	btfsc	status,2,c
  5115  0010A6  D00F               	goto	l677
  5116                           
  5117                           ; BSR set to: 0
  5118  0010A8  0100               	movlb	0	; () banked
  5119  0010AA  516E               	movf	___fladd@exp1& (0+255),w,b
  5120  0010AC  0100               	movlb	0	; () banked
  5121  0010AE  5D6D               	subwf	___fladd@exp2& (0+255),w,b
  5122  0010B0  B0D8               	btfsc	status,0,c
  5123  0010B2  D012               	goto	l3082
  5124                           
  5125                           ; BSR set to: 0
  5126  0010B4  0100               	movlb	0	; () banked
  5127  0010B6  516D               	movf	___fladd@exp2& (0+255),w,b
  5128  0010B8  0800               	sublw	0
  5129  0010BA  0100               	movlb	0	; () banked
  5130  0010BC  256E               	addwf	___fladd@exp1& (0+255),w,b
  5131  0010BE  6E2B               	movwf	??___fladd& (0+255),c
  5132  0010C0  0E20               	movlw	32
  5133  0010C2  642B               	cpfsgt	??___fladd,c
  5134  0010C4  D009               	goto	l3082
  5135  0010C6                     l677:
  5136                           
  5137                           ; BSR set to: 0
  5138  0010C6  C064  F064         	movff	___fladd@f1,?___fladd
  5139  0010CA  C065  F065         	movff	___fladd@f1+1,?___fladd+1
  5140  0010CE  C066  F066         	movff	___fladd@f1+2,?___fladd+2
  5141  0010D2  C067  F067         	movff	___fladd@f1+3,?___fladd+3
  5142  0010D6  0012               	return	
  5143  0010D8                     l3082:
  5144                           
  5145                           ; BSR set to: 0
  5146  0010D8  0E06               	movlw	6
  5147  0010DA  0100               	movlb	0	; () banked
  5148  0010DC  6F6C               	movwf	___fladd@sign& (0+255),b
  5149                           
  5150                           ; BSR set to: 0
  5151  0010DE  0100               	movlb	0	; () banked
  5152  0010E0  AF67               	btfss	(___fladd@f1+3)& (0+255),7,b
  5153  0010E2  D003               	goto	l3088
  5154                           
  5155                           ; BSR set to: 0
  5156  0010E4  0100               	movlb	0	; () banked
  5157  0010E6  8F6C               	bsf	___fladd@sign& (0+255),7,b
  5158  0010E8  D000               	goto	l3088
  5159  0010EA                     l3088:
  5160                           
  5161                           ; BSR set to: 0
  5162  0010EA  0100               	movlb	0	; () banked
  5163  0010EC  AF6B               	btfss	(___fladd@f2+3)& (0+255),7,b
  5164  0010EE  D002               	goto	l679
  5165                           
  5166                           ; BSR set to: 0
  5167  0010F0  0100               	movlb	0	; () banked
  5168  0010F2  8D6C               	bsf	___fladd@sign& (0+255),6,b
  5169  0010F4                     l679:
  5170                           
  5171                           ; BSR set to: 0
  5172  0010F4  0100               	movlb	0	; () banked
  5173  0010F6  8F66               	bsf	(___fladd@f1+2)& (0+255),7,b
  5174                           
  5175                           ; BSR set to: 0
  5176  0010F8  0EFF               	movlw	255
  5177  0010FA  0100               	movlb	0	; () banked
  5178  0010FC  1764               	andwf	___fladd@f1& (0+255),f,b
  5179  0010FE  0EFF               	movlw	255
  5180  001100  1765               	andwf	(___fladd@f1+1)& (0+255),f,b
  5181  001102  0EFF               	movlw	255
  5182  001104  1766               	andwf	(___fladd@f1+2)& (0+255),f,b
  5183  001106  0E00               	movlw	0
  5184  001108  1767               	andwf	(___fladd@f1+3)& (0+255),f,b
  5185                           
  5186                           ; BSR set to: 0
  5187  00110A  0100               	movlb	0	; () banked
  5188  00110C  8F6A               	bsf	(___fladd@f2+2)& (0+255),7,b
  5189  00110E  0EFF               	movlw	255
  5190  001110  0100               	movlb	0	; () banked
  5191  001112  1768               	andwf	___fladd@f2& (0+255),f,b
  5192  001114  0EFF               	movlw	255
  5193  001116  1769               	andwf	(___fladd@f2+1)& (0+255),f,b
  5194  001118  0EFF               	movlw	255
  5195  00111A  176A               	andwf	(___fladd@f2+2)& (0+255),f,b
  5196  00111C  0E00               	movlw	0
  5197  00111E  176B               	andwf	(___fladd@f2+3)& (0+255),f,b
  5198  001120  0100               	movlb	0	; () banked
  5199  001122  516D               	movf	___fladd@exp2& (0+255),w,b
  5200  001124  0100               	movlb	0	; () banked
  5201  001126  5D6E               	subwf	___fladd@exp1& (0+255),w,b
  5202  001128  B0D8               	btfsc	status,0,c
  5203  00112A  D029               	goto	l3106
  5204  00112C                     l3096:
  5205                           
  5206                           ; BSR set to: 0
  5207  00112C  0100               	movlb	0	; () banked
  5208  00112E  90D8               	bcf	status,0,c
  5209  001130  3768               	rlcf	___fladd@f2& (0+255),f,b
  5210  001132  3769               	rlcf	(___fladd@f2+1)& (0+255),f,b
  5211  001134  376A               	rlcf	(___fladd@f2+2)& (0+255),f,b
  5212  001136  376B               	rlcf	(___fladd@f2+3)& (0+255),f,b
  5213  001138  0100               	movlb	0	; () banked
  5214  00113A  076D               	decf	___fladd@exp2& (0+255),f,b
  5215                           
  5216                           ; BSR set to: 0
  5217  00113C  0100               	movlb	0	; () banked
  5218  00113E  516E               	movf	___fladd@exp1& (0+255),w,b
  5219  001140  0100               	movlb	0	; () banked
  5220  001142  196D               	xorwf	___fladd@exp2& (0+255),w,b
  5221  001144  B4D8               	btfsc	status,2,c
  5222  001146  D013               	goto	l3104
  5223                           
  5224                           ; BSR set to: 0
  5225  001148  0100               	movlb	0	; () banked
  5226  00114A  076C               	decf	___fladd@sign& (0+255),f,b
  5227  00114C  C06C  F02B         	movff	___fladd@sign,??___fladd
  5228  001150  0E07               	movlw	7
  5229  001152  162B               	andwf	??___fladd,f,c
  5230  001154  B4D8               	btfsc	status,2,c
  5231  001156  D00B               	goto	l3104
  5232  001158  D7E9               	goto	l3096
  5233                           
  5234                           ; BSR set to: 0
  5235                           
  5236                           ; BSR set to: 0
  5237  00115A  D009               	goto	l3104
  5238  00115C                     l3102:
  5239                           
  5240                           ; BSR set to: 0
  5241  00115C  0100               	movlb	0	; () banked
  5242  00115E  90D8               	bcf	status,0,c
  5243  001160  3367               	rrcf	(___fladd@f1+3)& (0+255),f,b
  5244  001162  3366               	rrcf	(___fladd@f1+2)& (0+255),f,b
  5245  001164  3365               	rrcf	(___fladd@f1+1)& (0+255),f,b
  5246  001166  3364               	rrcf	___fladd@f1& (0+255),f,b
  5247  001168  0100               	movlb	0	; () banked
  5248  00116A  2B6E               	incf	___fladd@exp1& (0+255),f,b
  5249  00116C  D000               	goto	l3104
  5250  00116E                     l3104:
  5251                           
  5252                           ; BSR set to: 0
  5253  00116E  0100               	movlb	0	; () banked
  5254  001170  516D               	movf	___fladd@exp2& (0+255),w,b
  5255  001172  0100               	movlb	0	; () banked
  5256  001174  196E               	xorwf	___fladd@exp1& (0+255),w,b
  5257  001176  B4D8               	btfsc	status,2,c
  5258  001178  D031               	goto	l688
  5259  00117A  D7F0               	goto	l3102
  5260                           
  5261                           ; BSR set to: 0
  5262  00117C  D02F               	goto	l688
  5263  00117E                     l3106:
  5264                           
  5265                           ; BSR set to: 0
  5266  00117E  0100               	movlb	0	; () banked
  5267  001180  516E               	movf	___fladd@exp1& (0+255),w,b
  5268  001182  0100               	movlb	0	; () banked
  5269  001184  5D6D               	subwf	___fladd@exp2& (0+255),w,b
  5270  001186  B0D8               	btfsc	status,0,c
  5271  001188  D029               	goto	l688
  5272  00118A                     l3108:
  5273                           
  5274                           ; BSR set to: 0
  5275  00118A  0100               	movlb	0	; () banked
  5276  00118C  90D8               	bcf	status,0,c
  5277  00118E  3764               	rlcf	___fladd@f1& (0+255),f,b
  5278  001190  3765               	rlcf	(___fladd@f1+1)& (0+255),f,b
  5279  001192  3766               	rlcf	(___fladd@f1+2)& (0+255),f,b
  5280  001194  3767               	rlcf	(___fladd@f1+3)& (0+255),f,b
  5281  001196  0100               	movlb	0	; () banked
  5282  001198  076E               	decf	___fladd@exp1& (0+255),f,b
  5283                           
  5284                           ; BSR set to: 0
  5285  00119A  0100               	movlb	0	; () banked
  5286  00119C  516E               	movf	___fladd@exp1& (0+255),w,b
  5287  00119E  0100               	movlb	0	; () banked
  5288  0011A0  196D               	xorwf	___fladd@exp2& (0+255),w,b
  5289  0011A2  B4D8               	btfsc	status,2,c
  5290  0011A4  D013               	goto	l3116
  5291                           
  5292                           ; BSR set to: 0
  5293  0011A6  0100               	movlb	0	; () banked
  5294  0011A8  076C               	decf	___fladd@sign& (0+255),f,b
  5295  0011AA  C06C  F02B         	movff	___fladd@sign,??___fladd
  5296  0011AE  0E07               	movlw	7
  5297  0011B0  162B               	andwf	??___fladd,f,c
  5298  0011B2  B4D8               	btfsc	status,2,c
  5299  0011B4  D00B               	goto	l3116
  5300  0011B6  D7E9               	goto	l3108
  5301                           
  5302                           ; BSR set to: 0
  5303                           
  5304                           ; BSR set to: 0
  5305  0011B8  D009               	goto	l3116
  5306  0011BA                     l3114:
  5307                           
  5308                           ; BSR set to: 0
  5309  0011BA  0100               	movlb	0	; () banked
  5310  0011BC  90D8               	bcf	status,0,c
  5311  0011BE  336B               	rrcf	(___fladd@f2+3)& (0+255),f,b
  5312  0011C0  336A               	rrcf	(___fladd@f2+2)& (0+255),f,b
  5313  0011C2  3369               	rrcf	(___fladd@f2+1)& (0+255),f,b
  5314  0011C4  3368               	rrcf	___fladd@f2& (0+255),f,b
  5315  0011C6  0100               	movlb	0	; () banked
  5316  0011C8  2B6D               	incf	___fladd@exp2& (0+255),f,b
  5317  0011CA  D000               	goto	l3116
  5318  0011CC                     l3116:
  5319                           
  5320                           ; BSR set to: 0
  5321  0011CC  0100               	movlb	0	; () banked
  5322  0011CE  516D               	movf	___fladd@exp2& (0+255),w,b
  5323  0011D0  0100               	movlb	0	; () banked
  5324  0011D2  196E               	xorwf	___fladd@exp1& (0+255),w,b
  5325  0011D4  B4D8               	btfsc	status,2,c
  5326  0011D6  D002               	goto	l688
  5327  0011D8  D7F0               	goto	l3114
  5328                           
  5329                           ; BSR set to: 0
  5330  0011DA  D000               	goto	l688
  5331  0011DC                     l688:
  5332                           
  5333                           ; BSR set to: 0
  5334  0011DC  0100               	movlb	0	; () banked
  5335  0011DE  AF6C               	btfss	___fladd@sign& (0+255),7,b
  5336  0011E0  D011               	goto	l3120
  5337                           
  5338                           ; BSR set to: 0
  5339  0011E2  0EFF               	movlw	255
  5340  0011E4  0100               	movlb	0	; () banked
  5341  0011E6  1B64               	xorwf	___fladd@f1& (0+255),f,b
  5342  0011E8  0EFF               	movlw	255
  5343  0011EA  1B65               	xorwf	(___fladd@f1+1)& (0+255),f,b
  5344  0011EC  0EFF               	movlw	255
  5345  0011EE  1B66               	xorwf	(___fladd@f1+2)& (0+255),f,b
  5346  0011F0  0EFF               	movlw	255
  5347  0011F2  1B67               	xorwf	(___fladd@f1+3)& (0+255),f,b
  5348  0011F4  0E01               	movlw	1
  5349  0011F6  0100               	movlb	0	; () banked
  5350  0011F8  2764               	addwf	___fladd@f1& (0+255),f,b
  5351  0011FA  0E00               	movlw	0
  5352  0011FC  2365               	addwfc	(___fladd@f1+1)& (0+255),f,b
  5353  0011FE  2366               	addwfc	(___fladd@f1+2)& (0+255),f,b
  5354  001200  2367               	addwfc	(___fladd@f1+3)& (0+255),f,b
  5355  001202  D000               	goto	l3120
  5356  001204                     l3120:
  5357                           
  5358                           ; BSR set to: 0
  5359  001204  0100               	movlb	0	; () banked
  5360  001206  AD6C               	btfss	___fladd@sign& (0+255),6,b
  5361  001208  D011               	goto	l3124
  5362                           
  5363                           ; BSR set to: 0
  5364  00120A  0EFF               	movlw	255
  5365  00120C  0100               	movlb	0	; () banked
  5366  00120E  1B68               	xorwf	___fladd@f2& (0+255),f,b
  5367  001210  0EFF               	movlw	255
  5368  001212  1B69               	xorwf	(___fladd@f2+1)& (0+255),f,b
  5369  001214  0EFF               	movlw	255
  5370  001216  1B6A               	xorwf	(___fladd@f2+2)& (0+255),f,b
  5371  001218  0EFF               	movlw	255
  5372  00121A  1B6B               	xorwf	(___fladd@f2+3)& (0+255),f,b
  5373  00121C  0E01               	movlw	1
  5374  00121E  0100               	movlb	0	; () banked
  5375  001220  2768               	addwf	___fladd@f2& (0+255),f,b
  5376  001222  0E00               	movlw	0
  5377  001224  2369               	addwfc	(___fladd@f2+1)& (0+255),f,b
  5378  001226  236A               	addwfc	(___fladd@f2+2)& (0+255),f,b
  5379  001228  236B               	addwfc	(___fladd@f2+3)& (0+255),f,b
  5380  00122A  D000               	goto	l3124
  5381  00122C                     l3124:
  5382                           
  5383                           ; BSR set to: 0
  5384  00122C  0E00               	movlw	0
  5385  00122E  0100               	movlb	0	; () banked
  5386  001230  6F6C               	movwf	___fladd@sign& (0+255),b
  5387                           
  5388                           ; BSR set to: 0
  5389  001232  0100               	movlb	0	; () banked
  5390  001234  5164               	movf	___fladd@f1& (0+255),w,b
  5391  001236  0100               	movlb	0	; () banked
  5392  001238  2768               	addwf	___fladd@f2& (0+255),f,b
  5393  00123A  0100               	movlb	0	; () banked
  5394  00123C  5165               	movf	(___fladd@f1+1)& (0+255),w,b
  5395  00123E  0100               	movlb	0	; () banked
  5396  001240  2369               	addwfc	(___fladd@f2+1)& (0+255),f,b
  5397  001242  0100               	movlb	0	; () banked
  5398  001244  5166               	movf	(___fladd@f1+2)& (0+255),w,b
  5399  001246  0100               	movlb	0	; () banked
  5400  001248  236A               	addwfc	(___fladd@f2+2)& (0+255),f,b
  5401  00124A  0100               	movlb	0	; () banked
  5402  00124C  5167               	movf	(___fladd@f1+3)& (0+255),w,b
  5403  00124E  0100               	movlb	0	; () banked
  5404  001250  236B               	addwfc	(___fladd@f2+3)& (0+255),f,b
  5405                           
  5406                           ; BSR set to: 0
  5407  001252  0100               	movlb	0	; () banked
  5408  001254  AF6B               	btfss	(___fladd@f2+3)& (0+255),7,b
  5409  001256  D014               	goto	l3134
  5410                           
  5411                           ; BSR set to: 0
  5412  001258  0EFF               	movlw	255
  5413  00125A  0100               	movlb	0	; () banked
  5414  00125C  1B68               	xorwf	___fladd@f2& (0+255),f,b
  5415  00125E  0EFF               	movlw	255
  5416  001260  1B69               	xorwf	(___fladd@f2+1)& (0+255),f,b
  5417  001262  0EFF               	movlw	255
  5418  001264  1B6A               	xorwf	(___fladd@f2+2)& (0+255),f,b
  5419  001266  0EFF               	movlw	255
  5420  001268  1B6B               	xorwf	(___fladd@f2+3)& (0+255),f,b
  5421  00126A  0E01               	movlw	1
  5422  00126C  0100               	movlb	0	; () banked
  5423  00126E  2768               	addwf	___fladd@f2& (0+255),f,b
  5424  001270  0E00               	movlw	0
  5425  001272  2369               	addwfc	(___fladd@f2+1)& (0+255),f,b
  5426  001274  236A               	addwfc	(___fladd@f2+2)& (0+255),f,b
  5427  001276  236B               	addwfc	(___fladd@f2+3)& (0+255),f,b
  5428                           
  5429                           ; BSR set to: 0
  5430  001278  0E01               	movlw	1
  5431  00127A  0100               	movlb	0	; () banked
  5432  00127C  6F6C               	movwf	___fladd@sign& (0+255),b
  5433  00127E  D000               	goto	l3134
  5434  001280                     l3134:
  5435                           
  5436                           ; BSR set to: 0
  5437  001280  C068  F020         	movff	___fladd@f2,___flpack@arg
  5438  001284  C069  F021         	movff	___fladd@f2+1,___flpack@arg+1
  5439  001288  C06A  F022         	movff	___fladd@f2+2,___flpack@arg+2
  5440  00128C  C06B  F023         	movff	___fladd@f2+3,___flpack@arg+3
  5441  001290  C06E  F024         	movff	___fladd@exp1,___flpack@exp
  5442  001294  C06C  F025         	movff	___fladd@sign,___flpack@sign
  5443  001298  EC17  F011         	call	___flpack	;wreg free
  5444  00129C  C020  F064         	movff	?___flpack,?___fladd
  5445  0012A0  C021  F065         	movff	?___flpack+1,?___fladd+1
  5446  0012A4  C022  F066         	movff	?___flpack+2,?___fladd+2
  5447  0012A8  C023  F067         	movff	?___flpack+3,?___fladd+3
  5448  0012AC  0012               	return	
  5449  0012AE  0012               	return		;funcret
  5450  0012B0                     __end_of___fladd:
  5451                           	opt stack 0
  5452                           tblptru	equ	0xFF8
  5453                           tblptrh	equ	0xFF7
  5454                           tblptrl	equ	0xFF6
  5455                           tablat	equ	0xFF5
  5456                           postinc0	equ	0xFEE
  5457                           wreg	equ	0xFE8
  5458                           postinc2	equ	0xFDE
  5459                           postdec2	equ	0xFDD
  5460                           fsr2h	equ	0xFDA
  5461                           fsr2l	equ	0xFD9
  5462                           status	equ	0xFD8
  5463                           
  5464 ;; *************** function ___flge *****************
  5465 ;; Defined at:
  5466 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flge.c"
  5467 ;; Parameters:    Size  Location     Type
  5468 ;;  ff1             4    0[BANK0 ] unsigned char 
  5469 ;;  ff2             4    4[BANK0 ] unsigned char 
  5470 ;; Auto vars:     Size  Location     Type
  5471 ;;		None
  5472 ;; Return value:  Size  Location     Type
  5473 ;;		None               void
  5474 ;; Registers used:
  5475 ;;		wreg, status,2, status,0
  5476 ;; Tracked objects:
  5477 ;;		On entry : 0/0
  5478 ;;		On exit  : 0/0
  5479 ;;		Unchanged: 0/0
  5480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5481 ;;      Params:         0       8       0       0       0       0       0
  5482 ;;      Locals:         0       0       0       0       0       0       0
  5483 ;;      Temps:          4       0       0       0       0       0       0
  5484 ;;      Totals:         4       8       0       0       0       0       0
  5485 ;;Total ram usage:       12 bytes
  5486 ;; Hardware stack levels used:    1
  5487 ;; Hardware stack levels required when called:    2
  5488 ;; This function calls:
  5489 ;;		Nothing
  5490 ;; This function is called by:
  5491 ;;		_asin
  5492 ;;		_atan
  5493 ;;		_pow
  5494 ;;		_sqrt
  5495 ;;		_exp
  5496 ;;		_floor
  5497 ;; This function uses a non-reentrant model
  5498 ;;
  5499                           
  5500                           	psect	text26
  5501  002510                     __ptext26:
  5502                           	opt stack 0
  5503  002510                     ___flge:
  5504                           	opt stack 26
  5505                           
  5506                           ;incstack = 0
  5507  002510  0100               	movlb	0	; () banked
  5508  002512  AF63               	btfss	(___flge@ff1+3)& (0+255),7,b
  5509  002514  D022               	goto	l3272
  5510                           
  5511                           ; BSR set to: 0
  5512  002516  C060  F028         	movff	___flge@ff1,??___flge
  5513  00251A  C061  F029         	movff	___flge@ff1+1,??___flge+1
  5514  00251E  C062  F02A         	movff	___flge@ff1+2,??___flge+2
  5515  002522  C063  F02B         	movff	___flge@ff1+3,??___flge+3
  5516  002526  1E28               	comf	??___flge,f,c
  5517  002528  1E29               	comf	??___flge+1,f,c
  5518  00252A  1E2A               	comf	??___flge+2,f,c
  5519  00252C  1E2B               	comf	??___flge+3,f,c
  5520  00252E  2A28               	incf	??___flge,f,c
  5521  002530  0E00               	movlw	0
  5522  002532  2229               	addwfc	??___flge+1,f,c
  5523  002534  222A               	addwfc	??___flge+2,f,c
  5524  002536  222B               	addwfc	??___flge+3,f,c
  5525  002538  0E00               	movlw	0
  5526  00253A  2428               	addwf	??___flge,w,c
  5527  00253C  0100               	movlb	0	; () banked
  5528  00253E  6F60               	movwf	___flge@ff1& (0+255),b
  5529  002540  0E00               	movlw	0
  5530  002542  2029               	addwfc	??___flge+1,w,c
  5531  002544  0100               	movlb	0	; () banked
  5532  002546  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  5533  002548  0E00               	movlw	0
  5534  00254A  202A               	addwfc	??___flge+2,w,c
  5535  00254C  0100               	movlb	0	; () banked
  5536  00254E  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  5537  002550  0E80               	movlw	128
  5538  002552  202B               	addwfc	??___flge+3,w,c
  5539  002554  0100               	movlb	0	; () banked
  5540  002556  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  5541  002558  D000               	goto	l3272
  5542  00255A                     l3272:
  5543                           
  5544                           ; BSR set to: 0
  5545  00255A  0100               	movlb	0	; () banked
  5546  00255C  AF67               	btfss	(___flge@ff2+3)& (0+255),7,b
  5547  00255E  D021               	goto	l713
  5548                           
  5549                           ; BSR set to: 0
  5550  002560  C064  F028         	movff	___flge@ff2,??___flge
  5551  002564  C065  F029         	movff	___flge@ff2+1,??___flge+1
  5552  002568  C066  F02A         	movff	___flge@ff2+2,??___flge+2
  5553  00256C  C067  F02B         	movff	___flge@ff2+3,??___flge+3
  5554  002570  1E28               	comf	??___flge,f,c
  5555  002572  1E29               	comf	??___flge+1,f,c
  5556  002574  1E2A               	comf	??___flge+2,f,c
  5557  002576  1E2B               	comf	??___flge+3,f,c
  5558  002578  2A28               	incf	??___flge,f,c
  5559  00257A  0E00               	movlw	0
  5560  00257C  2229               	addwfc	??___flge+1,f,c
  5561  00257E  222A               	addwfc	??___flge+2,f,c
  5562  002580  222B               	addwfc	??___flge+3,f,c
  5563  002582  0E00               	movlw	0
  5564  002584  2428               	addwf	??___flge,w,c
  5565  002586  0100               	movlb	0	; () banked
  5566  002588  6F64               	movwf	___flge@ff2& (0+255),b
  5567  00258A  0E00               	movlw	0
  5568  00258C  2029               	addwfc	??___flge+1,w,c
  5569  00258E  0100               	movlb	0	; () banked
  5570  002590  6F65               	movwf	(___flge@ff2+1)& (0+255),b
  5571  002592  0E00               	movlw	0
  5572  002594  202A               	addwfc	??___flge+2,w,c
  5573  002596  0100               	movlb	0	; () banked
  5574  002598  6F66               	movwf	(___flge@ff2+2)& (0+255),b
  5575  00259A  0E80               	movlw	128
  5576  00259C  202B               	addwfc	??___flge+3,w,c
  5577  00259E  0100               	movlb	0	; () banked
  5578  0025A0  6F67               	movwf	(___flge@ff2+3)& (0+255),b
  5579  0025A2                     l713:
  5580                           
  5581                           ; BSR set to: 0
  5582  0025A2  0E00               	movlw	0
  5583  0025A4  0100               	movlb	0	; () banked
  5584  0025A6  1B60               	xorwf	___flge@ff1& (0+255),f,b
  5585  0025A8  0E00               	movlw	0
  5586  0025AA  1B61               	xorwf	(___flge@ff1+1)& (0+255),f,b
  5587  0025AC  0E00               	movlw	0
  5588  0025AE  1B62               	xorwf	(___flge@ff1+2)& (0+255),f,b
  5589  0025B0  0E80               	movlw	128
  5590  0025B2  1B63               	xorwf	(___flge@ff1+3)& (0+255),f,b
  5591  0025B4  0E00               	movlw	0
  5592  0025B6  0100               	movlb	0	; () banked
  5593  0025B8  1B64               	xorwf	___flge@ff2& (0+255),f,b
  5594  0025BA  0E00               	movlw	0
  5595  0025BC  1B65               	xorwf	(___flge@ff2+1)& (0+255),f,b
  5596  0025BE  0E00               	movlw	0
  5597  0025C0  1B66               	xorwf	(___flge@ff2+2)& (0+255),f,b
  5598  0025C2  0E80               	movlw	128
  5599  0025C4  1B67               	xorwf	(___flge@ff2+3)& (0+255),f,b
  5600  0025C6  0100               	movlb	0	; () banked
  5601  0025C8  5164               	movf	___flge@ff2& (0+255),w,b
  5602  0025CA  0100               	movlb	0	; () banked
  5603  0025CC  5D60               	subwf	___flge@ff1& (0+255),w,b
  5604  0025CE  0100               	movlb	0	; () banked
  5605  0025D0  5165               	movf	(___flge@ff2+1)& (0+255),w,b
  5606  0025D2  0100               	movlb	0	; () banked
  5607  0025D4  5961               	subwfb	(___flge@ff1+1)& (0+255),w,b
  5608  0025D6  0100               	movlb	0	; () banked
  5609  0025D8  5166               	movf	(___flge@ff2+2)& (0+255),w,b
  5610  0025DA  0100               	movlb	0	; () banked
  5611  0025DC  5962               	subwfb	(___flge@ff1+2)& (0+255),w,b
  5612  0025DE  0100               	movlb	0	; () banked
  5613  0025E0  5167               	movf	(___flge@ff2+3)& (0+255),w,b
  5614  0025E2  0100               	movlb	0	; () banked
  5615  0025E4  5963               	subwfb	(___flge@ff1+3)& (0+255),w,b
  5616  0025E6  B0D8               	btfsc	status,0,c
  5617  0025E8  D002               	goto	l3278
  5618                           
  5619                           ; BSR set to: 0
  5620  0025EA  90D8               	bcf	status,0,c
  5621  0025EC  0012               	return	
  5622  0025EE                     l3278:
  5623                           
  5624                           ; BSR set to: 0
  5625  0025EE  80D8               	bsf	status,0,c
  5626                           
  5627                           ; BSR set to: 0
  5628  0025F0  0012               	return	
  5629                           
  5630                           ; BSR set to: 0
  5631                           
  5632                           ; BSR set to: 0
  5633  0025F2  0012               	return		;funcret
  5634  0025F4                     __end_of___flge:
  5635                           	opt stack 0
  5636                           tblptru	equ	0xFF8
  5637                           tblptrh	equ	0xFF7
  5638                           tblptrl	equ	0xFF6
  5639                           tablat	equ	0xFF5
  5640                           postinc0	equ	0xFEE
  5641                           wreg	equ	0xFE8
  5642                           postinc2	equ	0xFDE
  5643                           postdec2	equ	0xFDD
  5644                           fsr2h	equ	0xFDA
  5645                           fsr2l	equ	0xFD9
  5646                           status	equ	0xFD8
  5647                           
  5648 ;; *************** function _Accel_Get *****************
  5649 ;; Defined at:
  5650 ;;		line 31 in file "accel.c"
  5651 ;; Parameters:    Size  Location     Type
  5652 ;;  out             2   45[BANK0 ] PTR struct .
  5653 ;;		 -> Gyros_Update@a(12), 
  5654 ;; Auto vars:     Size  Location     Type
  5655 ;;  gCount          2   61[BANK0 ] int 
  5656 ;;  i               2   63[BANK0 ] int 
  5657 ;;  raw             6   53[BANK0 ] unsigned char [6]
  5658 ;;  f_out           2   59[BANK0 ] PTR float 
  5659 ;;		 -> Accel_Get@out(2), 
  5660 ;; Return value:  Size  Location     Type
  5661 ;;		None               void
  5662 ;; Registers used:
  5663 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5664 ;; Tracked objects:
  5665 ;;		On entry : 0/0
  5666 ;;		On exit  : 0/0
  5667 ;;		Unchanged: 0/0
  5668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5669 ;;      Params:         0       2       0       0       0       0       0
  5670 ;;      Locals:         0      12       0       0       0       0       0
  5671 ;;      Temps:          0       6       0       0       0       0       0
  5672 ;;      Totals:         0      20       0       0       0       0       0
  5673 ;;Total ram usage:       20 bytes
  5674 ;; Hardware stack levels used:    1
  5675 ;; Hardware stack levels required when called:    6
  5676 ;; This function calls:
  5677 ;;		_Accel_ReadRegisters
  5678 ;;		___awtofl
  5679 ;;		___fldiv
  5680 ;;		___wmul
  5681 ;; This function is called by:
  5682 ;;		_Gyros_Update
  5683 ;; This function uses a non-reentrant model
  5684 ;;
  5685                           
  5686                           	psect	text27
  5687  00192E                     __ptext27:
  5688                           	opt stack 0
  5689  00192E                     _Accel_Get:
  5690                           	opt stack 23
  5691                           
  5692                           ;accel.c: 33: char raw[6];
  5693                           ;accel.c: 34: float* f_out = (float*) &out;
  5694                           
  5695                           ; BSR set to: 0
  5696                           ;incstack = 0
  5697  00192E  0E8D               	movlw	low Accel_Get@out
  5698  001930  0100               	movlb	0	; () banked
  5699  001932  6F9B               	movwf	Accel_Get@f_out& (0+255),b
  5700  001934  0E00               	movlw	high Accel_Get@out
  5701  001936  0100               	movlb	0	; () banked
  5702  001938  6F9C               	movwf	(Accel_Get@f_out+1)& (0+255),b
  5703                           
  5704                           ; BSR set to: 0
  5705                           ;accel.c: 36: Accel_ReadRegisters(0x01, raw, 6);
  5706  00193A  0E95               	movlw	low Accel_Get@raw
  5707  00193C  6E28               	movwf	Accel_ReadRegisters@out,c
  5708  00193E  0E00               	movlw	high Accel_Get@raw
  5709  001940  6E29               	movwf	Accel_ReadRegisters@out+1,c
  5710  001942  0E00               	movlw	0
  5711  001944  6E2B               	movwf	Accel_ReadRegisters@length+1,c
  5712  001946  0E06               	movlw	6
  5713  001948  6E2A               	movwf	Accel_ReadRegisters@length,c
  5714  00194A  0E01               	movlw	1
  5715  00194C  EC83  F016         	call	_Accel_ReadRegisters
  5716                           
  5717                           ;accel.c: 38: for(int i = 0; i < 3 ; i++)
  5718  001950  0E00               	movlw	0
  5719  001952  0100               	movlb	0	; () banked
  5720  001954  6FA0               	movwf	(Accel_Get@i+1)& (0+255),b
  5721  001956  0E00               	movlw	0
  5722  001958  6F9F               	movwf	Accel_Get@i& (0+255),b
  5723                           
  5724                           ; BSR set to: 0
  5725  00195A  0100               	movlb	0	; () banked
  5726  00195C  BFA0               	btfsc	(Accel_Get@i+1)& (0+255),7,b
  5727  00195E  D00A               	goto	l3552
  5728  001960  0100               	movlb	0	; () banked
  5729  001962  51A0               	movf	(Accel_Get@i+1)& (0+255),w,b
  5730  001964  E106               	bnz	u4060
  5731  001966  0E03               	movlw	3
  5732  001968  0100               	movlb	0	; () banked
  5733  00196A  5D9F               	subwf	Accel_Get@i& (0+255),w,b
  5734  00196C  B0D8               	btfsc	status,0,c
  5735  00196E  0012               	return	
  5736  001970  D001               	goto	l3552
  5737  001972                     u4060:
  5738                           
  5739                           ; BSR set to: 0
  5740  001972  0012               	return	
  5741  001974                     l3552:
  5742                           
  5743                           ; BSR set to: 0
  5744                           ;accel.c: 39: {
  5745                           ;accel.c: 40: int gCount = (raw[i*2] << 8) | raw[(i*2)+1];
  5746  001974  90D8               	bcf	status,0,c
  5747  001976  0100               	movlb	0	; () banked
  5748  001978  359F               	rlcf	Accel_Get@i& (0+255),w,b
  5749  00197A  6ED9               	movwf	fsr2l,c
  5750  00197C  0100               	movlb	0	; () banked
  5751  00197E  35A0               	rlcf	(Accel_Get@i+1)& (0+255),w,b
  5752  001980  6EDA               	movwf	fsr2h,c
  5753  001982  0E95               	movlw	low Accel_Get@raw
  5754  001984  26D9               	addwf	fsr2l,f,c
  5755  001986  0E00               	movlw	high Accel_Get@raw
  5756  001988  22DA               	addwfc	fsr2h,f,c
  5757  00198A  50DF               	movf	indf2,w,c
  5758  00198C  0100               	movlb	0	; () banked
  5759  00198E  6F8F               	movwf	??_Accel_Get& (0+255),b
  5760  001990  0100               	movlb	0	; () banked
  5761  001992  518F               	movf	??_Accel_Get& (0+255),w,b
  5762  001994  0100               	movlb	0	; () banked
  5763  001996  6F91               	movwf	(??_Accel_Get+2)& (0+255),b
  5764  001998  6B90               	clrf	(??_Accel_Get+1)& (0+255),b
  5765  00199A  C09F  F092         	movff	Accel_Get@i,??_Accel_Get+3
  5766  00199E  C0A0  F093         	movff	Accel_Get@i+1,??_Accel_Get+4
  5767  0019A2  90D8               	bcf	status,0,c
  5768  0019A4  0100               	movlb	0	; () banked
  5769  0019A6  3792               	rlcf	(??_Accel_Get+3)& (0+255),f,b
  5770  0019A8  3793               	rlcf	(??_Accel_Get+4)& (0+255),f,b
  5771  0019AA  0E01               	movlw	1
  5772  0019AC  0100               	movlb	0	; () banked
  5773  0019AE  2792               	addwf	(??_Accel_Get+3)& (0+255),f,b
  5774  0019B0  0E00               	movlw	0
  5775  0019B2  2393               	addwfc	(??_Accel_Get+4)& (0+255),f,b
  5776  0019B4  0E95               	movlw	low Accel_Get@raw
  5777  0019B6  0100               	movlb	0	; () banked
  5778  0019B8  2592               	addwf	(??_Accel_Get+3)& (0+255),w,b
  5779  0019BA  6ED9               	movwf	fsr2l,c
  5780  0019BC  0E00               	movlw	high Accel_Get@raw
  5781  0019BE  0100               	movlb	0	; () banked
  5782  0019C0  2193               	addwfc	(??_Accel_Get+4)& (0+255),w,b
  5783  0019C2  6EDA               	movwf	fsr2h,c
  5784  0019C4  50DF               	movf	indf2,w,c
  5785  0019C6  0100               	movlb	0	; () banked
  5786  0019C8  6F94               	movwf	(??_Accel_Get+5)& (0+255),b
  5787  0019CA  0100               	movlb	0	; () banked
  5788  0019CC  5194               	movf	(??_Accel_Get+5)& (0+255),w,b
  5789  0019CE  0100               	movlb	0	; () banked
  5790  0019D0  1190               	iorwf	(??_Accel_Get+1)& (0+255),w,b
  5791  0019D2  0100               	movlb	0	; () banked
  5792  0019D4  6F9D               	movwf	Accel_Get@gCount& (0+255),b
  5793  0019D6  0100               	movlb	0	; () banked
  5794  0019D8  5191               	movf	(??_Accel_Get+2)& (0+255),w,b
  5795  0019DA  0100               	movlb	0	; () banked
  5796  0019DC  6F9E               	movwf	(Accel_Get@gCount+1)& (0+255),b
  5797                           
  5798                           ; BSR set to: 0
  5799                           ;accel.c: 41: gCount >>= 4;
  5800  0019DE  0100               	movlb	0	; () banked
  5801  0019E0  0E04               	movlw	4
  5802  0019E2  0100               	movlb	0	; () banked
  5803  0019E4  6F8F               	movwf	??_Accel_Get& (0+255),b
  5804  0019E6                     u4075:
  5805  0019E6  0100               	movlb	0	; () banked
  5806  0019E8  359E               	rlcf	(Accel_Get@gCount+1)& (0+255),w,b
  5807  0019EA  339E               	rrcf	(Accel_Get@gCount+1)& (0+255),f,b
  5808  0019EC  339D               	rrcf	Accel_Get@gCount& (0+255),f,b
  5809  0019EE  0100               	movlb	0	; () banked
  5810  0019F0  2F8F               	decfsz	??_Accel_Get& (0+255),f,b
  5811  0019F2  D7F9               	goto	u4075
  5812                           
  5813                           ; BSR set to: 0
  5814                           ;accel.c: 44: if (raw[i*2] > 0x7F)
  5815  0019F4  90D8               	bcf	status,0,c
  5816  0019F6  0100               	movlb	0	; () banked
  5817  0019F8  359F               	rlcf	Accel_Get@i& (0+255),w,b
  5818  0019FA  6ED9               	movwf	fsr2l,c
  5819  0019FC  0100               	movlb	0	; () banked
  5820  0019FE  35A0               	rlcf	(Accel_Get@i+1)& (0+255),w,b
  5821  001A00  6EDA               	movwf	fsr2h,c
  5822  001A02  0E95               	movlw	low Accel_Get@raw
  5823  001A04  26D9               	addwf	fsr2l,f,c
  5824  001A06  0E00               	movlw	high Accel_Get@raw
  5825  001A08  22DA               	addwfc	fsr2h,f,c
  5826  001A0A  0E7F               	movlw	127
  5827  001A0C  64DF               	cpfsgt	indf2,c
  5828  001A0E  D013               	goto	l3562
  5829                           
  5830                           ; BSR set to: 0
  5831                           ;accel.c: 45: {
  5832                           ;accel.c: 46: gCount = ~gCount + 1;
  5833  001A10  0100               	movlb	0	; () banked
  5834  001A12  6D9D               	negf	Accel_Get@gCount& (0+255),b
  5835  001A14  1F9E               	comf	(Accel_Get@gCount+1)& (0+255),f,b
  5836  001A16  B0D8               	btfsc	status,0,c
  5837  001A18  2B9E               	incf	(Accel_Get@gCount+1)& (0+255),f,b
  5838                           
  5839                           ; BSR set to: 0
  5840                           ;accel.c: 47: gCount *= -1;
  5841  001A1A  C09D  F020         	movff	Accel_Get@gCount,___wmul@multiplier
  5842  001A1E  C09E  F021         	movff	Accel_Get@gCount+1,___wmul@multiplier+1
  5843  001A22  0EFF               	movlw	255
  5844  001A24  6E23               	movwf	___wmul@multiplicand+1,c
  5845  001A26  6822               	setf	___wmul@multiplicand,c
  5846  001A28  EC3E  F016         	call	___wmul	;wreg free
  5847  001A2C  C020  F09D         	movff	?___wmul,Accel_Get@gCount
  5848  001A30  C021  F09E         	movff	?___wmul+1,Accel_Get@gCount+1
  5849  001A34  D000               	goto	l3562
  5850  001A36                     l3562:
  5851                           
  5852                           ;accel.c: 48: }
  5853                           ;accel.c: 50: f_out[i] = (float) gCount / ((1<<12)/(2*2));
  5854  001A36  C09D  F060         	movff	Accel_Get@gCount,___awtofl@c
  5855  001A3A  C09E  F061         	movff	Accel_Get@gCount+1,___awtofl@c+1
  5856  001A3E  EC74  F015         	call	___awtofl	;wreg free
  5857  001A42  C060  F07E         	movff	?___awtofl,___fldiv@f1
  5858  001A46  C061  F07F         	movff	?___awtofl+1,___fldiv@f1+1
  5859  001A4A  C062  F080         	movff	?___awtofl+2,___fldiv@f1+2
  5860  001A4E  C063  F081         	movff	?___awtofl+3,___fldiv@f1+3
  5861  001A52  0E00               	movlw	0
  5862  001A54  0100               	movlb	0	; () banked
  5863  001A56  6F82               	movwf	___fldiv@f2& (0+255),b
  5864  001A58  0E00               	movlw	0
  5865  001A5A  6F83               	movwf	(___fldiv@f2+1)& (0+255),b
  5866  001A5C  0E80               	movlw	128
  5867  001A5E  6F84               	movwf	(___fldiv@f2+2)& (0+255),b
  5868  001A60  0E44               	movlw	68
  5869  001A62  6F85               	movwf	(___fldiv@f2+3)& (0+255),b
  5870  001A64  ECCB  F00E         	call	___fldiv	;wreg free
  5871  001A68  90D8               	bcf	status,0,c
  5872  001A6A  0100               	movlb	0	; () banked
  5873  001A6C  359F               	rlcf	Accel_Get@i& (0+255),w,b
  5874  001A6E  6ED9               	movwf	fsr2l,c
  5875  001A70  0100               	movlb	0	; () banked
  5876  001A72  35A0               	rlcf	(Accel_Get@i+1)& (0+255),w,b
  5877  001A74  6EDA               	movwf	fsr2h,c
  5878  001A76  90D8               	bcf	status,0,c
  5879  001A78  36D9               	rlcf	fsr2l,f,c
  5880  001A7A  36DA               	rlcf	fsr2h,f,c
  5881  001A7C  0100               	movlb	0	; () banked
  5882  001A7E  519B               	movf	Accel_Get@f_out& (0+255),w,b
  5883  001A80  26D9               	addwf	fsr2l,f,c
  5884  001A82  0100               	movlb	0	; () banked
  5885  001A84  519C               	movf	(Accel_Get@f_out+1)& (0+255),w,b
  5886  001A86  22DA               	addwfc	fsr2h,f,c
  5887  001A88  0100               	movlb	0	; () banked
  5888  001A8A  C07E  FFDE         	movff	?___fldiv,postinc2
  5889  001A8E  0100               	movlb	0	; () banked
  5890  001A90  C07F  FFDE         	movff	?___fldiv+1,postinc2
  5891  001A94  0100               	movlb	0	; () banked
  5892  001A96  C080  FFDE         	movff	?___fldiv+2,postinc2
  5893  001A9A  0100               	movlb	0	; () banked
  5894  001A9C  C081  FFDE         	movff	?___fldiv+3,postinc2
  5895                           
  5896                           ; BSR set to: 0
  5897  001AA0  0100               	movlb	0	; () banked
  5898  001AA2  4B9F               	infsnz	Accel_Get@i& (0+255),f,b
  5899  001AA4  2BA0               	incf	(Accel_Get@i+1)& (0+255),f,b
  5900                           
  5901                           ; BSR set to: 0
  5902  001AA6  0100               	movlb	0	; () banked
  5903  001AA8  BFA0               	btfsc	(Accel_Get@i+1)& (0+255),7,b
  5904  001AAA  D764               	goto	l3552
  5905  001AAC  0100               	movlb	0	; () banked
  5906  001AAE  51A0               	movf	(Accel_Get@i+1)& (0+255),w,b
  5907  001AB0  E102               	bnz	l90
  5908  001AB2  D759               	goto	L2
  5909  001AB4  0012               	return	
  5910  001AB6                     l90:
  5911                           
  5912                           ; BSR set to: 0
  5913  001AB6  0012               	return		;funcret
  5914  001AB8                     __end_of_Accel_Get:
  5915                           	opt stack 0
  5916                           tblptru	equ	0xFF8
  5917                           tblptrh	equ	0xFF7
  5918                           tblptrl	equ	0xFF6
  5919                           tablat	equ	0xFF5
  5920                           postinc0	equ	0xFEE
  5921                           wreg	equ	0xFE8
  5922                           indf2	equ	0xFDF
  5923                           postinc2	equ	0xFDE
  5924                           postdec2	equ	0xFDD
  5925                           fsr2h	equ	0xFDA
  5926                           fsr2l	equ	0xFD9
  5927                           status	equ	0xFD8
  5928                           
  5929 ;; *************** function ___wmul *****************
  5930 ;; Defined at:
  5931 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  5932 ;; Parameters:    Size  Location     Type
  5933 ;;  multiplier      2   31[COMRAM] unsigned int 
  5934 ;;  multiplicand    2   33[COMRAM] unsigned int 
  5935 ;; Auto vars:     Size  Location     Type
  5936 ;;  product         2   35[COMRAM] unsigned int 
  5937 ;; Return value:  Size  Location     Type
  5938 ;;                  2   31[COMRAM] unsigned int 
  5939 ;; Registers used:
  5940 ;;		wreg, status,2, status,0, prodl, prodh
  5941 ;; Tracked objects:
  5942 ;;		On entry : 0/0
  5943 ;;		On exit  : 0/0
  5944 ;;		Unchanged: 0/0
  5945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5946 ;;      Params:         4       0       0       0       0       0       0
  5947 ;;      Locals:         2       0       0       0       0       0       0
  5948 ;;      Temps:          0       0       0       0       0       0       0
  5949 ;;      Totals:         6       0       0       0       0       0       0
  5950 ;;Total ram usage:        6 bytes
  5951 ;; Hardware stack levels used:    1
  5952 ;; Hardware stack levels required when called:    2
  5953 ;; This function calls:
  5954 ;;		Nothing
  5955 ;; This function is called by:
  5956 ;;		_Accel_Get
  5957 ;; This function uses a non-reentrant model
  5958 ;;
  5959                           
  5960                           	psect	text28
  5961  002C7C                     __ptext28:
  5962                           	opt stack 0
  5963  002C7C                     ___wmul:
  5964                           	opt stack 26
  5965                           
  5966                           ; BSR set to: 0
  5967                           ;incstack = 0
  5968  002C7C  5020               	movf	___wmul@multiplier,w,c
  5969  002C7E  0222               	mulwf	___wmul@multiplicand,c
  5970  002C80  CFF3 F024          	movff	prodl,___wmul@product
  5971  002C84  CFF4 F025          	movff	prodh,___wmul@product+1
  5972  002C88  5020               	movf	___wmul@multiplier,w,c
  5973  002C8A  0223               	mulwf	___wmul@multiplicand+1,c
  5974  002C8C  50F3               	movf	prodl,w,c
  5975  002C8E  2625               	addwf	___wmul@product+1,f,c
  5976  002C90  5021               	movf	___wmul@multiplier+1,w,c
  5977  002C92  0222               	mulwf	___wmul@multiplicand,c
  5978  002C94  50F3               	movf	prodl,w,c
  5979  002C96  2625               	addwf	___wmul@product+1,f,c
  5980  002C98  C024  F020         	movff	___wmul@product,?___wmul
  5981  002C9C  C025  F021         	movff	___wmul@product+1,?___wmul+1
  5982  002CA0  0012               	return	
  5983  002CA2  0012               	return		;funcret
  5984  002CA4                     __end_of___wmul:
  5985                           	opt stack 0
  5986                           tblptru	equ	0xFF8
  5987                           tblptrh	equ	0xFF7
  5988                           tblptrl	equ	0xFF6
  5989                           tablat	equ	0xFF5
  5990                           prodh	equ	0xFF4
  5991                           prodl	equ	0xFF3
  5992                           postinc0	equ	0xFEE
  5993                           wreg	equ	0xFE8
  5994                           indf2	equ	0xFDF
  5995                           postinc2	equ	0xFDE
  5996                           postdec2	equ	0xFDD
  5997                           fsr2h	equ	0xFDA
  5998                           fsr2l	equ	0xFD9
  5999                           status	equ	0xFD8
  6000                           
  6001 ;; *************** function ___fldiv *****************
  6002 ;; Defined at:
  6003 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldiv.c"
  6004 ;; Parameters:    Size  Location     Type
  6005 ;;  f1              4   30[BANK0 ] unsigned int 
  6006 ;;  f2              4   34[BANK0 ] unsigned int 
  6007 ;; Auto vars:     Size  Location     Type
  6008 ;;  f3              4   38[BANK0 ] unsigned int 
  6009 ;;  sign            1   44[BANK0 ] unsigned char 
  6010 ;;  exp             1   43[BANK0 ] unsigned char 
  6011 ;;  cntr            1   42[BANK0 ] unsigned char 
  6012 ;; Return value:  Size  Location     Type
  6013 ;;                  4   30[BANK0 ] unsigned char 
  6014 ;; Registers used:
  6015 ;;		wreg, status,2, status,0, cstack
  6016 ;; Tracked objects:
  6017 ;;		On entry : 0/0
  6018 ;;		On exit  : 0/0
  6019 ;;		Unchanged: 0/0
  6020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6021 ;;      Params:         0       8       0       0       0       0       0
  6022 ;;      Locals:         0       7       0       0       0       0       0
  6023 ;;      Temps:          0       0       0       0       0       0       0
  6024 ;;      Totals:         0      15       0       0       0       0       0
  6025 ;;Total ram usage:       15 bytes
  6026 ;; Hardware stack levels used:    1
  6027 ;; Hardware stack levels required when called:    3
  6028 ;; This function calls:
  6029 ;;		___flpack
  6030 ;; This function is called by:
  6031 ;;		_Accel_Get
  6032 ;;		_Gyros_Update
  6033 ;;		_asin
  6034 ;;		_atan
  6035 ;;		_exp
  6036 ;; This function uses a non-reentrant model
  6037 ;;
  6038                           
  6039                           	psect	text29
  6040  001D96                     __ptext29:
  6041                           	opt stack 0
  6042  001D96                     ___fldiv:
  6043                           	opt stack 24
  6044                           
  6045                           ;incstack = 0
  6046  001D96  0100               	movlb	0	; () banked
  6047  001D98  3580               	rlcf	(___fldiv@f1+2)& (0+255),w,b
  6048  001D9A  3581               	rlcf	(___fldiv@f1+3)& (0+255),w,b
  6049  001D9C  0100               	movlb	0	; () banked
  6050  001D9E  6F8B               	movwf	___fldiv@exp& (0+255),b
  6051  001DA0  0100               	movlb	0	; () banked
  6052  001DA2  518B               	movf	___fldiv@exp& (0+255),w,b
  6053  001DA4  A4D8               	btfss	status,2,c
  6054  001DA6  D00A               	goto	l3214
  6055                           
  6056                           ; BSR set to: 0
  6057  001DA8  0E00               	movlw	0
  6058  001DAA  0100               	movlb	0	; () banked
  6059  001DAC  6F7E               	movwf	?___fldiv& (0+255),b
  6060  001DAE  0E00               	movlw	0
  6061  001DB0  6F7F               	movwf	(?___fldiv+1)& (0+255),b
  6062  001DB2  0E00               	movlw	0
  6063  001DB4  6F80               	movwf	(?___fldiv+2)& (0+255),b
  6064  001DB6  0E00               	movlw	0
  6065  001DB8  6F81               	movwf	(?___fldiv+3)& (0+255),b
  6066                           
  6067                           ; BSR set to: 0
  6068  001DBA  0012               	return	
  6069  001DBC                     l3214:
  6070                           
  6071                           ; BSR set to: 0
  6072  001DBC  0100               	movlb	0	; () banked
  6073  001DBE  3584               	rlcf	(___fldiv@f2+2)& (0+255),w,b
  6074  001DC0  3585               	rlcf	(___fldiv@f2+3)& (0+255),w,b
  6075  001DC2  0100               	movlb	0	; () banked
  6076  001DC4  6F8C               	movwf	___fldiv@sign& (0+255),b
  6077  001DC6  0100               	movlb	0	; () banked
  6078  001DC8  518C               	movf	___fldiv@sign& (0+255),w,b
  6079  001DCA  A4D8               	btfss	status,2,c
  6080  001DCC  D00A               	goto	l3220
  6081                           
  6082                           ; BSR set to: 0
  6083  001DCE  0E00               	movlw	0
  6084  001DD0  0100               	movlb	0	; () banked
  6085  001DD2  6F7E               	movwf	?___fldiv& (0+255),b
  6086  001DD4  0E00               	movlw	0
  6087  001DD6  6F7F               	movwf	(?___fldiv+1)& (0+255),b
  6088  001DD8  0E00               	movlw	0
  6089  001DDA  6F80               	movwf	(?___fldiv+2)& (0+255),b
  6090  001DDC  0E00               	movlw	0
  6091  001DDE  6F81               	movwf	(?___fldiv+3)& (0+255),b
  6092                           
  6093                           ; BSR set to: 0
  6094  001DE0  0012               	return	
  6095  001DE2                     l3220:
  6096                           
  6097                           ; BSR set to: 0
  6098  001DE2  0100               	movlb	0	; () banked
  6099  001DE4  518C               	movf	___fldiv@sign& (0+255),w,b
  6100  001DE6  0F89               	addlw	137
  6101  001DE8  0100               	movlb	0	; () banked
  6102  001DEA  5F8B               	subwf	___fldiv@exp& (0+255),f,b
  6103                           
  6104                           ; BSR set to: 0
  6105  001DEC  C081  F08C         	movff	___fldiv@f1+3,___fldiv@sign
  6106  001DF0  0100               	movlb	0	; () banked
  6107  001DF2  5185               	movf	(___fldiv@f2+3)& (0+255),w,b
  6108  001DF4  0100               	movlb	0	; () banked
  6109  001DF6  1B8C               	xorwf	___fldiv@sign& (0+255),f,b
  6110  001DF8  0E80               	movlw	128
  6111  001DFA  0100               	movlb	0	; () banked
  6112  001DFC  178C               	andwf	___fldiv@sign& (0+255),f,b
  6113                           
  6114                           ; BSR set to: 0
  6115  001DFE  0100               	movlb	0	; () banked
  6116  001E00  8F80               	bsf	(___fldiv@f1+2)& (0+255),7,b
  6117                           
  6118                           ; BSR set to: 0
  6119  001E02  0EFF               	movlw	255
  6120  001E04  0100               	movlb	0	; () banked
  6121  001E06  177E               	andwf	___fldiv@f1& (0+255),f,b
  6122  001E08  0EFF               	movlw	255
  6123  001E0A  177F               	andwf	(___fldiv@f1+1)& (0+255),f,b
  6124  001E0C  0EFF               	movlw	255
  6125  001E0E  1780               	andwf	(___fldiv@f1+2)& (0+255),f,b
  6126  001E10  0E00               	movlw	0
  6127  001E12  1781               	andwf	(___fldiv@f1+3)& (0+255),f,b
  6128  001E14  0100               	movlb	0	; () banked
  6129  001E16  8F84               	bsf	(___fldiv@f2+2)& (0+255),7,b
  6130                           
  6131                           ; BSR set to: 0
  6132  001E18  0EFF               	movlw	255
  6133  001E1A  0100               	movlb	0	; () banked
  6134  001E1C  1782               	andwf	___fldiv@f2& (0+255),f,b
  6135  001E1E  0EFF               	movlw	255
  6136  001E20  1783               	andwf	(___fldiv@f2+1)& (0+255),f,b
  6137  001E22  0EFF               	movlw	255
  6138  001E24  1784               	andwf	(___fldiv@f2+2)& (0+255),f,b
  6139  001E26  0E00               	movlw	0
  6140  001E28  1785               	andwf	(___fldiv@f2+3)& (0+255),f,b
  6141                           
  6142                           ; BSR set to: 0
  6143  001E2A  0E20               	movlw	32
  6144  001E2C  0100               	movlb	0	; () banked
  6145  001E2E  6F8A               	movwf	___fldiv@cntr& (0+255),b
  6146  001E30  D000               	goto	l3232
  6147  001E32                     l3232:
  6148                           
  6149                           ; BSR set to: 0
  6150  001E32  0100               	movlb	0	; () banked
  6151  001E34  90D8               	bcf	status,0,c
  6152  001E36  3786               	rlcf	___fldiv@f3& (0+255),f,b
  6153  001E38  3787               	rlcf	(___fldiv@f3+1)& (0+255),f,b
  6154  001E3A  3788               	rlcf	(___fldiv@f3+2)& (0+255),f,b
  6155  001E3C  3789               	rlcf	(___fldiv@f3+3)& (0+255),f,b
  6156                           
  6157                           ; BSR set to: 0
  6158  001E3E  0100               	movlb	0	; () banked
  6159  001E40  5182               	movf	___fldiv@f2& (0+255),w,b
  6160  001E42  0100               	movlb	0	; () banked
  6161  001E44  5D7E               	subwf	___fldiv@f1& (0+255),w,b
  6162  001E46  0100               	movlb	0	; () banked
  6163  001E48  5183               	movf	(___fldiv@f2+1)& (0+255),w,b
  6164  001E4A  0100               	movlb	0	; () banked
  6165  001E4C  597F               	subwfb	(___fldiv@f1+1)& (0+255),w,b
  6166  001E4E  0100               	movlb	0	; () banked
  6167  001E50  5184               	movf	(___fldiv@f2+2)& (0+255),w,b
  6168  001E52  0100               	movlb	0	; () banked
  6169  001E54  5980               	subwfb	(___fldiv@f1+2)& (0+255),w,b
  6170  001E56  0100               	movlb	0	; () banked
  6171  001E58  5185               	movf	(___fldiv@f2+3)& (0+255),w,b
  6172  001E5A  0100               	movlb	0	; () banked
  6173  001E5C  5981               	subwfb	(___fldiv@f1+3)& (0+255),w,b
  6174  001E5E  A0D8               	btfss	status,0,c
  6175  001E60  D013               	goto	l3240
  6176                           
  6177                           ; BSR set to: 0
  6178  001E62  0100               	movlb	0	; () banked
  6179  001E64  5182               	movf	___fldiv@f2& (0+255),w,b
  6180  001E66  0100               	movlb	0	; () banked
  6181  001E68  5F7E               	subwf	___fldiv@f1& (0+255),f,b
  6182  001E6A  0100               	movlb	0	; () banked
  6183  001E6C  5183               	movf	(___fldiv@f2+1)& (0+255),w,b
  6184  001E6E  0100               	movlb	0	; () banked
  6185  001E70  5B7F               	subwfb	(___fldiv@f1+1)& (0+255),f,b
  6186  001E72  0100               	movlb	0	; () banked
  6187  001E74  5184               	movf	(___fldiv@f2+2)& (0+255),w,b
  6188  001E76  0100               	movlb	0	; () banked
  6189  001E78  5B80               	subwfb	(___fldiv@f1+2)& (0+255),f,b
  6190  001E7A  0100               	movlb	0	; () banked
  6191  001E7C  5185               	movf	(___fldiv@f2+3)& (0+255),w,b
  6192  001E7E  0100               	movlb	0	; () banked
  6193  001E80  5B81               	subwfb	(___fldiv@f1+3)& (0+255),f,b
  6194                           
  6195                           ; BSR set to: 0
  6196  001E82  0100               	movlb	0	; () banked
  6197  001E84  8186               	bsf	___fldiv@f3& (0+255),0,b
  6198  001E86  D000               	goto	l3240
  6199  001E88                     l3240:
  6200                           
  6201                           ; BSR set to: 0
  6202  001E88  0100               	movlb	0	; () banked
  6203  001E8A  90D8               	bcf	status,0,c
  6204  001E8C  377E               	rlcf	___fldiv@f1& (0+255),f,b
  6205  001E8E  377F               	rlcf	(___fldiv@f1+1)& (0+255),f,b
  6206  001E90  3780               	rlcf	(___fldiv@f1+2)& (0+255),f,b
  6207  001E92  3781               	rlcf	(___fldiv@f1+3)& (0+255),f,b
  6208                           
  6209                           ; BSR set to: 0
  6210  001E94  0100               	movlb	0	; () banked
  6211  001E96  2F8A               	decfsz	___fldiv@cntr& (0+255),f,b
  6212  001E98  D7CC               	goto	l3232
  6213  001E9A  D000               	goto	l3244
  6214  001E9C                     l3244:
  6215                           
  6216                           ; BSR set to: 0
  6217  001E9C  C086  F020         	movff	___fldiv@f3,___flpack@arg
  6218  001EA0  C087  F021         	movff	___fldiv@f3+1,___flpack@arg+1
  6219  001EA4  C088  F022         	movff	___fldiv@f3+2,___flpack@arg+2
  6220  001EA8  C089  F023         	movff	___fldiv@f3+3,___flpack@arg+3
  6221  001EAC  C08B  F024         	movff	___fldiv@exp,___flpack@exp
  6222  001EB0  C08C  F025         	movff	___fldiv@sign,___flpack@sign
  6223  001EB4  EC17  F011         	call	___flpack	;wreg free
  6224  001EB8  C020  F07E         	movff	?___flpack,?___fldiv
  6225  001EBC  C021  F07F         	movff	?___flpack+1,?___fldiv+1
  6226  001EC0  C022  F080         	movff	?___flpack+2,?___fldiv+2
  6227  001EC4  C023  F081         	movff	?___flpack+3,?___fldiv+3
  6228  001EC8  0012               	return	
  6229  001ECA  0012               	return		;funcret
  6230  001ECC                     __end_of___fldiv:
  6231                           	opt stack 0
  6232                           tblptru	equ	0xFF8
  6233                           tblptrh	equ	0xFF7
  6234                           tblptrl	equ	0xFF6
  6235                           tablat	equ	0xFF5
  6236                           prodh	equ	0xFF4
  6237                           prodl	equ	0xFF3
  6238                           postinc0	equ	0xFEE
  6239                           wreg	equ	0xFE8
  6240                           indf2	equ	0xFDF
  6241                           postinc2	equ	0xFDE
  6242                           postdec2	equ	0xFDD
  6243                           fsr2h	equ	0xFDA
  6244                           fsr2l	equ	0xFD9
  6245                           status	equ	0xFD8
  6246                           
  6247 ;; *************** function ___awtofl *****************
  6248 ;; Defined at:
  6249 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtofl.c"
  6250 ;; Parameters:    Size  Location     Type
  6251 ;;  c               2    0[BANK0 ] int 
  6252 ;; Auto vars:     Size  Location     Type
  6253 ;;  f1              4    0        int 
  6254 ;;  sign            1   41[COMRAM] unsigned char 
  6255 ;; Return value:  Size  Location     Type
  6256 ;;                  4    0[BANK0 ] unsigned char 
  6257 ;; Registers used:
  6258 ;;		wreg, status,2, status,0, cstack
  6259 ;; Tracked objects:
  6260 ;;		On entry : 0/0
  6261 ;;		On exit  : 0/0
  6262 ;;		Unchanged: 0/0
  6263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6264 ;;      Params:         0       4       0       0       0       0       0
  6265 ;;      Locals:         1       0       0       0       0       0       0
  6266 ;;      Temps:          0       0       0       0       0       0       0
  6267 ;;      Totals:         1       4       0       0       0       0       0
  6268 ;;Total ram usage:        5 bytes
  6269 ;; Hardware stack levels used:    1
  6270 ;; Hardware stack levels required when called:    3
  6271 ;; This function calls:
  6272 ;;		___flpack
  6273 ;; This function is called by:
  6274 ;;		_Accel_Get
  6275 ;;		_exp
  6276 ;;		_log
  6277 ;; This function uses a non-reentrant model
  6278 ;;
  6279                           
  6280                           	psect	text30
  6281  002AE8                     __ptext30:
  6282                           	opt stack 0
  6283  002AE8                     ___awtofl:
  6284                           	opt stack 24
  6285                           
  6286                           ;incstack = 0
  6287  002AE8  0E00               	movlw	0
  6288  002AEA  6E2A               	movwf	___awtofl@sign,c
  6289  002AEC  0100               	movlb	0	; () banked
  6290  002AEE  AF61               	btfss	(___awtofl@c+1)& (0+255),7,b
  6291  002AF0  D007               	goto	l3368
  6292                           
  6293                           ; BSR set to: 0
  6294  002AF2  0100               	movlb	0	; () banked
  6295  002AF4  6D60               	negf	___awtofl@c& (0+255),b
  6296  002AF6  1F61               	comf	(___awtofl@c+1)& (0+255),f,b
  6297  002AF8  B0D8               	btfsc	status,0,c
  6298  002AFA  2B61               	incf	(___awtofl@c+1)& (0+255),f,b
  6299  002AFC  2A2A               	incf	___awtofl@sign,f,c
  6300  002AFE  D000               	goto	l3368
  6301  002B00                     l3368:
  6302                           
  6303                           ; BSR set to: 0
  6304  002B00  C060  F020         	movff	___awtofl@c,___flpack@arg
  6305  002B04  C061  F021         	movff	___awtofl@c+1,___flpack@arg+1
  6306  002B08  6A22               	clrf	___flpack@arg+2,c
  6307  002B0A  6A23               	clrf	___flpack@arg+3,c
  6308  002B0C  0E96               	movlw	150
  6309  002B0E  6E24               	movwf	___flpack@exp,c
  6310  002B10  C02A  F025         	movff	___awtofl@sign,___flpack@sign
  6311  002B14  EC17  F011         	call	___flpack	;wreg free
  6312  002B18  C020  F060         	movff	?___flpack,?___awtofl
  6313  002B1C  C021  F061         	movff	?___flpack+1,?___awtofl+1
  6314  002B20  C022  F062         	movff	?___flpack+2,?___awtofl+2
  6315  002B24  C023  F063         	movff	?___flpack+3,?___awtofl+3
  6316  002B28  0012               	return	
  6317  002B2A  0012               	return		;funcret
  6318  002B2C                     __end_of___awtofl:
  6319                           	opt stack 0
  6320                           tblptru	equ	0xFF8
  6321                           tblptrh	equ	0xFF7
  6322                           tblptrl	equ	0xFF6
  6323                           tablat	equ	0xFF5
  6324                           prodh	equ	0xFF4
  6325                           prodl	equ	0xFF3
  6326                           postinc0	equ	0xFEE
  6327                           wreg	equ	0xFE8
  6328                           indf2	equ	0xFDF
  6329                           postinc2	equ	0xFDE
  6330                           postdec2	equ	0xFDD
  6331                           fsr2h	equ	0xFDA
  6332                           fsr2l	equ	0xFD9
  6333                           status	equ	0xFD8
  6334                           
  6335 ;; *************** function ___flpack *****************
  6336 ;; Defined at:
  6337 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\double.c"
  6338 ;; Parameters:    Size  Location     Type
  6339 ;;  arg             4   31[COMRAM] unsigned long 
  6340 ;;  exp             1   35[COMRAM] unsigned char 
  6341 ;;  sign            1   36[COMRAM] unsigned char 
  6342 ;; Auto vars:     Size  Location     Type
  6343 ;;		None
  6344 ;; Return value:  Size  Location     Type
  6345 ;;                  4   31[COMRAM] unsigned char 
  6346 ;; Registers used:
  6347 ;;		wreg, status,2, status,0
  6348 ;; Tracked objects:
  6349 ;;		On entry : 0/0
  6350 ;;		On exit  : 0/0
  6351 ;;		Unchanged: 0/0
  6352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6353 ;;      Params:         6       0       0       0       0       0       0
  6354 ;;      Locals:         0       0       0       0       0       0       0
  6355 ;;      Temps:          4       0       0       0       0       0       0
  6356 ;;      Totals:        10       0       0       0       0       0       0
  6357 ;;Total ram usage:       10 bytes
  6358 ;; Hardware stack levels used:    1
  6359 ;; Hardware stack levels required when called:    2
  6360 ;; This function calls:
  6361 ;;		Nothing
  6362 ;; This function is called by:
  6363 ;;		___altofl
  6364 ;;		___awtofl
  6365 ;;		___fladd
  6366 ;;		___fldiv
  6367 ;;		___flmul
  6368 ;;		___lltofl
  6369 ;; This function uses a non-reentrant model
  6370 ;;
  6371                           
  6372                           	psect	text31
  6373  00222E                     __ptext31:
  6374                           	opt stack 0
  6375  00222E                     ___flpack:
  6376                           	opt stack 24
  6377                           
  6378                           ;incstack = 0
  6379  00222E  5024               	movf	___flpack@exp,w,c
  6380  002230  B4D8               	btfsc	status,2,c
  6381  002232  D006               	goto	l3040
  6382  002234  5020               	movf	___flpack@arg,w,c
  6383  002236  1021               	iorwf	___flpack@arg+1,w,c
  6384  002238  1022               	iorwf	___flpack@arg+2,w,c
  6385  00223A  1023               	iorwf	___flpack@arg+3,w,c
  6386  00223C  A4D8               	btfss	status,2,c
  6387  00223E  D011               	goto	l3046
  6388  002240                     l3040:
  6389  002240  0E00               	movlw	0
  6390  002242  6E20               	movwf	?___flpack,c
  6391  002244  0E00               	movlw	0
  6392  002246  6E21               	movwf	?___flpack+1,c
  6393  002248  0E00               	movlw	0
  6394  00224A  6E22               	movwf	?___flpack+2,c
  6395  00224C  0E00               	movlw	0
  6396  00224E  6E23               	movwf	?___flpack+3,c
  6397  002250  0012               	return	
  6398  002252  D007               	goto	l3046
  6399  002254                     l3044:
  6400  002254  2A24               	incf	___flpack@exp,f,c
  6401  002256  90D8               	bcf	status,0,c
  6402  002258  3223               	rrcf	___flpack@arg+3,f,c
  6403  00225A  3222               	rrcf	___flpack@arg+2,f,c
  6404  00225C  3221               	rrcf	___flpack@arg+1,f,c
  6405  00225E  3220               	rrcf	___flpack@arg,f,c
  6406  002260  D000               	goto	l3046
  6407  002262                     l3046:
  6408  002262  0E00               	movlw	0
  6409  002264  1420               	andwf	___flpack@arg,w,c
  6410  002266  6E26               	movwf	??___flpack& (0+255),c
  6411  002268  0E00               	movlw	0
  6412  00226A  1421               	andwf	___flpack@arg+1,w,c
  6413  00226C  6E27               	movwf	(??___flpack+1)& (0+255),c
  6414  00226E  0E00               	movlw	0
  6415  002270  1422               	andwf	___flpack@arg+2,w,c
  6416  002272  6E28               	movwf	(??___flpack+2)& (0+255),c
  6417  002274  0EFE               	movlw	254
  6418  002276  1423               	andwf	___flpack@arg+3,w,c
  6419  002278  6E29               	movwf	(??___flpack+3)& (0+255),c
  6420  00227A  5026               	movf	??___flpack,w,c
  6421  00227C  1027               	iorwf	??___flpack+1,w,c
  6422  00227E  1028               	iorwf	??___flpack+2,w,c
  6423  002280  1029               	iorwf	??___flpack+3,w,c
  6424  002282  B4D8               	btfsc	status,2,c
  6425  002284  D00E               	goto	l645
  6426  002286  D7E6               	goto	l3044
  6427  002288  D00C               	goto	l645
  6428  00228A                     l3048:
  6429  00228A  2A24               	incf	___flpack@exp,f,c
  6430  00228C  0E01               	movlw	1
  6431  00228E  2620               	addwf	___flpack@arg,f,c
  6432  002290  0E00               	movlw	0
  6433  002292  2221               	addwfc	___flpack@arg+1,f,c
  6434  002294  2222               	addwfc	___flpack@arg+2,f,c
  6435  002296  2223               	addwfc	___flpack@arg+3,f,c
  6436  002298  90D8               	bcf	status,0,c
  6437  00229A  3223               	rrcf	___flpack@arg+3,f,c
  6438  00229C  3222               	rrcf	___flpack@arg+2,f,c
  6439  00229E  3221               	rrcf	___flpack@arg+1,f,c
  6440  0022A0  3220               	rrcf	___flpack@arg,f,c
  6441  0022A2                     l645:
  6442  0022A2  0E00               	movlw	0
  6443  0022A4  1420               	andwf	___flpack@arg,w,c
  6444  0022A6  6E26               	movwf	??___flpack& (0+255),c
  6445  0022A8  0E00               	movlw	0
  6446  0022AA  1421               	andwf	___flpack@arg+1,w,c
  6447  0022AC  6E27               	movwf	(??___flpack+1)& (0+255),c
  6448  0022AE  0E00               	movlw	0
  6449  0022B0  1422               	andwf	___flpack@arg+2,w,c
  6450  0022B2  6E28               	movwf	(??___flpack+2)& (0+255),c
  6451  0022B4  0EFF               	movlw	255
  6452  0022B6  1423               	andwf	___flpack@arg+3,w,c
  6453  0022B8  6E29               	movwf	(??___flpack+3)& (0+255),c
  6454  0022BA  5026               	movf	??___flpack,w,c
  6455  0022BC  1027               	iorwf	??___flpack+1,w,c
  6456  0022BE  1028               	iorwf	??___flpack+2,w,c
  6457  0022C0  1029               	iorwf	??___flpack+3,w,c
  6458  0022C2  B4D8               	btfsc	status,2,c
  6459  0022C4  D009               	goto	l3056
  6460  0022C6  D7E1               	goto	l3048
  6461  0022C8  D007               	goto	l3056
  6462  0022CA                     l3054:
  6463  0022CA  0624               	decf	___flpack@exp,f,c
  6464  0022CC  90D8               	bcf	status,0,c
  6465  0022CE  3620               	rlcf	___flpack@arg,f,c
  6466  0022D0  3621               	rlcf	___flpack@arg+1,f,c
  6467  0022D2  3622               	rlcf	___flpack@arg+2,f,c
  6468  0022D4  3623               	rlcf	___flpack@arg+3,f,c
  6469  0022D6  D000               	goto	l3056
  6470  0022D8                     l3056:
  6471  0022D8  BE22               	btfsc	___flpack@arg+2,7,c
  6472  0022DA  D004               	goto	l652
  6473  0022DC  0E02               	movlw	2
  6474  0022DE  6024               	cpfslt	___flpack@exp,c
  6475  0022E0  D7F4               	goto	l3054
  6476  0022E2  D000               	goto	l652
  6477  0022E4                     l652:
  6478  0022E4  B024               	btfsc	___flpack@exp,0,c
  6479  0022E6  D008               	goto	l653
  6480  0022E8  0EFF               	movlw	255
  6481  0022EA  1620               	andwf	___flpack@arg,f,c
  6482  0022EC  0EFF               	movlw	255
  6483  0022EE  1621               	andwf	___flpack@arg+1,f,c
  6484  0022F0  0E7F               	movlw	127
  6485  0022F2  1622               	andwf	___flpack@arg+2,f,c
  6486  0022F4  0EFF               	movlw	255
  6487  0022F6  1623               	andwf	___flpack@arg+3,f,c
  6488  0022F8                     l653:
  6489  0022F8  90D8               	bcf	status,0,c
  6490  0022FA  3224               	rrcf	___flpack@exp,f,c
  6491  0022FC  C024  F026         	movff	___flpack@exp,??___flpack
  6492  002300  6A27               	clrf	(??___flpack+1)& (0+255),c
  6493  002302  6A28               	clrf	(??___flpack+2)& (0+255),c
  6494  002304  6A29               	clrf	(??___flpack+3)& (0+255),c
  6495  002306  C026  F029         	movff	??___flpack,??___flpack+3
  6496  00230A  6A28               	clrf	??___flpack+2,c
  6497  00230C  6A27               	clrf	??___flpack+1,c
  6498  00230E  6A26               	clrf	??___flpack,c
  6499  002310  5026               	movf	??___flpack,w,c
  6500  002312  1220               	iorwf	___flpack@arg,f,c
  6501  002314  5027               	movf	??___flpack+1,w,c
  6502  002316  1221               	iorwf	___flpack@arg+1,f,c
  6503  002318  5028               	movf	??___flpack+2,w,c
  6504  00231A  1222               	iorwf	___flpack@arg+2,f,c
  6505  00231C  5029               	movf	??___flpack+3,w,c
  6506  00231E  1223               	iorwf	___flpack@arg+3,f,c
  6507  002320  5025               	movf	___flpack@sign,w,c
  6508  002322  B4D8               	btfsc	status,2,c
  6509  002324  D002               	goto	l3066
  6510  002326  8E23               	bsf	___flpack@arg+3,7,c
  6511  002328  D000               	goto	l3066
  6512  00232A                     l3066:
  6513  00232A  C020  F020         	movff	___flpack@arg,?___flpack
  6514  00232E  C021  F021         	movff	___flpack@arg+1,?___flpack+1
  6515  002332  C022  F022         	movff	___flpack@arg+2,?___flpack+2
  6516  002336  C023  F023         	movff	___flpack@arg+3,?___flpack+3
  6517  00233A  0012               	return	
  6518  00233C  0012               	return		;funcret
  6519  00233E                     __end_of___flpack:
  6520                           	opt stack 0
  6521                           tblptru	equ	0xFF8
  6522                           tblptrh	equ	0xFF7
  6523                           tblptrl	equ	0xFF6
  6524                           tablat	equ	0xFF5
  6525                           prodh	equ	0xFF4
  6526                           prodl	equ	0xFF3
  6527                           postinc0	equ	0xFEE
  6528                           wreg	equ	0xFE8
  6529                           indf2	equ	0xFDF
  6530                           postinc2	equ	0xFDE
  6531                           postdec2	equ	0xFDD
  6532                           fsr2h	equ	0xFDA
  6533                           fsr2l	equ	0xFD9
  6534                           status	equ	0xFD8
  6535                           
  6536 ;; *************** function _Accel_ReadRegisters *****************
  6537 ;; Defined at:
  6538 ;;		line 66 in file "accel.c"
  6539 ;; Parameters:    Size  Location     Type
  6540 ;;  reg             1    wreg     unsigned char 
  6541 ;;  out             2   39[COMRAM] PTR unsigned char 
  6542 ;;		 -> Accel_Get@raw(6), 
  6543 ;;  length          2   41[COMRAM] int 
  6544 ;; Auto vars:     Size  Location     Type
  6545 ;;  reg             1   43[COMRAM] unsigned char 
  6546 ;; Return value:  Size  Location     Type
  6547 ;;		None               void
  6548 ;; Registers used:
  6549 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6550 ;; Tracked objects:
  6551 ;;		On entry : 0/0
  6552 ;;		On exit  : 0/0
  6553 ;;		Unchanged: 0/0
  6554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6555 ;;      Params:         4       0       0       0       0       0       0
  6556 ;;      Locals:         1       0       0       0       0       0       0
  6557 ;;      Temps:          0       0       0       0       0       0       0
  6558 ;;      Totals:         5       0       0       0       0       0       0
  6559 ;;Total ram usage:        5 bytes
  6560 ;; Hardware stack levels used:    1
  6561 ;; Hardware stack levels required when called:    5
  6562 ;; This function calls:
  6563 ;;		_EESequentialRead
  6564 ;; This function is called by:
  6565 ;;		_Accel_Get
  6566 ;; This function uses a non-reentrant model
  6567 ;;
  6568                           
  6569                           	psect	text32
  6570  002D06                     __ptext32:
  6571                           	opt stack 0
  6572  002D06                     _Accel_ReadRegisters:
  6573                           	opt stack 23
  6574                           
  6575                           ;incstack = 0
  6576                           ;Accel_ReadRegisters@reg stored from wreg
  6577  002D06  6E2C               	movwf	Accel_ReadRegisters@reg,c
  6578                           
  6579                           ;accel.c: 68: EESequentialRead(0x1D, reg, out, length);
  6580  002D08  C02C  F023         	movff	Accel_ReadRegisters@reg,EESequentialRead@address
  6581  002D0C  C028  F024         	movff	Accel_ReadRegisters@out,EESequentialRead@rdptr
  6582  002D10  C029  F025         	movff	Accel_ReadRegisters@out+1,EESequentialRead@rdptr+1
  6583  002D14  C02A  F026         	movff	Accel_ReadRegisters@length,EESequentialRead@length
  6584  002D18  0E1D               	movlw	29
  6585  002D1A  EC14  F012         	call	_EESequentialRead
  6586  002D1E  0012               	return		;funcret
  6587  002D20                     __end_of_Accel_ReadRegisters:
  6588                           	opt stack 0
  6589                           tblptru	equ	0xFF8
  6590                           tblptrh	equ	0xFF7
  6591                           tblptrl	equ	0xFF6
  6592                           tablat	equ	0xFF5
  6593                           prodh	equ	0xFF4
  6594                           prodl	equ	0xFF3
  6595                           postinc0	equ	0xFEE
  6596                           wreg	equ	0xFE8
  6597                           indf2	equ	0xFDF
  6598                           postinc2	equ	0xFDE
  6599                           postdec2	equ	0xFDD
  6600                           fsr2h	equ	0xFDA
  6601                           fsr2l	equ	0xFD9
  6602                           status	equ	0xFD8
  6603                           
  6604 ;; *************** function _Gyros_Init *****************
  6605 ;; Defined at:
  6606 ;;		line 3 in file "gyros.c"
  6607 ;; Parameters:    Size  Location     Type
  6608 ;;		None
  6609 ;; Auto vars:     Size  Location     Type
  6610 ;;		None
  6611 ;; Return value:  Size  Location     Type
  6612 ;;		None               void
  6613 ;; Registers used:
  6614 ;;		wreg, status,2
  6615 ;; Tracked objects:
  6616 ;;		On entry : 0/0
  6617 ;;		On exit  : 0/0
  6618 ;;		Unchanged: 0/0
  6619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6620 ;;      Params:         0       0       0       0       0       0       0
  6621 ;;      Locals:         0       0       0       0       0       0       0
  6622 ;;      Temps:          0       0       0       0       0       0       0
  6623 ;;      Totals:         0       0       0       0       0       0       0
  6624 ;;Total ram usage:        0 bytes
  6625 ;; Hardware stack levels used:    1
  6626 ;; Hardware stack levels required when called:    2
  6627 ;; This function calls:
  6628 ;;		Nothing
  6629 ;; This function is called by:
  6630 ;;		_main
  6631 ;; This function uses a non-reentrant model
  6632 ;;
  6633                           
  6634                           	psect	text33
  6635  002732                     __ptext33:
  6636                           	opt stack 0
  6637  002732                     _Gyros_Init:
  6638                           	opt stack 28
  6639                           
  6640                           ;gyros.c: 5: Gyros_LastAccel.x = 0;
  6641                           
  6642                           ;incstack = 0
  6643  002732  0E00               	movlw	0
  6644  002734  0100               	movlb	0	; () banked
  6645  002736  6FE2               	movwf	gyros@Gyros_LastAccel& (0+255),b
  6646  002738  0E00               	movlw	0
  6647  00273A  6FE3               	movwf	(gyros@Gyros_LastAccel+1)& (0+255),b
  6648  00273C  0E00               	movlw	0
  6649  00273E  6FE4               	movwf	(gyros@Gyros_LastAccel+2)& (0+255),b
  6650  002740  0E00               	movlw	0
  6651  002742  6FE5               	movwf	(gyros@Gyros_LastAccel+3)& (0+255),b
  6652                           
  6653                           ;gyros.c: 6: Gyros_LastAccel.y = 0;
  6654  002744  0E00               	movlw	0
  6655  002746  0100               	movlb	0	; () banked
  6656  002748  6FE6               	movwf	(gyros@Gyros_LastAccel+4)& (0+255),b
  6657  00274A  0E00               	movlw	0
  6658  00274C  6FE7               	movwf	(gyros@Gyros_LastAccel+5)& (0+255),b
  6659  00274E  0E00               	movlw	0
  6660  002750  6FE8               	movwf	(gyros@Gyros_LastAccel+6)& (0+255),b
  6661  002752  0E00               	movlw	0
  6662  002754  6FE9               	movwf	(gyros@Gyros_LastAccel+7)& (0+255),b
  6663                           
  6664                           ;gyros.c: 7: Gyros_LastAccel.z = 0;
  6665  002756  0E00               	movlw	0
  6666  002758  0100               	movlb	0	; () banked
  6667  00275A  6FEA               	movwf	(gyros@Gyros_LastAccel+8)& (0+255),b
  6668  00275C  0E00               	movlw	0
  6669  00275E  6FEB               	movwf	(gyros@Gyros_LastAccel+9)& (0+255),b
  6670  002760  0E00               	movlw	0
  6671  002762  6FEC               	movwf	(gyros@Gyros_LastAccel+10)& (0+255),b
  6672  002764  0E00               	movlw	0
  6673  002766  6FED               	movwf	(gyros@Gyros_LastAccel+11)& (0+255),b
  6674                           
  6675                           ;gyros.c: 9: Gyros_Vel.x = 0;
  6676  002768  0E00               	movlw	0
  6677  00276A  0100               	movlb	0	; () banked
  6678  00276C  6FEE               	movwf	gyros@Gyros_Vel& (0+255),b
  6679  00276E  0E00               	movlw	0
  6680  002770  6FEF               	movwf	(gyros@Gyros_Vel+1)& (0+255),b
  6681  002772  0E00               	movlw	0
  6682  002774  6FF0               	movwf	(gyros@Gyros_Vel+2)& (0+255),b
  6683  002776  0E00               	movlw	0
  6684  002778  6FF1               	movwf	(gyros@Gyros_Vel+3)& (0+255),b
  6685                           
  6686                           ;gyros.c: 10: Gyros_Vel.y = 0;
  6687  00277A  0E00               	movlw	0
  6688  00277C  0100               	movlb	0	; () banked
  6689  00277E  6FF2               	movwf	(gyros@Gyros_Vel+4)& (0+255),b
  6690  002780  0E00               	movlw	0
  6691  002782  6FF3               	movwf	(gyros@Gyros_Vel+5)& (0+255),b
  6692  002784  0E00               	movlw	0
  6693  002786  6FF4               	movwf	(gyros@Gyros_Vel+6)& (0+255),b
  6694  002788  0E00               	movlw	0
  6695  00278A  6FF5               	movwf	(gyros@Gyros_Vel+7)& (0+255),b
  6696                           
  6697                           ;gyros.c: 11: Gyros_Vel.z = 0;
  6698  00278C  0E00               	movlw	0
  6699  00278E  0100               	movlb	0	; () banked
  6700  002790  6FF6               	movwf	(gyros@Gyros_Vel+8)& (0+255),b
  6701  002792  0E00               	movlw	0
  6702  002794  6FF7               	movwf	(gyros@Gyros_Vel+9)& (0+255),b
  6703  002796  0E00               	movlw	0
  6704  002798  6FF8               	movwf	(gyros@Gyros_Vel+10)& (0+255),b
  6705  00279A  0E00               	movlw	0
  6706  00279C  6FF9               	movwf	(gyros@Gyros_Vel+11)& (0+255),b
  6707                           
  6708                           ;gyros.c: 13: Gyros_Angle.phi = 0;
  6709  00279E  0E00               	movlw	0
  6710  0027A0  0101               	movlb	1	; () banked
  6711  0027A2  6F54               	movwf	(gyros@Gyros_Angle+4)& (0+255),b
  6712  0027A4  0E00               	movlw	0
  6713  0027A6  6F55               	movwf	(gyros@Gyros_Angle+5)& (0+255),b
  6714  0027A8  0E00               	movlw	0
  6715  0027AA  6F56               	movwf	(gyros@Gyros_Angle+6)& (0+255),b
  6716  0027AC  0E00               	movlw	0
  6717  0027AE  6F57               	movwf	(gyros@Gyros_Angle+7)& (0+255),b
  6718                           
  6719                           ;gyros.c: 14: Gyros_Angle.theta = 0;
  6720  0027B0  0E00               	movlw	0
  6721  0027B2  0101               	movlb	1	; () banked
  6722  0027B4  6F50               	movwf	gyros@Gyros_Angle& (0+255),b
  6723  0027B6  0E00               	movlw	0
  6724  0027B8  6F51               	movwf	(gyros@Gyros_Angle+1)& (0+255),b
  6725  0027BA  0E00               	movlw	0
  6726  0027BC  6F52               	movwf	(gyros@Gyros_Angle+2)& (0+255),b
  6727  0027BE  0E00               	movlw	0
  6728  0027C0  6F53               	movwf	(gyros@Gyros_Angle+3)& (0+255),b
  6729                           
  6730                           ; BSR set to: 1
  6731  0027C2  0012               	return		;funcret
  6732  0027C4                     __end_of_Gyros_Init:
  6733                           	opt stack 0
  6734                           tblptru	equ	0xFF8
  6735                           tblptrh	equ	0xFF7
  6736                           tblptrl	equ	0xFF6
  6737                           tablat	equ	0xFF5
  6738                           prodh	equ	0xFF4
  6739                           prodl	equ	0xFF3
  6740                           postinc0	equ	0xFEE
  6741                           wreg	equ	0xFE8
  6742                           indf2	equ	0xFDF
  6743                           postinc2	equ	0xFDE
  6744                           postdec2	equ	0xFDD
  6745                           fsr2h	equ	0xFDA
  6746                           fsr2l	equ	0xFD9
  6747                           status	equ	0xFD8
  6748                           
  6749 ;; *************** function _Accel_Init *****************
  6750 ;; Defined at:
  6751 ;;		line 3 in file "accel.c"
  6752 ;; Parameters:    Size  Location     Type
  6753 ;;		None
  6754 ;; Auto vars:     Size  Location     Type
  6755 ;;  fsr             1   43[COMRAM] unsigned char 
  6756 ;;  name            1   42[COMRAM] unsigned char 
  6757 ;; Return value:  Size  Location     Type
  6758 ;;		None               void
  6759 ;; Registers used:
  6760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6761 ;; Tracked objects:
  6762 ;;		On entry : 0/0
  6763 ;;		On exit  : 0/0
  6764 ;;		Unchanged: 0/0
  6765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6766 ;;      Params:         0       0       0       0       0       0       0
  6767 ;;      Locals:         2       0       0       0       0       0       0
  6768 ;;      Temps:          0       0       0       0       0       0       0
  6769 ;;      Totals:         2       0       0       0       0       0       0
  6770 ;;Total ram usage:        2 bytes
  6771 ;; Hardware stack levels used:    1
  6772 ;; Hardware stack levels required when called:    7
  6773 ;; This function calls:
  6774 ;;		_Accel_Active
  6775 ;;		_Accel_ReadRegister
  6776 ;;		_Accel_StandBy
  6777 ;;		_Accel_WriteRegister
  6778 ;; This function is called by:
  6779 ;;		_main
  6780 ;; This function uses a non-reentrant model
  6781 ;;
  6782                           
  6783                           	psect	text34
  6784  002B6E                     __ptext34:
  6785                           	opt stack 0
  6786  002B6E                     _Accel_Init:
  6787                           	opt stack 23
  6788                           
  6789                           ;accel.c: 5: byte name = Accel_ReadRegister(0x0D);
  6790                           
  6791                           ; BSR set to: 1
  6792                           ;incstack = 0
  6793  002B6E  0E0D               	movlw	13
  6794  002B70  EC52  F016         	call	_Accel_ReadRegister
  6795  002B74  6E2B               	movwf	Accel_Init@name,c
  6796                           
  6797                           ;accel.c: 6: while (name != 0x2A);
  6798  002B76  D000               	goto	l2952
  6799  002B78                     l2952:
  6800  002B78  0E2A               	movlw	42
  6801  002B7A  182B               	xorwf	Accel_Init@name,w,c
  6802  002B7C  A4D8               	btfss	status,2,c
  6803  002B7E  D7FC               	goto	l2952
  6804                           
  6805                           ;accel.c: 8: Accel_StandBy();
  6806  002B80  EC90  F016         	call	_Accel_StandBy	;wreg free
  6807                           
  6808                           ;accel.c: 11: byte fsr = 2;
  6809  002B84  0E02               	movlw	2
  6810  002B86  6E2C               	movwf	Accel_Init@fsr,c
  6811                           
  6812                           ;accel.c: 12: if(fsr > 8) fsr = 8;
  6813  002B88  0E08               	movlw	8
  6814  002B8A  642C               	cpfsgt	Accel_Init@fsr,c
  6815  002B8C  D003               	goto	l2962
  6816  002B8E  0E08               	movlw	8
  6817  002B90  6E2C               	movwf	Accel_Init@fsr,c
  6818  002B92  D000               	goto	l2962
  6819  002B94                     l2962:
  6820                           
  6821                           ;accel.c: 13: fsr >>= 2;
  6822  002B94  90D8               	bcf	status,0,c
  6823  002B96  322C               	rrcf	Accel_Init@fsr,f,c
  6824  002B98  90D8               	bcf	status,0,c
  6825  002B9A  322C               	rrcf	Accel_Init@fsr,f,c
  6826                           
  6827                           ;accel.c: 14: Accel_WriteRegister(0x0E, fsr);
  6828  002B9C  C02C  F025         	movff	Accel_Init@fsr,Accel_WriteRegister@value
  6829  002BA0  0E0E               	movlw	14
  6830  002BA2  ECA6  F016         	call	_Accel_WriteRegister
  6831                           
  6832                           ;accel.c: 16: Accel_Active();
  6833  002BA6  EC9B  F016         	call	_Accel_Active	;wreg free
  6834  002BAA  0012               	return		;funcret
  6835  002BAC                     __end_of_Accel_Init:
  6836                           	opt stack 0
  6837                           tblptru	equ	0xFF8
  6838                           tblptrh	equ	0xFF7
  6839                           tblptrl	equ	0xFF6
  6840                           tablat	equ	0xFF5
  6841                           prodh	equ	0xFF4
  6842                           prodl	equ	0xFF3
  6843                           postinc0	equ	0xFEE
  6844                           wreg	equ	0xFE8
  6845                           indf2	equ	0xFDF
  6846                           postinc2	equ	0xFDE
  6847                           postdec2	equ	0xFDD
  6848                           fsr2h	equ	0xFDA
  6849                           fsr2l	equ	0xFD9
  6850                           status	equ	0xFD8
  6851                           
  6852 ;; *************** function _Accel_StandBy *****************
  6853 ;; Defined at:
  6854 ;;		line 19 in file "accel.c"
  6855 ;; Parameters:    Size  Location     Type
  6856 ;;		None
  6857 ;; Auto vars:     Size  Location     Type
  6858 ;;  c               1   41[COMRAM] unsigned char 
  6859 ;; Return value:  Size  Location     Type
  6860 ;;		None               void
  6861 ;; Registers used:
  6862 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6863 ;; Tracked objects:
  6864 ;;		On entry : 0/0
  6865 ;;		On exit  : 0/0
  6866 ;;		Unchanged: 0/0
  6867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6868 ;;      Params:         0       0       0       0       0       0       0
  6869 ;;      Locals:         1       0       0       0       0       0       0
  6870 ;;      Temps:          0       0       0       0       0       0       0
  6871 ;;      Totals:         1       0       0       0       0       0       0
  6872 ;;Total ram usage:        1 bytes
  6873 ;; Hardware stack levels used:    1
  6874 ;; Hardware stack levels required when called:    6
  6875 ;; This function calls:
  6876 ;;		_Accel_ReadRegister
  6877 ;;		_Accel_WriteRegister
  6878 ;; This function is called by:
  6879 ;;		_Accel_Init
  6880 ;; This function uses a non-reentrant model
  6881 ;;
  6882                           
  6883                           	psect	text35
  6884  002D20                     __ptext35:
  6885                           	opt stack 0
  6886  002D20                     _Accel_StandBy:
  6887                           	opt stack 23
  6888                           
  6889                           ;accel.c: 21: byte c = Accel_ReadRegister(0x2A);
  6890                           
  6891                           ;incstack = 0
  6892  002D20  0E2A               	movlw	42
  6893  002D22  EC52  F016         	call	_Accel_ReadRegister
  6894  002D26  6E2A               	movwf	Accel_StandBy@c,c
  6895                           
  6896                           ;accel.c: 22: Accel_WriteRegister(0x2A, c & 0xFE);
  6897  002D28  502A               	movf	Accel_StandBy@c,w,c
  6898  002D2A  0BFE               	andlw	254
  6899  002D2C  6E25               	movwf	Accel_WriteRegister@value,c
  6900  002D2E  0E2A               	movlw	42
  6901  002D30  ECA6  F016         	call	_Accel_WriteRegister
  6902  002D34  0012               	return		;funcret
  6903  002D36                     __end_of_Accel_StandBy:
  6904                           	opt stack 0
  6905                           tblptru	equ	0xFF8
  6906                           tblptrh	equ	0xFF7
  6907                           tblptrl	equ	0xFF6
  6908                           tablat	equ	0xFF5
  6909                           prodh	equ	0xFF4
  6910                           prodl	equ	0xFF3
  6911                           postinc0	equ	0xFEE
  6912                           wreg	equ	0xFE8
  6913                           indf2	equ	0xFDF
  6914                           postinc2	equ	0xFDE
  6915                           postdec2	equ	0xFDD
  6916                           fsr2h	equ	0xFDA
  6917                           fsr2l	equ	0xFD9
  6918                           status	equ	0xFD8
  6919                           
  6920 ;; *************** function _Accel_Active *****************
  6921 ;; Defined at:
  6922 ;;		line 25 in file "accel.c"
  6923 ;; Parameters:    Size  Location     Type
  6924 ;;		None
  6925 ;; Auto vars:     Size  Location     Type
  6926 ;;  c               1   41[COMRAM] unsigned char 
  6927 ;; Return value:  Size  Location     Type
  6928 ;;		None               void
  6929 ;; Registers used:
  6930 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6931 ;; Tracked objects:
  6932 ;;		On entry : 0/0
  6933 ;;		On exit  : 0/0
  6934 ;;		Unchanged: 0/0
  6935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6936 ;;      Params:         0       0       0       0       0       0       0
  6937 ;;      Locals:         1       0       0       0       0       0       0
  6938 ;;      Temps:          0       0       0       0       0       0       0
  6939 ;;      Totals:         1       0       0       0       0       0       0
  6940 ;;Total ram usage:        1 bytes
  6941 ;; Hardware stack levels used:    1
  6942 ;; Hardware stack levels required when called:    6
  6943 ;; This function calls:
  6944 ;;		_Accel_ReadRegister
  6945 ;;		_Accel_WriteRegister
  6946 ;; This function is called by:
  6947 ;;		_Accel_Init
  6948 ;; This function uses a non-reentrant model
  6949 ;;
  6950                           
  6951                           	psect	text36
  6952  002D36                     __ptext36:
  6953                           	opt stack 0
  6954  002D36                     _Accel_Active:
  6955                           	opt stack 23
  6956                           
  6957                           ;accel.c: 27: byte c = Accel_ReadRegister(0x2A);
  6958                           
  6959                           ;incstack = 0
  6960  002D36  0E2A               	movlw	42
  6961  002D38  EC52  F016         	call	_Accel_ReadRegister
  6962  002D3C  6E2A               	movwf	Accel_Active@c,c
  6963                           
  6964                           ;accel.c: 28: Accel_WriteRegister(0x2A, c | 0x01);
  6965  002D3E  502A               	movf	Accel_Active@c,w,c
  6966  002D40  0901               	iorlw	1
  6967  002D42  6E25               	movwf	Accel_WriteRegister@value,c
  6968  002D44  0E2A               	movlw	42
  6969  002D46  ECA6  F016         	call	_Accel_WriteRegister
  6970  002D4A  0012               	return		;funcret
  6971  002D4C                     __end_of_Accel_Active:
  6972                           	opt stack 0
  6973                           tblptru	equ	0xFF8
  6974                           tblptrh	equ	0xFF7
  6975                           tblptrl	equ	0xFF6
  6976                           tablat	equ	0xFF5
  6977                           prodh	equ	0xFF4
  6978                           prodl	equ	0xFF3
  6979                           postinc0	equ	0xFEE
  6980                           wreg	equ	0xFE8
  6981                           indf2	equ	0xFDF
  6982                           postinc2	equ	0xFDE
  6983                           postdec2	equ	0xFDD
  6984                           fsr2h	equ	0xFDA
  6985                           fsr2l	equ	0xFD9
  6986                           status	equ	0xFD8
  6987                           
  6988 ;; *************** function _Accel_WriteRegister *****************
  6989 ;; Defined at:
  6990 ;;		line 54 in file "accel.c"
  6991 ;; Parameters:    Size  Location     Type
  6992 ;;  reg             1    wreg     unsigned char 
  6993 ;;  value           1   36[COMRAM] unsigned char 
  6994 ;; Auto vars:     Size  Location     Type
  6995 ;;  reg             1   37[COMRAM] unsigned char 
  6996 ;; Return value:  Size  Location     Type
  6997 ;;		None               void
  6998 ;; Registers used:
  6999 ;;		wreg, status,2, status,0, cstack
  7000 ;; Tracked objects:
  7001 ;;		On entry : 0/0
  7002 ;;		On exit  : 0/0
  7003 ;;		Unchanged: 0/0
  7004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7005 ;;      Params:         1       0       0       0       0       0       0
  7006 ;;      Locals:         1       0       0       0       0       0       0
  7007 ;;      Temps:          0       0       0       0       0       0       0
  7008 ;;      Totals:         2       0       0       0       0       0       0
  7009 ;;Total ram usage:        2 bytes
  7010 ;; Hardware stack levels used:    1
  7011 ;; Hardware stack levels required when called:    5
  7012 ;; This function calls:
  7013 ;;		_EEByteWrite
  7014 ;; This function is called by:
  7015 ;;		_Accel_Init
  7016 ;;		_Accel_StandBy
  7017 ;;		_Accel_Active
  7018 ;; This function uses a non-reentrant model
  7019 ;;
  7020                           
  7021                           	psect	text37
  7022  002D4C                     __ptext37:
  7023                           	opt stack 0
  7024  002D4C                     _Accel_WriteRegister:
  7025                           	opt stack 24
  7026                           
  7027                           ;incstack = 0
  7028                           ;Accel_WriteRegister@reg stored from wreg
  7029  002D4C  6E26               	movwf	Accel_WriteRegister@reg,c
  7030                           
  7031                           ;accel.c: 56: EEByteWrite(0x1D, reg, value);
  7032  002D4E  C026  F022         	movff	Accel_WriteRegister@reg,EEByteWrite@address
  7033  002D52  C025  F023         	movff	Accel_WriteRegister@value,EEByteWrite@data
  7034  002D56  0E1D               	movlw	29
  7035  002D58  ECFA  F012         	call	_EEByteWrite
  7036  002D5C  0012               	return		;funcret
  7037  002D5E                     __end_of_Accel_WriteRegister:
  7038                           	opt stack 0
  7039                           tblptru	equ	0xFF8
  7040                           tblptrh	equ	0xFF7
  7041                           tblptrl	equ	0xFF6
  7042                           tablat	equ	0xFF5
  7043                           prodh	equ	0xFF4
  7044                           prodl	equ	0xFF3
  7045                           postinc0	equ	0xFEE
  7046                           wreg	equ	0xFE8
  7047                           indf2	equ	0xFDF
  7048                           postinc2	equ	0xFDE
  7049                           postdec2	equ	0xFDD
  7050                           fsr2h	equ	0xFDA
  7051                           fsr2l	equ	0xFD9
  7052                           status	equ	0xFD8
  7053                           
  7054 ;; *************** function _EEByteWrite *****************
  7055 ;; Defined at:
  7056 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_eebw.c"
  7057 ;; Parameters:    Size  Location     Type
  7058 ;;  control         1    wreg     unsigned char 
  7059 ;;  address         1   33[COMRAM] unsigned char 
  7060 ;;  data            1   34[COMRAM] unsigned char 
  7061 ;; Auto vars:     Size  Location     Type
  7062 ;;  control         1   35[COMRAM] unsigned char 
  7063 ;; Return value:  Size  Location     Type
  7064 ;;                  1    wreg      char 
  7065 ;; Registers used:
  7066 ;;		wreg, status,2, status,0, cstack
  7067 ;; Tracked objects:
  7068 ;;		On entry : 0/0
  7069 ;;		On exit  : 0/0
  7070 ;;		Unchanged: 0/0
  7071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7072 ;;      Params:         2       0       0       0       0       0       0
  7073 ;;      Locals:         1       0       0       0       0       0       0
  7074 ;;      Temps:          0       0       0       0       0       0       0
  7075 ;;      Totals:         3       0       0       0       0       0       0
  7076 ;;Total ram usage:        3 bytes
  7077 ;; Hardware stack levels used:    1
  7078 ;; Hardware stack levels required when called:    4
  7079 ;; This function calls:
  7080 ;;		_IdleI2C
  7081 ;;		_WriteI2C
  7082 ;; This function is called by:
  7083 ;;		_Accel_WriteRegister
  7084 ;; This function uses a non-reentrant model
  7085 ;;
  7086                           
  7087                           	psect	text38
  7088  0025F4                     __ptext38:
  7089                           	opt stack 0
  7090  0025F4                     _EEByteWrite:
  7091                           	opt stack 24
  7092                           
  7093                           ;incstack = 0
  7094                           ;EEByteWrite@control stored from wreg
  7095  0025F4  6E24               	movwf	EEByteWrite@control,c
  7096  0025F6  ECAF  F016         	call	_IdleI2C	;wreg free
  7097  0025FA  80C5               	bsf	4037,0,c	;volatile
  7098  0025FC  D000               	goto	l175
  7099  0025FE                     l175:
  7100  0025FE  A0C5               	btfss	4037,0,c	;volatile
  7101  002600  D002               	goto	l178
  7102  002602  D7FD               	goto	l175
  7103  002604  D000               	goto	l178
  7104  002606                     l178:
  7105  002606  B0C5               	btfsc	4037,0,c	;volatile
  7106  002608  D7FE               	goto	l178
  7107  00260A  B6A1               	btfsc	4001,3,c	;volatile
  7108  00260C  0012               	return	
  7109  00260E  D002               	goto	l2480
  7110                           
  7111                           ;	Return value of _EEByteWrite is never used
  7112  002610  0012               	return	
  7113  002612  D036               	goto	l183
  7114  002614                     l2480:
  7115  002614  5024               	movf	EEByteWrite@control,w,c
  7116  002616  ECBD  F014         	call	_WriteI2C
  7117  00261A  0900               	iorlw	0
  7118  00261C  B4D8               	btfsc	status,2,c
  7119  00261E  D006               	goto	l184
  7120  002620  84C5               	bsf	4037,2,c	;volatile
  7121  002622  D000               	goto	l185
  7122  002624                     l185:
  7123  002624  A4C5               	btfss	4037,2,c	;volatile
  7124  002626  0012               	return	
  7125  002628  D7FD               	goto	l185
  7126                           
  7127                           ;	Return value of _EEByteWrite is never used
  7128  00262A  0012               	return	
  7129  00262C                     l184:
  7130  00262C  BCC5               	btfsc	4037,6,c	;volatile
  7131  00262E  D022               	goto	l188
  7132  002630  5022               	movf	EEByteWrite@address,w,c
  7133  002632  ECBD  F014         	call	_WriteI2C
  7134  002636  0900               	iorlw	0
  7135  002638  B4D8               	btfsc	status,2,c
  7136  00263A  D006               	goto	l189
  7137  00263C  84C5               	bsf	4037,2,c	;volatile
  7138  00263E  D000               	goto	l190
  7139  002640                     l190:
  7140  002640  A4C5               	btfss	4037,2,c	;volatile
  7141  002642  0012               	return	
  7142  002644  D7FD               	goto	l190
  7143                           
  7144                           ;	Return value of _EEByteWrite is never used
  7145  002646  0012               	return	
  7146  002648                     l189:
  7147  002648  BCC5               	btfsc	4037,6,c	;volatile
  7148  00264A  D00D               	goto	l193
  7149  00264C  5023               	movf	EEByteWrite@data,w,c
  7150  00264E  ECBD  F014         	call	_WriteI2C
  7151  002652  0900               	iorlw	0
  7152  002654  B4D8               	btfsc	status,2,c
  7153  002656  D014               	goto	l183
  7154  002658  84C5               	bsf	4037,2,c	;volatile
  7155  00265A  D000               	goto	l195
  7156  00265C                     l195:
  7157  00265C  A4C5               	btfss	4037,2,c	;volatile
  7158  00265E  0012               	return	
  7159  002660  D7FD               	goto	l195
  7160                           
  7161                           ;	Return value of _EEByteWrite is never used
  7162  002662  0012               	return	
  7163  002664  D00D               	goto	l183
  7164  002666                     l193:
  7165  002666  84C5               	bsf	4037,2,c	;volatile
  7166  002668  D000               	goto	l199
  7167  00266A                     l199:
  7168  00266A  A4C5               	btfss	4037,2,c	;volatile
  7169  00266C  0012               	return	
  7170  00266E  D7FD               	goto	l199
  7171                           
  7172                           ;	Return value of _EEByteWrite is never used
  7173  002670  0012               	return	
  7174  002672  D006               	goto	l183
  7175  002674                     l188:
  7176  002674  84C5               	bsf	4037,2,c	;volatile
  7177  002676  D000               	goto	l203
  7178  002678                     l203:
  7179  002678  A4C5               	btfss	4037,2,c	;volatile
  7180  00267A  0012               	return	
  7181  00267C  D7FD               	goto	l203
  7182                           
  7183                           ;	Return value of _EEByteWrite is never used
  7184  00267E  0012               	return	
  7185  002680                     l183:
  7186  002680  84C5               	bsf	4037,2,c	;volatile
  7187  002682  D000               	goto	l206
  7188  002684                     l206:
  7189  002684  A4C5               	btfss	4037,2,c	;volatile
  7190  002686  D002               	goto	l209
  7191  002688  D7FD               	goto	l206
  7192  00268A  D000               	goto	l209
  7193  00268C                     l209:
  7194  00268C  B4C5               	btfsc	4037,2,c	;volatile
  7195  00268E  D7FE               	goto	l209
  7196  002690  50A1               	movf	4001,w,c	;volatile
  7197                           
  7198                           ;	Return value of _EEByteWrite is never used
  7199  002692  0012               	return	
  7200                           
  7201                           ;	Return value of _EEByteWrite is never used
  7202  002694  0012               	return		;funcret
  7203  002696                     __end_of_EEByteWrite:
  7204                           	opt stack 0
  7205                           tblptru	equ	0xFF8
  7206                           tblptrh	equ	0xFF7
  7207                           tblptrl	equ	0xFF6
  7208                           tablat	equ	0xFF5
  7209                           prodh	equ	0xFF4
  7210                           prodl	equ	0xFF3
  7211                           postinc0	equ	0xFEE
  7212                           wreg	equ	0xFE8
  7213                           indf2	equ	0xFDF
  7214                           postinc2	equ	0xFDE
  7215                           postdec2	equ	0xFDD
  7216                           fsr2h	equ	0xFDA
  7217                           fsr2l	equ	0xFD9
  7218                           status	equ	0xFD8
  7219                           
  7220 ;; *************** function _Accel_ReadRegister *****************
  7221 ;; Defined at:
  7222 ;;		line 59 in file "accel.c"
  7223 ;; Parameters:    Size  Location     Type
  7224 ;;  reg             1    wreg     unsigned char 
  7225 ;; Auto vars:     Size  Location     Type
  7226 ;;  reg             1   39[COMRAM] unsigned char 
  7227 ;;  out             1   40[COMRAM] unsigned char 
  7228 ;; Return value:  Size  Location     Type
  7229 ;;                  1    wreg      unsigned char 
  7230 ;; Registers used:
  7231 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7232 ;; Tracked objects:
  7233 ;;		On entry : 0/0
  7234 ;;		On exit  : 0/0
  7235 ;;		Unchanged: 0/0
  7236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7237 ;;      Params:         0       0       0       0       0       0       0
  7238 ;;      Locals:         2       0       0       0       0       0       0
  7239 ;;      Temps:          0       0       0       0       0       0       0
  7240 ;;      Totals:         2       0       0       0       0       0       0
  7241 ;;Total ram usage:        2 bytes
  7242 ;; Hardware stack levels used:    1
  7243 ;; Hardware stack levels required when called:    5
  7244 ;; This function calls:
  7245 ;;		_EESequentialRead
  7246 ;; This function is called by:
  7247 ;;		_Accel_Init
  7248 ;;		_Accel_StandBy
  7249 ;;		_Accel_Active
  7250 ;; This function uses a non-reentrant model
  7251 ;;
  7252                           
  7253                           	psect	text39
  7254  002CA4                     __ptext39:
  7255                           	opt stack 0
  7256  002CA4                     _Accel_ReadRegister:
  7257                           	opt stack 23
  7258                           
  7259                           ;incstack = 0
  7260                           ;Accel_ReadRegister@reg stored from wreg
  7261  002CA4  6E28               	movwf	Accel_ReadRegister@reg,c
  7262                           
  7263                           ;accel.c: 61: byte out = 0;
  7264  002CA6  0E00               	movlw	0
  7265  002CA8  6E29               	movwf	Accel_ReadRegister@out,c
  7266                           
  7267                           ;accel.c: 62: EESequentialRead(0x1D, reg, &out, 1);
  7268  002CAA  C028  F023         	movff	Accel_ReadRegister@reg,EESequentialRead@address
  7269  002CAE  0E29               	movlw	low Accel_ReadRegister@out
  7270  002CB0  6E24               	movwf	EESequentialRead@rdptr,c
  7271  002CB2  0E00               	movlw	high Accel_ReadRegister@out
  7272  002CB4  6E25               	movwf	EESequentialRead@rdptr+1,c
  7273  002CB6  0E01               	movlw	1
  7274  002CB8  6E26               	movwf	EESequentialRead@length,c
  7275  002CBA  0E1D               	movlw	29
  7276  002CBC  EC14  F012         	call	_EESequentialRead
  7277                           
  7278                           ;accel.c: 63: return out;
  7279  002CC0  5029               	movf	Accel_ReadRegister@out,w,c
  7280  002CC2  0012               	return	
  7281  002CC4  0012               	return		;funcret
  7282  002CC6                     __end_of_Accel_ReadRegister:
  7283                           	opt stack 0
  7284                           tblptru	equ	0xFF8
  7285                           tblptrh	equ	0xFF7
  7286                           tblptrl	equ	0xFF6
  7287                           tablat	equ	0xFF5
  7288                           prodh	equ	0xFF4
  7289                           prodl	equ	0xFF3
  7290                           postinc0	equ	0xFEE
  7291                           wreg	equ	0xFE8
  7292                           indf2	equ	0xFDF
  7293                           postinc2	equ	0xFDE
  7294                           postdec2	equ	0xFDD
  7295                           fsr2h	equ	0xFDA
  7296                           fsr2l	equ	0xFD9
  7297                           status	equ	0xFD8
  7298                           
  7299 ;; *************** function _EESequentialRead *****************
  7300 ;; Defined at:
  7301 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_eesr.c"
  7302 ;; Parameters:    Size  Location     Type
  7303 ;;  control         1    wreg     unsigned char 
  7304 ;;  address         1   34[COMRAM] unsigned char 
  7305 ;;  rdptr           2   35[COMRAM] PTR unsigned char 
  7306 ;;		 -> Accel_ReadRegister@out(1), Accel_Get@raw(6), 
  7307 ;;  length          1   37[COMRAM] unsigned char 
  7308 ;; Auto vars:     Size  Location     Type
  7309 ;;  control         1   38[COMRAM] unsigned char 
  7310 ;; Return value:  Size  Location     Type
  7311 ;;                  1    wreg      char 
  7312 ;; Registers used:
  7313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7314 ;; Tracked objects:
  7315 ;;		On entry : 0/0
  7316 ;;		On exit  : 0/0
  7317 ;;		Unchanged: 0/0
  7318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7319 ;;      Params:         4       0       0       0       0       0       0
  7320 ;;      Locals:         1       0       0       0       0       0       0
  7321 ;;      Temps:          0       0       0       0       0       0       0
  7322 ;;      Totals:         5       0       0       0       0       0       0
  7323 ;;Total ram usage:        5 bytes
  7324 ;; Hardware stack levels used:    1
  7325 ;; Hardware stack levels required when called:    4
  7326 ;; This function calls:
  7327 ;;		_IdleI2C
  7328 ;;		_WriteI2C
  7329 ;;		_getsI2C
  7330 ;; This function is called by:
  7331 ;;		_Accel_ReadRegister
  7332 ;;		_Accel_ReadRegisters
  7333 ;; This function uses a non-reentrant model
  7334 ;;
  7335                           
  7336                           	psect	text40
  7337  002428                     __ptext40:
  7338                           	opt stack 0
  7339  002428                     _EESequentialRead:
  7340                           	opt stack 23
  7341                           
  7342                           ;incstack = 0
  7343                           ;EESequentialRead@control stored from wreg
  7344  002428  6E27               	movwf	EESequentialRead@control,c
  7345  00242A  ECAF  F016         	call	_IdleI2C	;wreg free
  7346  00242E  80C5               	bsf	4037,0,c	;volatile
  7347  002430  D000               	goto	l225
  7348  002432                     l225:
  7349  002432  A0C5               	btfss	4037,0,c	;volatile
  7350  002434  D002               	goto	l228
  7351  002436  D7FD               	goto	l225
  7352  002438  D000               	goto	l228
  7353  00243A                     l228:
  7354  00243A  B0C5               	btfsc	4037,0,c	;volatile
  7355  00243C  D7FE               	goto	l228
  7356  00243E  B6A1               	btfsc	4001,3,c	;volatile
  7357  002440  0012               	return	
  7358  002442  D001               	goto	l2502
  7359                           
  7360                           ;	Return value of _EESequentialRead is never used
  7361  002444  0012               	return	
  7362  002446                     l2502:
  7363  002446  5027               	movf	EESequentialRead@control,w,c
  7364  002448  ECBD  F014         	call	_WriteI2C
  7365  00244C  0900               	iorlw	0
  7366  00244E  B4D8               	btfsc	status,2,c
  7367  002450  D006               	goto	l234
  7368  002452  84C5               	bsf	4037,2,c	;volatile
  7369  002454  D000               	goto	l235
  7370  002456                     l235:
  7371  002456  A4C5               	btfss	4037,2,c	;volatile
  7372  002458  0012               	return	
  7373  00245A  D7FD               	goto	l235
  7374                           
  7375                           ;	Return value of _EESequentialRead is never used
  7376  00245C  0012               	return	
  7377  00245E                     l234:
  7378  00245E  BCC5               	btfsc	4037,6,c	;volatile
  7379  002460  D050               	goto	l238
  7380  002462  5023               	movf	EESequentialRead@address,w,c
  7381  002464  ECBD  F014         	call	_WriteI2C
  7382  002468  0900               	iorlw	0
  7383  00246A  B4D8               	btfsc	status,2,c
  7384  00246C  D006               	goto	l239
  7385  00246E  84C5               	bsf	4037,2,c	;volatile
  7386  002470  D000               	goto	l240
  7387  002472                     l240:
  7388  002472  A4C5               	btfss	4037,2,c	;volatile
  7389  002474  0012               	return	
  7390  002476  D7FD               	goto	l240
  7391                           
  7392                           ;	Return value of _EESequentialRead is never used
  7393  002478  0012               	return	
  7394  00247A                     l239:
  7395  00247A  BCC5               	btfsc	4037,6,c	;volatile
  7396  00247C  D03C               	goto	l243
  7397  00247E  82C5               	bsf	4037,1,c	;volatile
  7398  002480  D000               	goto	l244
  7399  002482                     l244:
  7400  002482  A2C5               	btfss	4037,1,c	;volatile
  7401  002484  D002               	goto	l247
  7402  002486  D7FD               	goto	l244
  7403  002488  D000               	goto	l247
  7404  00248A                     l247:
  7405  00248A  B2C5               	btfsc	4037,1,c	;volatile
  7406  00248C  D7FE               	goto	l247
  7407  00248E  2827               	incf	EESequentialRead@control,w,c
  7408  002490  ECBD  F014         	call	_WriteI2C
  7409  002494  0900               	iorlw	0
  7410  002496  B4D8               	btfsc	status,2,c
  7411  002498  D006               	goto	l250
  7412  00249A  84C5               	bsf	4037,2,c	;volatile
  7413  00249C  D000               	goto	l251
  7414  00249E                     l251:
  7415  00249E  A4C5               	btfss	4037,2,c	;volatile
  7416  0024A0  0012               	return	
  7417  0024A2  D7FD               	goto	l251
  7418                           
  7419                           ;	Return value of _EESequentialRead is never used
  7420  0024A4  0012               	return	
  7421  0024A6                     l250:
  7422  0024A6  BCC5               	btfsc	4037,6,c	;volatile
  7423  0024A8  D020               	goto	l254
  7424  0024AA  C024  F020         	movff	EESequentialRead@rdptr,getsI2C@rdptr
  7425  0024AE  C025  F021         	movff	EESequentialRead@rdptr+1,getsI2C@rdptr+1
  7426  0024B2  C026  F022         	movff	EESequentialRead@length,getsI2C@length
  7427  0024B6  EC1F  F015         	call	_getsI2C	;wreg free
  7428  0024BA  0900               	iorlw	0
  7429  0024BC  A4D8               	btfss	status,2,c
  7430  0024BE  0012               	return	
  7431  0024C0  D001               	goto	l255
  7432                           
  7433                           ;	Return value of _EESequentialRead is never used
  7434  0024C2  0012               	return	
  7435  0024C4                     l255:
  7436  0024C4  8AC5               	bsf	4037,5,c	;volatile
  7437  0024C6  88C5               	bsf	4037,4,c	;volatile
  7438  0024C8  D000               	goto	l256
  7439  0024CA                     l256:
  7440  0024CA  A8C5               	btfss	4037,4,c	;volatile
  7441  0024CC  D002               	goto	l259
  7442  0024CE  D7FD               	goto	l256
  7443  0024D0  D000               	goto	l259
  7444  0024D2                     l259:
  7445  0024D2  B8C5               	btfsc	4037,4,c	;volatile
  7446  0024D4  D7FE               	goto	l259
  7447  0024D6  84C5               	bsf	4037,2,c	;volatile
  7448  0024D8  D000               	goto	l262
  7449  0024DA                     l262:
  7450  0024DA  A4C5               	btfss	4037,2,c	;volatile
  7451  0024DC  D002               	goto	l265
  7452  0024DE  D7FD               	goto	l262
  7453  0024E0  D000               	goto	l265
  7454  0024E2                     l265:
  7455  0024E2  B4C5               	btfsc	4037,2,c	;volatile
  7456  0024E4  D7FE               	goto	l265
  7457  0024E6  50A1               	movf	4001,w,c	;volatile
  7458                           
  7459                           ;	Return value of _EESequentialRead is never used
  7460  0024E8  0012               	return	
  7461  0024EA                     l254:
  7462  0024EA  84C5               	bsf	4037,2,c	;volatile
  7463  0024EC  D000               	goto	l270
  7464  0024EE                     l270:
  7465  0024EE  A4C5               	btfss	4037,2,c	;volatile
  7466  0024F0  0012               	return	
  7467  0024F2  D7FD               	goto	l270
  7468                           
  7469                           ;	Return value of _EESequentialRead is never used
  7470  0024F4  0012               	return	
  7471  0024F6                     l243:
  7472  0024F6  84C5               	bsf	4037,2,c	;volatile
  7473  0024F8  D000               	goto	l274
  7474  0024FA                     l274:
  7475  0024FA  A4C5               	btfss	4037,2,c	;volatile
  7476  0024FC  0012               	return	
  7477  0024FE  D7FD               	goto	l274
  7478                           
  7479                           ;	Return value of _EESequentialRead is never used
  7480  002500  0012               	return	
  7481  002502                     l238:
  7482  002502  84C5               	bsf	4037,2,c	;volatile
  7483  002504  D000               	goto	l278
  7484  002506                     l278:
  7485  002506  A4C5               	btfss	4037,2,c	;volatile
  7486  002508  0012               	return	
  7487  00250A  D7FD               	goto	l278
  7488                           
  7489                           ;	Return value of _EESequentialRead is never used
  7490  00250C  0012               	return	
  7491                           
  7492                           ;	Return value of _EESequentialRead is never used
  7493  00250E  0012               	return		;funcret
  7494  002510                     __end_of_EESequentialRead:
  7495                           	opt stack 0
  7496                           tblptru	equ	0xFF8
  7497                           tblptrh	equ	0xFF7
  7498                           tblptrl	equ	0xFF6
  7499                           tablat	equ	0xFF5
  7500                           prodh	equ	0xFF4
  7501                           prodl	equ	0xFF3
  7502                           postinc0	equ	0xFEE
  7503                           wreg	equ	0xFE8
  7504                           indf2	equ	0xFDF
  7505                           postinc2	equ	0xFDE
  7506                           postdec2	equ	0xFDD
  7507                           fsr2h	equ	0xFDA
  7508                           fsr2l	equ	0xFD9
  7509                           status	equ	0xFD8
  7510                           
  7511 ;; *************** function _getsI2C *****************
  7512 ;; Defined at:
  7513 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_gets.c"
  7514 ;; Parameters:    Size  Location     Type
  7515 ;;  rdptr           2   31[COMRAM] PTR unsigned char 
  7516 ;;		 -> Accel_ReadRegister@out(1), Accel_Get@raw(6), 
  7517 ;;  length          1   33[COMRAM] unsigned char 
  7518 ;; Auto vars:     Size  Location     Type
  7519 ;;		None
  7520 ;; Return value:  Size  Location     Type
  7521 ;;                  1    wreg      char 
  7522 ;; Registers used:
  7523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7524 ;; Tracked objects:
  7525 ;;		On entry : 0/0
  7526 ;;		On exit  : 0/0
  7527 ;;		Unchanged: 0/0
  7528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7529 ;;      Params:         3       0       0       0       0       0       0
  7530 ;;      Locals:         0       0       0       0       0       0       0
  7531 ;;      Temps:          0       0       0       0       0       0       0
  7532 ;;      Totals:         3       0       0       0       0       0       0
  7533 ;;Total ram usage:        3 bytes
  7534 ;; Hardware stack levels used:    1
  7535 ;; Hardware stack levels required when called:    3
  7536 ;; This function calls:
  7537 ;;		_ReadI2C
  7538 ;; This function is called by:
  7539 ;;		_EESequentialRead
  7540 ;; This function uses a non-reentrant model
  7541 ;;
  7542                           
  7543                           	psect	text41
  7544  002A3E                     __ptext41:
  7545                           	opt stack 0
  7546  002A3E                     _getsI2C:
  7547                           	opt stack 23
  7548                           
  7549                           ;incstack = 0
  7550  002A3E  D024               	goto	l2316
  7551  002A40                     l2300:
  7552  002A40  EC63  F016         	call	_ReadI2C	;wreg free
  7553  002A44  C020  FFD9         	movff	getsI2C@rdptr,fsr2l
  7554  002A48  C021  FFDA         	movff	getsI2C@rdptr+1,fsr2h
  7555  002A4C  6EDF               	movwf	indf2,c
  7556  002A4E  4A20               	infsnz	getsI2C@rdptr,f,c
  7557  002A50  2A21               	incf	getsI2C@rdptr+1,f,c
  7558  002A52  D000               	goto	l293
  7559  002A54                     l293:
  7560  002A54  B6C5               	btfsc	4037,3,c	;volatile
  7561  002A56  D7FE               	goto	l293
  7562  002A58  A6A1               	btfss	4001,3,c	;volatile
  7563  002A5A  D002               	goto	l2308
  7564  002A5C  0EFF               	movlw	255
  7565  002A5E  0012               	return	
  7566  002A60                     l2308:
  7567  002A60  50C6               	movf	4038,w,c	;volatile
  7568  002A62  0B0F               	andlw	15
  7569  002A64  0A08               	xorlw	8
  7570  002A66  B4D8               	btfsc	status,2,c
  7571  002A68  D005               	goto	l2312
  7572  002A6A  50C6               	movf	4038,w,c	;volatile
  7573  002A6C  0B0F               	andlw	15
  7574  002A6E  0A0B               	xorlw	11
  7575  002A70  A4D8               	btfss	status,2,c
  7576  002A72  D00A               	goto	l2316
  7577  002A74                     l2312:
  7578  002A74  5022               	movf	getsI2C@length,w,c
  7579  002A76  B4D8               	btfsc	status,2,c
  7580  002A78  D007               	goto	l2316
  7581  002A7A  9AC5               	bcf	4037,5,c	;volatile
  7582  002A7C  88C5               	bsf	4037,4,c	;volatile
  7583  002A7E  D000               	goto	l302
  7584  002A80                     l302:
  7585  002A80  A8C5               	btfss	4037,4,c	;volatile
  7586  002A82  D002               	goto	l2316
  7587  002A84  D7FD               	goto	l302
  7588  002A86  D000               	goto	l2316
  7589  002A88                     l2316:
  7590  002A88  0622               	decf	getsI2C@length,f,c
  7591  002A8A  2822               	incf	getsI2C@length,w,c
  7592  002A8C  A4D8               	btfss	status,2,c
  7593  002A8E  D7D8               	goto	l2300
  7594  002A90  0E00               	movlw	0
  7595  002A92  0012               	return	
  7596  002A94  0012               	return		;funcret
  7597  002A96                     __end_of_getsI2C:
  7598                           	opt stack 0
  7599                           tblptru	equ	0xFF8
  7600                           tblptrh	equ	0xFF7
  7601                           tblptrl	equ	0xFF6
  7602                           tablat	equ	0xFF5
  7603                           prodh	equ	0xFF4
  7604                           prodl	equ	0xFF3
  7605                           postinc0	equ	0xFEE
  7606                           wreg	equ	0xFE8
  7607                           indf2	equ	0xFDF
  7608                           postinc2	equ	0xFDE
  7609                           postdec2	equ	0xFDD
  7610                           fsr2h	equ	0xFDA
  7611                           fsr2l	equ	0xFD9
  7612                           status	equ	0xFD8
  7613                           
  7614 ;; *************** function _ReadI2C *****************
  7615 ;; Defined at:
  7616 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_read.c"
  7617 ;; Parameters:    Size  Location     Type
  7618 ;;		None
  7619 ;; Auto vars:     Size  Location     Type
  7620 ;;		None
  7621 ;; Return value:  Size  Location     Type
  7622 ;;                  1    wreg      unsigned char 
  7623 ;; Registers used:
  7624 ;;		wreg, status,2, status,0
  7625 ;; Tracked objects:
  7626 ;;		On entry : 0/0
  7627 ;;		On exit  : 0/0
  7628 ;;		Unchanged: 0/0
  7629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7630 ;;      Params:         0       0       0       0       0       0       0
  7631 ;;      Locals:         0       0       0       0       0       0       0
  7632 ;;      Temps:          0       0       0       0       0       0       0
  7633 ;;      Totals:         0       0       0       0       0       0       0
  7634 ;;Total ram usage:        0 bytes
  7635 ;; Hardware stack levels used:    1
  7636 ;; Hardware stack levels required when called:    2
  7637 ;; This function calls:
  7638 ;;		Nothing
  7639 ;; This function is called by:
  7640 ;;		_getsI2C
  7641 ;; This function uses a non-reentrant model
  7642 ;;
  7643                           
  7644                           	psect	text42
  7645  002CC6                     __ptext42:
  7646                           	opt stack 0
  7647  002CC6                     _ReadI2C:
  7648                           	opt stack 23
  7649                           
  7650                           ;incstack = 0
  7651  002CC6  50C6               	movf	4038,w,c	;volatile
  7652  002CC8  0B0F               	andlw	15
  7653  002CCA  0A08               	xorlw	8
  7654  002CCC  B4D8               	btfsc	status,2,c
  7655  002CCE  D005               	goto	l339
  7656  002CD0  50C6               	movf	4038,w,c	;volatile
  7657  002CD2  0B0F               	andlw	15
  7658  002CD4  0A0B               	xorlw	11
  7659  002CD6  A4D8               	btfss	status,2,c
  7660  002CD8  D002               	goto	l340
  7661  002CDA                     l339:
  7662  002CDA  86C5               	bsf	4037,3,c	;volatile
  7663  002CDC  D000               	goto	l340
  7664  002CDE                     l340:
  7665  002CDE  A0C7               	btfss	4039,0,c	;volatile
  7666  002CE0  D7FE               	goto	l340
  7667  002CE2  50C9               	movf	4041,w,c	;volatile
  7668  002CE4  0012               	return	
  7669  002CE6  0012               	return		;funcret
  7670  002CE8                     __end_of_ReadI2C:
  7671                           	opt stack 0
  7672                           tblptru	equ	0xFF8
  7673                           tblptrh	equ	0xFF7
  7674                           tblptrl	equ	0xFF6
  7675                           tablat	equ	0xFF5
  7676                           prodh	equ	0xFF4
  7677                           prodl	equ	0xFF3
  7678                           postinc0	equ	0xFEE
  7679                           wreg	equ	0xFE8
  7680                           indf2	equ	0xFDF
  7681                           postinc2	equ	0xFDE
  7682                           postdec2	equ	0xFDD
  7683                           fsr2h	equ	0xFDA
  7684                           fsr2l	equ	0xFD9
  7685                           status	equ	0xFD8
  7686                           
  7687 ;; *************** function _WriteI2C *****************
  7688 ;; Defined at:
  7689 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_writ.c"
  7690 ;; Parameters:    Size  Location     Type
  7691 ;;  data_out        1    wreg     unsigned char 
  7692 ;; Auto vars:     Size  Location     Type
  7693 ;;  data_out        1   32[COMRAM] unsigned char 
  7694 ;; Return value:  Size  Location     Type
  7695 ;;                  1    wreg      char 
  7696 ;; Registers used:
  7697 ;;		wreg, status,2, status,0, cstack
  7698 ;; Tracked objects:
  7699 ;;		On entry : 0/0
  7700 ;;		On exit  : 0/0
  7701 ;;		Unchanged: 0/0
  7702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7703 ;;      Params:         0       0       0       0       0       0       0
  7704 ;;      Locals:         1       0       0       0       0       0       0
  7705 ;;      Temps:          0       0       0       0       0       0       0
  7706 ;;      Totals:         1       0       0       0       0       0       0
  7707 ;;Total ram usage:        1 bytes
  7708 ;; Hardware stack levels used:    1
  7709 ;; Hardware stack levels required when called:    3
  7710 ;; This function calls:
  7711 ;;		_IdleI2C
  7712 ;; This function is called by:
  7713 ;;		_EEByteWrite
  7714 ;;		_EESequentialRead
  7715 ;; This function uses a non-reentrant model
  7716 ;;
  7717                           
  7718                           	psect	text43
  7719  00297A                     __ptext43:
  7720                           	opt stack 0
  7721  00297A                     _WriteI2C:
  7722                           	opt stack 23
  7723                           
  7724                           ;incstack = 0
  7725                           ;WriteI2C@data_out stored from wreg
  7726  00297A  6E21               	movwf	WriteI2C@data_out,c
  7727  00297C  C021  FFC9         	movff	WriteI2C@data_out,4041	;volatile
  7728  002980  AEC6               	btfss	4038,7,c	;volatile
  7729  002982  D002               	goto	l2262
  7730  002984  0EFF               	movlw	255
  7731  002986  0012               	return	
  7732  002988                     l2262:
  7733  002988  50C6               	movf	4038,w,c	;volatile
  7734  00298A  0B0F               	andlw	15
  7735  00298C  0A08               	xorlw	8
  7736  00298E  B4D8               	btfsc	status,2,c
  7737  002990  D010               	goto	l2280
  7738  002992  50C6               	movf	4038,w,c	;volatile
  7739  002994  0B0F               	andlw	15
  7740  002996  0A0B               	xorlw	11
  7741  002998  B4D8               	btfsc	status,2,c
  7742  00299A  D00B               	goto	l2280
  7743  00299C  88C6               	bsf	4038,4,c	;volatile
  7744  00299E  D000               	goto	l364
  7745  0029A0                     l364:
  7746  0029A0  A69E               	btfss	3998,3,c	;volatile
  7747  0029A2  D7FE               	goto	l364
  7748  0029A4  A4C7               	btfss	4039,2,c	;volatile
  7749  0029A6  B0C7               	btfsc	4039,0,c	;volatile
  7750  0029A8  D002               	goto	l2276
  7751  0029AA  0EFE               	movlw	254
  7752  0029AC  0012               	return	
  7753  0029AE                     l2276:
  7754  0029AE  0E00               	movlw	0
  7755  0029B0  0012               	return	
  7756  0029B2                     l2280:
  7757  0029B2  50C6               	movf	4038,w,c	;volatile
  7758  0029B4  0B0F               	andlw	15
  7759  0029B6  0A08               	xorlw	8
  7760  0029B8  B4D8               	btfsc	status,2,c
  7761  0029BA  D006               	goto	l373
  7762  0029BC  50C6               	movf	4038,w,c	;volatile
  7763  0029BE  0B0F               	andlw	15
  7764  0029C0  0A0B               	xorlw	11
  7765  0029C2  A4D8               	btfss	status,2,c
  7766  0029C4  0012               	return	
  7767  0029C6  D000               	goto	l373
  7768  0029C8                     l373:
  7769  0029C8  B0C7               	btfsc	4039,0,c	;volatile
  7770  0029CA  D7FE               	goto	l373
  7771  0029CC  ECAF  F016         	call	_IdleI2C	;wreg free
  7772  0029D0  ACC5               	btfss	4037,6,c	;volatile
  7773  0029D2  D002               	goto	l2294
  7774  0029D4  0EFE               	movlw	254
  7775  0029D6  0012               	return	
  7776  0029D8                     l2294:
  7777  0029D8  0E00               	movlw	0
  7778  0029DA  0012               	return	
  7779  0029DC  0012               	return		;funcret
  7780  0029DE                     __end_of_WriteI2C:
  7781                           	opt stack 0
  7782                           tblptru	equ	0xFF8
  7783                           tblptrh	equ	0xFF7
  7784                           tblptrl	equ	0xFF6
  7785                           tablat	equ	0xFF5
  7786                           prodh	equ	0xFF4
  7787                           prodl	equ	0xFF3
  7788                           postinc0	equ	0xFEE
  7789                           wreg	equ	0xFE8
  7790                           indf2	equ	0xFDF
  7791                           postinc2	equ	0xFDE
  7792                           postdec2	equ	0xFDD
  7793                           fsr2h	equ	0xFDA
  7794                           fsr2l	equ	0xFD9
  7795                           status	equ	0xFD8
  7796                           
  7797 ;; *************** function _IdleI2C *****************
  7798 ;; Defined at:
  7799 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\i2c\i2c_idle.c"
  7800 ;; Parameters:    Size  Location     Type
  7801 ;;		None
  7802 ;; Auto vars:     Size  Location     Type
  7803 ;;		None
  7804 ;; Return value:  Size  Location     Type
  7805 ;;		None               void
  7806 ;; Registers used:
  7807 ;;		wreg, status,2, status,0
  7808 ;; Tracked objects:
  7809 ;;		On entry : 0/0
  7810 ;;		On exit  : 0/0
  7811 ;;		Unchanged: 0/0
  7812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7813 ;;      Params:         0       0       0       0       0       0       0
  7814 ;;      Locals:         0       0       0       0       0       0       0
  7815 ;;      Temps:          1       0       0       0       0       0       0
  7816 ;;      Totals:         1       0       0       0       0       0       0
  7817 ;;Total ram usage:        1 bytes
  7818 ;; Hardware stack levels used:    1
  7819 ;; Hardware stack levels required when called:    2
  7820 ;; This function calls:
  7821 ;;		Nothing
  7822 ;; This function is called by:
  7823 ;;		_EEByteWrite
  7824 ;;		_EESequentialRead
  7825 ;;		_WriteI2C
  7826 ;; This function uses a non-reentrant model
  7827 ;;
  7828                           
  7829                           	psect	text44
  7830  002D5E                     __ptext44:
  7831                           	opt stack 0
  7832  002D5E                     _IdleI2C:
  7833                           	opt stack 23
  7834                           
  7835                           ;incstack = 0
  7836  002D5E  D000               	goto	l2114
  7837  002D60                     l2114:
  7838  002D60  CFC5 F020          	movff	4037,??_IdleI2C	;volatile
  7839  002D64  0E1F               	movlw	31
  7840  002D66  1620               	andwf	??_IdleI2C,f,c
  7841  002D68  B4D8               	btfsc	status,2,c
  7842  002D6A  B4C7               	btfsc	4039,2,c	;volatile
  7843  002D6C  D7F9               	goto	l2114
  7844  002D6E  0012               	return		;funcret
  7845  002D70                     __end_of_IdleI2C:
  7846                           	opt stack 0
  7847                           tblptru	equ	0xFF8
  7848                           tblptrh	equ	0xFF7
  7849                           tblptrl	equ	0xFF6
  7850                           tablat	equ	0xFF5
  7851                           prodh	equ	0xFF4
  7852                           prodl	equ	0xFF3
  7853                           postinc0	equ	0xFEE
  7854                           wreg	equ	0xFE8
  7855                           indf2	equ	0xFDF
  7856                           postinc2	equ	0xFDE
  7857                           postdec2	equ	0xFDD
  7858                           fsr2h	equ	0xFDA
  7859                           fsr2l	equ	0xFD9
  7860                           status	equ	0xFD8
  7861                           
  7862 ;; *************** function _System_LowPriorityInterrupt *****************
  7863 ;; Defined at:
  7864 ;;		line 8 in file "system.c"
  7865 ;; Parameters:    Size  Location     Type
  7866 ;;		None
  7867 ;; Auto vars:     Size  Location     Type
  7868 ;;		None
  7869 ;; Return value:  Size  Location     Type
  7870 ;;		None               void
  7871 ;; Registers used:
  7872 ;;		None
  7873 ;; Tracked objects:
  7874 ;;		On entry : 0/0
  7875 ;;		On exit  : 0/0
  7876 ;;		Unchanged: 0/0
  7877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7878 ;;      Params:         0       0       0       0       0       0       0
  7879 ;;      Locals:         0       0       0       0       0       0       0
  7880 ;;      Temps:         17       0       0       0       0       0       0
  7881 ;;      Totals:        17       0       0       0       0       0       0
  7882 ;;Total ram usage:       17 bytes
  7883 ;; Hardware stack levels used:    1
  7884 ;; Hardware stack levels required when called:    1
  7885 ;; This function calls:
  7886 ;;		Nothing
  7887 ;; This function is called by:
  7888 ;;		Interrupt level 1
  7889 ;; This function uses a non-reentrant model
  7890 ;;
  7891                           
  7892                           	psect	intcodelo
  7893  000018                     __pintcodelo:
  7894                           	opt stack 0
  7895  000018                     _System_LowPriorityInterrupt:
  7896                           	opt stack 22
  7897                           
  7898                           ;incstack = 0
  7899  000018  CFD8 F001          	movff	status,??_System_LowPriorityInterrupt
  7900  00001C  CFE8 F002          	movff	wreg,??_System_LowPriorityInterrupt+1
  7901  000020  CFE0 F003          	movff	bsr,??_System_LowPriorityInterrupt+2
  7902  000024  CFFA F004          	movff	pclath,??_System_LowPriorityInterrupt+3
  7903  000028  CFFB F005          	movff	pclatu,??_System_LowPriorityInterrupt+4
  7904  00002C  CFE9 F006          	movff	fsr0l,??_System_LowPriorityInterrupt+5
  7905  000030  CFEA F007          	movff	fsr0h,??_System_LowPriorityInterrupt+6
  7906  000034  CFE1 F008          	movff	fsr1l,??_System_LowPriorityInterrupt+7
  7907  000038  CFE2 F009          	movff	fsr1h,??_System_LowPriorityInterrupt+8
  7908  00003C  CFD9 F00A          	movff	fsr2l,??_System_LowPriorityInterrupt+9
  7909  000040  CFDA F00B          	movff	fsr2h,??_System_LowPriorityInterrupt+10
  7910  000044  CFF3 F00C          	movff	prodl,??_System_LowPriorityInterrupt+11
  7911  000048  CFF4 F00D          	movff	prodh,??_System_LowPriorityInterrupt+12
  7912  00004C  CFF6 F00E          	movff	tblptrl,??_System_LowPriorityInterrupt+13
  7913  000050  CFF7 F00F          	movff	tblptrh,??_System_LowPriorityInterrupt+14
  7914  000054  CFF8 F010          	movff	tblptru,??_System_LowPriorityInterrupt+15
  7915  000058  CFF5 F011          	movff	tablat,??_System_LowPriorityInterrupt+16
  7916  00005C  C011  FFF5         	movff	??_System_LowPriorityInterrupt+16,tablat
  7917  000060  C010  FFF8         	movff	??_System_LowPriorityInterrupt+15,tblptru
  7918  000064  C00F  FFF7         	movff	??_System_LowPriorityInterrupt+14,tblptrh
  7919  000068  C00E  FFF6         	movff	??_System_LowPriorityInterrupt+13,tblptrl
  7920  00006C  C00D  FFF4         	movff	??_System_LowPriorityInterrupt+12,prodh
  7921  000070  C00C  FFF3         	movff	??_System_LowPriorityInterrupt+11,prodl
  7922  000074  C00B  FFDA         	movff	??_System_LowPriorityInterrupt+10,fsr2h
  7923  000078  C00A  FFD9         	movff	??_System_LowPriorityInterrupt+9,fsr2l
  7924  00007C  C009  FFE2         	movff	??_System_LowPriorityInterrupt+8,fsr1h
  7925  000080  C008  FFE1         	movff	??_System_LowPriorityInterrupt+7,fsr1l
  7926  000084  C007  FFEA         	movff	??_System_LowPriorityInterrupt+6,fsr0h
  7927  000088  C006  FFE9         	movff	??_System_LowPriorityInterrupt+5,fsr0l
  7928  00008C  C005  FFFB         	movff	??_System_LowPriorityInterrupt+4,pclatu
  7929  000090  C004  FFFA         	movff	??_System_LowPriorityInterrupt+3,pclath
  7930  000094  C003  FFE0         	movff	??_System_LowPriorityInterrupt+2,bsr
  7931  000098  C002  FFE8         	movff	??_System_LowPriorityInterrupt+1,wreg
  7932  00009C  C001  FFD8         	movff	??_System_LowPriorityInterrupt,status
  7933  0000A0  0010               	retfie	
  7934  0000A2                     __end_of_System_LowPriorityInterrupt:
  7935                           	opt stack 0
  7936                           pclatu	equ	0xFFB
  7937                           pclath	equ	0xFFA
  7938                           tblptru	equ	0xFF8
  7939                           tblptrh	equ	0xFF7
  7940                           tblptrl	equ	0xFF6
  7941                           tablat	equ	0xFF5
  7942                           prodh	equ	0xFF4
  7943                           prodl	equ	0xFF3
  7944                           postinc0	equ	0xFEE
  7945                           fsr0h	equ	0xFEA
  7946                           fsr0l	equ	0xFE9
  7947                           wreg	equ	0xFE8
  7948                           fsr1h	equ	0xFE2
  7949                           fsr1l	equ	0xFE1
  7950                           bsr	equ	0xFE0
  7951                           indf2	equ	0xFDF
  7952                           postinc2	equ	0xFDE
  7953                           postdec2	equ	0xFDD
  7954                           fsr2h	equ	0xFDA
  7955                           fsr2l	equ	0xFD9
  7956                           status	equ	0xFD8
  7957                           
  7958 ;; *************** function _System_HighPriorityInterrupt *****************
  7959 ;; Defined at:
  7960 ;;		line 3 in file "system.c"
  7961 ;; Parameters:    Size  Location     Type
  7962 ;;		None
  7963 ;; Auto vars:     Size  Location     Type
  7964 ;;		None
  7965 ;; Return value:  Size  Location     Type
  7966 ;;		None               void
  7967 ;; Registers used:
  7968 ;;		None
  7969 ;; Tracked objects:
  7970 ;;		On entry : 0/0
  7971 ;;		On exit  : 0/0
  7972 ;;		Unchanged: 0/0
  7973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7974 ;;      Params:         0       0       0       0       0       0       0
  7975 ;;      Locals:         0       0       0       0       0       0       0
  7976 ;;      Temps:         14       0       0       0       0       0       0
  7977 ;;      Totals:        14       0       0       0       0       0       0
  7978 ;;Total ram usage:       14 bytes
  7979 ;; Hardware stack levels used:    1
  7980 ;; This function calls:
  7981 ;;		Nothing
  7982 ;; This function is called by:
  7983 ;;		Interrupt level 2
  7984 ;; This function uses a non-reentrant model
  7985 ;;
  7986                           
  7987                           	psect	intcode
  7988  000008                     __pintcode:
  7989                           	opt stack 0
  7990  000008                     _System_HighPriorityInterrupt:
  7991                           	opt stack 22
  7992                           
  7993                           ;incstack = 0
  7994  000008  CFFA F012          	movff	pclath,??_System_HighPriorityInterrupt
  7995  00000C  CFFB F013          	movff	pclatu,??_System_HighPriorityInterrupt+1
  7996  000010  CFE9 F014          	movff	fsr0l,??_System_HighPriorityInterrupt+2
  7997  000014  EF8A  F014         	goto	int_func
  7998                           pclatu	equ	0xFFB
  7999                           pclath	equ	0xFFA
  8000                           tblptru	equ	0xFF8
  8001                           tblptrh	equ	0xFF7
  8002                           tblptrl	equ	0xFF6
  8003                           tablat	equ	0xFF5
  8004                           prodh	equ	0xFF4
  8005                           prodl	equ	0xFF3
  8006                           postinc0	equ	0xFEE
  8007                           fsr0h	equ	0xFEA
  8008                           fsr0l	equ	0xFE9
  8009                           wreg	equ	0xFE8
  8010                           fsr1h	equ	0xFE2
  8011                           fsr1l	equ	0xFE1
  8012                           bsr	equ	0xFE0
  8013                           indf2	equ	0xFDF
  8014                           postinc2	equ	0xFDE
  8015                           postdec2	equ	0xFDD
  8016                           fsr2h	equ	0xFDA
  8017                           fsr2l	equ	0xFD9
  8018                           status	equ	0xFD8
  8019                           
  8020                           	psect	intcode_body
  8021  002914                     __pintcode_body:
  8022                           	opt stack 22
  8023  002914                     int_func:
  8024                           	opt stack 22
  8025  002914  CFEA F015          	movff	fsr0h,??_System_HighPriorityInterrupt+3
  8026  002918  CFE1 F016          	movff	fsr1l,??_System_HighPriorityInterrupt+4
  8027  00291C  CFE2 F017          	movff	fsr1h,??_System_HighPriorityInterrupt+5
  8028  002920  CFD9 F018          	movff	fsr2l,??_System_HighPriorityInterrupt+6
  8029  002924  CFDA F019          	movff	fsr2h,??_System_HighPriorityInterrupt+7
  8030  002928  CFF3 F01A          	movff	prodl,??_System_HighPriorityInterrupt+8
  8031  00292C  CFF4 F01B          	movff	prodh,??_System_HighPriorityInterrupt+9
  8032  002930  CFF6 F01C          	movff	tblptrl,??_System_HighPriorityInterrupt+10
  8033  002934  CFF7 F01D          	movff	tblptrh,??_System_HighPriorityInterrupt+11
  8034  002938  CFF8 F01E          	movff	tblptru,??_System_HighPriorityInterrupt+12
  8035  00293C  CFF5 F01F          	movff	tablat,??_System_HighPriorityInterrupt+13
  8036  002940  C01F  FFF5         	movff	??_System_HighPriorityInterrupt+13,tablat
  8037  002944  C01E  FFF8         	movff	??_System_HighPriorityInterrupt+12,tblptru
  8038  002948  C01D  FFF7         	movff	??_System_HighPriorityInterrupt+11,tblptrh
  8039  00294C  C01C  FFF6         	movff	??_System_HighPriorityInterrupt+10,tblptrl
  8040  002950  C01B  FFF4         	movff	??_System_HighPriorityInterrupt+9,prodh
  8041  002954  C01A  FFF3         	movff	??_System_HighPriorityInterrupt+8,prodl
  8042  002958  C019  FFDA         	movff	??_System_HighPriorityInterrupt+7,fsr2h
  8043  00295C  C018  FFD9         	movff	??_System_HighPriorityInterrupt+6,fsr2l
  8044  002960  C017  FFE2         	movff	??_System_HighPriorityInterrupt+5,fsr1h
  8045  002964  C016  FFE1         	movff	??_System_HighPriorityInterrupt+4,fsr1l
  8046  002968  C015  FFEA         	movff	??_System_HighPriorityInterrupt+3,fsr0h
  8047  00296C  C014  FFE9         	movff	??_System_HighPriorityInterrupt+2,fsr0l
  8048  002970  C013  FFFB         	movff	??_System_HighPriorityInterrupt+1,pclatu
  8049  002974  C012  FFFA         	movff	??_System_HighPriorityInterrupt,pclath
  8050  002978  0011               	retfie		f
  8051  00297A                     __end_of_System_HighPriorityInterrupt:
  8052                           	opt stack 0
  8053                           pclatu	equ	0xFFB
  8054                           pclath	equ	0xFFA
  8055                           tblptru	equ	0xFF8
  8056                           tblptrh	equ	0xFF7
  8057                           tblptrl	equ	0xFF6
  8058                           tablat	equ	0xFF5
  8059                           prodh	equ	0xFF4
  8060                           prodl	equ	0xFF3
  8061                           postinc0	equ	0xFEE
  8062                           fsr0h	equ	0xFEA
  8063                           fsr0l	equ	0xFE9
  8064                           wreg	equ	0xFE8
  8065                           fsr1h	equ	0xFE2
  8066                           fsr1l	equ	0xFE1
  8067                           bsr	equ	0xFE0
  8068                           indf2	equ	0xFDF
  8069                           postinc2	equ	0xFDE
  8070                           postdec2	equ	0xFDD
  8071                           fsr2h	equ	0xFDA
  8072                           fsr2l	equ	0xFD9
  8073                           status	equ	0xFD8
  8074                           pclatu	equ	0xFFB
  8075                           pclath	equ	0xFFA
  8076                           tblptru	equ	0xFF8
  8077                           tblptrh	equ	0xFF7
  8078                           tblptrl	equ	0xFF6
  8079                           tablat	equ	0xFF5
  8080                           prodh	equ	0xFF4
  8081                           prodl	equ	0xFF3
  8082                           postinc0	equ	0xFEE
  8083                           fsr0h	equ	0xFEA
  8084                           fsr0l	equ	0xFE9
  8085                           wreg	equ	0xFE8
  8086                           fsr1h	equ	0xFE2
  8087                           fsr1l	equ	0xFE1
  8088                           bsr	equ	0xFE0
  8089                           indf2	equ	0xFDF
  8090                           postinc2	equ	0xFDE
  8091                           postdec2	equ	0xFDD
  8092                           fsr2h	equ	0xFDA
  8093                           fsr2l	equ	0xFD9
  8094                           status	equ	0xFD8
  8095                           
  8096                           	psect	rparam
  8097  0000                     pclatu	equ	0xFFB
  8098                           pclath	equ	0xFFA
  8099                           tblptru	equ	0xFF8
  8100                           tblptrh	equ	0xFF7
  8101                           tblptrl	equ	0xFF6
  8102                           tablat	equ	0xFF5
  8103                           prodh	equ	0xFF4
  8104                           prodl	equ	0xFF3
  8105                           postinc0	equ	0xFEE
  8106                           fsr0h	equ	0xFEA
  8107                           fsr0l	equ	0xFE9
  8108                           wreg	equ	0xFE8
  8109                           fsr1h	equ	0xFE2
  8110                           fsr1l	equ	0xFE1
  8111                           bsr	equ	0xFE0
  8112                           indf2	equ	0xFDF
  8113                           postinc2	equ	0xFDE
  8114                           postdec2	equ	0xFDD
  8115                           fsr2h	equ	0xFDA
  8116                           fsr2l	equ	0xFD9
  8117                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    120
    Data        0
    BSS         66
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     44      64
    BANK0           160    130     156
    BANK1           256     68      88
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), atan@coeff_a(CODE[24]), atan@coeff_b(CODE[20]), 

    getsI2C@rdptr	PTR unsigned char  size(2) Largest target is 6
		 -> Accel_ReadRegister@out(COMRAM[1]), Accel_Get@raw(BANK0[6]), 

    EESequentialRead@rdptr	PTR unsigned char  size(2) Largest target is 6
		 -> Accel_ReadRegister@out(COMRAM[1]), Accel_Get@raw(BANK0[6]), 

    Accel_ReadRegisters@out	PTR unsigned char  size(2) Largest target is 6
		 -> Accel_Get@raw(BANK0[6]), 

    Accel_Get@out	PTR struct . size(2) Largest target is 12
		 -> Gyros_Update@a(BANK1[12]), 

    Accel_Get@f_out	PTR float  size(2) Largest target is 2
		 -> Accel_Get@out(BANK0[2]), 


Critical Paths under _main in COMRAM

    _main->_Accel_Init
    _System_Init->_OpenUSART
    _pow->___flge
    _log->___fladd
    _exp->___flge
    _floor->___fladd
    _floor->___flge
    ___altofl->___flpack
    ___altofl->___fltol
    ___lltofl->___flpack
    _acos->___fladd
    _asin->___fladd
    _asin->___flge
    _sqrt->___flge
    ___flsub->___fladd
    _atan->___fladd
    _atan->___flge
    _fabs->___flneg
    _eval_poly->___fladd
    ___flmul->___fladd
    ___fladd->___awtofl
    ___flge->_fabs
    _Accel_Get->_Accel_ReadRegisters
    ___fldiv->___fladd
    ___awtofl->___flpack
    _Accel_ReadRegisters->_EESequentialRead
    _Accel_Init->_Accel_Active
    _Accel_Init->_Accel_StandBy
    _Accel_StandBy->_Accel_ReadRegister
    _Accel_Active->_Accel_ReadRegister
    _Accel_WriteRegister->_EEByteWrite
    _EEByteWrite->_WriteI2C
    _Accel_ReadRegister->_EESequentialRead
    _EESequentialRead->_getsI2C
    _WriteI2C->_IdleI2C

Critical Paths under _System_HighPriorityInterrupt in COMRAM

    None.

Critical Paths under _System_LowPriorityInterrupt in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_Gyros_Update
    _Gyros_Update->_acos
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___fladd
    _acos->_asin
    _asin->_sqrt
    _sqrt->_pow
    ___flsub->___fladd
    _atan->_eval_poly
    _eval_poly->___flmul
    ___flmul->___fladd
    ___fladd->___awtofl
    _Accel_Get->___fldiv
    ___fldiv->___flmul

Critical Paths under _System_HighPriorityInterrupt in BANK0

    None.

Critical Paths under _System_LowPriorityInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Gyros_Update
    _acos->_asin

Critical Paths under _System_HighPriorityInterrupt in BANK1

    None.

Critical Paths under _System_LowPriorityInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _System_HighPriorityInterrupt in BANK2

    None.

Critical Paths under _System_LowPriorityInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _System_HighPriorityInterrupt in BANK3

    None.

Critical Paths under _System_LowPriorityInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _System_HighPriorityInterrupt in BANK4

    None.

Critical Paths under _System_LowPriorityInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _System_HighPriorityInterrupt in BANK5

    None.

Critical Paths under _System_LowPriorityInterrupt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  257127
                                            127 BANK0      3     3      0
                         _Accel_Init
                         _Gyros_Init
                       _Gyros_Update
                        _System_Init
 ---------------------------------------------------------------------------------
 (1) _System_Init                                          0     0      0     414
                           _CloseI2C
                            _OpenI2C
                          _OpenUSART
                          _baudUSART
 ---------------------------------------------------------------------------------
 (2) _baudUSART                                            1     1      0      22
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     284
                                             31 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _OpenI2C                                              2     1      1     108
                                             31 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _CloseI2C                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Gyros_Update                                        56    52      4  252833
                                            123 BANK0      4     0      4
                                             24 BANK1     44    44      0
                          _Accel_Get
                            ___fladd
                            ___fldiv
                            ___flmul
                               _acos
                               _atan
                                _pow
                               _sqrt
 ---------------------------------------------------------------------------------
 (2) _pow                                                 21    13      8   93251
                                             65 BANK0     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___lltofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  6     2      4   30058
                                             46 BANK0      6     2      4
                           ___awtofl
                            ___fladd
                            ___flmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                 11     7      4   50918
                                             54 BANK0     11     7      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                8     2      6     513
                                             46 BANK0      8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                               10     6      4   12415
                                             15 BANK0     10     6      4
                           ___altofl
                            ___fladd
                             ___flge
                            ___fltol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                8     2      6     630
                                             31 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) ___fltol                                             10     6      4     421
                                             31 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (5) ___altofl                                             5     1      4    2794
                                             41 COMRAM     1     1      0
                                              0 BANK0      4     0      4
                           ___flpack
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lltofl                                             4     0      4    2692
                                              0 BANK0      4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) _acos                                                 8     4      4   80623
                                            115 BANK0      8     4      4
                            ___fladd
                            ___flneg
                               _asin
                                _pow (ARG)
 ---------------------------------------------------------------------------------
 (3) _asin                                                40    36      4   72797
                                            111 BANK0      4     0      4
                                              0 BANK1     24    24      0
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                               _atan
                               _fabs
                               _sqrt
 ---------------------------------------------------------------------------------
 (2) _sqrt                                                25    21      4   15121
                                             86 BANK0     25    21      4
                            ___fldiv (ARG)
                             ___flge
                            ___flmul
                            ___flneg (ARG)
                            ___flsub
                                _pow (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    7213
                                             15 BANK0      8     0      8
                           ___awtofl (ARG)
                            ___fladd
 ---------------------------------------------------------------------------------
 (2) _atan                                                21    17      4   35588
                                             46 BANK0     21    17      4
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                          _eval_poly
                               _fabs
 ---------------------------------------------------------------------------------
 (3) _fabs                                                 4     0      4    1313
                                             35 COMRAM     4     0      4
                            ___flneg
 ---------------------------------------------------------------------------------
 (4) ___flneg                                              4     0      4     989
                                             31 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           16     8      8   13637
                                             30 BANK0     16     8      8
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             15     7      8    5764
                                             15 BANK0     15     7      8
                           ___awtofl (ARG)
                            ___fladd (ARG)
                            ___flneg (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             12     4      8    6695
                                             42 COMRAM     1     1      0
                                              4 BANK0     11     3      8
                           ___awtofl (ARG)
                            ___flneg (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8    1430
                                             39 COMRAM     4     4      0
                                              0 BANK0      8     0      8
                               _fabs (ARG)
 ---------------------------------------------------------------------------------
 (2) _Accel_Get                                           20    18      2    9687
                                             45 BANK0     20    18      2
                _Accel_ReadRegisters
                           ___awtofl
                            ___fldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     287
                                             31 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___fldiv                                             15     7      8    4963
                                             30 BANK0     15     7      8
                           ___awtofl (ARG)
                            ___fladd (ARG)
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (4) ___awtofl                                             9     5      4    2948
                                             41 COMRAM     1     1      0
                                              0 BANK0      4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (5) ___flpack                                            10     4      6    2584
                                             31 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) _Accel_ReadRegisters                                  5     1      4     905
                                             39 COMRAM     5     1      4
                   _EESequentialRead
 ---------------------------------------------------------------------------------
 (1) _Gyros_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Accel_Init                                           2     2      0    3812
                                             42 COMRAM     2     2      0
                       _Accel_Active
                 _Accel_ReadRegister
                      _Accel_StandBy
                _Accel_WriteRegister
 ---------------------------------------------------------------------------------
 (2) _Accel_StandBy                                        1     1      0    1255
                                             41 COMRAM     1     1      0
                 _Accel_ReadRegister
                _Accel_WriteRegister
 ---------------------------------------------------------------------------------
 (2) _Accel_Active                                         1     1      0    1255
                                             41 COMRAM     1     1      0
                 _Accel_ReadRegister
                _Accel_WriteRegister
 ---------------------------------------------------------------------------------
 (2) _Accel_WriteRegister                                  2     1      1     452
                                             36 COMRAM     2     1      1
                        _EEByteWrite
 ---------------------------------------------------------------------------------
 (3) _EEByteWrite                                          3     1      2     216
                                             33 COMRAM     3     1      2
                            _IdleI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (3) _Accel_ReadRegister                                   2     2      0     780
                                             39 COMRAM     2     2      0
                   _EESequentialRead
 ---------------------------------------------------------------------------------
 (4) _EESequentialRead                                     5     1      4     711
                                             34 COMRAM     5     1      4
                            _IdleI2C
                           _WriteI2C
                            _getsI2C
 ---------------------------------------------------------------------------------
 (5) _getsI2C                                              3     0      3     195
                                             31 COMRAM     3     0      3
                            _ReadI2C
 ---------------------------------------------------------------------------------
 (6) _ReadI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _WriteI2C                                             1     1      0      22
                                             32 COMRAM     1     1      0
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (6) _IdleI2C                                              1     1      0       0
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _System_LowPriorityInterrupt                         17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _System_HighPriorityInterrupt                        14    14      0       0
                                             17 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Accel_Init
     _Accel_Active
       _Accel_ReadRegister
         _EESequentialRead
           _IdleI2C
           _WriteI2C
             _IdleI2C
           _getsI2C
             _ReadI2C
       _Accel_WriteRegister
         _EEByteWrite
           _IdleI2C
           _WriteI2C
             _IdleI2C
     _Accel_ReadRegister
       _EESequentialRead
         _IdleI2C
         _WriteI2C
           _IdleI2C
         _getsI2C
           _ReadI2C
     _Accel_StandBy
       _Accel_ReadRegister
         _EESequentialRead
           _IdleI2C
           _WriteI2C
             _IdleI2C
           _getsI2C
             _ReadI2C
       _Accel_WriteRegister
         _EEByteWrite
           _IdleI2C
           _WriteI2C
             _IdleI2C
     _Accel_WriteRegister
       _EEByteWrite
         _IdleI2C
         _WriteI2C
           _IdleI2C
   _Gyros_Init
   _Gyros_Update
     _Accel_Get
       _Accel_ReadRegisters
         _EESequentialRead
           _IdleI2C
           _WriteI2C
             _IdleI2C
           _getsI2C
             _ReadI2C
       ___awtofl
         ___flpack
       ___fldiv
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg (ARG)
         ___flpack (ARG)
       ___wmul
     ___fladd
       ___awtofl (ARG)
         ___flpack
       ___flneg (ARG)
       ___flpack (ARG)
       _frexp (ARG)
     ___fldiv
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flneg (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg (ARG)
       ___flpack (ARG)
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flneg (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg (ARG)
       ___flpack (ARG)
       _frexp (ARG)
     _acos
       ___fladd
         ___awtofl (ARG)
           ___flpack
         ___flneg (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg
       _asin
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___fldiv
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
         ___flge
           _fabs (ARG)
             ___flneg
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         _atan
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___fldiv
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
           ___flge
             _fabs (ARG)
               ___flneg
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
           _fabs
             ___flneg
         _fabs
           ___flneg
         _sqrt
           ___fldiv (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
           ___flge (ARG)
             _fabs (ARG)
               ___flneg
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flsub (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
           _pow (ARG)
             ___flge
               _fabs (ARG)
                 ___flneg
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg
             ___fltol
             ___lltofl
               ___flpack
             _exp
               ___awtofl
                 ___flpack
               ___fldiv
                 ___awtofl (ARG)
                   ___flpack
                 ___fladd (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fladd (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___flneg (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                 ___flpack (ARG)
               ___flge
                 _fabs (ARG)
                   ___flneg
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fladd (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg
               ___flsub
                 ___awtofl (ARG)
                   ___flpack
                 ___fladd (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
               ___fltol
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fladd (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___flneg (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
               _floor
                 ___altofl
                   ___flpack
                   ___fltol (ARG)
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flge
                   _fabs (ARG)
                     ___flneg
                 ___fltol
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flneg (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fladd (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___flneg (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flneg (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
               _log (ARG)
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fladd (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___flneg (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flneg (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fladd (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___flneg (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flneg (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fladd (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fladd (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___flneg (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
       _pow (ARG)
         ___flge
           _fabs (ARG)
             ___flneg
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___fltol
         ___lltofl
           ___flpack
         _exp
           ___awtofl
             ___flpack
           ___fldiv
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
           ___flge
             _fabs (ARG)
               ___flneg
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg
           ___flsub
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
           ___fltol
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
           _floor
             ___altofl
               ___flpack
               ___fltol (ARG)
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flge
               _fabs (ARG)
                 ___flneg
             ___fltol
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fladd (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
           _log (ARG)
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fladd (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     _atan
       ___fladd
         ___awtofl (ARG)
           ___flpack
         ___flneg (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___fldiv
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg (ARG)
         ___flpack (ARG)
       ___flge
         _fabs (ARG)
           ___flneg
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg
       _eval_poly
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
       _fabs
         ___flneg
     _pow
       ___flge
         _fabs (ARG)
           ___flneg
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg
       ___fltol
       ___lltofl
         ___flpack
       _exp
         ___awtofl
           ___flpack
         ___fldiv
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
         ___flge
           _fabs (ARG)
             ___flneg
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___flsub
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
         ___fltol
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
         _floor
           ___altofl
             ___flpack
             ___fltol (ARG)
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flge
             _fabs (ARG)
               ___flneg
           ___fltol
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
         _log (ARG)
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
       _log
         ___awtofl
           ___flpack
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
         _frexp
     _sqrt
       ___fldiv (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg (ARG)
         ___flpack (ARG)
       ___flge (ARG)
         _fabs (ARG)
           ___flneg
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg (ARG)
       ___flsub (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
       _pow (ARG)
         ___flge
           _fabs (ARG)
             ___flneg
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___fltol
         ___lltofl
           ___flpack
         _exp
           ___awtofl
             ___flpack
           ___fldiv
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
           ___flge
             _fabs (ARG)
               ___flneg
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg
           ___flsub
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
           ___fltol
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
           _floor
             ___altofl
               ___flpack
               ___fltol (ARG)
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flge
               _fabs (ARG)
                 ___flneg
             ___fltol
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fladd (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
           _log (ARG)
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fladd (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___flneg (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flneg (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fladd (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___flneg (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
   _System_Init
     _CloseI2C
     _OpenI2C
     _OpenUSART
     _baudUSART

 _System_LowPriorityInterrupt (ROOT)

 _System_HighPriorityInterrupt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     44      58       6       34.4%
BITBANK5            EF      0       0      15        0.0%
BANK5               EF      0       0      13        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     82      9C       4       97.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2C      40       1       67.4%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     134      14        0.0%
DATA                 0      0     134      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Dec 05 01:35:20 2018

                        ___altofl@sign 002A                           ___fldiv@cntr 008A  
                         ___fldiv@sign 008C                          _Accel_StandBy 2D20  
                          _SSPSTATbits 000FC7                                     l90 1AB6  
                                   bsr 000FE0                    ___wmul@multiplicand 0022  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                         ___flpack@arg 0020                           ___flpack@exp 0024  
                                  l203 2678                                    l302 2A80  
                                  l206 2684                                    l150 27F0  
                                  l240 2472                                    l225 2432  
                                  l209 268C                                    l250 24A6  
                                  l234 245E                                    l154 280A  
                                  l251 249E                                    l243 24F6  
                                  l235 2456                                    l155 280C  
                                  l340 2CDE                                    l244 2482  
                                  l228 243A                                    l156 2816  
                                  l157 2818                                    l270 24EE  
                                  l262 24DA                                    l254 24EA  
                                  l238 2502                                    l190 2640  
                                  l255 24C4                                    l247 248A  
                                  l239 247A                                    l183 2680  
                                  l175 25FE                                    l256 24CA  
                                  l184 262C                                    l265 24E2  
                                  l193 2666                                    l185 2624  
                                  l274 24FA                                    l178 2606  
                                  l339 2CDA                                    l259 24D2  
                                  l195 265C                                    l364 29A0  
                                  l188 2674                                    l373 29C8  
                                  l293 2A54                                    l189 2648  
                                  l278 2506                                    l199 266A  
                                  l713 25A2                                    l554 1370  
                                  l652 22E4                                    l653 22F8  
                                  l645 22A2                                    l673 108C  
                                  l665 2BD6                                    l677 10C6  
                                  l679 10F4                                    l688 11DC  
                                  l984 177E                                    l994 1556  
                                  l995 1542                                    l989 191C  
                         __CFG_CPB$OFF 000000                           __CFG_CPD$OFF 000000  
                                  _exp 0DC4                                    _log 1AB8  
                                  _pow 172E                           __CFG_BORV$18 000000  
                                  wreg 000FE8                           ___flmul@cntr 007C  
                Accel_ReadRegister@reg 0028                           ___flmul@sign 007D  
                Accel_ReadRegister@out 0029                           __CFG_LVP$OFF 000000  
                       gyros@Gyros_Vel 00EE                          ___flpack@sign 0025  
                         ___fltol@exp1 0029                                   l1015 0EBE  
                                 l1016 103E                                   l1026 210A  
                                 l2114 2D60                  ??_Accel_WriteRegister 0026  
                                 l2300 2A40                                   l3102 115C  
                                 l2312 2A74                                   l3040 2240  
                                 l3120 1204                                   l3104 116E  
                                 l3114 11BA                                   l3106 117E  
                                 l2308 2A60                                   l2316 2A88  
                                 l3044 2254                                   l3220 1DE2  
                                 l3124 122C                                   l3116 11CC  
                                 l3108 118A                                   l3204 2AB8  
                                 l2262 2988                                   l2502 2446  
                                 l3054 22CA                                   l3046 2262  
                                 l3214 1DBC                                   l3134 1280  
                                 l3150 1C7E                                   l2430 23BA  
                                 l2414 235C                                   l2280 29B2  
                                 l3056 22D8                                   l3048 228A  
                                 l3240 1E88                                   l3232 1E32  
                                 l3144 1C58                                   l3320 14C6  
                                 l2440 23E4                                   l3066 232A  
                                 l3082 10D8                                   l3162 1CCE  
                                 l2442 23F2                                   l2434 23CA  
                                 l3410 1F5C                                   l3402 1EF4  
                                 l2276 29AE                                   l3244 1E9C  
                                 l3076 109E                                   l3172 1D16  
                                 l3324 14DE                                   l3308 12FC  
                                 l3252 2A06                                   l2444 23FC  
                                 l2294 29D8                                   l3174 1D1E  
                                 l3166 1CF6                                   l3422 1F90  
                                 l3510 0E36                                   l2480 2614  
                                 l3272 255A                                   l3096 112C  
                                 l3088 10EA                                   l3184 1D66  
                                 l3264 216E                                   l3192 2C38  
                                 l3344 15D8                                   l2448 2414  
                                 l3504 0DEC                                   l3178 1D46  
                                 l3266 2210                                   l3290 26C4  
                                 l3426 1FA6                                   l3452 0C3C  
                                 l3428 1FEA                                   l3516 0E80  
                                 l3278 25EE                                   l3358 16F6  
                                 l3438 0AFE                                   l3390 2070  
                                 l3382 203A                                   l2806 2802  
                                 l3368 2B00                                   l3552 1974  
                                 l3464 0D1E                                   l3562 1A36  
                                 l3386 204E                                   l3538 1006  
                                 l3482 1ADC                                   l2790 27E0  
                                 l3662 28BA                                   l2952 2B78  
                                 l3488 1B0E                                   l3592 1840  
                                 l3584 17BA                                   l3672 28F6  
                                 l2962 2B94                                   l3578 1792  
                                 l2794 27E8                                   l2786 27D6  
                                 l3596 1870                                   l3668 28DC  
                                 l2798 27F4                                   ?_exp 0096  
                                 ?_log 008E                                   ?_pow 00A1  
                                 u2310 237A                                   u4010 0E8A  
                                 u2315 2370                                   u4020 0E8C  
                                 u4060 1972                                   u4140 1822  
                                 _PIE1 000F9D                                   u4075 19E6  
                                 u4187 28FE                                   u3740 26EC  
                                 u3760 132C                                   u3770 132E  
                                 u3748 26EE                                   u3860 205E  
                                 u3890 1F26                                   u3898 1F2A  
                                 _acos 2836                                   _fabs 2BAC  
                                 _atan 12B0                                   _asin 0AA0  
                                 _main 28A8                                   fsr0h 000FEA  
                                 fsr1h 000FE2                                   fsr0l 000FE9  
                                 fsr2h 000FDA                                   fsr1l 000FE1  
                                 indf2 000FDF                                   fsr2l 000FD9  
                                 _sqrt 1506                    baudUSART@baudconfig 0020  
                                 exp@x 0096                                   log@x 008E  
                      _Gyros_LastAccel 002D                                   pclat 000FFA  
                                 pow@x 00A1                                   pow@y 00A5  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 00A2                          __CFG_IESO$OFF 000000  
                      __end_of_IdleI2C 2D70                          __CFG_MCLRE$ON 000000  
                 __size_of_System_Init 0042                           ___param_bank 000010  
                      __end_of_ReadI2C 2CE8                         ?_Accel_StandBy 0001  
                      __end_of_OpenI2C 2D06                                  ??_exp 002C  
                                ??_log 002C                 Accel_ReadRegisters@reg 002C  
                                ??_pow 002C                 Accel_ReadRegisters@out 0028  
                                ?_acos 00D3                                  ?_fabs 0024  
                        ___fltol@sign1 0028                                  ?_atan 008E  
                                ?_asin 00CF                        __end_of___fladd 12B0  
                                ?_main 0001                        __end_of___fldiv 1ECC  
                      __end_of___flneg 2C4C                        __end_of___flmul 1D96  
                      __end_of___flsub 2A3E                        __end_of___fltol 2428  
                                ?_sqrt 00B6                                  _RCSTA 000FAB  
                                _SPBRG 000FAF                                  _TXSTA 000FAC  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_getsI2C 2A96  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                        ___awtofl@sign 002A                         __CFG_EBTR3$OFF 000000  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                         __CFG_EBTRB$OFF 000000  
                                acos@x 00D3                                  fabs@d 0024  
                                _floor 1FFE                                  _ldexp 1ECC  
                                _frexp 2696                                  _errno 00FA  
                                atan@f 008E                                  atan@x 0096  
                                atan@y 0092                                  asin@x 00CF  
                                asin@y 0110                                  main@i 00E0  
                                tablat 000FF5                                  pow@yi 00B2  
                   __size_of_Accel_Get 018A                                  sqrt@i 00C6  
                                sqrt@q 00C7                                  sqrt@x 00CB  
                                sqrt@y 00B6                                  sqrt@z 00C2  
                                status 000FD8                         __CFG_HFOFST$ON 000000  
                         Accel_Get@raw 0095                           Accel_Get@out 008D  
                       __CFG_PBADEN$ON 000000                            exp@exponent 009E  
                     __end_of_CloseI2C 2D7C                            ldexp@newexp 0092  
                          ?_Accel_Init 0001                        __initialization 2BE8  
                          log@exponent 0092                           __end_of_acos 28A8  
                         __end_of_fabs 2BE8                           __end_of_atan 1506  
                         __end_of_asin 0DC4                           __end_of_main 2914  
                         __end_of_sqrt 172E                                 ??_acos 002C  
                               ??_fabs 0028                       gyros@Gyros_Angle 0150  
                               ??_atan 002C                                 ??_asin 002C  
                               ??_main 00DF                      ?_EESequentialRead 0023  
                               ??_sqrt 00BA                          __activetblptr 000001  
                   ??_EESequentialRead 0027                                 ?_floor 006F  
                               ?_ldexp 008E                                 ?_frexp 0020  
                     __end_of___altofl 2AE8                       __end_of___flpack 233E  
                     __end_of_WriteI2C 29DE                       __end_of___awtofl 2B2C  
                     __end_of___lltofl 2C7C                            OpenI2C@slew 0020  
                       __CFG_WDTEN$OFF 000000                              ??_IdleI2C 0020  
                               _SPBRGH 000FB0                                 _SSPADD 000FC8  
                               _SSPBUF 000FC9                              ??_ReadI2C 0020  
                           _Gyros_Init 2732                              ??_OpenI2C 0021  
                      ??_Accel_StandBy 002A                         __CFG_XINST$OFF 000000  
                   __size_of_OpenUSART 0072              Accel_ReadRegisters@length 002A  
                               ___flge 2510                              ??___fladd 002B  
                               ___wmul 2C7C                              ??___fldiv 002C  
                            ??___flneg 0024                         __CFG_STVREN$ON 000000  
                 __size_of_EEByteWrite 00A2                              ??___flmul 002C  
                            ??___flsub 002C                              ??___fltol 0024  
                               clear_0 2BEE                                 clear_1 2BFA  
                               clear_2 2C06                              ??_getsI2C 0023  
                    __end_of_Accel_Get 1AB8                                 floor@i 0073  
                               floor@x 006F                           __mediumconst 0000  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8         ??_System_HighPriorityInterrupt 0012  
                  __size_of_Accel_Init 003E                                 sqrt@og 00BE  
                        Accel_Active@c 002A                             ___fladd@f1 0064  
                           ___fladd@f2 0068                             ___flge@ff1 0060  
                           ___flge@ff2 0064                       __end_ofexp@coeff 0629  
                     __end_oflog@coeff 064D                             ___altofl@c 0060  
                           ___fldiv@f1 007E                             ___fldiv@f2 0082  
                           ___fldiv@f3 0086                             __accesstop 0060  
              __end_of__initialization 2C0C                             ___flneg@f1 0020  
                           ___flmul@f1 006F                             ___flmul@f2 0073  
                         eval_poly@res 008A                          ___rparam_used 000001  
                           ___flsub@f1 006F                             ___flsub@f2 0073  
                           ___fltol@f1 0020                             ___awtofl@c 0060  
                        Accel_Init@fsr 002C                     __size_of_baudUSART 0008  
                       __pcstackCOMRAM 0001                             ___lltofl@c 0060  
                        __end_of_floor 211C                          __end_of_ldexp 1FFE  
                        __end_of_frexp 2732            __end_of_Accel_ReadRegisters 2D20  
                        ?_Gyros_Update 00DB                              ?_CloseI2C 0001  
                    __end_of_OpenUSART 2836                                ??_floor 002C  
                              ??_ldexp 0094                                ??_frexp 0026  
                           __pbssBANK0 00E2                             __pbssBANK1 0144  
                   __size_of_eval_poly 0112            __size_of_Accel_ReadRegister 0022  
                          ?_Gyros_Init 0001                          Gyros_Update@a 0138  
                              ?___flge 0060                                ?___wmul 0020  
                            ?___altofl 0060                                _BAUDCON 000FB8  
                            ?___flpack 0020                              ?_WriteI2C 0001  
                            ?___awtofl 0060                              ?___lltofl 0060  
                       ??_Gyros_Update 002D            __end_of_Accel_WriteRegister 2D5E  
                    __end_of_baudUSART 2D78                             ??_CloseI2C 0020  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                            _Gyros_Angle 0039  
               EESequentialRead@length 0026                                _IdleI2C 2D5E  
                        ??_System_Init 0023                                _ReadI2C 2CC6  
                              _OpenI2C 2CE8                                __Hparam 0000  
                              __Lparam 0000                           ??_Accel_Init 002B  
                      __size_of___flge 00E4                                ___fladd 1050  
                              ___fldiv 1D96                                ___flneg 2C1A  
                              ___flmul 1C32                                ___flsub 29DE  
                              ___fltol 233E                        __size_of___wmul 0028  
                         __psmallconst 0600                             ??___altofl 002A  
                           ??___flpack 0026                                __pcinit 2BE8  
                           ??_WriteI2C 0021                             ??___awtofl 002A  
                    __end_of_eval_poly 222E                                __ramtop 0600  
                           ??___lltofl 002A                                _getsI2C 2A3E  
                              __ptext0 28A8                                __ptext1 2B2C  
                              __ptext2 2D70                                __ptext3 27C4  
                              __ptext4 2CE8                                __ptext5 2D78  
                              __ptext6 067A                                __ptext7 172E  
                              __ptext8 1AB8                                __ptext9 0DC4  
               Accel_WriteRegister@reg 0026                           __size_of_exp 028C  
                         __size_of_log 017A                    __size_of_Gyros_Init 0092  
                      atan@val_squared 009B                           __size_of_pow 0200  
                    _Gyros_Update$1980 0124                      _Gyros_Update$1981 0128  
                    _Gyros_Update$1982 012C                      _Gyros_Update$1983 0130  
                    _Gyros_Update$1984 0134                      _Gyros_Update$1977 0118  
                    _Gyros_Update$1978 011C                      _Gyros_Update$1979 0120  
                              atan@val 009F                                asin@sgn 0100  
                   __end_of_Accel_Init 2BAC                         __pintcode_body 2914  
                 end_of_initialization 2C0C                                exp@sign 00A0  
            __size_of_EESequentialRead 00E8                                int_func 2914  
                 gyros@Gyros_LastAccel 00E2                                pow@sign 00B1  
                            _RCSTAbits 000FAB           ?_System_LowPriorityInterrupt 0001  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                    __end_of_System_Init 2B6E  
                       Accel_Get@f_out 009B                        EEByteWrite@data 0023  
                            _TRISCbits 000F94                              _Accel_Get 192E  
                          ___fldiv@exp 008B                            ___flmul@exp 0077  
                            _TXSTAbits 000FAC                          ?_Accel_Active 0001  
                       Accel_Init@name 002B                   __end_of_Gyros_Update 0AA0  
                        ??_EEByteWrite 0024                  __end_of_Accel_StandBy 2D36  
                       __end_of___flge 25F4                         __end_of___wmul 2CA4  
                           floor@expon 0077                    start_initialization 2BE8  
                           eval_poly@d 0082                             eval_poly@n 0084  
                           eval_poly@x 007E                             ?_Accel_Get 008D  
                           ldexp@value 008E                            __end_of_exp 1050  
                          __end_of_log 1C32                            __end_of_pow 192E  
                       Accel_StandBy@c 002A                       WriteI2C@data_out 0021  
                    __size_of_CloseI2C 0004                             frexp@value 0020  
                            _OpenUSART 27C4                         ??_Accel_Active 002A  
                         ??_Gyros_Init 0020                            _System_Init 2B2C  
                            _Gyros_Vel 0144                               ??___flge 0028  
 __end_of_System_HighPriorityInterrupt 297A  __size_of_System_HighPriorityInterrupt 2972  
         _System_HighPriorityInterrupt 0008                               ??___wmul 0024  
                     __CFG_LPT1OSC$OFF 000000                    __end_of_EEByteWrite 2696  
                    __size_of___altofl 0052                      __size_of___flpack 0110  
                    __size_of_WriteI2C 0064                      __size_of___awtofl 0044  
                            _acos$1985 00D7                      __size_of___lltofl 0030  
         __size_of_Accel_ReadRegisters 001A                            __pbssCOMRAM 002D  
                   __end_of_Gyros_Init 27C4                          __pcstackBANK0 0060  
                        __pcstackBANK1 0100   __size_of_System_LowPriorityInterrupt 008A  
           __end_of_Accel_ReadRegister 2CC6                              _baudUSART 2D70  
                             ?_IdleI2C 0001                       _EESequentialRead 2428  
                           ?_OpenUSART 0020                              _asin$1986 0104  
                            _asin$1987 0114                              _asin$1988 010C  
                            _asin$1989 0108                         Gyros_Update@dt 00DB  
                             ?_ReadI2C 0001                               ?_OpenI2C 0020  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                             ?___fladd 0064                               ?___fldiv 007E  
                             ?___flneg 0020                               ?___flmul 006F  
                             ?___flsub 006F                               ?___fltol 0020  
        ?_System_HighPriorityInterrupt 0001                            __pintcodelo 0018  
                             ?_getsI2C 0020                  EESequentialRead@rdptr 0024  
                          __smallconst 0600                              _eval_poly 211C  
                          ??_Accel_Get 008F               Accel_WriteRegister@value 0025  
                       __size_of_floor 011E                         __size_of_ldexp 0132  
                       __size_of_frexp 009C                             ?_baudUSART 0001  
         __size_of_Accel_WriteRegister 0012                  __size_of_Gyros_Update 0426  
                       ___wmul@product 0024                               _LATCbits 000F8B  
                            atan@recip 009A                               _PIE1bits 000F9D  
                          _EEByteWrite 25F4                               _PIR1bits 000F9E  
                             _PIR2bits 000FA1                       __CFG_WDTPS$32768 000000  
              EESequentialRead@address 0023                EESequentialRead@control 0027  
                    ___wmul@multiplier 0020                   __end_of_Accel_Active 2D4C  
                           ?_eval_poly 007E                           _Gyros_Update 067A  
                  __end_ofatan@coeff_a 0665                    __end_ofatan@coeff_b 0679  
                             _CloseI2C 2D78                             Accel_Get@i 009F  
                     OpenI2C@sync_mode 0021                            ??_OpenUSART 0022  
                     __size_of_IdleI2C 0012                        OpenUSART@config 0022  
                            frexp@eptr 0024                       __size_of_ReadI2C 0022  
                             __Hrparam 0000                       __size_of_OpenI2C 001E  
                             __Lrparam 0000                           __Lsmallconst 0600  
                   __CFG_BOREN$SBORDIS 000000                       __size_of___fladd 0260  
                     __size_of___fldiv 0136                       __size_of___flneg 0032  
                     __size_of___flmul 0164                          getsI2C@length 0022  
                     __size_of___flsub 0060                       __size_of___fltol 00EA  
                             ___altofl 2A96                               ___flpack 222E  
                             _WriteI2C 297A                               ___awtofl 2AE8  
                             ___lltofl 2C4C                       __size_of_getsI2C 0058  
                             _exp$1992 009A                               __ptext10 1ECC  
                             __ptext11 1FFE                               __ptext20 12B0  
                             __ptext12 2696                               __ptext21 2BAC  
                             __ptext13 233E                               __ptext30 2AE8  
                             __ptext22 2C1A                               __ptext14 2A96  
                             __ptext31 222E                               __ptext23 211C  
                             __ptext15 2C4C                               __ptext40 2428  
                             __ptext32 2D06                               __ptext24 1C32  
                             __ptext16 2836                               __ptext41 2A3E  
                             __ptext33 2732                               __ptext25 1050  
                             __ptext17 0AA0                               __ptext42 2CC6  
                             __ptext34 2B6E                               __ptext26 2510  
                             __ptext18 1506                               __ptext43 297A  
                             __ptext35 2D20                               __ptext27 192E  
                             __ptext19 29DE                               __ptext44 2D5E  
                             __ptext36 2D36                               __ptext28 2C7C  
                             __ptext37 2D4C                               __ptext29 1D96  
                             __ptext38 25F4                               __ptext39 2CA4  
                             _pow$1990 00A9                               _pow$1991 00AD  
                          ??_baudUSART 0020                          __size_of_acos 0072  
                        __size_of_fabs 003C                          __size_of_atan 0256  
                        __size_of_asin 0324                          __size_of_main 006C  
                        __size_of_sqrt 0228                           ?_System_Init 0001  
                  _Accel_ReadRegisters 2D06               __end_of_EESequentialRead 2510  
                          atan@coeff_a 064D                            atan@coeff_b 0665  
                             exp@coeff 0601                  ___flmul@f3_as_product 0078  
                             log@coeff 0629                   ?_Accel_ReadRegisters 0028  
                          ??_eval_poly 0086                         OpenUSART@spbrg 0020  
                         getsI2C@rdptr 0020                 __size_of_Accel_StandBy 0016  
                             intlevel1 0000                               intlevel2 0000  
                           _OSCCONbits 000FD3                     _Accel_ReadRegister 2CA4  
  __end_of_System_LowPriorityInterrupt 00A2            _System_LowPriorityInterrupt 0018  
                   EEByteWrite@address 0022                  __size_of_Accel_Active 0016  
                  _Accel_WriteRegister 2D4C                    ?_Accel_ReadRegister 0001  
                   EEByteWrite@control 0024          ??_System_LowPriorityInterrupt 0001  
                ??_Accel_ReadRegisters 002C                            _SSPCON1bits 000FC6  
                          _SSPCON2bits 000FC5                        Accel_Get@gCount 009D  
                 ?_Accel_WriteRegister 0025                   ??_Accel_ReadRegister 0028  
                         ___fladd@exp1 006E                           ___fladd@exp2 006D  
                         ___fladd@sign 006C                      __CFG_FOSC$INTIO67 000000  
                         _Accel_Active 2D36                           ?_EEByteWrite 0022  
                           _Accel_Init 2B6E  
